/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/**
	* Application runner.
	*/

	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	var _Window = __webpack_require__(2);

	var _Window2 = _interopRequireDefault(_Window);

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	document.body.style.margin = '0px';
	document.body.style.position = 'relative';
	document.body.style.boxSizing = 'border-box';
	document.body.style.minHeight = '100%';
	document.body.style.maxHeight = '100%';
	document.body.style.color = '#3E3E3E';
	document.body.style.padding = '0px';
	document.body.style.height = '99vh';
	document.body.style.width = '100%';
	document.body.style.overflow = 'hidden';
	document.body.style.fontFamily = 'Roboto Condensed';
	document.body.style.fontWeight = '300';
	_react2['default'].render(_react2['default'].createElement(_Window2['default'], null), document.getElementById("appContainer"));

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/**
	* Main application window (& general layout definition). Stores are created here.
	*/

	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	//import VirtualBenchLab from './components/VirtualBenchLab';

	var _componentsPanesLeftPane = __webpack_require__(188);

	var _componentsPanesLeftPane2 = _interopRequireDefault(_componentsPanesLeftPane);

	var _componentsPanesCenterPane = __webpack_require__(293);

	var _componentsPanesCenterPane2 = _interopRequireDefault(_componentsPanesCenterPane);

	var _componentsPanesRightPane = __webpack_require__(318);

	var _componentsPanesRightPane2 = _interopRequireDefault(_componentsPanesRightPane);

	//import PopupToolContainer from './components/PopupToolComponent';
	//import Tooltip from './components/ActiveToolTooltip';

	var _componentsMainMenu = __webpack_require__(370);

	var _componentsMainMenu2 = _interopRequireDefault(_componentsMainMenu);

	var _componentsModals = __webpack_require__(373);

	var _componentsModals2 = _interopRequireDefault(_componentsModals);

	var _storesMinimapStore = __webpack_require__(431);

	var _storesMinimapStore2 = _interopRequireDefault(_storesMinimapStore);

	var _storesViewStore = __webpack_require__(433);

	var _storesViewStore2 = _interopRequireDefault(_storesViewStore);

	var _storesToolStore = __webpack_require__(435);

	var _storesToolStore2 = _interopRequireDefault(_storesToolStore);

	var _storesUserStore = __webpack_require__(437);

	var _storesUserStore2 = _interopRequireDefault(_storesUserStore);

	var _storesMenuStore = __webpack_require__(442);

	var _storesMenuStore2 = _interopRequireDefault(_storesMenuStore);

	var _storesManagerStore = __webpack_require__(444);

	var _storesManagerStore2 = _interopRequireDefault(_storesManagerStore);

	var _storesImageStore = __webpack_require__(446);

	var _storesImageStore2 = _interopRequireDefault(_storesImageStore);

	var _storesMetadataStore = __webpack_require__(447);

	var _storesMetadataStore2 = _interopRequireDefault(_storesMetadataStore);

	var _storesModalStore = __webpack_require__(449);

	var _storesModalStore2 = _interopRequireDefault(_storesModalStore);

	var _storesLabBenchStore = __webpack_require__(451);

	var _storesLabBenchStore2 = _interopRequireDefault(_storesLabBenchStore);

	var _storesModeStore = __webpack_require__(452);

	var _storesModeStore2 = _interopRequireDefault(_storesModeStore);

	var _storesDragNDropStore = __webpack_require__(316);

	var _storesDragNDropStore2 = _interopRequireDefault(_storesDragNDropStore);

	var _storesInspectorStore = __webpack_require__(454);

	var _storesInspectorStore2 = _interopRequireDefault(_storesInspectorStore);

	var _storesBasketStore = __webpack_require__(455);

	var _storesBasketStore2 = _interopRequireDefault(_storesBasketStore);

	var _utilsWebSocketConnector = __webpack_require__(457);

	var _utilsWebSocketConnector2 = _interopRequireDefault(_utilsWebSocketConnector);

	var _componentsContextMenuOrbalContextMenu = __webpack_require__(307);

	var _componentsContextMenuOrbalContextMenu2 = _interopRequireDefault(_componentsContextMenuOrbalContextMenu);

	var _componentsCommonWebSocketStatus = __webpack_require__(462);

	var _componentsCommonWebSocketStatus2 = _interopRequireDefault(_componentsCommonWebSocketStatus);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _actionsModalActions = __webpack_require__(265);

	var _actionsModalActions2 = _interopRequireDefault(_actionsModalActions);

	var _constantsViewConstants = __webpack_require__(197);

	var _constantsViewConstants2 = _interopRequireDefault(_constantsViewConstants);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var _utilsInterStoreCommunicationsController = __webpack_require__(463);

	var _utilsInterStoreCommunicationsController2 = _interopRequireDefault(_utilsInterStoreCommunicationsController);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var socket = new _utilsWebSocketConnector2['default']();
	var ministore = new _storesMinimapStore2['default'](socket);
	var viewstore = new _storesViewStore2['default'](socket);
	var toolstore = new _storesToolStore2['default'](socket);
	var userstore = new _storesUserStore2['default'](socket);
	var menustore = new _storesMenuStore2['default'](socket);
	var managerstore = new _storesManagerStore2['default'](socket);
	var imagestore = new _storesImageStore2['default'](socket);
	var metastore = new _storesMetadataStore2['default'](socket);
	var modalstore = new _storesModalStore2['default'](socket);
	var benchstore = new _storesLabBenchStore2['default'](socket);
	var basketstore = new _storesBasketStore2['default'](socket);
	var modestore = new _storesModeStore2['default'](socket);
	var inspecstore = new _storesInspectorStore2['default'](socket);
	var dragstore = new _storesDragNDropStore2['default'](socket);
	var controller = new _utilsInterStoreCommunicationsController2['default']({
	  ministore: ministore,
	  viewstore: viewstore,
	  toolstore: toolstore,
	  userstore: userstore,
	  menustore: menustore,
	  managerstore: managerstore,
	  metastore: metastore,
	  modalstore: modalstore,
	  benchstore: benchstore,
	  modestore: modestore
	});

	var Window = (function (_React$Component) {
	  _inherits(Window, _React$Component);

	  function Window(props) {
	    var _this = this;

	    _classCallCheck(this, Window);

	    _get(Object.getPrototypeOf(Window.prototype), 'constructor', this).call(this, props);

	    this.menuHeight = 58;
	    this.closeTopPaneButtonHeight = 30;
	    this.leftPaneWidth = 200;
	    this.rightPaneWidth = 350;

	    this.containerStyle = {
	      position: 'relative',
	      //height: '100vh',
	      //width: '100vw',
	      height: '100%',
	      width: '100%',
	      backgroundColor: 'rgba(245,241,222, 1.0)'
	    };

	    this.columnLeftSideStyle = {
	      position: 'fixed',
	      top: this.menuHeight + 'px',
	      left: '0',
	      zIndex: _constantsViewConstants2['default'].zIndices.leftPane,
	      width: this.leftPaneWidth + 'px',
	      height: window.innerHeight - this.menuHeight + 'px',
	      backgroundColor: '#F2F2F2',
	      WebkitTransition: 'left 1s',
	      transition: 'left 1s',
	      overflowX: 'hidden',
	      overflowY: 'auto',
	      WebkitBoxShadow: '3px 0px 10px -3px rgba(0,0,0,0.75)',
	      MozBoxShadow: '3px 0px 10px -3px rgba(0,0,0,0.75)',
	      boxShadow: '3px 0px 10px -3px rgba(0,0,0,0.75)'
	    };

	    this.columnRightSideStyle = {
	      position: 'fixed',
	      right: '0px',
	      top: this.menuHeight + 'px',
	      zIndex: _constantsViewConstants2['default'].zIndices.rightPane,
	      width: this.rightPaneWidth + 'px',
	      height: window.innerHeight - this.menuHeight + 'px',
	      backgroundColor: '#F2F2F2',
	      WebkitTransition: 'right 1s',
	      transition: 'right 1s',
	      overflowX: 'hidden',
	      overflowY: 'auto',
	      //overflow: 'auto',
	      WebkitBoxShadow: '-3px 0px 10px -3px rgba(0,0,0,0.75)',
	      MozBoxShadow: '-3px 0px 10px -3px rgba(0,0,0,0.75)',
	      boxShadow: '-3px 0px 10px -3px rgba(0,0,0,0.75)'
	    };

	    this.columnMiddleStyle = {
	      position: 'fixed',
	      left: this.leftPaneWidth + 'px',
	      top: this.menuHeight + 'px',
	      width: window.innerWidth - 500 + 'px',
	      height: window.innerHeight - this.menuHeight + 'px',
	      WebkitTransition: 'left 1s, width 1s',
	      transition: 'left 1s, width 1s'
	    };

	    this.leftButtonStyle = {
	      position: 'fixed',
	      left: this.leftPaneWidth + 'px',
	      //top: '10vh',
	      top: '10%',
	      zIndex: _constantsViewConstants2['default'].zIndices.leftPaneCloseButton,
	      height: '20px',
	      width: '10px',
	      opacity: 0.6,
	      WebkitTransition: 'left 1s',
	      transition: 'left 1s'
	    };

	    this.rightButtonStyle = {
	      position: 'absolute',
	      right: this.rightPaneWidth + 'px',
	      //top: '10vh',
	      top: '10%',
	      zIndex: _constantsViewConstants2['default'].zIndices.rightPaneCloseButton,
	      height: '20px',
	      width: '10px',
	      opacity: 0.6,
	      WebkitTransition: 'right 1s',
	      transition: 'right 1s'
	    };

	    this.recolnatMenuStyle = {
	      border: 'medium none',
	      borderBottom: '1px solid grey',
	      height: this.menuHeight + 'px',
	      overflow: 'hidden',
	      position: 'fixed',
	      width: '100%',
	      zIndex: _constantsViewConstants2['default'].zIndices.mainMenu
	    };

	    //this.collabTitleStyle = {
	    //  position: 'fixed',
	    //  zIndex: '99999',
	    //  left: 0,
	    //  top: this.menuHeight + 'px',
	    //  width: this.leftPaneWidth + 'px',
	    //  cursor: 'default',
	    //  color: '#0C0400',
	    //  fontVariant: 'small-caps',
	    //  fontSize: '16pt',
	    //  margin: '3px 3px 3px 3px',
	    //  padding: '5px 5px 5px 5px'
	    //};

	    this.state = {
	      userLoggedIn: false,
	      leftSidebar: true,
	      rightSidebar: true,
	      leftSidebarIcon: 'left',
	      rightSidebarIcon: 'right',
	      activeSetName: userstore.getText('noSetLoaded')
	    };

	    this._onUserLogIn = function () {
	      var userLogIn = function userLogIn() {
	        return _this.login();
	      };
	      return userLogIn.apply(_this);
	    };

	    this._onUserLogOut = function () {
	      var userLogOut = function userLogOut() {
	        return _this.logout();
	      };
	      return userLogOut.apply(_this);
	    };
	  }

	  //

	  _createClass(Window, [{
	    key: 'login',
	    value: function login() {
	      this.setState({ userLoggedIn: true });
	    }
	  }, {
	    key: 'logout',
	    value: function logout() {
	      //api.closeWebsocket();
	      this.setState({ userLoggedIn: false });
	    }
	  }, {
	    key: 'receiveMessage',
	    value: function receiveMessage(event) {
	      if (event.origin.indexOf(_confApplicationConfiguration2['default'].integration.recolnatMenuBarOrigin) == 0) {
	        if (event.data.source) {
	          if (event.data.source.indexOf('react') === 0) {
	            return;
	          }
	        }
	        switch (event.data.action) {
	          case 'login':
	            this.redirectCASLogin();
	            break;
	          case 'logout':
	            this.redirectCASLogout();
	            break;
	          case 'profile':
	            alert(userstore.getText('operationNotAvailableInVersion'));
	            break;
	          default:
	          //console.log('Unknown event action ' + event.data.action);
	          //console.log(JSON.stringify(event.data));
	        }
	      }
	    }
	  }, {
	    key: 'redirectCASLogin',
	    value: function redirectCASLogin() {
	      window.location.href = 'https://cas.recolnat.org/login?service=' + window.location.href;
	    }
	  }, {
	    key: 'redirectCASLogout',
	    value: function redirectCASLogout() {
	      window.location.href = 'https://cas.recolnat.org/logout';
	    }
	  }, {
	    key: 'toggleLeftMenu',
	    value: function toggleLeftMenu() {
	      if (this.state.leftSidebar) {
	        this.setState({ leftSidebar: false, leftSidebarIcon: 'right' });
	      } else {
	        this.setState({ leftSidebar: true, leftSidebarIcon: 'left' });
	      }
	    }
	  }, {
	    key: 'toggleRightMenu',
	    value: function toggleRightMenu() {
	      if (this.state.rightSidebar) {
	        this.setState({ rightSidebar: false, rightSidebarIcon: 'left' });
	      } else {
	        this.setState({ rightSidebar: true, rightSidebarIcon: 'right' });
	      }
	    }
	  }, {
	    key: 'handleResize',
	    value: function handleResize() {
	      this.setState({});
	    }
	  }, {
	    key: 'displayTestModal',
	    value: function displayTestModal(event) {
	      //console.log('key pressed ' + event.keyCode);
	      if (event.ctrlKey && event.altKey && event.keyCode === 84) {
	        event.preventDefault();
	        event.stopPropagation();
	        _actionsModalActions2['default'].showModal(_constantsModalConstants2['default'].Modals.testRunnerModal);
	      }
	    }
	  }, {
	    key: 'signalIframeReady',
	    value: function signalIframeReady() {
	      this.setState({ menuIframe: true });
	    }
	  }, {
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var locationParts = window.location.href.split(/[?#]/);
	      if (locationParts.length > 1) {
	        window.location.href = locationParts[0];
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      userstore.addUserLogInListener(this._onUserLogIn);
	      userstore.addUserLogOutListener(this._onUserLogOut);
	      userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	      window.setTimeout(_actionsViewActions2['default'].updateViewport.bind(null, null, null, window.innerWidth - this.leftPaneWidth + this.rightPaneWidth, window.innerHeight - this.menuHeight, null), 10);
	      window.setTimeout(_actionsViewActions2['default'].updateViewportLocation.bind(null, this.menuHeight, this.leftPaneWidth), 10);
	      window.addEventListener('resize', this.handleResize.bind(this));
	      // Add recolnat-menu listeners
	      window.addEventListener("message", this.receiveMessage.bind(this));
	      window.addEventListener('keyup', this.displayTestModal.bind(this));
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      var width = window.innerWidth;
	      var height = window.innerHeight;
	      var left = 0;
	      //console.log('window width ' + width);
	      this.containerStyle.height = height;
	      this.containerStyle.width = width;

	      this.leftButtonStyle.top = height / 10;
	      this.rightButtonStyle.top = height / 10;

	      if (nextState.leftSidebar) {
	        width = width - this.leftPaneWidth;
	        left = this.leftPaneWidth;
	        this.columnLeftSideStyle.left = '0px';
	        this.leftButtonStyle.left = this.leftPaneWidth + 'px';
	      } else {
	        this.columnLeftSideStyle.left = -this.leftPaneWidth + 'px';
	        this.leftButtonStyle.left = '0px';
	      }

	      if (nextState.rightSidebar) {
	        this.columnRightSideStyle.right = '0px';
	        this.rightButtonStyle.right = this.rightPaneWidth + 'px';
	        width = width - this.rightPaneWidth;
	      } else {
	        this.columnRightSideStyle.right = -this.rightPaneWidth + 'px';
	        this.rightButtonStyle.right = '0px';
	      }

	      this.columnMiddleStyle.left = left + 'px';
	      this.columnMiddleStyle.width = width + 'px';
	      this.columnLeftSideStyle.height = window.innerHeight - this.menuHeight + 'px';
	      this.columnRightSideStyle.height = window.innerHeight - this.menuHeight + 'px';
	      this.columnMiddleStyle.height = window.innerHeight - this.menuHeight + 'px';

	      window.setTimeout(_actionsViewActions2['default'].updateViewport.bind(null, null, null, width, window.innerHeight - this.menuHeight, null), 10);
	      window.setTimeout(_actionsViewActions2['default'].updateViewportLocation.bind(null, this.menuHeight, left), 10);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.userLoggedIn) {
	        var frame = this.refs.recolnatMenu.getDOMNode().contentWindow;
	        frame.postMessage({ type: "user", username: userstore.getUser().login, userProfile: '' }, _confApplicationConfiguration2['default'].integration.recolnatMenuBarUrl);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      userstore.removeUserLogInListener(this._onUserLogIn);
	      userstore.removeUserLogOutListener(this._onUserLogOut);
	      userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	      window.removeEventListener('resize', this.handleResize.bind(this));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { style: this.containerStyle },
	        _react2['default'].createElement('iframe', { id: 'recolnatMenu',
	          ref: 'recolnatMenu',
	          style: this.recolnatMenuStyle,
	          seamless: 'seamless',
	          scrolling: 'no',
	          onLoad: this.signalIframeReady.bind(this),
	          src: _confApplicationConfiguration2['default'].integration.recolnatMenuBarUrl }),
	        _react2['default'].createElement(_componentsModals2['default'], { userstore: userstore,
	          viewstore: viewstore,
	          toolstore: toolstore,
	          menustore: menustore,
	          metastore: metastore,
	          modalstore: modalstore,
	          ministore: ministore,
	          benchstore: benchstore,
	          modestore: modestore,
	          inspecstore: inspecstore,
	          imagestore: imagestore,
	          basketstore: basketstore,
	          managerstore: managerstore }),
	        _react2['default'].createElement(_componentsMainMenu2['default'], { top: this.menuHeight,
	          width: 300,
	          userstore: userstore,
	          benchstore: benchstore,
	          viewstore: viewstore,
	          toolstore: toolstore,
	          menustore: menustore,
	          ministore: ministore,
	          metastore: metastore,
	          modestore: modestore,
	          inspecstore: inspecstore,
	          managerstore: managerstore }),
	        _react2['default'].createElement(_componentsContextMenuOrbalContextMenu2['default'], {
	          menustore: menustore,
	          userstore: userstore,
	          ministore: ministore,
	          metastore: metastore,
	          benchstore: benchstore,
	          viewstore: viewstore,
	          toolstore: toolstore
	        }),
	        _react2['default'].createElement(_componentsCommonWebSocketStatus2['default'], { socket: socket,
	          userstore: userstore }),
	        _react2['default'].createElement(
	          'div',
	          null,
	          _react2['default'].createElement(
	            'div',
	            { style: this.columnLeftSideStyle },
	            _react2['default'].createElement(_componentsPanesLeftPane2['default'], {
	              imagestore: imagestore,
	              userstore: userstore,
	              viewstore: viewstore,
	              toolstore: toolstore,
	              menustore: menustore,
	              metastore: metastore,
	              modalstore: modalstore,
	              modestore: modestore,
	              ministore: ministore,
	              benchstore: benchstore,
	              managerstore: managerstore,
	              dragstore: dragstore,
	              inspecstore: inspecstore
	            })
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui right attached button mini compact', style: this.leftButtonStyle, onClick: this.toggleLeftMenu.bind(this) },
	            _react2['default'].createElement('i', { className: 'ui icon chevron circle ' + this.state.leftSidebarIcon })
	          ),
	          _react2['default'].createElement(
	            'div',
	            { style: this.columnMiddleStyle },
	            _react2['default'].createElement(_componentsPanesCenterPane2['default'], {
	              imagestore: imagestore,
	              userstore: userstore,
	              viewstore: viewstore,
	              toolstore: toolstore,
	              menustore: menustore,
	              metastore: metastore,
	              modalstore: modalstore,
	              modestore: modestore,
	              ministore: ministore,
	              benchstore: benchstore,
	              managerstore: managerstore,
	              dragstore: dragstore,
	              inspecstore: inspecstore
	            })
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui left attached button mini compact', style: this.rightButtonStyle, onClick: this.toggleRightMenu.bind(this) },
	            _react2['default'].createElement('i', { className: 'ui icon chevron circle ' + this.state.rightSidebarIcon })
	          ),
	          _react2['default'].createElement(
	            'div',
	            { style: this.columnRightSideStyle },
	            _react2['default'].createElement(_componentsPanesRightPane2['default'], {
	              visibleHeight: window.innerHeight - this.menuHeight,
	              userstore: userstore,
	              viewstore: viewstore,
	              toolstore: toolstore,
	              menustore: menustore,
	              metastore: metastore,
	              modalstore: modalstore,
	              modestore: modestore,
	              ministore: ministore,
	              benchstore: benchstore,
	              managerstore: managerstore,
	              dragstore: dragstore,
	              inspecstore: inspecstore
	            })
	          )
	        )
	      );
	    }
	  }]);

	  return Window;
	})(_react2['default'].Component);

	exports['default'] = Window;
	module.exports = exports['default'];

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$getOwnPropertyDescriptor = __webpack_require__(4)["default"];

	exports["default"] = function get(_x, _x2, _x3) {
	  var _again = true;

	  _function: while (_again) {
	    var object = _x,
	        property = _x2,
	        receiver = _x3;
	    desc = parent = getter = undefined;
	    _again = false;
	    if (object === null) object = Function.prototype;

	    var desc = _Object$getOwnPropertyDescriptor(object, property);

	    if (desc === undefined) {
	      var parent = Object.getPrototypeOf(object);

	      if (parent === null) {
	        return undefined;
	      } else {
	        _x = parent;
	        _x2 = property;
	        _x3 = receiver;
	        _again = true;
	        continue _function;
	      }
	    } else if ("value" in desc) {
	      return desc.value;
	    } else {
	      var getter = desc.get;

	      if (getter === undefined) {
	        return undefined;
	      }

	      return getter.call(receiver);
	    }
	  }
	};

	exports.__esModule = true;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(5), __esModule: true };

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(6);
	__webpack_require__(7);
	module.exports = function getOwnPropertyDescriptor(it, key){
	  return $.getDesc(it, key);
	};

/***/ },
/* 6 */
/***/ function(module, exports) {

	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject = __webpack_require__(8);

	__webpack_require__(12)('getOwnPropertyDescriptor', function($getOwnPropertyDescriptor){
	  return function getOwnPropertyDescriptor(it, key){
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(9)
	  , defined = __webpack_require__(11);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(10);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 10 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 11 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(13)
	  , core    = __webpack_require__(15)
	  , fails   = __webpack_require__(18);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(14)
	  , core      = __webpack_require__(15)
	  , ctx       = __webpack_require__(16)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;

/***/ },
/* 14 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 15 */
/***/ function(module, exports) {

	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(17);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 18 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$create = __webpack_require__(20)["default"];

	var _Object$setPrototypeOf = __webpack_require__(22)["default"];

	exports["default"] = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = _Object$create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	exports.__esModule = true;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(21), __esModule: true };

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(6);
	module.exports = function create(P, D){
	  return $.create(P, D);
	};

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(23), __esModule: true };

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(24);
	module.exports = __webpack_require__(15).Object.setPrototypeOf;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(13);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(25).set});

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var getDesc  = __webpack_require__(6).getDesc
	  , isObject = __webpack_require__(26)
	  , anObject = __webpack_require__(27);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(16)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 26 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(26);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$defineProperty = __webpack_require__(29)["default"];

	exports["default"] = (function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;

	      _Object$defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	})();

	exports.__esModule = true;

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(30), __esModule: true };

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var $ = __webpack_require__(6);
	module.exports = function defineProperty(it, key, desc){
	  return $.setDesc(it, key, desc);
	};

/***/ },
/* 31 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	exports.__esModule = true;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(33);


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */

	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/

	'use strict';

	var EventPluginUtils = __webpack_require__(35);
	var ReactChildren = __webpack_require__(39);
	var ReactComponent = __webpack_require__(53);
	var ReactClass = __webpack_require__(68);
	var ReactContext = __webpack_require__(43);
	var ReactCurrentOwner = __webpack_require__(48);
	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(63);
	var ReactDOM = __webpack_require__(71);
	var ReactDOMTextComponent = __webpack_require__(73);
	var ReactDefaultInjection = __webpack_require__(122);
	var ReactInstanceHandles = __webpack_require__(50);
	var ReactMount = __webpack_require__(98);
	var ReactPerf = __webpack_require__(59);
	var ReactPropTypes = __webpack_require__(153);
	var ReactReconciler = __webpack_require__(60);
	var ReactServerRendering = __webpack_require__(185);

	var assign = __webpack_require__(44);
	var findDOMNode = __webpack_require__(142);
	var onlyChild = __webpack_require__(187);

	ReactDefaultInjection.inject();

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if ("production" !== process.env.NODE_ENV) {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var render = ReactPerf.measure('React', 'render', ReactMount.render);

	var React = {
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    only: onlyChild
	  },
	  Component: ReactComponent,
	  DOM: ReactDOM,
	  PropTypes: ReactPropTypes,
	  initializeTouchEvents: function(shouldUseTouch) {
	    EventPluginUtils.useTouchEvents = shouldUseTouch;
	  },
	  createClass: ReactClass.createClass,
	  createElement: createElement,
	  cloneElement: cloneElement,
	  createFactory: createFactory,
	  createMixin: function(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	  constructAndRenderComponent: ReactMount.constructAndRenderComponent,
	  constructAndRenderComponentByID: ReactMount.constructAndRenderComponentByID,
	  findDOMNode: findDOMNode,
	  render: render,
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  isValidElement: ReactElement.isValidElement,
	  withContext: ReactContext.withContext,

	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};

	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
	  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}

	if ("production" !== process.env.NODE_ENV) {
	  var ExecutionEnvironment = __webpack_require__(82);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {

	    // If we're in Chrome, look for the devtools marker and provide a download
	    // link if not installed.
	    if (navigator.userAgent.indexOf('Chrome') > -1) {
	      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	        console.debug(
	          'Download the React DevTools for a better development experience: ' +
	          'https://fb.me/react-devtools'
	        );
	      }
	    }

	    var expectedFeatures = [
	      // shims
	      Array.isArray,
	      Array.prototype.every,
	      Array.prototype.forEach,
	      Array.prototype.indexOf,
	      Array.prototype.map,
	      Date.now,
	      Function.prototype.bind,
	      Object.keys,
	      String.prototype.split,
	      String.prototype.trim,

	      // shams
	      Object.create,
	      Object.freeze
	    ];

	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error(
	          'One or more ES5 shim/shams expected by React are not available: ' +
	          'https://fb.me/react-warning-polyfills'
	        );
	        break;
	      }
	    }
	  }
	}

	React.version = '0.13.3';

	module.exports = React;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 34 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);

	var invariant = __webpack_require__(38);

	/**
	 * Injected dependencies:
	 */

	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        InjectedMount && InjectedMount.getNode,
	        'EventPluginUtils.injection.injectMount(...): Injected Mount module ' +
	        'is missing getNode.'
	      ) : invariant(InjectedMount && InjectedMount.getNode));
	    }
	  }
	};

	var topLevelTypes = EventConstants.topLevelTypes;

	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp ||
	         topLevelType === topLevelTypes.topTouchEnd ||
	         topLevelType === topLevelTypes.topTouchCancel;
	}

	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove ||
	         topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown ||
	         topLevelType === topLevelTypes.topTouchStart;
	}


	var validateEventDispatches;
	if ("production" !== process.env.NODE_ENV) {
	  validateEventDispatches = function(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;

	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ?
	      dispatchListeners.length :
	      dispatchListeners ? 1 : 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      idsIsArr === listenersIsArr && IDsLen === listenersLen,
	      'EventPluginUtils: Invalid `event`.'
	    ) : invariant(idsIsArr === listenersIsArr && IDsLen === listenersLen));
	  };
	}

	/**
	 * Invokes `cb(event, listener, id)`. Avoids using call if no scope is
	 * provided. The `(listener,id)` pair effectively forms the "dispatch" but are
	 * kept separate to conserve memory.
	 */
	function forEachEventDispatch(event, cb) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      cb(event, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    cb(event, dispatchListeners, dispatchIDs);
	  }
	}

	/**
	 * Default implementation of PluginModule.executeDispatch().
	 * @param {SyntheticEvent} SyntheticEvent to handle
	 * @param {function} Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, listener, domID) {
	  event.currentTarget = injection.Mount.getNode(domID);
	  var returnValue = listener(event, domID);
	  event.currentTarget = null;
	  return returnValue;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, cb) {
	  forEachEventDispatch(event, cb);
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}

	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return id of the first dispatch execution who's listener returns true, or
	 * null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}

	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}

	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if ("production" !== process.env.NODE_ENV) {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(dispatchListener),
	    'executeDirectDispatch(...): Invalid `event`.'
	  ) : invariant(!Array.isArray(dispatchListener)));
	  var res = dispatchListener ?
	    dispatchListener(event, dispatchID) :
	    null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}

	/**
	 * @param {SyntheticEvent} event
	 * @return {bool} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}

	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,

	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatch: executeDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	  injection: injection,
	  useTouchEvents: false
	};

	module.exports = EventPluginUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */

	'use strict';

	var keyMirror = __webpack_require__(37);

	var PropagationPhases = keyMirror({bubbled: null, captured: null});

	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topBlur: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topReset: null,
	  topScroll: null,
	  topSelectionChange: null,
	  topSubmit: null,
	  topTextInput: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topWheel: null
	});

	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};

	module.exports = EventConstants;


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(38);

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    obj instanceof Object && !Array.isArray(obj),
	    'keyMirror(...): Argument must be an object.'
	  ) : invariant(obj instanceof Object && !Array.isArray(obj)));
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        'Invariant Violation: ' +
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */

	'use strict';

	var PooledClass = __webpack_require__(40);
	var ReactFragment = __webpack_require__(41);

	var traverseAllChildren = __webpack_require__(49);
	var warning = __webpack_require__(46);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var threeArgumentPooler = PooledClass.threeArgumentPooler;

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.forEachFunction = forEachFunction;
	  this.forEachContext = forEachContext;
	}
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(traverseContext, child, name, i) {
	  var forEachBookKeeping = traverseContext;
	  forEachBookKeeping.forEachFunction.call(
	    forEachBookKeeping.forEachContext, child, i);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc.
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }

	  var traverseContext =
	    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, mapFunction, mapContext) {
	  this.mapResult = mapResult;
	  this.mapFunction = mapFunction;
	  this.mapContext = mapContext;
	}
	PooledClass.addPoolingTo(MapBookKeeping, threeArgumentPooler);

	function mapSingleChildIntoContext(traverseContext, child, name, i) {
	  var mapBookKeeping = traverseContext;
	  var mapResult = mapBookKeeping.mapResult;

	  var keyUnique = !mapResult.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'ReactChildren.map(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }

	  if (keyUnique) {
	    var mappedChild =
	      mapBookKeeping.mapFunction.call(mapBookKeeping.mapContext, child, i);
	    mapResult[name] = mappedChild;
	  }
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * TODO: This may likely break any calls to `ReactChildren.map` that were
	 * previously relying on the fact that we guarded against null children.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} mapFunction.
	 * @param {*} mapContext Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }

	  var mapResult = {};
	  var traverseContext = MapBookKeeping.getPooled(mapResult, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	  return ReactFragment.create(mapResult);
	}

	function forEachSingleChildDummy(traverseContext, child, name, i) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  count: countChildren
	};

	module.exports = ReactChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */

	'use strict';

	var invariant = __webpack_require__(38);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};

	var standardReleaser = function(instance) {
	  var Klass = this;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    instance instanceof Klass,
	    'Trying to release an instance into a pool of a different type.'
	  ) : invariant(instance instanceof Klass));
	  if (instance.destructor) {
	    instance.destructor();
	  }
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};

	module.exports = PooledClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule ReactFragment
	*/

	'use strict';

	var ReactElement = __webpack_require__(42);

	var warning = __webpack_require__(46);

	/**
	 * We used to allow keyed objects to serve as a collection of ReactElements,
	 * or nested sets. This allowed us a way to explicitly key a set a fragment of
	 * components. This is now being replaced with an opaque data structure.
	 * The upgrade path is to call React.addons.createFragment({ key: value }) to
	 * create a keyed fragment. The resulting data structure is opaque, for now.
	 */

	if ("production" !== process.env.NODE_ENV) {
	  var fragmentKey = '_reactFragment';
	  var didWarnKey = '_reactDidWarn';
	  var canWarnForReactFragment = false;

	  try {
	    // Feature test. Don't even try to issue this warning if we can't use
	    // enumerable: false.

	    var dummy = function() {
	      return 1;
	    };

	    Object.defineProperty(
	      {},
	      fragmentKey,
	      {enumerable: false, value: true}
	    );

	    Object.defineProperty(
	      {},
	      'key',
	      {enumerable: true, get: dummy}
	    );

	    canWarnForReactFragment = true;
	  } catch (x) { }

	  var proxyPropertyAccessWithWarning = function(obj, key) {
	    Object.defineProperty(obj, key, {
	      enumerable: true,
	      get: function() {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an opaque type. Accessing any of its ' +
	          'properties is deprecated. Pass it to one of the React.Children ' +
	          'helpers.'
	        ) : null);
	        this[didWarnKey] = true;
	        return this[fragmentKey][key];
	      },
	      set: function(value) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this[didWarnKey],
	          'A ReactFragment is an immutable opaque type. Mutating its ' +
	          'properties is deprecated.'
	        ) : null);
	        this[didWarnKey] = true;
	        this[fragmentKey][key] = value;
	      }
	    });
	  };

	  var issuedWarnings = {};

	  var didWarnForFragment = function(fragment) {
	    // We use the keys and the type of the value as a heuristic to dedupe the
	    // warning to avoid spamming too much.
	    var fragmentCacheKey = '';
	    for (var key in fragment) {
	      fragmentCacheKey += key + ':' + (typeof fragment[key]) + ',';
	    }
	    var alreadyWarnedOnce = !!issuedWarnings[fragmentCacheKey];
	    issuedWarnings[fragmentCacheKey] = true;
	    return alreadyWarnedOnce;
	  };
	}

	var ReactFragment = {
	  // Wrap a keyed object in an opaque proxy that warns you if you access any
	  // of its properties.
	  create: function(object) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (typeof object !== 'object' || !object || Array.isArray(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment only accepts a single object.',
	          object
	        ) : null);
	        return object;
	      }
	      if (ReactElement.isValidElement(object)) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'React.addons.createFragment does not accept a ReactElement ' +
	          'without a wrapper object.'
	        ) : null);
	        return object;
	      }
	      if (canWarnForReactFragment) {
	        var proxy = {};
	        Object.defineProperty(proxy, fragmentKey, {
	          enumerable: false,
	          value: object
	        });
	        Object.defineProperty(proxy, didWarnKey, {
	          writable: true,
	          enumerable: false,
	          value: false
	        });
	        for (var key in object) {
	          proxyPropertyAccessWithWarning(proxy, key);
	        }
	        Object.preventExtensions(proxy);
	        return proxy;
	      }
	    }
	    return object;
	  },
	  // Extract the original keyed object from the fragment opaque type. Warn if
	  // a plain object is passed here.
	  extract: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        if (!fragment[fragmentKey]) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnForFragment(fragment),
	            'Any use of a keyed object should be wrapped in ' +
	            'React.addons.createFragment(object) before being passed as a ' +
	            'child.'
	          ) : null);
	          return fragment;
	        }
	        return fragment[fragmentKey];
	      }
	    }
	    return fragment;
	  },
	  // Check if this is a fragment and if so, extract the keyed object. If it
	  // is a fragment-like object, warn that it should be wrapped. Ignore if we
	  // can't determine what kind of object this is.
	  extractIfFragment: function(fragment) {
	    if ("production" !== process.env.NODE_ENV) {
	      if (canWarnForReactFragment) {
	        // If it is the opaque type, return the keyed object.
	        if (fragment[fragmentKey]) {
	          return fragment[fragmentKey];
	        }
	        // Otherwise, check each property if it has an element, if it does
	        // it is probably meant as a fragment, so we can warn early. Defer,
	        // the warning to extract.
	        for (var key in fragment) {
	          if (fragment.hasOwnProperty(key) &&
	              ReactElement.isValidElement(fragment[key])) {
	            // This looks like a fragment object, we should provide an
	            // early warning.
	            return ReactFragment.extract(fragment);
	          }
	        }
	      }
	    }
	    return fragment;
	  }
	};

	module.exports = ReactFragment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */

	'use strict';

	var ReactContext = __webpack_require__(43);
	var ReactCurrentOwner = __webpack_require__(48);

	var assign = __webpack_require__(44);
	var warning = __webpack_require__(46);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true
	};

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} object
	 * @param {string} key
	 */
	function defineWarningProperty(object, key) {
	  Object.defineProperty(object, key, {

	    configurable: false,
	    enumerable: true,

	    get: function() {
	      if (!this._store) {
	        return null;
	      }
	      return this._store[key];
	    },

	    set: function(value) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        false,
	        'Don\'t set the %s property of the React element. Instead, ' +
	        'specify the correct value when initially creating the element.',
	        key
	      ) : null);
	      this._store[key] = value;
	    }

	  });
	}

	/**
	 * This is updated to true if the membrane is successfully created.
	 */
	var useMutationMembrane = false;

	/**
	 * Warn for mutations.
	 *
	 * @internal
	 * @param {object} element
	 */
	function defineMutationMembrane(prototype) {
	  try {
	    var pseudoFrozenProperties = {
	      props: true
	    };
	    for (var key in pseudoFrozenProperties) {
	      defineWarningProperty(prototype, key);
	    }
	    useMutationMembrane = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {string|object} ref
	 * @param {*} key
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function(type, key, ref, owner, context, props) {
	  // Built-in properties that belong on the element
	  this.type = type;
	  this.key = key;
	  this.ref = ref;

	  // Record the component responsible for creating this element.
	  this._owner = owner;

	  // TODO: Deprecate withContext, and then the context becomes accessible
	  // through the owner.
	  this._context = context;

	  if ("production" !== process.env.NODE_ENV) {
	    // The validation flag and props are currently mutative. We put them on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    this._store = {props: props, originalProps: assign({}, props)};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    try {
	      Object.defineProperty(this._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true
	      });
	    } catch (x) {
	    }
	    this._store.validated = false;

	    // We're not allowed to set props directly on the object so we early
	    // return and rely on the prototype membrane to forward to the backing
	    // store.
	    if (useMutationMembrane) {
	      Object.freeze(this);
	      return;
	    }
	  }

	  this.props = props;
	};

	// We intentionally don't expose the function on the constructor property.
	// ReactElement should be indistinguishable from a plain object.
	ReactElement.prototype = {
	  _isReactElement: true
	};

	if ("production" !== process.env.NODE_ENV) {
	  defineMutationMembrane(ReactElement.prototype);
	}

	ReactElement.createElement = function(type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;

	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }

	  return new ReactElement(
	    type,
	    key,
	    ref,
	    ReactCurrentOwner.current,
	    ReactContext.current,
	    props
	  );
	};

	ReactElement.createFactory = function(type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. <Foo />.type === Foo.type.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceProps = function(oldElement, newProps) {
	  var newElement = new ReactElement(
	    oldElement.type,
	    oldElement.key,
	    oldElement.ref,
	    oldElement._owner,
	    oldElement._context,
	    newProps
	  );

	  if ("production" !== process.env.NODE_ENV) {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	  return newElement;
	};

	ReactElement.cloneElement = function(element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) &&
	          !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return new ReactElement(
	    element.type,
	    key,
	    ref,
	    owner,
	    element._context,
	    props
	  );
	};

	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function(object) {
	  // ReactTestUtils is often used outside of beforeEach where as React is
	  // within it. This leads to two different instances of React on the same
	  // page. To identify a element from a different React instance we use
	  // a flag instead of an instanceof check.
	  var isElement = !!(object && object._isReactElement);
	  // if (isElement && !(object instanceof ReactElement)) {
	  // This is an indicator that you're using multiple versions of React at the
	  // same time. This will screw with ownership and stuff. Fix it, please.
	  // TODO: We could possibly warn here.
	  // }
	  return isElement;
	};

	module.exports = ReactElement;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactContext
	 */

	'use strict';

	var assign = __webpack_require__(44);
	var emptyObject = __webpack_require__(45);
	var warning = __webpack_require__(46);

	var didWarn = false;

	/**
	 * Keeps track of the current context.
	 *
	 * The context is automatically passed down the component ownership hierarchy
	 * and is accessible via `this.context` on ReactCompositeComponents.
	 */
	var ReactContext = {

	  /**
	   * @internal
	   * @type {object}
	   */
	  current: emptyObject,

	  /**
	   * Temporarily extends the current context while executing scopedCallback.
	   *
	   * A typical use case might look like
	   *
	   *  render: function() {
	   *    var children = ReactContext.withContext({foo: 'foo'}, () => (
	   *
	   *    ));
	   *    return <div>{children}</div>;
	   *  }
	   *
	   * @param {object} newContext New context to merge into the existing context
	   * @param {function} scopedCallback Callback to run with the new context
	   * @return {ReactComponent|array<ReactComponent>}
	   */
	  withContext: function(newContext, scopedCallback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        didWarn,
	        'withContext is deprecated and will be removed in a future version. ' +
	        'Use a wrapper component with getChildContext instead.'
	      ) : null);

	      didWarn = true;
	    }

	    var result;
	    var previousContext = ReactContext.current;
	    ReactContext.current = assign({}, previousContext, newContext);
	    try {
	      result = scopedCallback();
	    } finally {
	      ReactContext.current = previousContext;
	    }
	    return result;
	  }

	};

	module.exports = ReactContext;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 44 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign

	'use strict';

	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }

	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;

	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }

	    var from = Object(nextSource);

	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.

	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }

	  return to;
	}

	module.exports = assign;


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */

	"use strict";

	var emptyObject = {};

	if ("production" !== process.env.NODE_ENV) {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */

	"use strict";

	var emptyFunction = __webpack_require__(47);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if ("production" !== process.env.NODE_ENV) {
	  warning = function(condition, format ) {for (var args=[],$__0=2,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }

	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }

	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }

	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function()  {return args[argIndex++];});
	      console.warn(message);
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}

	module.exports = warning;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */

	function makeEmptyFunction(arg) {
	  return function() {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function() { return this; };
	emptyFunction.thatReturnsArgument = function(arg) { return arg; };

	module.exports = emptyFunction;


/***/ },
/* 48 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 *
	 * The depth indicate how many composite components are above this render level.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactFragment = __webpack_require__(41);
	var ReactInstanceHandles = __webpack_require__(50);

	var getIteratorFn = __webpack_require__(52);
	var invariant = __webpack_require__(38);
	var warning = __webpack_require__(46);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};

	var userProvidedKeyEscapeRegex = /[=.:]/g;

	var didWarnAboutMaps = false;

	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} key Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(
	    userProvidedKeyEscapeRegex,
	    userProvidedKeyEscaper
	  );
	}

	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!number} indexSoFar Number of children encountered until this point.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(
	  children,
	  nameSoFar,
	  indexSoFar,
	  callback,
	  traverseContext
	) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null ||
	      type === 'string' ||
	      type === 'number' ||
	      ReactElement.isValidElement(children)) {
	    callback(
	      traverseContext,
	      children,
	      // If it's the only child, treat the name as if it was wrapped in an array
	      // so that it's consistent if the number of children grows.
	      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
	      indexSoFar
	    );
	    return 1;
	  }

	  var child, nextName, nextIndex;
	  var subtreeCount = 0; // Count of children found in the current subtree.

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = (
	        (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	        getComponentKey(child, i)
	      );
	      nextIndex = indexSoFar + subtreeCount;
	      subtreeCount += traverseAllChildrenImpl(
	        child,
	        nextName,
	        nextIndex,
	        callback,
	        traverseContext
	      );
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            getComponentKey(child, ii++)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      } else {
	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            didWarnAboutMaps,
	            'Using Maps as children is not yet fully supported. It is an ' +
	            'experimental feature that might be removed. Convert it to a ' +
	            'sequence / iterable of keyed ReactElements instead.'
	          ) : null);
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = (
	              (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
	              getComponentKey(child, 0)
	            );
	            nextIndex = indexSoFar + subtreeCount;
	            subtreeCount += traverseAllChildrenImpl(
	              child,
	              nextName,
	              nextIndex,
	              callback,
	              traverseContext
	            );
	          }
	        }
	      }
	    } else if (type === 'object') {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        children.nodeType !== 1,
	        'traverseAllChildren(...): Encountered an invalid child; DOM ' +
	        'elements are not valid children of React components.'
	      ) : invariant(children.nodeType !== 1));
	      var fragment = ReactFragment.extract(children);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          child = fragment[key];
	          nextName = (
	            (nameSoFar !== '' ? nameSoFar + SUBSEPARATOR : SEPARATOR) +
	            wrapUserProvidedKey(key) + SUBSEPARATOR +
	            getComponentKey(child, 0)
	          );
	          nextIndex = indexSoFar + subtreeCount;
	          subtreeCount += traverseAllChildrenImpl(
	            child,
	            nextName,
	            nextIndex,
	            callback,
	            traverseContext
	          );
	        }
	      }
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', 0, callback, traverseContext);
	}

	module.exports = traverseAllChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */

	'use strict';

	var ReactRootIndex = __webpack_require__(51);

	var invariant = __webpack_require__(38);

	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;

	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 100;

	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}

	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}

	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || (
	    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
	  );
	}

	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return (
	    descendantID.indexOf(ancestorID) === 0 &&
	    isBoundary(descendantID, ancestorID.length)
	  );
	}

	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}

	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(ancestorID) && isValidID(destinationID),
	    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
	    ancestorID,
	    destinationID
	  ) : invariant(isValidID(ancestorID) && isValidID(destinationID)));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isAncestorIDOf(ancestorID, destinationID),
	    'getNextDescendantID(...): React has made an invalid assumption about ' +
	    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
	    ancestorID,
	    destinationID
	  ) : invariant(isAncestorIDOf(ancestorID, destinationID)));
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}

	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    isValidID(longestCommonID),
	    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
	    oneID,
	    twoID,
	    longestCommonID
	  ) : invariant(isValidID(longestCommonID)));
	  return longestCommonID;
	}

	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  ("production" !== process.env.NODE_ENV ? invariant(
	    start !== stop,
	    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
	    start
	  ) : invariant(start !== stop));
	  var traverseUp = isAncestorIDOf(stop, start);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    traverseUp || isAncestorIDOf(start, stop),
	    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
	    'not have a parent path.',
	    start,
	    stop
	  ) : invariant(traverseUp || isAncestorIDOf(start, stop)));
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start; /* until break */; id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      depth++ < MAX_TREE_DEPTH,
	      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
	      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
	      start, stop
	    ) : invariant(depth++ < MAX_TREE_DEPTH));
	  }
	}

	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {

	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },

	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function(rootID, name) {
	    return rootID + name;
	  },

	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },

	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },

	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },

	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getFirstCommonAncestorID: getFirstCommonAncestorID,

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,

	  isAncestorIDOf: isAncestorIDOf,

	  SEPARATOR: SEPARATOR

	};

	module.exports = ReactInstanceHandles;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 51 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};

	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};

	module.exports = ReactRootIndex;


/***/ },
/* 52 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */

	'use strict';

	/* global Symbol */
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (
	    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL])
	  );
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */

	'use strict';

	var ReactUpdateQueue = __webpack_require__(54);

	var invariant = __webpack_require__(38);
	var warning = __webpack_require__(46);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context) {
	  this.props = props;
	  this.context = context;
	}

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function(partialState, callback) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof partialState === 'object' ||
	    typeof partialState === 'function' ||
	    partialState == null,
	    'setState(...): takes an object of state variables to update or a ' +
	    'function which returns an object of state variables.'
	  ) : invariant(typeof partialState === 'object' ||
	  typeof partialState === 'function' ||
	  partialState == null));
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      partialState != null,
	      'setState(...): You passed an undefined or null state object; ' +
	      'instead, use forceUpdate().'
	    ) : null);
	  }
	  ReactUpdateQueue.enqueueSetState(this, partialState);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function(callback) {
	  ReactUpdateQueue.enqueueForceUpdate(this);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallback(this, callback);
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if ("production" !== process.env.NODE_ENV) {
	  var deprecatedAPIs = {
	    getDOMNode: [
	      'getDOMNode',
	      'Use React.findDOMNode(component) instead.'
	    ],
	    isMounted: [
	      'isMounted',
	      'Instead, make sure to clean up subscriptions and pending requests in ' +
	      'componentWillUnmount to prevent memory leaks.'
	    ],
	    replaceProps: [
	      'replaceProps',
	      'Instead, call React.render again at the top level.'
	    ],
	    replaceState: [
	      'replaceState',
	      'Refactor your code to use setState instead (see ' +
	      'https://github.com/facebook/react/issues/3236).'
	    ],
	    setProps: [
	      'setProps',
	      'Instead, call React.render again at the top level.'
	    ]
	  };
	  var defineDeprecationWarning = function(methodName, info) {
	    try {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function() {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            '%s(...) is deprecated in plain JavaScript React classes. %s',
	            info[0],
	            info[1]
	          ) : null);
	          return undefined;
	        }
	      });
	    } catch (x) {
	      // IE will fail on defineProperty (es5-shim/sham too)
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */

	'use strict';

	var ReactLifeCycle = __webpack_require__(55);
	var ReactCurrentOwner = __webpack_require__(48);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(56);
	var ReactUpdates = __webpack_require__(57);

	var assign = __webpack_require__(44);
	var invariant = __webpack_require__(38);
	var warning = __webpack_require__(46);

	function enqueueUpdate(internalInstance) {
	  if (internalInstance !== ReactLifeCycle.currentlyMountingInstance) {
	    // If we're in a componentWillMount handler, don't enqueue a rerender
	    // because ReactUpdates assumes we're in a browser context (which is
	    // wrong for server rendering) and we're about to do a render anyway.
	    // See bug in #1740.
	    ReactUpdates.enqueueUpdate(internalInstance);
	  }
	}

	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactCurrentOwner.current == null,
	    '%s(...): Cannot update during an existing state transition ' +
	    '(such as within `render`). Render methods should be a pure function ' +
	    'of props and state.',
	    callerName
	  ) : invariant(ReactCurrentOwner.current == null));

	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if ("production" !== process.env.NODE_ENV) {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !callerName,
	        '%s(...): Can only update a mounted or mounting component. ' +
	        'This usually means you called %s() on an unmounted ' +
	        'component. This is a no-op.',
	        callerName,
	        callerName
	      ) : null);
	    }
	    return null;
	  }

	  if (internalInstance === ReactLifeCycle.currentlyUnmountingInstance) {
	    return null;
	  }

	  return internalInstance;
	}

	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function(publicInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance ||
	        internalInstance === ReactLifeCycle.currentlyMountingInstance) {
	      return null;
	    }

	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },

	  enqueueCallbackInternal: function(internalInstance, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof callback === 'function',
	      'enqueueCallback(...): You called `setProps`, `replaceProps`, ' +
	      '`setState`, `replaceState`, or `forceUpdate` with a callback that ' +
	      'isn\'t callable.'
	    ) : invariant(typeof callback === 'function'));
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldUpdateComponent`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'forceUpdate'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingForceUpdate = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function(publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function(publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setState'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    var queue =
	      internalInstance._pendingStateQueue ||
	      (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function(publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'setProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'setProps(...): You called `setProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    var props = assign({}, element.props, partialProps);
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function(publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(
	      publicInstance,
	      'replaceProps'
	    );

	    if (!internalInstance) {
	      return;
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalInstance._isTopLevel,
	      'replaceProps(...): You called `replaceProps` on a ' +
	      'component with a parent. This is an anti-pattern since props will ' +
	      'get reactively updated when rendered. Instead, change the owner\'s ' +
	      '`render` method to pass the correct value as props to the component ' +
	      'where it is created.'
	    ) : invariant(internalInstance._isTopLevel));

	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var element = internalInstance._pendingElement ||
	                  internalInstance._currentElement;
	    internalInstance._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      props
	    );

	    enqueueUpdate(internalInstance);
	  },

	  enqueueElementInternal: function(internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }

	};

	module.exports = ReactUpdateQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 55 */
/***/ function(module, exports) {

	/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactLifeCycle
	 */

	'use strict';

	/**
	 * This module manages the bookkeeping when a component is in the process
	 * of being mounted or being unmounted. This is used as a way to enforce
	 * invariants (or warnings) when it is not recommended to call
	 * setState/forceUpdate.
	 *
	 * currentlyMountingInstance: During the construction phase, it is not possible
	 * to trigger an update since the instance is not fully mounted yet. However, we
	 * currently allow this as a convenience for mutating the initial state.
	 *
	 * currentlyUnmountingInstance: During the unmounting phase, the instance is
	 * still mounted and can therefore schedule an update. However, this is not
	 * recommended and probably an error since it's about to be unmounted.
	 * Therefore we still want to trigger in an error for that case.
	 */

	var ReactLifeCycle = {
	  currentlyMountingInstance: null,
	  currentlyUnmountingInstance: null
	};

	module.exports = ReactLifeCycle;


/***/ },
/* 56 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */

	'use strict';

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */

	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	var ReactInstanceMap = {

	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function(key) {
	    key._reactInternalInstance = undefined;
	  },

	  get: function(key) {
	    return key._reactInternalInstance;
	  },

	  has: function(key) {
	    return key._reactInternalInstance !== undefined;
	  },

	  set: function(key, value) {
	    key._reactInternalInstance = value;
	  }

	};

	module.exports = ReactInstanceMap;


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(58);
	var PooledClass = __webpack_require__(40);
	var ReactCurrentOwner = __webpack_require__(48);
	var ReactPerf = __webpack_require__(59);
	var ReactReconciler = __webpack_require__(60);
	var Transaction = __webpack_require__(67);

	var assign = __webpack_require__(44);
	var invariant = __webpack_require__(38);
	var warning = __webpack_require__(46);

	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;

	var batchingStrategy = null;

	function ensureInjected() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactUpdates.ReactReconcileTransaction && batchingStrategy,
	    'ReactUpdates: must inject a reconcile transaction class and batching ' +
	    'strategy'
	  ) : invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy));
	}

	var NESTED_UPDATES = {
	  initialize: function() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};

	var UPDATE_QUEUEING = {
	  initialize: function() {
	    this.callbackQueue.reset();
	  },
	  close: function() {
	    this.callbackQueue.notifyAll();
	  }
	};

	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction =
	    ReactUpdates.ReactReconcileTransaction.getPooled();
	}

	assign(
	  ReactUpdatesFlushTransaction.prototype,
	  Transaction.Mixin, {
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  destructor: function() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },

	  perform: function(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(
	      this,
	      this.reconcileTransaction.perform,
	      this.reconcileTransaction,
	      method,
	      scope,
	      a
	    );
	  }
	});

	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

	function batchedUpdates(callback, a, b, c, d) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d);
	}

	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}

	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    len === dirtyComponents.length,
	    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
	    'match dirty-components array length (%s).',
	    len,
	    dirtyComponents.length
	  ) : invariant(len === dirtyComponents.length));

	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);

	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];

	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;

	    ReactReconciler.performUpdateIfNecessary(
	      component,
	      transaction.reconcileTransaction
	    );

	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(
	          callbacks[j],
	          component.getPublicInstance()
	        );
	      }
	    }
	  }
	}

	var flushBatchedUpdates = function() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }

	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure(
	  'ReactUpdates',
	  'flushBatchedUpdates',
	  flushBatchedUpdates
	);

	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();

	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	  ("production" !== process.env.NODE_ENV ? warning(
	    ReactCurrentOwner.current == null,
	    'enqueueUpdate(): Render methods should be a pure function of props ' +
	    'and state; triggering nested component updates from render is not ' +
	    'allowed. If necessary, trigger nested updates in ' +
	    'componentDidUpdate.'
	  ) : null);

	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }

	  dirtyComponents.push(component);
	}

	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    batchingStrategy.isBatchingUpdates,
	    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
	    'updates are not being batched.'
	  ) : invariant(batchingStrategy.isBatchingUpdates));
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}

	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function(ReconcileTransaction) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReconcileTransaction,
	      'ReactUpdates: must provide a reconcile transaction class'
	    ) : invariant(ReconcileTransaction));
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },

	  injectBatchingStrategy: function(_batchingStrategy) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      _batchingStrategy,
	      'ReactUpdates: must provide a batching strategy'
	    ) : invariant(_batchingStrategy));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.batchedUpdates === 'function',
	      'ReactUpdates: must provide a batchedUpdates() function'
	    ) : invariant(typeof _batchingStrategy.batchedUpdates === 'function'));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof _batchingStrategy.isBatchingUpdates === 'boolean',
	      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
	    ) : invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean'));
	    batchingStrategy = _batchingStrategy;
	  }
	};

	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,

	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};

	module.exports = ReactUpdates;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(40);

	var assign = __webpack_require__(44);
	var invariant = __webpack_require__(38);

	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}

	assign(CallbackQueue.prototype, {

	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },

	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        callbacks.length === contexts.length,
	        'Mismatched list of contexts in callback queue'
	      ) : invariant(callbacks.length === contexts.length));
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0, l = callbacks.length; i < l; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },

	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function() {
	    this._callbacks = null;
	    this._contexts = null;
	  },

	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function() {
	    this.reset();
	  }

	});

	PooledClass.addPoolingTo(CallbackQueue);

	module.exports = CallbackQueue;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,

	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,

	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function(object, objectName, methodNames) {
	    if ("production" !== process.env.NODE_ENV) {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(
	          objectName,
	          methodNames[key],
	          object[key]
	        );
	      }
	    }
	  },

	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function(objName, fnName, func) {
	    if ("production" !== process.env.NODE_ENV) {
	      var measuredFunc = null;
	      var wrapper = function() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },

	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};

	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}

	module.exports = ReactPerf;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */

	'use strict';

	var ReactRef = __webpack_require__(61);
	var ReactElementValidator = __webpack_require__(63);

	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}

	var ReactReconciler = {

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(
	        internalInstance._currentElement
	      );
	    }
	    transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function(internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },

	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function(
	    internalInstance, nextElement, transaction, context
	  ) {
	    var prevElement = internalInstance._currentElement;

	    if (nextElement === prevElement && nextElement._owner != null) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	      return;
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    var refsChanged = ReactRef.shouldUpdateRefs(
	      prevElement,
	      nextElement
	    );

	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }

	    internalInstance.receiveComponent(nextElement, transaction, context);

	    if (refsChanged) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },

	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(
	    internalInstance,
	    transaction
	  ) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }

	};

	module.exports = ReactReconciler;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */

	'use strict';

	var ReactOwner = __webpack_require__(62);

	var ReactRef = {};

	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}

	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}

	ReactRef.attachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};

	ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.

	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.

	  return (
	    nextElement._owner !== prevElement._owner ||
	    nextElement.ref !== prevElement.ref
	  );
	};

	ReactRef.detachRefs = function(instance, element) {
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};

	module.exports = ReactRef;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */

	'use strict';

	var invariant = __webpack_require__(38);

	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {

	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function(object) {
	    return !!(
	      (object &&
	      typeof object.attachRef === 'function' && typeof object.detachRef === 'function')
	    );
	  },

	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'addComponentAsRefTo(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to add a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    owner.attachRef(ref, component);
	  },

	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function(component, ref, owner) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactOwner.isValidOwner(owner),
	      'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. This ' +
	      'usually means that you\'re trying to remove a ref to a component that ' +
	      'doesn\'t have an owner (that is, was not created inside of another ' +
	      'component\'s `render` method). Try rendering this component inside of ' +
	      'a new top-level component which will hold the ref.'
	    ) : invariant(ReactOwner.isValidOwner(owner)));
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }

	};

	module.exports = ReactOwner;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactFragment = __webpack_require__(41);
	var ReactPropTypeLocations = __webpack_require__(64);
	var ReactPropTypeLocationNames = __webpack_require__(65);
	var ReactCurrentOwner = __webpack_require__(48);
	var ReactNativeComponent = __webpack_require__(66);

	var getIteratorFn = __webpack_require__(52);
	var invariant = __webpack_require__(38);
	var warning = __webpack_require__(46);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	var loggedTypeFailures = {};

	var NUMERIC_PROPERTY_REGEX = /^\d+$/;

	/**
	 * Gets the instance's name for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getName(instance) {
	  var publicInstance = instance && instance.getPublicInstance();
	  if (!publicInstance) {
	    return undefined;
	  }
	  var constructor = publicInstance.constructor;
	  if (!constructor) {
	    return undefined;
	  }
	  return constructor.displayName || constructor.name || undefined;
	}

	/**
	 * Gets the current owner's displayName for use in warnings.
	 *
	 * @internal
	 * @return {?string} Display name or undefined
	 */
	function getCurrentOwnerDisplayName() {
	  var current = ReactCurrentOwner.current;
	  return (
	    current && getName(current) || undefined
	  );
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  warnAndMonitorForKeyUse(
	    'Each child in an array or iterator should have a unique "key" prop.',
	    element,
	    parentType
	  );
	}

	/**
	 * Warn if the key is being defined as an object property but has an incorrect
	 * value.
	 *
	 * @internal
	 * @param {string} name Property name of the key.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validatePropertyKey(name, element, parentType) {
	  if (!NUMERIC_PROPERTY_REGEX.test(name)) {
	    return;
	  }
	  warnAndMonitorForKeyUse(
	    'Child objects should have non-numeric keys so ordering is preserved.',
	    element,
	    parentType
	  );
	}

	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} message The base warning that gets output.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function warnAndMonitorForKeyUse(message, element, parentType) {
	  var ownerName = getCurrentOwnerDisplayName();
	  var parentName = typeof parentType === 'string' ?
	    parentType : parentType.displayName || parentType.name;

	  var useName = ownerName || parentName;
	  var memoizer = ownerHasKeyUseWarning[message] || (
	    (ownerHasKeyUseWarning[message] = {})
	  );
	  if (memoizer.hasOwnProperty(useName)) {
	    return;
	  }
	  memoizer[useName] = true;

	  var parentOrOwnerAddendum =
	    ownerName ? (" Check the render method of " + ownerName + ".") :
	    parentName ? (" Check the React.render call using <" + parentName + ">.") :
	    '';

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwnerAddendum = '';
	  if (element &&
	      element._owner &&
	      element._owner !== ReactCurrentOwner.current) {
	    // Name of the component that originally created this child.
	    var childOwnerName = getName(element._owner);

	    childOwnerAddendum = (" It was passed a child from " + childOwnerName + ".");
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    message + '%s%s See https://fb.me/react-warning-keys for more information.',
	    parentOrOwnerAddendum,
	    childOwnerAddendum
	  ) : null);
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    node._store.validated = true;
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    } else if (typeof node === 'object') {
	      var fragment = ReactFragment.extractIfFragment(node);
	      for (var key in fragment) {
	        if (fragment.hasOwnProperty(key)) {
	          validatePropertyKey(key, fragment[key], parentType);
	        }
	      }
	    }
	  }
	}

	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        ("production" !== process.env.NODE_ENV ? invariant(
	          typeof propTypes[propName] === 'function',
	          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	          'React.PropTypes.',
	          componentName || 'React class',
	          ReactPropTypeLocationNames[location],
	          propName
	        ) : invariant(typeof propTypes[propName] === 'function'));
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var addendum = getDeclarationErrorAddendum(this);
	        ("production" !== process.env.NODE_ENV ? warning(false, 'Failed propType: %s%s', error.message, addendum) : null);
	      }
	    }
	  }
	}

	var warnedPropsMutations = {};

	/**
	 * Warn about mutating props when setting `propName` on `element`.
	 *
	 * @param {string} propName The string key within props that was set
	 * @param {ReactElement} element
	 */
	function warnForPropsMutation(propName, element) {
	  var type = element.type;
	  var elementName = typeof type === 'string' ? type : type.displayName;
	  var ownerName = element._owner ?
	    element._owner.getPublicInstance().constructor.displayName : null;

	  var warningKey = propName + '|' + elementName + '|' + ownerName;
	  if (warnedPropsMutations.hasOwnProperty(warningKey)) {
	    return;
	  }
	  warnedPropsMutations[warningKey] = true;

	  var elementInfo = '';
	  if (elementName) {
	    elementInfo = ' <' + elementName + ' />';
	  }
	  var ownerInfo = '';
	  if (ownerName) {
	    ownerInfo = ' The element was created by ' + ownerName + '.';
	  }

	  ("production" !== process.env.NODE_ENV ? warning(
	    false,
	    'Don\'t set .props.%s of the React component%s. Instead, specify the ' +
	    'correct value when initially creating the element or use ' +
	    'React.cloneElement to make a new element with updated props.%s',
	    propName,
	    elementInfo,
	    ownerInfo
	  ) : null);
	}

	// Inline Object.is polyfill
	function is(a, b) {
	  if (a !== a) {
	    // NaN
	    return b !== b;
	  }
	  if (a === 0 && b === 0) {
	    // +-0
	    return 1 / a === 1 / b;
	  }
	  return a === b;
	}

	/**
	 * Given an element, check if its props have been mutated since element
	 * creation (or the last call to this function). In particular, check if any
	 * new props have been added, which we can't directly catch by defining warning
	 * properties on the props object.
	 *
	 * @param {ReactElement} element
	 */
	function checkAndWarnForMutatedProps(element) {
	  if (!element._store) {
	    // Element was created using `new ReactElement` directly or with
	    // `ReactElement.createElement`; skip mutation checking
	    return;
	  }

	  var originalProps = element._store.originalProps;
	  var props = element.props;

	  for (var propName in props) {
	    if (props.hasOwnProperty(propName)) {
	      if (!originalProps.hasOwnProperty(propName) ||
	          !is(originalProps[propName], props[propName])) {
	        warnForPropsMutation(propName, element);

	        // Copy over the new value so that the two props objects match again
	        originalProps[propName] = props[propName];
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  if (element.type == null) {
	    // This has already warned. Don't throw.
	    return;
	  }
	  // Extract the component class from the element. Converts string types
	  // to a composite class which may have propTypes.
	  // TODO: Validating a string's propTypes is not decoupled from the
	  // rendering target which is problematic.
	  var componentClass = ReactNativeComponent.getComponentClassForElement(
	    element
	  );
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(
	      name,
	      componentClass.propTypes,
	      element.props,
	      ReactPropTypeLocations.prop
	    );
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    ("production" !== process.env.NODE_ENV ? warning(
	      componentClass.getDefaultProps.isReactClassApproved,
	      'getDefaultProps is only used on classic React.createClass ' +
	      'definitions. Use a static property named `defaultProps` instead.'
	    ) : null);
	  }
	}

	var ReactElementValidator = {

	  checkAndWarnForMutatedProps: checkAndWarnForMutatedProps,

	  createElement: function(type, props, children) {
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    ("production" !== process.env.NODE_ENV ? warning(
	      type != null,
	      'React.createElement: type should not be null or undefined. It should ' +
	        'be a string (for DOM elements) or a ReactClass (for composite ' +
	        'components).'
	    ) : null);

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], type);
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(
	      null,
	      type
	    );
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(
	          validatedFactory,
	          'type',
	          {
	            enumerable: false,
	            get: function() {
	              ("production" !== process.env.NODE_ENV ? warning(
	                false,
	                'Factory.type is deprecated. Access the class directly ' +
	                'before passing it to createFactory.'
	              ) : null);
	              Object.defineProperty(this, 'type', {
	                value: type
	              });
	              return type;
	            }
	          }
	        );
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }


	    return validatedFactory;
	  },

	  cloneElement: function(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */

	'use strict';

	var keyMirror = __webpack_require__(37);

	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});

	module.exports = ReactPropTypeLocations;


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if ("production" !== process.env.NODE_ENV) {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */

	'use strict';

	var assign = __webpack_require__(44);
	var invariant = __webpack_require__(38);

	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags
	var tagToComponentClass = {};
	var textComponentClass = null;

	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function(componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  },
	  // Temporary hack since we expect DOM refs to behave like composites,
	  // for this release.
	  injectAutoWrapper: function(wrapperFactory) {
	    autoGenerateWrapperClass = wrapperFactory;
	  }
	};

	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}

	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    genericComponentClass,
	    'There is no registered component for the tag %s',
	    element.type
	  ) : invariant(genericComponentClass));
	  return new genericComponentClass(element.type, element.props);
	}

	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}

	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}

	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};

	module.exports = ReactNativeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */

	'use strict';

	var invariant = __webpack_require__(38);

	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (!this.wrapperInitData) {
	      this.wrapperInitData = [];
	    } else {
	      this.wrapperInitData.length = 0;
	    }
	    this._isInTransaction = false;
	  },

	  _isInTransaction: false,

	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,

	  isInTransaction: function() {
	    return !!this._isInTransaction;
	  },

	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} args... Arguments to pass to the method (optional).
	   *                           Helps prevent need to bind in many cases.
	   * @return Return value from `method`.
	   */
	  perform: function(method, scope, a, b, c, d, e, f) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !this.isInTransaction(),
	      'Transaction.perform(...): Cannot initialize a transaction when there ' +
	      'is already an outstanding transaction.'
	    ) : invariant(!this.isInTransaction()));
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {
	          }
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },

	  initializeAll: function(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ?
	          wrapper.initialize.call(this) :
	          null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {
	          }
	        }
	      }
	    }
	  },

	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function(startIndex) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      this.isInTransaction(),
	      'Transaction.closeAll(): Cannot close transaction when none are open.'
	    ) : invariant(this.isInTransaction()));
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {
	          }
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};

	var Transaction = {

	  Mixin: Mixin,

	  /**
	   * Token to look for to determine if an error occured.
	   */
	  OBSERVED_ERROR: {}

	};

	module.exports = Transaction;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */

	'use strict';

	var ReactComponent = __webpack_require__(53);
	var ReactCurrentOwner = __webpack_require__(48);
	var ReactElement = __webpack_require__(42);
	var ReactErrorUtils = __webpack_require__(69);
	var ReactInstanceMap = __webpack_require__(56);
	var ReactLifeCycle = __webpack_require__(55);
	var ReactPropTypeLocations = __webpack_require__(64);
	var ReactPropTypeLocationNames = __webpack_require__(65);
	var ReactUpdateQueue = __webpack_require__(54);

	var assign = __webpack_require__(44);
	var invariant = __webpack_require__(38);
	var keyMirror = __webpack_require__(37);
	var keyOf = __webpack_require__(70);
	var warning = __webpack_require__(46);

	var MIXINS_KEY = keyOf({mixins: null});

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,



	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,



	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function(Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function(Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function(Constructor, childContextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        childContextTypes,
	        ReactPropTypeLocations.childContext
	      );
	    }
	    Constructor.childContextTypes = assign(
	      {},
	      Constructor.childContextTypes,
	      childContextTypes
	    );
	  },
	  contextTypes: function(Constructor, contextTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        contextTypes,
	        ReactPropTypeLocations.context
	      );
	    }
	    Constructor.contextTypes = assign(
	      {},
	      Constructor.contextTypes,
	      contextTypes
	    );
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function(Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(
	        Constructor.getDefaultProps,
	        getDefaultProps
	      );
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function(Constructor, propTypes) {
	    if ("production" !== process.env.NODE_ENV) {
	      validateTypeDef(
	        Constructor,
	        propTypes,
	        ReactPropTypeLocations.prop
	      );
	    }
	    Constructor.propTypes = assign(
	      {},
	      Constructor.propTypes,
	      propTypes
	    );
	  },
	  statics: function(Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  }
	};

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof typeDef[propName] === 'function',
	        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	        'React.PropTypes.',
	        Constructor.displayName || 'ReactClass',
	        ReactPropTypeLocationNames[location],
	        propName
	      ) : null);
	    }
	  }
	}

	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
	    ReactClassInterface[name] :
	    null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.OVERRIDE_BASE,
	      'ReactClassInterface: You are attempting to override ' +
	      '`%s` from your class specification. Ensure that your method names ' +
	      'do not overlap with React methods.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.OVERRIDE_BASE));
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      specPolicy === SpecPolicy.DEFINE_MANY ||
	      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
	      'ReactClassInterface: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be due ' +
	      'to a mixin.',
	      name
	    ) : invariant(specPolicy === SpecPolicy.DEFINE_MANY ||
	    specPolicy === SpecPolicy.DEFINE_MANY_MERGED));
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof spec !== 'function',
	    'ReactClass: You\'re attempting to ' +
	    'use a component class as a mixin. Instead, just use a regular object.'
	  ) : invariant(typeof spec !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !ReactElement.isValidElement(spec),
	    'ReactClass: You\'re attempting to ' +
	    'use a component as a mixin. Instead, just use a regular object.'
	  ) : invariant(!ReactElement.isValidElement(spec)));

	  var proto = Constructor.prototype;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above
	      continue;
	    }

	    var property = spec[name];
	    validateMethodOverride(proto, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod =
	        ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var markedDontBind = property && property.__reactDontBind;
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind =
	        isFunction &&
	        !isReactClassMethod &&
	        !isAlreadyDefined &&
	        !markedDontBind;

	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride
	          ("production" !== process.env.NODE_ENV ? invariant(
	            isReactClassMethod && (
	              (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	            ),
	            'ReactClass: Unexpected spec policy %s for key %s ' +
	            'when mixing in component specs.',
	            specPolicy,
	            name
	          ) : invariant(isReactClassMethod && (
	            (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)
	          )));

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if ("production" !== process.env.NODE_ENV) {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isReserved,
	      'ReactClass: You are attempting to define a reserved ' +
	      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	      'as an instance property instead; it will still be accessible on the ' +
	      'constructor.',
	      name
	    ) : invariant(!isReserved));

	    var isInherited = name in Constructor;
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !isInherited,
	      'ReactClass: You are attempting to define ' +
	      '`%s` on your component more than once. This conflict may be ' +
	      'due to a mixin.',
	      name
	    ) : invariant(!isInherited));
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    one && two && typeof one === 'object' && typeof two === 'object',
	    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	  ) : invariant(one && two && typeof one === 'object' && typeof two === 'object'));

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        one[key] === undefined,
	        'mergeIntoWithNoDuplicateKeys(): ' +
	        'Tried to merge two objects with the same key: `%s`. This conflict ' +
	        'may be due to a mixin; in particular, this may be caused by two ' +
	        'getInitialState() or getDefaultProps() methods returning objects ' +
	        'with clashing keys.',
	        key
	      ) : invariant(one[key] === undefined));
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if ("production" !== process.env.NODE_ENV) {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function(newThis ) {for (var args=[],$__0=1,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): React component methods may only be bound to the ' +
	          'component instance. See %s',
	          componentName
	        ) : null);
	      } else if (!args.length) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'bind(): You are binding a component method to the component. ' +
	          'React does this for you automatically in a high-performance ' +
	          'way, so you can safely remove this call. See %s',
	          componentName
	        ) : null);
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(
	        component,
	        ReactErrorUtils.guard(
	          method,
	          component.constructor.displayName + '.' + autoBindKey
	        )
	      );
	    }
	  }
	}

	var typeDeprecationDescriptor = {
	  enumerable: false,
	  get: function() {
	    var displayName = this.displayName || this.name || 'Component';
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      '%s.type is deprecated. Use %s directly to access the class.',
	      displayName,
	      displayName
	    ) : null);
	    Object.defineProperty(this, 'type', {
	      value: this
	    });
	    return this;
	  }
	};

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function(newState, callback) {
	    ReactUpdateQueue.enqueueReplaceState(this, newState);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function() {
	    if ("production" !== process.env.NODE_ENV) {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          owner._warnedAboutRefsInRender,
	          '%s is accessing isMounted inside its render() function. ' +
	          'render() should be a pure function of props and state. It should ' +
	          'never access something that requires stale data from the previous ' +
	          'render, such as refs. Move this logic to componentDidMount and ' +
	          'componentDidUpdate instead.',
	          owner.getName() || 'A component'
	        ) : null);
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(this);
	    return (
	      internalInstance &&
	      internalInstance !== ReactLifeCycle.currentlyMountingInstance
	    );
	  },

	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function(partialProps, callback) {
	    ReactUpdateQueue.enqueueSetProps(this, partialProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  },

	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function(newProps, callback) {
	    ReactUpdateQueue.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      ReactUpdateQueue.enqueueCallback(this, callback);
	    }
	  }
	};

	var ReactClassComponent = function() {};
	assign(
	  ReactClassComponent.prototype,
	  ReactComponent.prototype,
	  ReactClassMixin
	);

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function(spec) {
	    var Constructor = function(props, context) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	          'JSX instead. See: https://fb.me/react-legacyfactory'
	        ) : null);
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if ("production" !== process.env.NODE_ENV) {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' &&
	            this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;

	    injectedMixins.forEach(
	      mixSpecIntoComponent.bind(null, Constructor)
	    );

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    ) : invariant(Constructor.prototype.render));

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        spec.displayName || 'A component'
	      ) : null);
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    // Legacy hook
	    Constructor.type = Constructor;
	    if ("production" !== process.env.NODE_ENV) {
	      try {
	        Object.defineProperty(Constructor, 'type', typeDeprecationDescriptor);
	      } catch (x) {
	        // IE will fail on defineProperty (es5-shim/sham too)
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 69 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */

	"use strict";

	var ReactErrorUtils = {
	  /**
	   * Creates a guarded version of a function. This is supposed to make debugging
	   * of event handlers easier. To aid debugging with the browser's debugger,
	   * this currently simply returns the original function.
	   *
	   * @param {function} func Function to be executed
	   * @param {string} name The name of the guard
	   * @return {function}
	   */
	  guard: function(func, name) {
	    return func;
	  }
	};

	module.exports = ReactErrorUtils;


/***/ },
/* 70 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */

	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without loosing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};


	module.exports = keyOf;


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 * @typechecks static-only
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(63);

	var mapObject = __webpack_require__(72);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if ("production" !== process.env.NODE_ENV) {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOM = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',

	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'

	}, createDOMFactory);

	module.exports = ReactDOM;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 72 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */

	'use strict';

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}

	module.exports = mapObject;


/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */

	'use strict';

	var DOMPropertyOperations = __webpack_require__(74);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(78);
	var ReactDOMComponent = __webpack_require__(118);

	var assign = __webpack_require__(44);
	var escapeTextContentForBrowser = __webpack_require__(77);

	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function(props) {
	  // This constructor and its argument is currently used by mocks.
	};

	assign(ReactDOMTextComponent.prototype, {

	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function(text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;

	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },

	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    var escapedText = escapeTextContentForBrowser(this._stringText);

	    if (transaction.renderToStaticMarkup) {
	      // Normally we'd wrap this in a `span` for the reasons stated above, but
	      // since this is a situation where React won't take over (static pages),
	      // we can simply return the text as it is.
	      return escapedText;
	    }

	    return (
	      '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' +
	        escapedText +
	      '</span>'
	    );
	  },

	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        ReactDOMComponent.BackendIDOperations.updateTextContentByID(
	          this._rootNodeID,
	          nextStringText
	        );
	      }
	    }
	  },

	  unmountComponent: function() {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }

	});

	module.exports = ReactDOMTextComponent;


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(75);

	var quoteAttributeValueForBrowser = __webpack_require__(76);
	var warning = __webpack_require__(46);

	function shouldIgnoreValue(name, value) {
	  return value == null ||
	    (DOMProperty.hasBooleanValue[name] && !value) ||
	    (DOMProperty.hasNumericValue[name] && isNaN(value)) ||
	    (DOMProperty.hasPositiveNumericValue[name] && (value < 1)) ||
	    (DOMProperty.hasOverloadedBooleanValue[name] && value === false);
	}

	if ("production" !== process.env.NODE_ENV) {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};

	  var warnUnknownProperty = function(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
	        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }

	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();

	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = (
	      DOMProperty.isCustomAttribute(lowerCasedName) ?
	        lowerCasedName :
	      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
	        DOMProperty.getPossibleStandardName[lowerCasedName] :
	        null
	    );

	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    ("production" !== process.env.NODE_ENV ? warning(
	      standardName == null,
	      'Unknown DOM property %s. Did you mean %s?',
	      name,
	      standardName
	    ) : null);

	  };
	}

	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {

	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
	      quoteAttributeValueForBrowser(id);
	  },

	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function(name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      if (shouldIgnoreValue(name, value)) {
	        return '';
	      }
	      var attributeName = DOMProperty.getAttributeName[name];
	      if (DOMProperty.hasBooleanValue[name] ||
	          (DOMProperty.hasOverloadedBooleanValue[name] && value === true)) {
	        return attributeName;
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },

	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function(node, name, value) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(name, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        node.setAttribute(DOMProperty.getAttributeName[name], '' + value);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== ('' + value)) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        node.removeAttribute(name);
	      } else {
	        node.setAttribute(name, '' + value);
	      }
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  },

	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function(node, name) {
	    if (DOMProperty.isStandardName.hasOwnProperty(name) &&
	        DOMProperty.isStandardName[name]) {
	      var mutationMethod = DOMProperty.getMutationMethod[name];
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (DOMProperty.mustUseAttribute[name]) {
	        node.removeAttribute(DOMProperty.getAttributeName[name]);
	      } else {
	        var propName = DOMProperty.getPropertyName[name];
	        var defaultValue = DOMProperty.getDefaultValueForProperty(
	          node.nodeName,
	          propName
	        );
	        if (!DOMProperty.hasSideEffects[name] ||
	            ('' + node[propName]) !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if ("production" !== process.env.NODE_ENV) {
	      warnUnknownProperty(name);
	    }
	  }

	};

	module.exports = DOMPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */

	/*jslint bitwise: true */

	'use strict';

	var invariant = __webpack_require__(38);

	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}

	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,

	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function(domPropertyConfig) {
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};

	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(
	        domPropertyConfig.isCustomAttribute
	      );
	    }

	    for (var propName in Properties) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.isStandardName.hasOwnProperty(propName),
	        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
	        '\'%s\' which has already been injected. You may be accidentally ' +
	        'injecting the same DOM property config twice, or you may be ' +
	        'injecting two configs that have conflicting property names.',
	        propName
	      ) : invariant(!DOMProperty.isStandardName.hasOwnProperty(propName)));

	      DOMProperty.isStandardName[propName] = true;

	      var lowerCased = propName.toLowerCase();
	      DOMProperty.getPossibleStandardName[lowerCased] = propName;

	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        DOMProperty.getPossibleStandardName[attributeName] = propName;
	        DOMProperty.getAttributeName[propName] = attributeName;
	      } else {
	        DOMProperty.getAttributeName[propName] = lowerCased;
	      }

	      DOMProperty.getPropertyName[propName] =
	        DOMPropertyNames.hasOwnProperty(propName) ?
	          DOMPropertyNames[propName] :
	          propName;

	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        DOMProperty.getMutationMethod[propName] = DOMMutationMethods[propName];
	      } else {
	        DOMProperty.getMutationMethod[propName] = null;
	      }

	      var propConfig = Properties[propName];
	      DOMProperty.mustUseAttribute[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_ATTRIBUTE);
	      DOMProperty.mustUseProperty[propName] =
	        checkMask(propConfig, DOMPropertyInjection.MUST_USE_PROPERTY);
	      DOMProperty.hasSideEffects[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_SIDE_EFFECTS);
	      DOMProperty.hasBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_BOOLEAN_VALUE);
	      DOMProperty.hasNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_NUMERIC_VALUE);
	      DOMProperty.hasPositiveNumericValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_POSITIVE_NUMERIC_VALUE);
	      DOMProperty.hasOverloadedBooleanValue[propName] =
	        checkMask(propConfig, DOMPropertyInjection.HAS_OVERLOADED_BOOLEAN_VALUE);

	      ("production" !== process.env.NODE_ENV ? invariant(
	        !DOMProperty.mustUseAttribute[propName] ||
	          !DOMProperty.mustUseProperty[propName],
	        'DOMProperty: Cannot require using both attribute and property: %s',
	        propName
	      ) : invariant(!DOMProperty.mustUseAttribute[propName] ||
	        !DOMProperty.mustUseProperty[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        DOMProperty.mustUseProperty[propName] ||
	          !DOMProperty.hasSideEffects[propName],
	        'DOMProperty: Properties that have side effects must use property: %s',
	        propName
	      ) : invariant(DOMProperty.mustUseProperty[propName] ||
	        !DOMProperty.hasSideEffects[propName]));
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !!DOMProperty.hasBooleanValue[propName] +
	          !!DOMProperty.hasNumericValue[propName] +
	          !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1,
	        'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
	        'numeric value, but not a combination: %s',
	        propName
	      ) : invariant(!!DOMProperty.hasBooleanValue[propName] +
	        !!DOMProperty.hasNumericValue[propName] +
	        !!DOMProperty.hasOverloadedBooleanValue[propName] <= 1));
	    }
	  }
	};
	var defaultValueCache = {};

	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {

	  ID_ATTRIBUTE_NAME: 'data-reactid',

	  /**
	   * Checks whether a property name is a standard property.
	   * @type {Object}
	   */
	  isStandardName: {},

	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties.
	   * @type {Object}
	   */
	  getPossibleStandardName: {},

	  /**
	   * Mapping from normalized names to attribute names that differ. Attribute
	   * names are used when rendering markup or with `*Attribute()`.
	   * @type {Object}
	   */
	  getAttributeName: {},

	  /**
	   * Mapping from normalized names to properties on DOM node instances.
	   * (This includes properties that mutate due to external factors.)
	   * @type {Object}
	   */
	  getPropertyName: {},

	  /**
	   * Mapping from normalized names to mutation methods. This will only exist if
	   * mutation cannot be set simply by the property or `setAttribute()`.
	   * @type {Object}
	   */
	  getMutationMethod: {},

	  /**
	   * Whether the property must be accessed and mutated as an object property.
	   * @type {Object}
	   */
	  mustUseAttribute: {},

	  /**
	   * Whether the property must be accessed and mutated using `*Attribute()`.
	   * (This includes anything that fails `<propName> in <element>`.)
	   * @type {Object}
	   */
	  mustUseProperty: {},

	  /**
	   * Whether or not setting a value causes side effects such as triggering
	   * resources to be loaded or text selection changes. We must ensure that
	   * the value is only set if it has changed.
	   * @type {Object}
	   */
	  hasSideEffects: {},

	  /**
	   * Whether the property should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasBooleanValue: {},

	  /**
	   * Whether the property must be numeric or parse as a
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasNumericValue: {},

	  /**
	   * Whether the property must be positive numeric or parse as a positive
	   * numeric and should be removed when set to a falsey value.
	   * @type {Object}
	   */
	  hasPositiveNumericValue: {},

	  /**
	   * Whether the property can be used as a flag as well as with a value. Removed
	   * when strictly equal to false; present without a value when strictly equal
	   * to true; present with a value otherwise.
	   * @type {Object}
	   */
	  hasOverloadedBooleanValue: {},

	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],

	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },

	  injection: DOMPropertyInjection
	};

	module.exports = DOMProperty;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */

	'use strict';

	var escapeTextContentForBrowser = __webpack_require__(77);

	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}

	module.exports = quoteAttributeValueForBrowser;


/***/ },
/* 77 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */

	'use strict';

	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};

	var ESCAPE_REGEX = /[&><"']/g;

	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}

	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}

	module.exports = escapeTextContentForBrowser;


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */

	/*jslint evil: true */

	'use strict';

	var ReactDOMIDOperations = __webpack_require__(79);
	var ReactMount = __webpack_require__(98);

	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {

	  processChildrenUpdates:
	    ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,

	  replaceNodeWithMarkupByID:
	    ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }

	};

	module.exports = ReactComponentBrowserEnvironment;


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */

	/*jslint evil: true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(80);
	var DOMChildrenOperations = __webpack_require__(89);
	var DOMPropertyOperations = __webpack_require__(74);
	var ReactMount = __webpack_require__(98);
	var ReactPerf = __webpack_require__(59);

	var invariant = __webpack_require__(38);
	var setInnerHTML = __webpack_require__(97);

	/**
	 * Errors for properties that should not be updated with `updatePropertyById()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML:
	    '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};

	/**
	 * Operations used to process updates to DOM nodes. This is made injectable via
	 * `ReactDOMComponent.BackendIDOperations`.
	 */
	var ReactDOMIDOperations = {

	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));

	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },

	  /**
	   * Updates a DOM node to remove a property. This should only be used to remove
	   * DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A property name to remove, see `DOMProperty`.
	   * @internal
	   */
	  deletePropertyByID: function(id, name, value) {
	    var node = ReactMount.getNode(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !INVALID_PROPERTY_ERRORS.hasOwnProperty(name),
	      'updatePropertyByID(...): %s',
	      INVALID_PROPERTY_ERRORS[name]
	    ) : invariant(!INVALID_PROPERTY_ERRORS.hasOwnProperty(name)));
	    DOMPropertyOperations.deleteValueForProperty(node, name, value);
	  },

	  /**
	   * Updates a DOM node with new style values. If a value is specified as '',
	   * the corresponding style property will be unset.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {object} styles Mapping from styles to values.
	   * @internal
	   */
	  updateStylesByID: function(id, styles) {
	    var node = ReactMount.getNode(id);
	    CSSPropertyOperations.setValueForStyles(node, styles);
	  },

	  /**
	   * Updates a DOM node's innerHTML.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} html An HTML string.
	   * @internal
	   */
	  updateInnerHTMLByID: function(id, html) {
	    var node = ReactMount.getNode(id);
	    setInnerHTML(node, html);
	  },

	  /**
	   * Updates a DOM node's text content set by `props.content`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} content Text content.
	   * @internal
	   */
	  updateTextContentByID: function(id, content) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.updateTextContent(node, content);
	  },

	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function(id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },

	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function(updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};

	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  updatePropertyByID: 'updatePropertyByID',
	  deletePropertyByID: 'deletePropertyByID',
	  updateStylesByID: 'updateStylesByID',
	  updateInnerHTMLByID: 'updateInnerHTMLByID',
	  updateTextContentByID: 'updateTextContentByID',
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});

	module.exports = ReactDOMIDOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(81);
	var ExecutionEnvironment = __webpack_require__(82);

	var camelizeStyleName = __webpack_require__(83);
	var dangerousStyleValue = __webpack_require__(85);
	var hyphenateStyleName = __webpack_require__(86);
	var memoizeStringOnly = __webpack_require__(88);
	var warning = __webpack_require__(46);

	var processStyleName = memoizeStringOnly(function(styleName) {
	  return hyphenateStyleName(styleName);
	});

	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}

	if ("production" !== process.env.NODE_ENV) {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;

	  var warnedStyleNames = {};
	  var warnedStyleValues = {};

	  var warnHyphenatedStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported style property %s. Did you mean %s?',
	      name,
	      camelizeStyleName(name)
	    ) : null);
	  };

	  var warnBadVendoredStyleName = function(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }

	    warnedStyleNames[name] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Unsupported vendor-prefixed style property %s. Did you mean %s?',
	      name,
	      name.charAt(0).toUpperCase() + name.slice(1)
	    ) : null);
	  };

	  var warnStyleValueWithSemicolon = function(name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }

	    warnedStyleValues[value] = true;
	    ("production" !== process.env.NODE_ENV ? warning(
	      false,
	      'Style property values shouldn\'t contain a semicolon. ' +
	      'Try "%s: %s" instead.',
	      name,
	      value.replace(badStyleValueWithSemicolonPattern, '')
	    ) : null);
	  };

	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function(name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}

	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {

	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },

	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if ("production" !== process.env.NODE_ENV) {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }

	};

	module.exports = CSSPropertyOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */

	'use strict';

	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	var isUnitlessNumber = {
	  boxFlex: true,
	  boxFlexGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,

	  // SVG-related properties
	  fillOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};

	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}

	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function(prop) {
	  prefixes.forEach(function(prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});

	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundImage: true,
	    backgroundPosition: true,
	    backgroundRepeat: true,
	    backgroundColor: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  }
	};

	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};

	module.exports = CSSProperty;


/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */

	/*jslint evil: true */

	"use strict";

	var canUseDOM = !!(
	  (typeof window !== 'undefined' &&
	  window.document && window.document.createElement)
	);

	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {

	  canUseDOM: canUseDOM,

	  canUseWorkers: typeof Worker !== 'undefined',

	  canUseEventListeners:
	    canUseDOM && !!(window.addEventListener || window.attachEvent),

	  canUseViewport: canUseDOM && !!window.screen,

	  isInWorker: !canUseDOM // For now, this is true - might change in the future.

	};

	module.exports = ExecutionEnvironment;


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */

	"use strict";

	var camelize = __webpack_require__(84);

	var msPattern = /^-ms-/;

	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}

	module.exports = camelizeStyleName;


/***/ },
/* 84 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */

	var _hyphenPattern = /-(.)/g;

	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function(_, character) {
	    return character.toUpperCase();
	  });
	}

	module.exports = camelize;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */

	'use strict';

	var CSSProperty = __webpack_require__(81);

	var isUnitlessNumber = CSSProperty.isUnitlessNumber;

	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901

	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }

	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 ||
	      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }

	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}

	module.exports = dangerousStyleValue;


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */

	"use strict";

	var hyphenate = __webpack_require__(87);

	var msPattern = /^ms-/;

	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}

	module.exports = hyphenateStyleName;


/***/ },
/* 87 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */

	var _uppercasePattern = /([A-Z])/g;

	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}

	module.exports = hyphenate;


/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function(string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}

	module.exports = memoizeStringOnly;


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */

	'use strict';

	var Danger = __webpack_require__(90);
	var ReactMultiChildUpdateTypes = __webpack_require__(95);

	var setTextContent = __webpack_require__(96);
	var invariant = __webpack_require__(38);

	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	  parentNode.insertBefore(
	    childNode,
	    parentNode.childNodes[index] || null
	  );
	}

	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {

	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,

	  updateTextContent: setTextContent,

	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;

	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING ||
	          update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;

	        ("production" !== process.env.NODE_ENV ? invariant(
	          updatedChild,
	          'processUpdates(): Unable to find child %s of element. This ' +
	          'probably means the DOM was unexpectedly mutated (e.g., by the ' +
	          'browser), usually due to forgetting a <tbody> when using tables, ' +
	          'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' +
	          'in an <svg> parent. Try inspecting the child nodes of the element ' +
	          'with React ID `%s`.',
	          updatedIndex,
	          parentID
	        ) : invariant(updatedChild));

	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;

	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }

	    var renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);

	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }

	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(
	            update.parentNode,
	            renderedMarkup[update.markupIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(
	            update.parentNode,
	            initialChildren[update.parentID][update.fromIndex],
	            update.toIndex
	          );
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(
	            update.parentNode,
	            update.textContent
	          );
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }

	};

	module.exports = DOMChildrenOperations;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */

	/*jslint evil: true, sub: true */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(82);

	var createNodesFromMarkup = __webpack_require__(91);
	var emptyFunction = __webpack_require__(47);
	var getMarkupWrap = __webpack_require__(94);
	var invariant = __webpack_require__(38);

	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';

	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}

	var Danger = {

	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function(markupList) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
	      'thread. Make sure `window` and `document` are available globally ' +
	      'before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        markupList[i],
	        'dangerouslyRenderMarkup(...): Missing markup.'
	      ) : invariant(markupList[i]));
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];

	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];

	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(
	            OPEN_TAG_NAME_EXP,
	            // This index will be parsed back out below.
	            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
	          );
	        }
	      }

	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(
	        markupListByNodeName.join(''),
	        emptyFunction // Do nothing special with <script> tags.
	      );

	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute &&
	            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {

	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);

	          ("production" !== process.env.NODE_ENV ? invariant(
	            !resultList.hasOwnProperty(resultIndex),
	            'Danger: Assigning to an already-occupied result index.'
	          ) : invariant(!resultList.hasOwnProperty(resultIndex)));

	          resultList[resultIndex] = renderNode;

	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;

	        } else if ("production" !== process.env.NODE_ENV) {
	          console.error(
	            'Danger: Discarding unexpected node:',
	            renderNode
	          );
	        }
	      }
	    }

	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultListAssignmentCount === resultList.length,
	      'Danger: Did not assign to every index of resultList.'
	    ) : invariant(resultListAssignmentCount === resultList.length));

	    ("production" !== process.env.NODE_ENV ? invariant(
	      resultList.length === markupList.length,
	      'Danger: Expected markup to render %s nodes, but rendered %s.',
	      markupList.length,
	      resultList.length
	    ) : invariant(resultList.length === markupList.length));

	    return resultList;
	  },

	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function(oldChild, markup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ExecutionEnvironment.canUseDOM,
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
	      'worker thread. Make sure `window` and `document` are available ' +
	      'globally before requiring React when unit testing or use ' +
	      'React.renderToString for server rendering.'
	    ) : invariant(ExecutionEnvironment.canUseDOM));
	    ("production" !== process.env.NODE_ENV ? invariant(markup, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(markup));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      oldChild.tagName.toLowerCase() !== 'html',
	      'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
	      '<html> node. This is because browser quirks make this unreliable ' +
	      'and/or slow. If you want to render to the root you must use ' +
	      'server rendering. See React.renderToString().'
	    ) : invariant(oldChild.tagName.toLowerCase() !== 'html'));

	    var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }

	};

	module.exports = Danger;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */

	/*jslint evil: true, sub: true */

	var ExecutionEnvironment = __webpack_require__(82);

	var createArrayFromMixed = __webpack_require__(92);
	var getMarkupWrap = __webpack_require__(94);
	var invariant = __webpack_require__(38);

	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;

	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}

	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'createNodesFromMarkup dummy not initialized') : invariant(!!dummyNode));
	  var nodeName = getNodeName(markup);

	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];

	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }

	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      handleScript,
	      'createNodesFromMarkup(...): Unexpected <script> element rendered.'
	    ) : invariant(handleScript));
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }

	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}

	module.exports = createNodesFromMarkup;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */

	var toArray = __webpack_require__(93);

	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj &&
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    ('length' in obj) &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    (typeof obj.nodeType != 'number') &&
	    (
	      // a real array
	      (// HTMLCollection/NodeList
	      (Array.isArray(obj) ||
	      // arguments
	      ('callee' in obj) || 'item' in obj))
	    )
	  );
	}

	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}

	module.exports = createArrayFromMixed;


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */

	var invariant = __webpack_require__(38);

	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;

	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !Array.isArray(obj) &&
	    (typeof obj === 'object' || typeof obj === 'function'),
	    'toArray: Array-like object expected'
	  ) : invariant(!Array.isArray(obj) &&
	  (typeof obj === 'object' || typeof obj === 'function')));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    typeof length === 'number',
	    'toArray: Object needs a length property'
	  ) : invariant(typeof length === 'number'));

	  ("production" !== process.env.NODE_ENV ? invariant(
	    length === 0 ||
	    (length - 1) in obj,
	    'toArray: Object should have keys for indices'
	  ) : invariant(length === 0 ||
	  (length - 1) in obj));

	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }

	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}

	module.exports = toArray;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */

	var ExecutionEnvironment = __webpack_require__(82);

	var invariant = __webpack_require__(38);

	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode =
	  ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;

	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	var shouldWrap = {
	  // Force wrapping for SVG elements because if they get created inside a <div>,
	  // they will be initialized in the wrong namespace (and will not display).
	  'circle': true,
	  'clipPath': true,
	  'defs': true,
	  'ellipse': true,
	  'g': true,
	  'line': true,
	  'linearGradient': true,
	  'path': true,
	  'polygon': true,
	  'polyline': true,
	  'radialGradient': true,
	  'rect': true,
	  'stop': true,
	  'text': true
	};

	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

	var svgWrap = [1, '<svg>', '</svg>'];

	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],

	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],

	  'optgroup': selectWrap,
	  'option': selectWrap,

	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,

	  'td': trWrap,
	  'th': trWrap,

	  'circle': svgWrap,
	  'clipPath': svgWrap,
	  'defs': svgWrap,
	  'ellipse': svgWrap,
	  'g': svgWrap,
	  'line': svgWrap,
	  'linearGradient': svgWrap,
	  'path': svgWrap,
	  'polygon': svgWrap,
	  'polyline': svgWrap,
	  'radialGradient': svgWrap,
	  'rect': svgWrap,
	  'stop': svgWrap,
	  'text': svgWrap
	};

	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  ("production" !== process.env.NODE_ENV ? invariant(!!dummyNode, 'Markup wrapping node not initialized') : invariant(!!dummyNode));
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}


	module.exports = getMarkupWrap;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */

	'use strict';

	var keyMirror = __webpack_require__(37);

	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  TEXT_CONTENT: null
	});

	module.exports = ReactMultiChildUpdateTypes;


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(82);
	var escapeTextContentForBrowser = __webpack_require__(77);
	var setInnerHTML = __webpack_require__(97);

	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function(node, text) {
	  node.textContent = text;
	};

	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function(node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}

	module.exports = setTextContent;


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */

	/* globals MSApp */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(82);

	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;

	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function(node, html) {
	  node.innerHTML = html;
	};

	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function(node, html) {
	    MSApp.execUnsafeLocalFunction(function() {
	      node.innerHTML = html;
	    });
	  };
	}

	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html

	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }

	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) ||
	          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        node.innerHTML = '\uFEFF' + html;

	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}

	module.exports = setInnerHTML;


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */

	'use strict';

	var DOMProperty = __webpack_require__(75);
	var ReactBrowserEventEmitter = __webpack_require__(99);
	var ReactCurrentOwner = __webpack_require__(48);
	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(63);
	var ReactEmptyComponent = __webpack_require__(107);
	var ReactInstanceHandles = __webpack_require__(50);
	var ReactInstanceMap = __webpack_require__(56);
	var ReactMarkupChecksum = __webpack_require__(108);
	var ReactPerf = __webpack_require__(59);
	var ReactReconciler = __webpack_require__(60);
	var ReactUpdateQueue = __webpack_require__(54);
	var ReactUpdates = __webpack_require__(57);

	var emptyObject = __webpack_require__(45);
	var containsNode = __webpack_require__(110);
	var getReactRootElementInContainer = __webpack_require__(113);
	var instantiateReactComponent = __webpack_require__(114);
	var invariant = __webpack_require__(38);
	var setInnerHTML = __webpack_require__(97);
	var shouldUpdateReactComponent = __webpack_require__(117);
	var warning = __webpack_require__(46);

	var SEPARATOR = ReactInstanceHandles.SEPARATOR;

	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};

	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;

	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};

	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};

	if ("production" !== process.env.NODE_ENV) {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}

	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];

	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}

	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}

	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !isValid(cached, id),
	          'ReactMount: Two valid but unequal nodes with the same `%s`: %s',
	          ATTR_NAME, id
	        ) : invariant(!isValid(cached, id)));

	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }

	  return id;
	}

	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}

	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}

	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponent.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}

	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      internalGetID(node) === id,
	      'ReactMount: Unexpected modification of `%s`',
	      ATTR_NAME
	    ) : invariant(internalGetID(node) === id));

	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }

	  return false;
	}

	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}

	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}

	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(
	    targetID,
	    findDeepestCachedAncestorImpl
	  );

	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}

	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup) {
	  var markup = ReactReconciler.mountComponent(
	    componentInstance, rootID, transaction, emptyObject
	  );
	  componentInstance._isTopLevel = true;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup);
	}

	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(
	    componentInstance,
	    rootID,
	    container,
	    shouldReuseMarkup) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
	  transaction.perform(
	    mountComponentIntoNode,
	    null,
	    componentInstance,
	    rootID,
	    container,
	    transaction,
	    shouldReuseMarkup
	  );
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}

	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,

	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function(container, renderCallback) {
	    renderCallback();
	  },

	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function(
	      prevComponent,
	      nextElement,
	      container,
	      callback) {
	    if ("production" !== process.env.NODE_ENV) {
	      ReactElementValidator.checkAndWarnForMutatedProps(nextElement);
	    }

	    ReactMount.scrollMonitor(container, function() {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] =
	        getReactRootElementInContainer(container);
	    }

	    return prevComponent;
	  },

	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function(nextComponent, container) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      '_registerComponent(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();

	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },

	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function(
	    nextElement,
	    container,
	    shouldReuseMarkup
	  ) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      '_renderNewRootComponent(): Render methods should be a pure function ' +
	      'of props and state; triggering nested component updates from ' +
	      'render is not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(
	      componentInstance,
	      container
	    );

	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.

	    ReactUpdates.batchedUpdates(
	      batchedMountComponentIntoNode,
	      componentInstance,
	      reactRootID,
	      container,
	      shouldReuseMarkup
	    );

	    if ("production" !== process.env.NODE_ENV) {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] =
	        getReactRootElementInContainer(container);
	    }

	    return componentInstance;
	  },

	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function(nextElement, container, callback) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      ReactElement.isValidElement(nextElement),
	      'React.render(): Invalid component element.%s',
	      (
	        typeof nextElement === 'string' ?
	          ' Instead of passing an element string, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        typeof nextElement === 'function' ?
	          ' Instead of passing a component class, make sure to instantiate ' +
	          'it by passing it to React.createElement.' :
	        // Check if it quacks like an element
	        nextElement != null && nextElement.props !== undefined ?
	          ' This may be caused by unintentionally loading two independent ' +
	          'copies of React.' :
	          ''
	      )
	    ) : invariant(ReactElement.isValidElement(nextElement)));

	    var prevComponent = instancesByReactRootID[getReactRootID(container)];

	    if (prevComponent) {
	      var prevElement = prevComponent._currentElement;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        return ReactMount._updateRootComponent(
	          prevComponent,
	          nextElement,
	          container,
	          callback
	        ).getPublicInstance();
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }

	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup =
	      reactRootElement && ReactMount.isRenderedByReact(reactRootElement);

	    if ("production" !== process.env.NODE_ENV) {
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (ReactMount.isRenderedByReact(rootElementSibling)) {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'render(): Target node has markup rendered by React, but there ' +
	              'are unrelated nodes as well. This is most commonly caused by ' +
	              'white-space inserted around server-rendered markup.'
	            ) : null);
	            break;
	          }

	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }

	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent;

	    var component = ReactMount._renderNewRootComponent(
	      nextElement,
	      container,
	      shouldReuseMarkup
	    ).getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into the supplied `container`.
	   *
	   * @param {function} constructor React component constructor.
	   * @param {?object} props Initial props of the component instance.
	   * @param {DOMElement} container DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  constructAndRenderComponent: function(constructor, props, container) {
	    var element = ReactElement.createElement(constructor, props);
	    return ReactMount.render(element, container);
	  },

	  /**
	   * Constructs a component instance of `constructor` with `initialProps` and
	   * renders it into a container node identified by supplied `id`.
	   *
	   * @param {function} componentConstructor React component constructor
	   * @param {?object} props Initial props of the component instance.
	   * @param {string} id ID of the DOM element to render into.
	   * @return {ReactComponent} Component instance rendered in the container node.
	   */
	  constructAndRenderComponentByID: function(constructor, props, id) {
	    var domNode = document.getElementById(id);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      domNode,
	      'Tried to get element with id of "%s" but it is not present on the page.',
	      id
	    ) : invariant(domNode));
	    return ReactMount.constructAndRenderComponent(constructor, props, domNode);
	  },

	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },

	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    ("production" !== process.env.NODE_ENV ? warning(
	      ReactCurrentOwner.current == null,
	      'unmountComponentAtNode(): Render methods should be a pure function of ' +
	      'props and state; triggering nested component updates from render is ' +
	      'not allowed. If necessary, trigger nested updates in ' +
	      'componentDidUpdate.'
	    ) : null);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'unmountComponentAtNode(...): Target container is not a DOM element.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      return false;
	    }
	    ReactMount.unmountComponentFromNode(component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if ("production" !== process.env.NODE_ENV) {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },

	  /**
	   * Unmounts a component and removes it from the DOM.
	   *
	   * @param {ReactComponent} instance React component instance.
	   * @param {DOMElement} container DOM element to unmount from.
	   * @final
	   * @internal
	   * @see {ReactMount.unmountComponentAtNode}
	   */
	  unmountComponentFromNode: function(instance, container) {
	    ReactReconciler.unmountComponent(instance);

	    if (container.nodeType === DOC_NODE_TYPE) {
	      container = container.documentElement;
	    }

	    // http://jsperf.com/emptying-a-node
	    while (container.lastChild) {
	      container.removeChild(container.lastChild);
	    }
	  },

	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];

	    if ("production" !== process.env.NODE_ENV) {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          // Call internalGetID here because getID calls isValid which calls
	          // findReactContainerForID (this function).
	          internalGetID(rootElement) === reactRootID,
	          'ReactMount: Root element ID differed from reactRootID.'
	        ) : invariant(// Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID));

	        var containerChild = container.firstChild;
	        if (containerChild &&
	            reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'ReactMount: Root element has been removed from its original ' +
	            'container. New container:', rootElement.parentNode
	          ) : null);
	        }
	      }
	    }

	    return container;
	  },

	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },

	  /**
	   * True if the supplied `node` is rendered by React.
	   *
	   * @param {*} node DOM Element to check.
	   * @return {boolean} True if the DOM Element appears to be rendered by React.
	   * @internal
	   */
	  isRenderedByReact: function(node) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      return false;
	    }
	    var id = ReactMount.getID(node);
	    return id ? id.charAt(0) === SEPARATOR : false;
	  },

	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function(node) {
	    var current = node;
	    while (current && current.parentNode !== current) {
	      if (ReactMount.isRenderedByReact(current)) {
	        return current;
	      }
	      current = current.parentNode;
	    }
	    return null;
	  },

	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;

	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;

	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;

	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;

	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.

	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }

	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }

	        child = child.nextSibling;
	      }

	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;

	        return targetChild;
	      }
	    }

	    firstChildren.length = 0;

	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'findComponentRoot(..., %s): Unable to find element. This probably ' +
	      'means the DOM was unexpectedly mutated (e.g., by the browser), ' +
	      'usually due to forgetting a <tbody> when using tables, nesting tags ' +
	      'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' +
	      'parent. ' +
	      'Try inspecting the child nodes of the element with React ID `%s`.',
	      targetID,
	      ReactMount.getID(ancestorNode)
	    ) : invariant(false));
	  },

	  _mountImageIntoNode: function(markup, container, shouldReuseMarkup) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      container && (
	        (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	      ),
	      'mountComponentIntoNode(...): Target container is not valid.'
	    ) : invariant(container && (
	      (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE)
	    )));

	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	        );
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);

	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(
	          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
	          checksum
	        );

	        var diffIndex = firstDifferenceIndex(markup, rootMarkup);
	        var difference = ' (client) ' +
	          markup.substring(diffIndex - 20, diffIndex + 20) +
	          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);

	        ("production" !== process.env.NODE_ENV ? invariant(
	          container.nodeType !== DOC_NODE_TYPE,
	          'You\'re trying to render a component to the document using ' +
	          'server rendering but the checksum was invalid. This usually ' +
	          'means you rendered a different component type or props on ' +
	          'the client from the one on the server, or your render() ' +
	          'methods are impure. React cannot handle this case due to ' +
	          'cross-browser quirks by rendering at the document root. You ' +
	          'should look for environment dependent code in your components ' +
	          'and ensure the props are the same client and server side:\n%s',
	          difference
	        ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	        if ("production" !== process.env.NODE_ENV) {
	          ("production" !== process.env.NODE_ENV ? warning(
	            false,
	            'React attempted to reuse markup in a container but the ' +
	            'checksum was invalid. This generally means that you are ' +
	            'using server rendering and the markup generated on the ' +
	            'server was not what the client was expecting. React injected ' +
	            'new markup to compensate which works but you have lost many ' +
	            'of the benefits of server rendering. Instead, figure out ' +
	            'why the markup being generated is different on the client ' +
	            'or server:\n%s',
	            difference
	          ) : null);
	        }
	      }
	    }

	    ("production" !== process.env.NODE_ENV ? invariant(
	      container.nodeType !== DOC_NODE_TYPE,
	      'You\'re trying to render a component to the document but ' +
	        'you didn\'t use server rendering. We can\'t do this ' +
	        'without using server rendering due to cross-browser quirks. ' +
	        'See React.renderToString() for server rendering.'
	    ) : invariant(container.nodeType !== DOC_NODE_TYPE));

	    setInnerHTML(container, markup);
	  },

	  /**
	   * React ID utilities.
	   */

	  getReactRootID: getReactRootID,

	  getID: getID,

	  setID: setID,

	  getNode: getNode,

	  getNodeFromInstance: getNodeFromInstance,

	  purgeID: purgeID
	};

	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});

	module.exports = ReactMount;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var EventPluginHub = __webpack_require__(100);
	var EventPluginRegistry = __webpack_require__(101);
	var ReactEventEmitterMixin = __webpack_require__(104);
	var ViewportMetrics = __webpack_require__(105);

	var assign = __webpack_require__(44);
	var isEventSupported = __webpack_require__(106);

	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */

	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;

	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topBlur: 'blur',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topScroll: 'scroll',
	  topSelectionChange: 'selectionchange',
	  topTextInput: 'textInput',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topWheel: 'wheel'
	};

	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);

	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}

	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {

	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,

	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(
	        ReactBrowserEventEmitter.handleTopLevel
	      );
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },

	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },

	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function() {
	    return !!(
	      (ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled())
	    );
	  },

	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.
	      registrationNameDependencies[registrationName];

	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0, l = dependencies.length; i < l; i++) {
	      var dependency = dependencies[i];
	      if (!(
	            (isListening.hasOwnProperty(dependency) && isListening[dependency])
	          )) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'wheel',
	              mountAt
	            );
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'mousewheel',
	              mountAt
	            );
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topWheel,
	              'DOMMouseScroll',
	              mountAt
	            );
	          }
	        } else if (dependency === topLevelTypes.topScroll) {

	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              mountAt
	            );
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topScroll,
	              'scroll',
	              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
	            );
	          }
	        } else if (dependency === topLevelTypes.topFocus ||
	            dependency === topLevelTypes.topBlur) {

	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topFocus,
	              'focus',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	              topLevelTypes.topBlur,
	              'blur',
	              mountAt
	            );
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topFocus,
	              'focusin',
	              mountAt
	            );
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	              topLevelTypes.topBlur,
	              'focusout',
	              mountAt
	            );
	          }

	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	            dependency,
	            topEventMapping[dependency],
	            mountAt
	          );
	        }

	        isListening[dependency] = true;
	      }
	    }
	  },

	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
	      topLevelType,
	      handlerBaseName,
	      handle
	    );
	  },

	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function() {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },

	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginHub.registrationNameModules,

	  putListener: EventPluginHub.putListener,

	  getListener: EventPluginHub.getListener,

	  deleteListener: EventPluginHub.deleteListener,

	  deleteAllListeners: EventPluginHub.deleteAllListeners

	});

	module.exports = ReactBrowserEventEmitter;


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */

	'use strict';

	var EventPluginRegistry = __webpack_require__(101);
	var EventPluginUtils = __webpack_require__(35);

	var accumulateInto = __webpack_require__(102);
	var forEachAccumulated = __webpack_require__(103);
	var invariant = __webpack_require__(38);

	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};

	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;

	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @private
	 */
	var executeDispatchesAndRelease = function(event) {
	  if (event) {
	    var executeDispatch = EventPluginUtils.executeDispatch;
	    // Plugins can provide custom behavior when dispatching events.
	    var PluginModule = EventPluginRegistry.getPluginModuleForEvent(event);
	    if (PluginModule && PluginModule.executeDispatch) {
	      executeDispatch = PluginModule.executeDispatch;
	    }
	    EventPluginUtils.executeDispatchesInOrder(event, executeDispatch);

	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};

	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;

	function validateInstanceHandle() {
	  var valid =
	    InstanceHandle &&
	    InstanceHandle.traverseTwoPhase &&
	    InstanceHandle.traverseEnterLeave;
	  ("production" !== process.env.NODE_ENV ? invariant(
	    valid,
	    'InstanceHandle not injected before use!'
	  ) : invariant(valid));
	}

	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {

	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {

	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,

	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	    },

	    getInstanceHandle: function() {
	      if ("production" !== process.env.NODE_ENV) {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },

	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

	  },

	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,

	  registrationNameModules: EventPluginRegistry.registrationNameModules,

	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function(id, registrationName, listener) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !listener || typeof listener === 'function',
	      'Expected %s listener to be a function, instead got type %s',
	      registrationName, typeof listener
	    ) : invariant(!listener || typeof listener === 'function'));

	    var bankForRegistrationName =
	      listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	  },

	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },

	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },

	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function(id) {
	    for (var registrationName in listenerBank) {
	      delete listenerBank[registrationName][id];
	    }
	  },

	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0, l = plugins.length; i < l; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(
	          topLevelType,
	          topLevelTarget,
	          topLevelTargetID,
	          nativeEvent
	        );
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },

	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },

	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function() {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    forEachAccumulated(processingEventQueue, executeDispatchesAndRelease);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !eventQueue,
	      'processEventQueue(): Additional events were enqueued while processing ' +
	      'an event queue. Support for this has not yet been implemented.'
	    ) : invariant(!eventQueue));
	  },

	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function() {
	    listenerBank = {};
	  },

	  __getListenerBank: function() {
	    return listenerBank;
	  }

	};

	module.exports = EventPluginHub;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */

	'use strict';

	var invariant = __webpack_require__(38);

	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;

	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};

	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    ("production" !== process.env.NODE_ENV ? invariant(
	      pluginIndex > -1,
	      'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
	      'the plugin ordering, `%s`.',
	      pluginName
	    ) : invariant(pluginIndex > -1));
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      PluginModule.extractEvents,
	      'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
	      'method, but `%s` does not.',
	      pluginName
	    ) : invariant(PluginModule.extractEvents));
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        publishEventForPlugin(
	          publishedEvents[eventName],
	          PluginModule,
	          eventName
	        ),
	        'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.',
	        eventName,
	        pluginName
	      ) : invariant(publishEventForPlugin(
	        publishedEvents[eventName],
	        PluginModule,
	        eventName
	      )));
	    }
	  }
	}

	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName),
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'event name, `%s`.',
	    eventName
	  ) : invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName)));
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(
	          phasedRegistrationName,
	          PluginModule,
	          eventName
	        );
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(
	      dispatchConfig.registrationName,
	      PluginModule,
	      eventName
	    );
	    return true;
	  }
	  return false;
	}

	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    !EventPluginRegistry.registrationNameModules[registrationName],
	    'EventPluginHub: More than one plugin attempted to publish the same ' +
	    'registration name, `%s`.',
	    registrationName
	  ) : invariant(!EventPluginRegistry.registrationNameModules[registrationName]));
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] =
	    PluginModule.eventTypes[eventName].dependencies;
	}

	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {

	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],

	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},

	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},

	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},

	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function(InjectedEventPluginOrder) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      !EventPluginOrder,
	      'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
	      'once. You are likely trying to load more than one copy of React.'
	    ) : invariant(!EventPluginOrder));
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },

	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) ||
	          namesToPlugins[pluginName] !== PluginModule) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          !namesToPlugins[pluginName],
	          'EventPluginRegistry: Cannot inject two different event plugins ' +
	          'using the same name, `%s`.',
	          pluginName
	        ) : invariant(!namesToPlugins[pluginName]));
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },

	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[
	        dispatchConfig.registrationName
	      ] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[
	        dispatchConfig.phasedRegistrationNames[phase]
	      ];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },

	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;

	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }

	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }

	};

	module.exports = EventPluginRegistry;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */

	'use strict';

	var invariant = __webpack_require__(38);

	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */

	function accumulateInto(current, next) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    next != null,
	    'accumulateInto(...): Accumulated items must not be null or undefined.'
	  ) : invariant(next != null));
	  if (current == null) {
	    return next;
	  }

	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);

	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }

	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }

	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }

	  return [current, next];
	}

	module.exports = accumulateInto;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 103 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */

	'use strict';

	/**
	 * @param {array} an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	var forEachAccumulated = function(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};

	module.exports = forEachAccumulated;


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */

	'use strict';

	var EventPluginHub = __webpack_require__(100);

	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue();
	}

	var ReactEventEmitterMixin = {

	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var events = EventPluginHub.extractEvents(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent
	    );

	    runEventQueueInBatch(events);
	  }
	};

	module.exports = ReactEventEmitterMixin;


/***/ },
/* 105 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */

	'use strict';

	var ViewportMetrics = {

	  currentScrollLeft: 0,

	  currentScrollTop: 0,

	  refreshScrollValues: function(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }

	};

	module.exports = ViewportMetrics;


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(82);

	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature =
	    document.implementation &&
	    document.implementation.hasFeature &&
	    // always returns true in newer browsers as per the standard.
	    // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	    document.implementation.hasFeature('', '') !== true;
	}

	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM ||
	      capture && !('addEventListener' in document)) {
	    return false;
	  }

	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;

	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }

	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }

	  return isSupported;
	}

	module.exports = isEventSupported;


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(56);

	var invariant = __webpack_require__(38);

	var component;
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	var nullComponentIDsRegistry = {};

	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function(emptyComponent) {
	    component = ReactElement.createFactory(emptyComponent);
	  }
	};

	var ReactEmptyComponentType = function() {};
	ReactEmptyComponentType.prototype.componentDidMount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Make sure we run these methods in the correct order, we shouldn't
	  // need this check. We're going to assume if we're here it means we ran
	  // componentWillUnmount already so there is no internal instance (it gets
	  // removed as part of the unmounting process).
	  if (!internalInstance) {
	    return;
	  }
	  registerNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.componentWillUnmount = function() {
	  var internalInstance = ReactInstanceMap.get(this);
	  // TODO: Get rid of this check. See TODO in componentDidMount.
	  if (!internalInstance) {
	    return;
	  }
	  deregisterNullComponentID(internalInstance._rootNodeID);
	};
	ReactEmptyComponentType.prototype.render = function() {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    component,
	    'Trying to return null from a render, but no null placeholder component ' +
	    'was injected.'
	  ) : invariant(component));
	  return component();
	};

	var emptyElement = ReactElement.createElement(ReactEmptyComponentType);

	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}

	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}

	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}

	var ReactEmptyComponent = {
	  emptyElement: emptyElement,
	  injection: ReactEmptyComponentInjection,
	  isNullComponentID: isNullComponentID
	};

	module.exports = ReactEmptyComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */

	'use strict';

	var adler32 = __webpack_require__(109);

	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',

	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function(markup) {
	    var checksum = adler32(markup);
	    return markup.replace(
	      '>',
	      ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '">'
	    );
	  },

	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function(markup, element) {
	    var existingChecksum = element.getAttribute(
	      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
	    );
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};

	module.exports = ReactMarkupChecksum;


/***/ },
/* 109 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */

	/* jslint bitwise:true */

	'use strict';

	var MOD = 65521;

	// This is a clean-room implementation of adler32 designed for detecting
	// if markup is not what we expect it to be. It does not need to be
	// cryptographically strong, only reasonably good at detecting if markup
	// generated on the server is different than that on the client.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  for (var i = 0; i < data.length; i++) {
	    a = (a + data.charCodeAt(i)) % MOD;
	    b = (b + a) % MOD;
	  }
	  return a | (b << 16);
	}

	module.exports = adler32;


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */

	var isTextNode = __webpack_require__(111);

	/*jslint bitwise:true */

	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if (outerNode.contains) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}

	module.exports = containsNode;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */

	var isNode = __webpack_require__(112);

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}

	module.exports = isTextNode;


/***/ },
/* 112 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */

	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  return !!(object && (
	    ((typeof Node === 'function' ? object instanceof Node : typeof object === 'object' &&
	    typeof object.nodeType === 'number' &&
	    typeof object.nodeName === 'string'))
	  ));
	}

	module.exports = isNode;


/***/ },
/* 113 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getReactRootElementInContainer
	 */

	'use strict';

	var DOC_NODE_TYPE = 9;

	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 *                                           a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }

	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}

	module.exports = getReactRootElementInContainer;


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCompositeComponent = __webpack_require__(115);
	var ReactEmptyComponent = __webpack_require__(107);
	var ReactNativeComponent = __webpack_require__(66);

	var assign = __webpack_require__(44);
	var invariant = __webpack_require__(38);
	var warning = __webpack_require__(46);

	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function() { };
	assign(
	  ReactCompositeComponentWrapper.prototype,
	  ReactCompositeComponent.Mixin,
	  {
	    _instantiateReactComponent: instantiateReactComponent
	  }
	);

	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return (
	    typeof type === 'function' &&
	    typeof type.prototype !== 'undefined' &&
	    typeof type.prototype.mountComponent === 'function' &&
	    typeof type.prototype.receiveComponent === 'function'
	  );
	}

	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {*} parentCompositeType The composite type that resolved this.
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, parentCompositeType) {
	  var instance;

	  if (node === null || node === false) {
	    node = ReactEmptyComponent.emptyElement;
	  }

	  if (typeof node === 'object') {
	    var element = node;
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        element && (typeof element.type === 'function' ||
	                    typeof element.type === 'string'),
	        'Only functions or strings can be mounted as React components.'
	      ) : null);
	    }

	    // Special case string values
	    if (parentCompositeType === element.type &&
	        typeof element.type === 'string') {
	      // Avoid recursion if the wrapper renders itself.
	      instance = ReactNativeComponent.createInternalComponent(element);
	      // All native components are currently wrapped in a composite so we're
	      // safe to assume that this is what we should instantiate.
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // represenations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      false,
	      'Encountered invalid React node of type %s',
	      typeof node
	    ) : invariant(false));
	  }

	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof instance.construct === 'function' &&
	      typeof instance.mountComponent === 'function' &&
	      typeof instance.receiveComponent === 'function' &&
	      typeof instance.unmountComponent === 'function',
	      'Only React Components can be mounted.'
	    ) : null);
	  }

	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);

	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;

	  if ("production" !== process.env.NODE_ENV) {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }

	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if ("production" !== process.env.NODE_ENV) {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }

	  return instance;
	}

	module.exports = instantiateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(116);
	var ReactContext = __webpack_require__(43);
	var ReactCurrentOwner = __webpack_require__(48);
	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(63);
	var ReactInstanceMap = __webpack_require__(56);
	var ReactLifeCycle = __webpack_require__(55);
	var ReactNativeComponent = __webpack_require__(66);
	var ReactPerf = __webpack_require__(59);
	var ReactPropTypeLocations = __webpack_require__(64);
	var ReactPropTypeLocationNames = __webpack_require__(65);
	var ReactReconciler = __webpack_require__(60);
	var ReactUpdates = __webpack_require__(57);

	var assign = __webpack_require__(44);
	var emptyObject = __webpack_require__(45);
	var invariant = __webpack_require__(38);
	var shouldUpdateReactComponent = __webpack_require__(117);
	var warning = __webpack_require__(46);

	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */

	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;

	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {

	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function(element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;

	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    this._renderedComponent = null;

	    this._context = null;
	    this._mountOrder = 0;
	    this._isTopLevel = false;

	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },

	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;

	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(this._currentElement._context);

	    var Component = ReactNativeComponent.getComponentClassForElement(
	      this._currentElement
	    );

	    // Initialize the public class
	    var inst = new Component(publicProps, publicContext);

	    if ("production" !== process.env.NODE_ENV) {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      ("production" !== process.env.NODE_ENV ? warning(
	        inst.render != null,
	        '%s(...): No `render` method found on the returned component ' +
	        'instance: you may have forgotten to define `render` in your ' +
	        'component or you may have accidentally tried to render an element ' +
	        'whose type is a function that isn\'t a React component.',
	        Component.displayName || Component.name || 'Component'
	      ) : null);
	    }

	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;

	    this._instance = inst;

	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);

	    if ("production" !== process.env.NODE_ENV) {
	      this._warnIfContextsDiffer(this._currentElement._context, context);
	    }

	    if ("production" !== process.env.NODE_ENV) {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getInitialState ||
	        inst.getInitialState.isReactClassApproved,
	        'getInitialState was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Did you mean to define a state property instead?',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.getDefaultProps ||
	        inst.getDefaultProps.isReactClassApproved,
	        'getDefaultProps was defined on %s, a plain JavaScript class. ' +
	        'This is only supported for classes created using React.createClass. ' +
	        'Use a static property to define defaultProps instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.propTypes,
	        'propTypes was defined as an instance property on %s. Use a static ' +
	        'property to define propTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        !inst.contextTypes,
	        'contextTypes was defined as an instance property on %s. Use a ' +
	        'static property to define contextTypes instead.',
	        this.getName() || 'a component'
	      ) : null);
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof inst.componentShouldUpdate !== 'function',
	        '%s has a method called ' +
	        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	        'The name is phrased as a question because the function is ' +
	        'expected to return a value.',
	        (this.getName() || 'A component')
	      ) : null);
	    }

	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof initialState === 'object' && !Array.isArray(initialState),
	      '%s.state: must be set to an object or null',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(typeof initialState === 'object' && !Array.isArray(initialState)));

	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;

	    var childContext;
	    var renderedElement;

	    var previouslyMounting = ReactLifeCycle.currentlyMountingInstance;
	    ReactLifeCycle.currentlyMountingInstance = this;
	    try {
	      if (inst.componentWillMount) {
	        inst.componentWillMount();
	        // When mounting, calls to `setState` by `componentWillMount` will set
	        // `this._pendingStateQueue` without triggering a re-render.
	        if (this._pendingStateQueue) {
	          inst.state = this._processPendingState(inst.props, inst.context);
	        }
	      }

	      childContext = this._getValidatedChildContext(context);
	      renderedElement = this._renderValidatedComponent(childContext);
	    } finally {
	      ReactLifeCycle.currentlyMountingInstance = previouslyMounting;
	    }

	    this._renderedComponent = this._instantiateReactComponent(
	      renderedElement,
	      this._currentElement.type // The wrapping type
	    );

	    var markup = ReactReconciler.mountComponent(
	      this._renderedComponent,
	      rootID,
	      transaction,
	      this._mergeChildContext(context, childContext)
	    );
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }

	    return markup;
	  },

	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function() {
	    var inst = this._instance;

	    if (inst.componentWillUnmount) {
	      var previouslyUnmounting = ReactLifeCycle.currentlyUnmountingInstance;
	      ReactLifeCycle.currentlyUnmountingInstance = this;
	      try {
	        inst.componentWillUnmount();
	      } finally {
	        ReactLifeCycle.currentlyUnmountingInstance = previouslyUnmounting;
	      }
	    }

	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;

	    // Reset pending fields
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;

	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;

	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);

	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },

	  /**
	   * Schedule a partial update to the props. Only used for internal testing.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @internal
	   */
	  _setPropsInternal: function(partialProps, callback) {
	    // This is a deoptimized path. We optimize for always having an element.
	    // This creates an extra internal element.
	    var element = this._pendingElement || this._currentElement;
	    this._pendingElement = ReactElement.cloneAndReplaceProps(
	      element,
	      assign({}, element.props, partialProps)
	    );
	    ReactUpdates.enqueueUpdate(this, callback);
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function(context) {
	    var maskedContext = null;
	    // This really should be getting the component class for the element,
	    // but we know that we're not going to need it for built-ins.
	    if (typeof this._currentElement.type === 'string') {
	      return emptyObject;
	    }
	    var contextTypes = this._currentElement.type.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },

	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function(context) {
	    var maskedContext = this._maskContext(context);
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.contextTypes) {
	        this._checkPropTypes(
	          Component.contextTypes,
	          maskedContext,
	          ReactPropTypeLocations.context
	        );
	      }
	    }
	    return maskedContext;
	  },

	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _getValidatedChildContext: function(currentContext) {
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        typeof inst.constructor.childContextTypes === 'object',
	        '%s.getChildContext(): childContextTypes must be defined in order to ' +
	        'use getChildContext().',
	        this.getName() || 'ReactCompositeComponent'
	      ) : invariant(typeof inst.constructor.childContextTypes === 'object'));
	      if ("production" !== process.env.NODE_ENV) {
	        this._checkPropTypes(
	          inst.constructor.childContextTypes,
	          childContext,
	          ReactPropTypeLocations.childContext
	        );
	      }
	      for (var name in childContext) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          name in inst.constructor.childContextTypes,
	          '%s.getChildContext(): key "%s" is not defined in childContextTypes.',
	          this.getName() || 'ReactCompositeComponent',
	          name
	        ) : invariant(name in inst.constructor.childContextTypes));
	      }
	      return childContext;
	    }
	    return null;
	  },

	  _mergeChildContext: function(currentContext, childContext) {
	    if (childContext) {
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },

	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function(newProps) {
	    if ("production" !== process.env.NODE_ENV) {
	      var Component = ReactNativeComponent.getComponentClassForElement(
	        this._currentElement
	      );
	      if (Component.propTypes) {
	        this._checkPropTypes(
	          Component.propTypes,
	          newProps,
	          ReactPropTypeLocations.prop
	        );
	      }
	    }
	    return newProps;
	  },

	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          ("production" !== process.env.NODE_ENV ? invariant(
	            typeof propTypes[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually ' +
	            'from React.PropTypes.',
	            componentName || 'React class',
	            ReactPropTypeLocationNames[location],
	            propName
	          ) : invariant(typeof propTypes[propName] === 'function'));
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // React.render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);

	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Composite propType: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          } else {
	            ("production" !== process.env.NODE_ENV ? warning(
	              false,
	              'Failed Context Types: %s%s',
	              error.message,
	              addendum
	            ) : null);
	          }
	        }
	      }
	    }
	  },

	  receiveComponent: function(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;

	    this._pendingElement = null;

	    this.updateComponent(
	      transaction,
	      prevElement,
	      nextElement,
	      prevContext,
	      nextContext
	    );
	  },

	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(
	        this,
	        this._pendingElement || this._currentElement,
	        transaction,
	        this._context
	      );
	    }

	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      if ("production" !== process.env.NODE_ENV) {
	        ReactElementValidator.checkAndWarnForMutatedProps(
	          this._currentElement
	        );
	      }

	      this.updateComponent(
	        transaction,
	        this._currentElement,
	        this._currentElement,
	        this._context,
	        this._context
	      );
	    }
	  },

	  /**
	   * Compare two contexts, warning if they are different
	   * TODO: Remove this check when owner-context is removed
	   */
	   _warnIfContextsDiffer: function(ownerBasedContext, parentBasedContext) {
	    ownerBasedContext = this._maskContext(ownerBasedContext);
	    parentBasedContext = this._maskContext(parentBasedContext);
	    var parentKeys = Object.keys(parentBasedContext).sort();
	    var displayName = this.getName() || 'ReactCompositeComponent';
	    for (var i = 0; i < parentKeys.length; i++) {
	      var key = parentKeys[i];
	      ("production" !== process.env.NODE_ENV ? warning(
	        ownerBasedContext[key] === parentBasedContext[key],
	        'owner-based and parent-based contexts differ '  +
	        '(values: `%s` vs `%s`) for key (%s) while mounting %s ' +
	        '(see: http://fb.me/react-context-by-parent)',
	        ownerBasedContext[key],
	        parentBasedContext[key],
	        key,
	        displayName
	      ) : null);
	    }
	  },

	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(
	    transaction,
	    prevParentElement,
	    nextParentElement,
	    prevUnmaskedContext,
	    nextUnmaskedContext
	  ) {
	    var inst = this._instance;

	    var nextContext = inst.context;
	    var nextProps = inst.props;

	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement !== nextParentElement) {
	      nextContext = this._processContext(nextParentElement._context);
	      nextProps = this._processProps(nextParentElement.props);

	      if ("production" !== process.env.NODE_ENV) {
	        if (nextUnmaskedContext != null) {
	          this._warnIfContextsDiffer(
	            nextParentElement._context,
	            nextUnmaskedContext
	          );
	        }
	      }

	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.

	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }

	    var nextState = this._processPendingState(nextProps, nextContext);

	    var shouldUpdate =
	      this._pendingForceUpdate ||
	      !inst.shouldComponentUpdate ||
	      inst.shouldComponentUpdate(nextProps, nextState, nextContext);

	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        typeof shouldUpdate !== 'undefined',
	        '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
	        'boolean value. Make sure to return true or false.',
	        this.getName() || 'ReactCompositeComponent'
	      ) : null);
	    }

	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(
	        nextParentElement,
	        nextProps,
	        nextState,
	        nextContext,
	        transaction,
	        nextUnmaskedContext
	      );
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },

	  _processPendingState: function(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;

	    if (!queue) {
	      return inst.state;
	    }

	    if (replace && queue.length === 1) {
	      return queue[0];
	    }

	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(
	        nextState,
	        typeof partial === 'function' ?
	          partial.call(inst, nextState, props, context) :
	          partial
	      );
	    }

	    return nextState;
	  },

	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function(
	    nextElement,
	    nextProps,
	    nextState,
	    nextContext,
	    transaction,
	    unmaskedContext
	  ) {
	    var inst = this._instance;

	    var prevProps = inst.props;
	    var prevState = inst.state;
	    var prevContext = inst.context;

	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }

	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;

	    this._updateRenderedComponent(transaction, unmaskedContext);

	    if (inst.componentDidUpdate) {
	      transaction.getReactMountReady().enqueue(
	        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
	        inst
	      );
	    }
	  },

	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var childContext = this._getValidatedChildContext();
	    var nextRenderedElement = this._renderValidatedComponent(childContext);
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(
	        prevComponentInstance,
	        nextRenderedElement,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);

	      this._renderedComponent = this._instantiateReactComponent(
	        nextRenderedElement,
	        this._currentElement.type
	      );
	      var nextMarkup = ReactReconciler.mountComponent(
	        this._renderedComponent,
	        thisID,
	        transaction,
	        this._mergeChildContext(context, childContext)
	      );
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },

	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function(prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(
	      prevComponentID,
	      nextMarkup
	    );
	  },

	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function() {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if ("production" !== process.env.NODE_ENV) {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' &&
	          inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }

	    return renderedComponent;
	  },

	  /**
	   * @private
	   */
	  _renderValidatedComponent: function(childContext) {
	    var renderedComponent;
	    var previousContext = ReactContext.current;
	    ReactContext.current = this._mergeChildContext(
	      this._currentElement._context,
	      childContext
	    );
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent =
	        this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactContext.current = previousContext;
	      ReactCurrentOwner.current = null;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      // TODO: An `isValidNode` function would probably be more appropriate
	      renderedComponent === null || renderedComponent === false ||
	      ReactElement.isValidElement(renderedComponent),
	      '%s.render(): A valid ReactComponent must be returned. You may have ' +
	        'returned undefined, an array or some other invalid object.',
	      this.getName() || 'ReactCompositeComponent'
	    ) : invariant(// TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false ||
	    ReactElement.isValidElement(renderedComponent)));
	    return renderedComponent;
	  },

	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function(ref, component) {
	    var inst = this.getPublicInstance();
	    var refs = inst.refs === emptyObject ? (inst.refs = {}) : inst.refs;
	    refs[ref] = component.getPublicInstance();
	  },

	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },

	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return (
	      type.displayName || (constructor && constructor.displayName) ||
	      type.name || (constructor && constructor.name) ||
	      null
	    );
	  },

	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by React.render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function() {
	    return this._instance;
	  },

	  // Stub
	  _instantiateReactComponent: null

	};

	ReactPerf.measureMethods(
	  ReactCompositeComponentMixin,
	  'ReactCompositeComponent',
	  {
	    mountComponent: 'mountComponent',
	    updateComponent: 'updateComponent',
	    _renderValidatedComponent: '_renderValidatedComponent'
	  }
	);

	var ReactCompositeComponent = {

	  Mixin: ReactCompositeComponentMixin

	};

	module.exports = ReactCompositeComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */

	'use strict';

	var invariant = __webpack_require__(38);

	var injected = false;

	var ReactComponentEnvironment = {

	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,

	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,

	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,

	  injection: {
	    injectEnvironment: function(environment) {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        !injected,
	        'ReactCompositeComponent: injectEnvironment() can only be called once.'
	      ) : invariant(!injected));
	      ReactComponentEnvironment.unmountIDFromEnvironment =
	        environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID =
	        environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates =
	        environment.processChildrenUpdates;
	      injected = true;
	    }
	  }

	};

	module.exports = ReactComponentEnvironment;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */

	'use strict';

	var warning = __webpack_require__(46);

	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  if (prevElement != null && nextElement != null) {
	    var prevType = typeof prevElement;
	    var nextType = typeof nextElement;
	    if (prevType === 'string' || prevType === 'number') {
	      return (nextType === 'string' || nextType === 'number');
	    } else {
	      if (nextType === 'object' &&
	          prevElement.type === nextElement.type &&
	          prevElement.key === nextElement.key) {
	        var ownersMatch = prevElement._owner === nextElement._owner;
	        var prevName = null;
	        var nextName = null;
	        var nextDisplayName = null;
	        if ("production" !== process.env.NODE_ENV) {
	          if (!ownersMatch) {
	            if (prevElement._owner != null &&
	                prevElement._owner.getPublicInstance() != null &&
	                prevElement._owner.getPublicInstance().constructor != null) {
	              prevName =
	                prevElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement._owner != null &&
	                nextElement._owner.getPublicInstance() != null &&
	                nextElement._owner.getPublicInstance().constructor != null) {
	              nextName =
	                nextElement._owner.getPublicInstance().constructor.displayName;
	            }
	            if (nextElement.type != null &&
	                nextElement.type.displayName != null) {
	              nextDisplayName = nextElement.type.displayName;
	            }
	            if (nextElement.type != null && typeof nextElement.type === 'string') {
	              nextDisplayName = nextElement.type;
	            }
	            if (typeof nextElement.type !== 'string' ||
	                nextElement.type === 'input' ||
	                nextElement.type === 'textarea') {
	              if ((prevElement._owner != null &&
	                  prevElement._owner._isOwnerNecessary === false) ||
	                  (nextElement._owner != null &&
	                  nextElement._owner._isOwnerNecessary === false)) {
	                if (prevElement._owner != null) {
	                  prevElement._owner._isOwnerNecessary = true;
	                }
	                if (nextElement._owner != null) {
	                  nextElement._owner._isOwnerNecessary = true;
	                }
	                ("production" !== process.env.NODE_ENV ? warning(
	                  false,
	                  '<%s /> is being rendered by both %s and %s using the same ' +
	                  'key (%s) in the same place. Currently, this means that ' +
	                  'they don\'t preserve state. This behavior should be very ' +
	                  'rare so we\'re considering deprecating it. Please contact ' +
	                  'the React team and explain your use case so that we can ' +
	                  'take that into consideration.',
	                  nextDisplayName || 'Unknown Component',
	                  prevName || '[Unknown]',
	                  nextName || '[Unknown]',
	                  prevElement.key
	                ) : null);
	              }
	            }
	          }
	        }
	        return ownersMatch;
	      }
	    }
	  }
	  return false;
	}

	module.exports = shouldUpdateReactComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */

	/* global hasOwnProperty:true */

	'use strict';

	var CSSPropertyOperations = __webpack_require__(80);
	var DOMProperty = __webpack_require__(75);
	var DOMPropertyOperations = __webpack_require__(74);
	var ReactBrowserEventEmitter = __webpack_require__(99);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(78);
	var ReactMount = __webpack_require__(98);
	var ReactMultiChild = __webpack_require__(119);
	var ReactPerf = __webpack_require__(59);

	var assign = __webpack_require__(44);
	var escapeTextContentForBrowser = __webpack_require__(77);
	var invariant = __webpack_require__(38);
	var isEventSupported = __webpack_require__(106);
	var keyOf = __webpack_require__(70);
	var warning = __webpack_require__(46);

	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;

	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = {'string': true, 'number': true};

	var STYLE = keyOf({style: null});

	var ELEMENT_NODE_TYPE = 1;

	/**
	 * Optionally injectable operations for mutating the DOM
	 */
	var BackendIDOperations = null;

	/**
	 * @param {?object} props
	 */
	function assertValidProps(props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (props.dangerouslySetInnerHTML != null) {
	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.children == null,
	      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
	    ) : invariant(props.children == null));
	    ("production" !== process.env.NODE_ENV ? invariant(
	      typeof props.dangerouslySetInnerHTML === 'object' &&
	      '__html' in props.dangerouslySetInnerHTML,
	      '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
	      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
	      'for more information.'
	    ) : invariant(typeof props.dangerouslySetInnerHTML === 'object' &&
	    '__html' in props.dangerouslySetInnerHTML));
	  }
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      props.innerHTML == null,
	      'Directly setting property `innerHTML` is not permitted. ' +
	      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
	    ) : null);
	    ("production" !== process.env.NODE_ENV ? warning(
	      !props.contentEditable || props.children == null,
	      'A component is `contentEditable` and contains `children` managed by ' +
	      'React. It is now your responsibility to guarantee that none of ' +
	      'those nodes are unexpectedly modified or duplicated. This is ' +
	      'probably not intentional.'
	    ) : null);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    props.style == null || typeof props.style === 'object',
	    'The `style` prop expects a mapping from style properties to values, ' +
	    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
	    'using JSX.'
	  ) : invariant(props.style == null || typeof props.style === 'object'));
	}

	function putListener(id, registrationName, listener, transaction) {
	  if ("production" !== process.env.NODE_ENV) {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    ("production" !== process.env.NODE_ENV ? warning(
	      registrationName !== 'onScroll' || isEventSupported('scroll', true),
	      'This browser doesn\'t support the `onScroll` event'
	    ) : null);
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ?
	      container.ownerDocument :
	      container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getPutListenerQueue().enqueuePutListener(
	    id,
	    registrationName,
	    listener
	  );
	}

	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.

	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};

	// We accept any tag to be rendered but since this gets injected into abitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name

	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;

	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    ("production" !== process.env.NODE_ENV ? invariant(VALID_TAG_REGEX.test(tag), 'Invalid tag: %s', tag) : invariant(VALID_TAG_REGEX.test(tag)));
	    validatedTagCache[tag] = true;
	  }
	}

	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag;
	  this._renderedChildren = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	}

	ReactDOMComponent.displayName = 'ReactDOMComponent';

	ReactDOMComponent.Mixin = {

	  construct: function(element) {
	    this._currentElement = element;
	  },

	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} The computed markup.
	   */
	  mountComponent: function(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	    assertValidProps(this._currentElement.props);
	    var closeTag = omittedCloseTags[this._tag] ? '' : '</' + this._tag + '>';
	    return (
	      this._createOpenTagMarkupAndPutListeners(transaction) +
	      this._createContentMarkup(transaction, context) +
	      closeTag
	    );
	  },

	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function(transaction) {
	    var props = this._currentElement.props;
	    var ret = '<' + this._tag;

	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, propValue, transaction);
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup =
	          DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }

	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret + '>';
	    }

	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID + '>';
	  },

	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function(transaction, context) {
	    var prefix = '';
	    if (this._tag === 'listing' ||
	        this._tag === 'pre' ||
	        this._tag === 'textarea') {
	      // Add an initial newline because browsers ignore the first newline in
	      // a <listing>, <pre>, or <textarea> as an "authoring convenience" -- see
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody.
	      prefix = '\n';
	    }

	    var props = this._currentElement.props;

	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        return prefix + innerHTML.__html;
	      }
	    } else {
	      var contentToUse =
	        CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        return prefix + escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(
	          childrenToUse,
	          transaction,
	          context
	        );
	        return prefix + mountImages.join('');
	      }
	    }
	    return prefix;
	  },

	  receiveComponent: function(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },

	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function(transaction, prevElement, nextElement, context) {
	    assertValidProps(this._currentElement.props);
	    this._updateDOMProperties(prevElement.props, transaction);
	    this._updateDOMChildren(prevElement.props, transaction, context);
	  },

	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMProperties: function(lastProps, transaction) {
	    var nextProps = this._currentElement.props;
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) ||
	         !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        deleteListener(this._rootNodeID, propKey);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.deletePropertyByID(
	          this._rootNodeID,
	          propKey
	        );
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ?
	        this._previousStyleCopy :
	        lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) &&
	                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) &&
	                lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        putListener(this._rootNodeID, propKey, nextProp, transaction);
	      } else if (
	          DOMProperty.isStandardName[propKey] ||
	          DOMProperty.isCustomAttribute(propKey)) {
	        BackendIDOperations.updatePropertyByID(
	          this._rootNodeID,
	          propKey,
	          nextProp
	        );
	      }
	    }
	    if (styleUpdates) {
	      BackendIDOperations.updateStylesByID(
	        this._rootNodeID,
	        styleUpdates
	      );
	    }
	  },

	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {ReactReconcileTransaction} transaction
	   */
	  _updateDOMChildren: function(lastProps, transaction, context) {
	    var nextProps = this._currentElement.props;

	    var lastContent =
	      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent =
	      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;

	    var lastHtml =
	      lastProps.dangerouslySetInnerHTML &&
	      lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml =
	      nextProps.dangerouslySetInnerHTML &&
	      nextProps.dangerouslySetInnerHTML.__html;

	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;

	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }

	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        BackendIDOperations.updateInnerHTMLByID(
	          this._rootNodeID,
	          nextHtml
	        );
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },

	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function() {
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	  }

	};

	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});

	assign(
	  ReactDOMComponent.prototype,
	  ReactDOMComponent.Mixin,
	  ReactMultiChild.Mixin
	);

	ReactDOMComponent.injection = {
	  injectIDOperations: function(IDOperations) {
	    ReactDOMComponent.BackendIDOperations = BackendIDOperations = IDOperations;
	  }
	};

	module.exports = ReactDOMComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */

	'use strict';

	var ReactComponentEnvironment = __webpack_require__(116);
	var ReactMultiChildUpdateTypes = __webpack_require__(95);

	var ReactReconciler = __webpack_require__(60);
	var ReactChildReconciler = __webpack_require__(120);

	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;

	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];

	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];

	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    textContent: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}

	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    textContent: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}

	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    textContent: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}

	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(
	      updateQueue,
	      markupQueue
	    );
	    clearQueue();
	  }
	}

	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}

	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {

	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {

	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function(nestedChildren, transaction, context) {
	      var children = ReactChildReconciler.instantiateChildren(
	        nestedChildren, transaction, context
	      );
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(
	            child,
	            rootID,
	            transaction,
	            context
	          );
	          child._mountIndex = index;
	          mountImages.push(mountImage);
	          index++;
	        }
	      }
	      return mountImages;
	    },

	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },

	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function(nextNestedChildren, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildren, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }

	      }
	    },

	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildren Nested child maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function(nextNestedChildren, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = ReactChildReconciler.updateChildren(
	        prevChildren, nextNestedChildren, transaction, context
	      );
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChildByName(prevChild, name);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(
	            nextChild, name, nextIndex, transaction, context
	          );
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) &&
	            !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChildByName(prevChildren[name], name);
	        }
	      }
	    },

	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function() {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },

	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },

	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function(child, mountImage) {
	      enqueueMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },

	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },

	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },

	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function(
	      child,
	      name,
	      index,
	      transaction,
	      context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(
	        child,
	        rootID,
	        transaction,
	        context
	      );
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },

	    /**
	     * Unmounts a rendered child by name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @param {string} name Name of the child in `this._renderedChildren`.
	     * @private
	     */
	    _unmountChildByName: function(child, name) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }

	  }

	};

	module.exports = ReactMultiChild;


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */

	'use strict';

	var ReactReconciler = __webpack_require__(60);

	var flattenChildren = __webpack_require__(121);
	var instantiateReactComponent = __webpack_require__(114);
	var shouldUpdateReactComponent = __webpack_require__(117);

	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {

	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function(nestedChildNodes, transaction, context) {
	    var children = flattenChildren(nestedChildNodes);
	    for (var name in children) {
	      if (children.hasOwnProperty(name)) {
	        var child = children[name];
	        // The rendered children must be turned into instances as they're
	        // mounted.
	        var childInstance = instantiateReactComponent(child, null);
	        children[name] = childInstance;
	      }
	    }
	    return children;
	  },

	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextNestedChildNodes Nested child maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function(
	    prevChildren,
	    nextNestedChildNodes,
	    transaction,
	    context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    var nextChildren = flattenChildren(nextNestedChildNodes);
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(
	          prevChild, nextElement, transaction, context
	        );
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(
	          nextElement,
	          null
	        );
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) &&
	          !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },

	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function(renderedChildren) {
	    for (var name in renderedChildren) {
	      var renderedChild = renderedChildren[name];
	      ReactReconciler.unmountComponent(renderedChild);
	    }
	  }

	};

	module.exports = ReactChildReconciler;


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */

	'use strict';

	var traverseAllChildren = __webpack_require__(49);
	var warning = __webpack_require__(46);

	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = !result.hasOwnProperty(name);
	  if ("production" !== process.env.NODE_ENV) {
	    ("production" !== process.env.NODE_ENV ? warning(
	      keyUnique,
	      'flattenChildren(...): Encountered two children with the same key, ' +
	      '`%s`. Child keys must be unique; when two children share a key, only ' +
	      'the first child will be used.',
	      name
	    ) : null);
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}

	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}

	module.exports = flattenChildren;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */

	'use strict';

	var BeforeInputEventPlugin = __webpack_require__(123);
	var ChangeEventPlugin = __webpack_require__(131);
	var ClientReactRootIndex = __webpack_require__(133);
	var DefaultEventPluginOrder = __webpack_require__(134);
	var EnterLeaveEventPlugin = __webpack_require__(135);
	var ExecutionEnvironment = __webpack_require__(82);
	var HTMLDOMPropertyConfig = __webpack_require__(139);
	var MobileSafariClickEventPlugin = __webpack_require__(140);
	var ReactBrowserComponentMixin = __webpack_require__(141);
	var ReactClass = __webpack_require__(68);
	var ReactComponentBrowserEnvironment =
	  __webpack_require__(78);
	var ReactDefaultBatchingStrategy = __webpack_require__(143);
	var ReactDOMComponent = __webpack_require__(118);
	var ReactDOMButton = __webpack_require__(144);
	var ReactDOMForm = __webpack_require__(147);
	var ReactDOMImg = __webpack_require__(149);
	var ReactDOMIDOperations = __webpack_require__(79);
	var ReactDOMIframe = __webpack_require__(150);
	var ReactDOMInput = __webpack_require__(151);
	var ReactDOMOption = __webpack_require__(154);
	var ReactDOMSelect = __webpack_require__(155);
	var ReactDOMTextarea = __webpack_require__(156);
	var ReactDOMTextComponent = __webpack_require__(73);
	var ReactElement = __webpack_require__(42);
	var ReactEventListener = __webpack_require__(157);
	var ReactInjection = __webpack_require__(160);
	var ReactInstanceHandles = __webpack_require__(50);
	var ReactMount = __webpack_require__(98);
	var ReactReconcileTransaction = __webpack_require__(161);
	var SelectEventPlugin = __webpack_require__(167);
	var ServerReactRootIndex = __webpack_require__(169);
	var SimpleEventPlugin = __webpack_require__(170);
	var SVGDOMPropertyConfig = __webpack_require__(179);

	var createFullPageComponent = __webpack_require__(180);

	function autoGenerateWrapperClass(type) {
	  return ReactClass.createClass({
	    tagName: type.toUpperCase(),
	    render: function() {
	      return new ReactElement(
	        type,
	        null,
	        null,
	        null,
	        null,
	        this.props
	      );
	    }
	  });
	}

	function inject() {
	  ReactInjection.EventEmitter.injectReactEventListener(
	    ReactEventListener
	  );

	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);

	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    MobileSafariClickEventPlugin: MobileSafariClickEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });

	  ReactInjection.NativeComponent.injectGenericComponentClass(
	    ReactDOMComponent
	  );

	  ReactInjection.NativeComponent.injectTextComponentClass(
	    ReactDOMTextComponent
	  );

	  ReactInjection.NativeComponent.injectAutoWrapper(
	    autoGenerateWrapperClass
	  );

	  // This needs to happen before createFullPageComponent() otherwise the mixin
	  // won't be included.
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);

	  ReactInjection.NativeComponent.injectComponentClasses({
	    'button': ReactDOMButton,
	    'form': ReactDOMForm,
	    'iframe': ReactDOMIframe,
	    'img': ReactDOMImg,
	    'input': ReactDOMInput,
	    'option': ReactDOMOption,
	    'select': ReactDOMSelect,
	    'textarea': ReactDOMTextarea,

	    'html': createFullPageComponent('html'),
	    'head': createFullPageComponent('head'),
	    'body': createFullPageComponent('body')
	  });

	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);

	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');

	  ReactInjection.Updates.injectReconcileTransaction(
	    ReactReconcileTransaction
	  );
	  ReactInjection.Updates.injectBatchingStrategy(
	    ReactDefaultBatchingStrategy
	  );

	  ReactInjection.RootIndex.injectCreateReactRootIndex(
	    ExecutionEnvironment.canUseDOM ?
	      ClientReactRootIndex.createReactRootIndex :
	      ServerReactRootIndex.createReactRootIndex
	  );

	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	  ReactInjection.DOMComponent.injectIDOperations(ReactDOMIDOperations);

	  if ("production" !== process.env.NODE_ENV) {
	    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
	    if ((/[?&]react_perf\b/).test(url)) {
	      var ReactDefaultPerf = __webpack_require__(181);
	      ReactDefaultPerf.start();
	    }
	  }
	}

	module.exports = {
	  inject: inject
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var EventPropagators = __webpack_require__(124);
	var ExecutionEnvironment = __webpack_require__(82);
	var FallbackCompositionState = __webpack_require__(125);
	var SyntheticCompositionEvent = __webpack_require__(127);
	var SyntheticInputEvent = __webpack_require__(130);

	var keyOf = __webpack_require__(70);

	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;

	var canUseCompositionEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'CompositionEvent' in window
	);

	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}

	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = (
	  ExecutionEnvironment.canUseDOM &&
	  'TextEvent' in window &&
	  !documentMode &&
	  !isPresto()
	);

	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = (
	  ExecutionEnvironment.canUseDOM &&
	  (
	    (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11)
	  )
	);

	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (
	    typeof opera === 'object' &&
	    typeof opera.version === 'function' &&
	    parseInt(opera.version(), 10) <= 12
	  );
	}

	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

	var topLevelTypes = EventConstants.topLevelTypes;

	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBeforeInput: null}),
	      captured: keyOf({onBeforeInputCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topTextInput,
	      topLevelTypes.topPaste
	    ]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionEnd: null}),
	      captured: keyOf({onCompositionEndCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionEnd,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionStart: null}),
	      captured: keyOf({onCompositionStartCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionStart,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCompositionUpdate: null}),
	      captured: keyOf({onCompositionUpdateCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topCompositionUpdate,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyPress,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topMouseDown
	    ]
	  }
	};

	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;

	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (
	    (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	    // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	    !(nativeEvent.ctrlKey && nativeEvent.altKey)
	  );
	}


	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}

	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return (
	    topLevelType === topLevelTypes.topKeyDown &&
	    nativeEvent.keyCode === START_KEYCODE
	  );
	}

	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return (nativeEvent.keyCode !== START_KEYCODE);
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}

	// Track the current IME composition fallback object, if any.
	var currentComposition = null;

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var eventType;
	  var fallbackData;

	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }

	  if (!eventType) {
	    return null;
	  }

	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }

	  var event = SyntheticCompositionEvent.getPooled(
	    eventType,
	    topLevelTargetID,
	    nativeEvent
	  );

	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }

	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }

	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;

	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;

	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }

	      return chars;

	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}

	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (
	      topLevelType === topLevelTypes.topCompositionEnd ||
	      isFallbackCompositionEnd(topLevelType, nativeEvent)
	    ) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }

	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}

	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(
	  topLevelType,
	  topLevelTarget,
	  topLevelTargetID,
	  nativeEvent
	) {
	  var chars;

	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }

	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }

	  var event = SyntheticInputEvent.getPooled(
	    eventTypes.beforeInput,
	    topLevelTargetID,
	    nativeEvent
	  );

	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}

	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID,
	    nativeEvent
	  ) {
	    return [
	      extractCompositionEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      ),
	      extractBeforeInputEvent(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID,
	        nativeEvent
	      )
	    ];
	  }
	};

	module.exports = BeforeInputEventPlugin;


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var EventPluginHub = __webpack_require__(100);

	var accumulateInto = __webpack_require__(102);
	var forEachAccumulated = __webpack_require__(103);

	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;

	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName =
	    event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}

	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if ("production" !== process.env.NODE_ENV) {
	    if (!domID) {
	      throw new Error('Dispatching id must not be null');
	    }
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners =
	      accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}

	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We can not perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(
	      event.dispatchMarker,
	      accumulateDirectionalDispatches,
	      event
	    );
	  }
	}


	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners =
	        accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}

	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}

	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}

	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(
	    fromID,
	    toID,
	    accumulateDispatches,
	    leave,
	    enter
	  );
	}


	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}



	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};

	module.exports = EventPropagators;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(40);

	var assign = __webpack_require__(44);
	var getTextContentAccessor = __webpack_require__(126);

	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}

	assign(FallbackCompositionState.prototype, {
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },

	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }

	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;

	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }

	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }

	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});

	PooledClass.addPoolingTo(FallbackCompositionState);

	module.exports = FallbackCompositionState;


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(82);

	var contentKey = null;

	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ?
	      'textContent' :
	      'innerText';
	  }
	  return contentKey;
	}

	module.exports = getTextContentAccessor;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(128);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticCompositionEvent,
	  CompositionEventInterface
	);

	module.exports = SyntheticCompositionEvent;


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */

	'use strict';

	var PooledClass = __webpack_require__(40);

	var assign = __webpack_require__(44);
	var emptyFunction = __webpack_require__(47);
	var getEventTarget = __webpack_require__(129);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: getEventTarget,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};

	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;

	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      this[propName] = nativeEvent[propName];
	    }
	  }

	  var defaultPrevented = nativeEvent.defaultPrevented != null ?
	    nativeEvent.defaultPrevented :
	    nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}

	assign(SyntheticEvent.prototype, {

	  preventDefault: function() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },

	  stopPropagation: function() {
	    var event = this.nativeEvent;
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },

	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,

	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }

	});

	SyntheticEvent.Interface = EventInterface;

	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function(Class, Interface) {
	  var Super = this;

	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;

	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;

	  PooledClass.addPoolingTo(Class, PooledClass.threeArgumentPooler);
	};

	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.threeArgumentPooler);

	module.exports = SyntheticEvent;


/***/ },
/* 129 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}

	module.exports = getEventTarget;


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(128);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(
	  dispatchConfig,
	  dispatchMarker,
	  nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(
	  SyntheticInputEvent,
	  InputEventInterface
	);

	module.exports = SyntheticInputEvent;


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var EventPluginHub = __webpack_require__(100);
	var EventPropagators = __webpack_require__(124);
	var ExecutionEnvironment = __webpack_require__(82);
	var ReactUpdates = __webpack_require__(57);
	var SyntheticEvent = __webpack_require__(128);

	var isEventSupported = __webpack_require__(106);
	var isTextInputElement = __webpack_require__(132);
	var keyOf = __webpack_require__(70);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onChange: null}),
	      captured: keyOf({onChangeCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topChange,
	      topLevelTypes.topClick,
	      topLevelTypes.topFocus,
	      topLevelTypes.topInput,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topKeyUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;

	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  return (
	    elem.nodeName === 'SELECT' ||
	    (elem.nodeName === 'INPUT' && elem.type === 'file')
	  );
	}

	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (
	    (!('documentMode' in document) || document.documentMode > 8)
	  );
	}

	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(
	    eventTypes.change,
	    activeElementID,
	    nativeEvent
	  );
	  EventPropagators.accumulateTwoPhaseDispatches(event);

	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}

	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue();
	}

	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}

	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}

	function getTargetIDForChangeEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}


	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (
	    (!('documentMode' in document) || document.documentMode > 9)
	  );
	}

	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp =  {
	  get: function() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};

	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(
	    target.constructor.prototype,
	    'value'
	  );

	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}

	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }

	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);

	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}

	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;

	  manualDispatchChangeEvent(nativeEvent);
	}

	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}

	// For IE8 and IE9.
	function handleEventsForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}

	// For IE8 and IE9.
	function getTargetIDForInputEventIE(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange ||
	      topLevelType === topLevelTypes.topKeyUp ||
	      topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}


	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return (
	    elem.nodeName === 'INPUT' &&
	    (elem.type === 'checkbox' || elem.type === 'radio')
	  );
	}

	function getTargetIDForClickEvent(
	    topLevelType,
	    topLevelTarget,
	    topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}

	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }

	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(
	          eventTypes.change,
	          targetID,
	          nativeEvent
	        );
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }

	    if (handleEventFunc) {
	      handleEventFunc(
	        topLevelType,
	        topLevelTarget,
	        topLevelTargetID
	      );
	    }
	  }

	};

	module.exports = ChangeEventPlugin;


/***/ },
/* 132 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */

	'use strict';

	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};

	function isTextInputElement(elem) {
	  return elem && (
	    (elem.nodeName === 'INPUT' && supportedInputTypes[elem.type] || elem.nodeName === 'TEXTAREA')
	  );
	}

	module.exports = isTextInputElement;


/***/ },
/* 133 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */

	'use strict';

	var nextReactRootIndex = 0;

	var ClientReactRootIndex = {
	  createReactRootIndex: function() {
	    return nextReactRootIndex++;
	  }
	};

	module.exports = ClientReactRootIndex;


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */

	'use strict';

	var keyOf = __webpack_require__(70);

	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [
	  keyOf({ResponderEventPlugin: null}),
	  keyOf({SimpleEventPlugin: null}),
	  keyOf({TapEventPlugin: null}),
	  keyOf({EnterLeaveEventPlugin: null}),
	  keyOf({ChangeEventPlugin: null}),
	  keyOf({SelectEventPlugin: null}),
	  keyOf({BeforeInputEventPlugin: null}),
	  keyOf({AnalyticsEventPlugin: null}),
	  keyOf({MobileSafariClickEventPlugin: null})
	];

	module.exports = DefaultEventPluginOrder;


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var EventPropagators = __webpack_require__(124);
	var SyntheticMouseEvent = __webpack_require__(136);

	var ReactMount = __webpack_require__(98);
	var keyOf = __webpack_require__(70);

	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;

	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({onMouseEnter: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  },
	  mouseLeave: {
	    registrationName: keyOf({onMouseLeave: null}),
	    dependencies: [
	      topLevelTypes.topMouseOut,
	      topLevelTypes.topMouseOver
	    ]
	  }
	};

	var extractedEvents = [null, null];

	var EnterLeaveEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topMouseOver &&
	        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut &&
	        topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }

	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }

	    var from, to;
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      to =
	        getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement) ||
	        win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	    }

	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }

	    var fromID = from ? ReactMount.getID(from) : '';
	    var toID = to ? ReactMount.getID(to) : '';

	    var leave = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseLeave,
	      fromID,
	      nativeEvent
	    );
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;

	    var enter = SyntheticMouseEvent.getPooled(
	      eventTypes.mouseEnter,
	      toID,
	      nativeEvent
	    );
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;

	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);

	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;

	    return extractedEvents;
	  }

	};

	module.exports = EnterLeaveEventPlugin;


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(137);
	var ViewportMetrics = __webpack_require__(105);

	var getEventModifierState = __webpack_require__(138);

	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function(event) {
	    return event.relatedTarget || (
	      ((event.fromElement === event.srcElement ? event.toElement : event.fromElement))
	    );
	  },
	  // "Proprietary" Interface.
	  pageX: function(event) {
	    return 'pageX' in event ?
	      event.pageX :
	      event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function(event) {
	    return 'pageY' in event ?
	      event.pageY :
	      event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);

	module.exports = SyntheticMouseEvent;


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(128);

	var getEventTarget = __webpack_require__(129);

	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function(event) {
	    if (event.view) {
	      return event.view;
	    }

	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }

	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function(event) {
	    return event.detail || 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);

	module.exports = SyntheticUIEvent;


/***/ },
/* 138 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */

	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};

	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  /*jshint validthis:true */
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}

	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}

	module.exports = getEventModifierState;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(75);
	var ExecutionEnvironment = __webpack_require__(82);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE =
	  DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE =
	  DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;

	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = (
	    implementation &&
	    implementation.hasFeature &&
	    implementation.hasFeature(
	      'http://www.w3.org/TR/SVG11/feature#BasicStructure',
	      '1.1'
	    )
	  );
	}


	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(
	    /^(data|aria)-[a-z_][a-z\d_.\-]*$/
	  ),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusMixin
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,

	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: null,
	    autoCorrect: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // property is supported for OpenGraph in meta tags.
	    property: null,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoCapitalize: 'autocapitalize',
	    autoComplete: 'autocomplete',
	    autoCorrect: 'autocorrect',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};

	module.exports = HTMLDOMPropertyConfig;


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule MobileSafariClickEventPlugin
	 * @typechecks static-only
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);

	var emptyFunction = __webpack_require__(47);

	var topLevelTypes = EventConstants.topLevelTypes;

	/**
	 * Mobile Safari does not fire properly bubble click events on non-interactive
	 * elements, which means delegated click listeners do not fire. The workaround
	 * for this bug involves attaching an empty click listener on the target node.
	 *
	 * This particular plugin works around the bug by attaching an empty click
	 * listener on `touchstart` (which does fire on every element).
	 */
	var MobileSafariClickEventPlugin = {

	  eventTypes: null,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    if (topLevelType === topLevelTypes.topTouchStart) {
	      var target = nativeEvent.target;
	      if (target && !target.onclick) {
	        target.onclick = emptyFunction;
	      }
	    }
	  }

	};

	module.exports = MobileSafariClickEventPlugin;


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */

	'use strict';

	var findDOMNode = __webpack_require__(142);

	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function() {
	    return findDOMNode(this);
	  }
	};

	module.exports = ReactBrowserComponentMixin;


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(48);
	var ReactInstanceMap = __webpack_require__(56);
	var ReactMount = __webpack_require__(98);

	var invariant = __webpack_require__(38);
	var isNode = __webpack_require__(112);
	var warning = __webpack_require__(46);

	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if ("production" !== process.env.NODE_ENV) {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        owner._warnedAboutRefsInRender,
	        '%s is accessing getDOMNode or findDOMNode inside its render(). ' +
	        'render() should be a pure function of props and state. It should ' +
	        'never access something that requires stale data from the previous ' +
	        'render, such as refs. Move this logic to componentDidMount and ' +
	        'componentDidUpdate instead.',
	        owner.getName() || 'A component'
	      ) : null);
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (isNode(componentOrElement)) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  ("production" !== process.env.NODE_ENV ? invariant(
	    componentOrElement.render == null ||
	    typeof componentOrElement.render !== 'function',
	    'Component (with keys: %s) contains `render` method ' +
	    'but is not mounted in the DOM',
	    Object.keys(componentOrElement)
	  ) : invariant(componentOrElement.render == null ||
	  typeof componentOrElement.render !== 'function'));
	  ("production" !== process.env.NODE_ENV ? invariant(
	    false,
	    'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
	    Object.keys(componentOrElement)
	  ) : invariant(false));
	}

	module.exports = findDOMNode;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */

	'use strict';

	var ReactUpdates = __webpack_require__(57);
	var Transaction = __webpack_require__(67);

	var assign = __webpack_require__(44);
	var emptyFunction = __webpack_require__(47);

	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};

	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};

	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}

	assign(
	  ReactDefaultBatchingStrategyTransaction.prototype,
	  Transaction.Mixin,
	  {
	    getTransactionWrappers: function() {
	      return TRANSACTION_WRAPPERS;
	    }
	  }
	);

	var transaction = new ReactDefaultBatchingStrategyTransaction();

	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,

	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function(callback, a, b, c, d) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d);
	    } else {
	      transaction.perform(callback, null, a, b, c, d);
	    }
	  }
	};

	module.exports = ReactDefaultBatchingStrategy;


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(145);
	var ReactBrowserComponentMixin = __webpack_require__(141);
	var ReactClass = __webpack_require__(68);
	var ReactElement = __webpack_require__(42);

	var keyMirror = __webpack_require__(37);

	var button = ReactElement.createFactory('button');

	var mouseListenerNames = keyMirror({
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	});

	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = ReactClass.createClass({
	  displayName: 'ReactDOMButton',
	  tagName: 'BUTTON',

	  mixins: [AutoFocusMixin, ReactBrowserComponentMixin],

	  render: function() {
	    var props = {};

	    // Copy the props; except the mouse listeners if we're disabled
	    for (var key in this.props) {
	      if (this.props.hasOwnProperty(key) &&
	          (!this.props.disabled || !mouseListenerNames[key])) {
	        props[key] = this.props[key];
	      }
	    }

	    return button(props, this.props.children);
	  }

	});

	module.exports = ReactDOMButton;


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusMixin
	 * @typechecks static-only
	 */

	'use strict';

	var focusNode = __webpack_require__(146);

	var AutoFocusMixin = {
	  componentDidMount: function() {
	    if (this.props.autoFocus) {
	      focusNode(this.getDOMNode());
	    }
	  }
	};

	module.exports = AutoFocusMixin;


/***/ },
/* 146 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */

	"use strict";

	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch(e) {
	  }
	}

	module.exports = focusNode;


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMForm
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var LocalEventTrapMixin = __webpack_require__(148);
	var ReactBrowserComponentMixin = __webpack_require__(141);
	var ReactClass = __webpack_require__(68);
	var ReactElement = __webpack_require__(42);

	var form = ReactElement.createFactory('form');

	/**
	 * Since onSubmit doesn't bubble OR capture on the top level in IE8, we need
	 * to capture it on the <form> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <form> a
	 * composite component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMForm = ReactClass.createClass({
	  displayName: 'ReactDOMForm',
	  tagName: 'FORM',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    // TODO: Instead of using `ReactDOM` directly, we should use JSX. However,
	    // `jshint` fails to parse JSX so in order for linting to work in the open
	    // source repo, we need to just use `ReactDOM.form`.
	    return form(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit');
	  }
	});

	module.exports = ReactDOMForm;


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LocalEventTrapMixin
	 */

	'use strict';

	var ReactBrowserEventEmitter = __webpack_require__(99);

	var accumulateInto = __webpack_require__(102);
	var forEachAccumulated = __webpack_require__(103);
	var invariant = __webpack_require__(38);

	function remove(event) {
	  event.remove();
	}

	var LocalEventTrapMixin = {
	  trapBubbledEvent:function(topLevelType, handlerBaseName) {
	    ("production" !== process.env.NODE_ENV ? invariant(this.isMounted(), 'Must be mounted to trap events') : invariant(this.isMounted()));
	    // If a component renders to null or if another component fatals and causes
	    // the state of the tree to be corrupted, `node` here can be null.
	    var node = this.getDOMNode();
	    ("production" !== process.env.NODE_ENV ? invariant(
	      node,
	      'LocalEventTrapMixin.trapBubbledEvent(...): Requires node to be rendered.'
	    ) : invariant(node));
	    var listener = ReactBrowserEventEmitter.trapBubbledEvent(
	      topLevelType,
	      handlerBaseName,
	      node
	    );
	    this._localEventListeners =
	      accumulateInto(this._localEventListeners, listener);
	  },

	  // trapCapturedEvent would look nearly identical. We don't implement that
	  // method because it isn't currently needed.

	  componentWillUnmount:function() {
	    if (this._localEventListeners) {
	      forEachAccumulated(this._localEventListeners, remove);
	    }
	  }
	};

	module.exports = LocalEventTrapMixin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMImg
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var LocalEventTrapMixin = __webpack_require__(148);
	var ReactBrowserComponentMixin = __webpack_require__(141);
	var ReactClass = __webpack_require__(68);
	var ReactElement = __webpack_require__(42);

	var img = ReactElement.createFactory('img');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <img> element itself. There are lots of hacks we could do
	 * to accomplish this, but the most reliable is to make <img> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMImg = ReactClass.createClass({
	  displayName: 'ReactDOMImg',
	  tagName: 'IMG',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return img(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error');
	  }
	});

	module.exports = ReactDOMImg;


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIframe
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var LocalEventTrapMixin = __webpack_require__(148);
	var ReactBrowserComponentMixin = __webpack_require__(141);
	var ReactClass = __webpack_require__(68);
	var ReactElement = __webpack_require__(42);

	var iframe = ReactElement.createFactory('iframe');

	/**
	 * Since onLoad doesn't bubble OR capture on the top level in IE8, we need to
	 * capture it on the <iframe> element itself. There are lots of hacks we could
	 * do to accomplish this, but the most reliable is to make <iframe> a composite
	 * component and use `componentDidMount` to attach the event handlers.
	 */
	var ReactDOMIframe = ReactClass.createClass({
	  displayName: 'ReactDOMIframe',
	  tagName: 'IFRAME',

	  mixins: [ReactBrowserComponentMixin, LocalEventTrapMixin],

	  render: function() {
	    return iframe(this.props);
	  },

	  componentDidMount: function() {
	    this.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load');
	  }
	});

	module.exports = ReactDOMIframe;


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(145);
	var DOMPropertyOperations = __webpack_require__(74);
	var LinkedValueUtils = __webpack_require__(152);
	var ReactBrowserComponentMixin = __webpack_require__(141);
	var ReactClass = __webpack_require__(68);
	var ReactElement = __webpack_require__(42);
	var ReactMount = __webpack_require__(98);
	var ReactUpdates = __webpack_require__(57);

	var assign = __webpack_require__(44);
	var invariant = __webpack_require__(38);

	var input = ReactElement.createFactory('input');

	var instancesByReactID = {};

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = ReactClass.createClass({
	  displayName: 'ReactDOMInput',
	  tagName: 'INPUT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    return {
	      initialChecked: this.props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.defaultChecked = null;
	    props.defaultValue = null;

	    var value = LinkedValueUtils.getValue(this);
	    props.value = value != null ? value : this.state.initialValue;

	    var checked = LinkedValueUtils.getChecked(this);
	    props.checked = checked != null ? checked : this.state.initialChecked;

	    props.onChange = this._handleChange;

	    return input(props, this.props.children);
	  },

	  componentDidMount: function() {
	    var id = ReactMount.getID(this.getDOMNode());
	    instancesByReactID[id] = this;
	  },

	  componentWillUnmount: function() {
	    var rootNode = this.getDOMNode();
	    var id = ReactMount.getID(rootNode);
	    delete instancesByReactID[id];
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var rootNode = this.getDOMNode();
	    if (this.props.checked != null) {
	      DOMPropertyOperations.setValueForProperty(
	        rootNode,
	        'checked',
	        this.props.checked || false
	      );
	    }

	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    // Here we use asap to wait until all updates have propagated, which
	    // is important when using controlled components within layers:
	    // https://github.com/facebook/react/issues/1698
	    ReactUpdates.asap(forceUpdateIfMounted, this);

	    var name = this.props.name;
	    if (this.props.type === 'radio' && name != null) {
	      var rootNode = this.getDOMNode();
	      var queryRoot = rootNode;

	      while (queryRoot.parentNode) {
	        queryRoot = queryRoot.parentNode;
	      }

	      // If `rootNode.form` was non-null, then we could try `form.elements`,
	      // but that sometimes behaves strangely in IE8. We could also try using
	      // `form.getElementsByName`, but that will only return direct children
	      // and won't include inputs that use the HTML5 `form=` attribute. Since
	      // the input might not even be in a form, let's just use the global
	      // `querySelectorAll` to ensure we don't miss anything.
	      var group = queryRoot.querySelectorAll(
	        'input[name=' + JSON.stringify('' + name) + '][type="radio"]');

	      for (var i = 0, groupLen = group.length; i < groupLen; i++) {
	        var otherNode = group[i];
	        if (otherNode === rootNode ||
	            otherNode.form !== rootNode.form) {
	          continue;
	        }
	        var otherID = ReactMount.getID(otherNode);
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherID,
	          'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
	          'same `name` is not supported.'
	        ) : invariant(otherID));
	        var otherInstance = instancesByReactID[otherID];
	        ("production" !== process.env.NODE_ENV ? invariant(
	          otherInstance,
	          'ReactDOMInput: Unknown radio button ID %s.',
	          otherID
	        ) : invariant(otherInstance));
	        // If this is a controlled radio button group, forcing the input that
	        // was previously checked to update will cause it to be come re-checked
	        // as appropriate.
	        ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	      }
	    }

	    return returnValue;
	  }

	});

	module.exports = ReactDOMInput;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */

	'use strict';

	var ReactPropTypes = __webpack_require__(153);

	var invariant = __webpack_require__(38);

	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};

	function _assertSingleLink(input) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checkedLink == null || input.props.valueLink == null,
	    'Cannot provide a checkedLink and a valueLink. If you want to use ' +
	    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
	  ) : invariant(input.props.checkedLink == null || input.props.valueLink == null));
	}
	function _assertValueLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.value == null && input.props.onChange == null,
	    'Cannot provide a valueLink and a value or onChange event. If you want ' +
	    'to use value or onChange, you probably don\'t want to use valueLink.'
	  ) : invariant(input.props.value == null && input.props.onChange == null));
	}

	function _assertCheckedLink(input) {
	  _assertSingleLink(input);
	  ("production" !== process.env.NODE_ENV ? invariant(
	    input.props.checked == null && input.props.onChange == null,
	    'Cannot provide a checkedLink and a checked property or onChange event. ' +
	    'If you want to use checked or onChange, you probably don\'t want to ' +
	    'use checkedLink'
	  ) : invariant(input.props.checked == null && input.props.onChange == null));
	}

	/**
	 * @param {SyntheticEvent} e change event to handle
	 */
	function _handleLinkedValueChange(e) {
	  /*jshint validthis:true */
	  this.props.valueLink.requestChange(e.target.value);
	}

	/**
	  * @param {SyntheticEvent} e change event to handle
	  */
	function _handleLinkedCheckChange(e) {
	  /*jshint validthis:true */
	  this.props.checkedLink.requestChange(e.target.checked);
	}

	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  Mixin: {
	    propTypes: {
	      value: function(props, propName, componentName) {
	        if (!props[propName] ||
	            hasReadOnlyValue[props.type] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `value` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultValue`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      checked: function(props, propName, componentName) {
	        if (!props[propName] ||
	            props.onChange ||
	            props.readOnly ||
	            props.disabled) {
	          return null;
	        }
	        return new Error(
	          'You provided a `checked` prop to a form field without an ' +
	          '`onChange` handler. This will render a read-only field. If ' +
	          'the field should be mutable use `defaultChecked`. Otherwise, ' +
	          'set either `onChange` or `readOnly`.'
	        );
	      },
	      onChange: ReactPropTypes.func
	    }
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return input.props.valueLink.value;
	    }
	    return input.props.value;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function(input) {
	    if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return input.props.checkedLink.value;
	    }
	    return input.props.checked;
	  },

	  /**
	   * @param {ReactComponent} input Form component
	   * @return {function} change callback either from onChange prop or link.
	   */
	  getOnChange: function(input) {
	    if (input.props.valueLink) {
	      _assertValueLink(input);
	      return _handleLinkedValueChange;
	    } else if (input.props.checkedLink) {
	      _assertCheckedLink(input);
	      return _handleLinkedCheckChange;
	    }
	    return input.props.onChange;
	  }
	};

	module.exports = LinkedValueUtils;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */

	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactFragment = __webpack_require__(41);
	var ReactPropTypeLocationNames = __webpack_require__(65);

	var emptyFunction = __webpack_require__(47);

	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */

	var ANONYMOUS = '<<anonymous>>';

	var elementTypeChecker = createElementTypeChecker();
	var nodeTypeChecker = createNodeChecker();

	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),

	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: elementTypeChecker,
	  instanceOf: createInstanceTypeChecker,
	  node: nodeTypeChecker,
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};

	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location) {
	    componentName = componentName || ANONYMOUS;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error(
	          ("Required " + locationName + " `" + propName + "` was not specified in ") +
	          ("`" + componentName + "`.")
	        );
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location);
	    }
	  }

	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);

	  return chainedCheckType;
	}

	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);

	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + preciseType + "` ") +
	        ("supplied to `" + componentName + "`, expected `" + expectedType + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}

	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an array.")
	      );
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location);
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactElement.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected instance of `" + expectedClassName + "`.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createEnumTypeChecker(expectedValues) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` of value `" + propValue + "` ") +
	      ("supplied to `" + componentName + "`, expected one of " + valuesString + ".")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type ") +
	        ("`" + propType + "` supplied to `" + componentName + "`, expected an object.")
	      );
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  function validate(props, propName, componentName, location) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location) == null) {
	        return null;
	      }
	    }

	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error(
	      ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	      ("`" + componentName + "`.")
	    );
	  }
	  return createChainableTypeChecker(validate);
	}

	function createNodeChecker() {
	  function validate(props, propName, componentName, location) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` supplied to ") +
	        ("`" + componentName + "`, expected a ReactNode.")
	      );
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error(
	        ("Invalid " + locationName + " `" + propName + "` of type `" + propType + "` ") +
	        ("supplied to `" + componentName + "`, expected `object`.")
	      );
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}

	function isNode(propValue) {
	  switch (typeof propValue) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	      propValue = ReactFragment.extractIfFragment(propValue);
	      for (var k in propValue) {
	        if (!isNode(propValue[k])) {
	          return false;
	        }
	      }
	      return true;
	    default:
	      return false;
	  }
	}

	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue;
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}

	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}

	module.exports = ReactPropTypes;


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */

	'use strict';

	var ReactBrowserComponentMixin = __webpack_require__(141);
	var ReactClass = __webpack_require__(68);
	var ReactElement = __webpack_require__(42);

	var warning = __webpack_require__(46);

	var option = ReactElement.createFactory('option');

	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = ReactClass.createClass({
	  displayName: 'ReactDOMOption',
	  tagName: 'OPTION',

	  mixins: [ReactBrowserComponentMixin],

	  componentWillMount: function() {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if ("production" !== process.env.NODE_ENV) {
	      ("production" !== process.env.NODE_ENV ? warning(
	        this.props.selected == null,
	        'Use the `defaultValue` or `value` props on <select> instead of ' +
	        'setting `selected` on <option>.'
	      ) : null);
	    }
	  },

	  render: function() {
	    return option(this.props, this.props.children);
	  }

	});

	module.exports = ReactDOMOption;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(145);
	var LinkedValueUtils = __webpack_require__(152);
	var ReactBrowserComponentMixin = __webpack_require__(141);
	var ReactClass = __webpack_require__(68);
	var ReactElement = __webpack_require__(42);
	var ReactUpdates = __webpack_require__(57);

	var assign = __webpack_require__(44);

	var select = ReactElement.createFactory('select');

	function updateOptionsIfPendingUpdateAndMounted() {
	  /*jshint validthis:true */
	  if (this._pendingUpdate) {
	    this._pendingUpdate = false;
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null && this.isMounted()) {
	      updateOptions(this, value);
	    }
	  }
	}

	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function selectValueType(props, propName, componentName) {
	  if (props[propName] == null) {
	    return null;
	  }
	  if (props.multiple) {
	    if (!Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be an array if ") +
	        ("`multiple` is true.")
	      );
	    }
	  } else {
	    if (Array.isArray(props[propName])) {
	      return new Error(
	        ("The `" + propName + "` prop supplied to <select> must be a scalar ") +
	        ("value if `multiple` is false.")
	      );
	    }
	  }
	}

	/**
	 * @param {ReactComponent} component Instance of ReactDOMSelect
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(component, propValue) {
	  var selectedValue, i, l;
	  var options = component.getDOMNode().options;

	  if (component.props.multiple) {
	    selectedValue = {};
	    for (i = 0, l = propValue.length; i < l; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0, l = options.length; i < l; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0, l = options.length; i < l; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}

	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = ReactClass.createClass({
	  displayName: 'ReactDOMSelect',
	  tagName: 'SELECT',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  propTypes: {
	    defaultValue: selectValueType,
	    value: selectValueType
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    props.onChange = this._handleChange;
	    props.value = null;

	    return select(props, this.props.children);
	  },

	  componentWillMount: function() {
	    this._pendingUpdate = false;
	  },

	  componentDidMount: function() {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      updateOptions(this, value);
	    } else if (this.props.defaultValue != null) {
	      updateOptions(this, this.props.defaultValue);
	    }
	  },

	  componentDidUpdate: function(prevProps) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      this._pendingUpdate = false;
	      updateOptions(this, value);
	    } else if (!prevProps.multiple !== !this.props.multiple) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (this.props.defaultValue != null) {
	        updateOptions(this, this.props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(this, this.props.multiple ? [] : '');
	      }
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }

	    this._pendingUpdate = true;
	    ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMSelect;


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */

	'use strict';

	var AutoFocusMixin = __webpack_require__(145);
	var DOMPropertyOperations = __webpack_require__(74);
	var LinkedValueUtils = __webpack_require__(152);
	var ReactBrowserComponentMixin = __webpack_require__(141);
	var ReactClass = __webpack_require__(68);
	var ReactElement = __webpack_require__(42);
	var ReactUpdates = __webpack_require__(57);

	var assign = __webpack_require__(44);
	var invariant = __webpack_require__(38);

	var warning = __webpack_require__(46);

	var textarea = ReactElement.createFactory('textarea');

	function forceUpdateIfMounted() {
	  /*jshint validthis:true */
	  if (this.isMounted()) {
	    this.forceUpdate();
	  }
	}

	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = ReactClass.createClass({
	  displayName: 'ReactDOMTextarea',
	  tagName: 'TEXTAREA',

	  mixins: [AutoFocusMixin, LinkedValueUtils.Mixin, ReactBrowserComponentMixin],

	  getInitialState: function() {
	    var defaultValue = this.props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = this.props.children;
	    if (children != null) {
	      if ("production" !== process.env.NODE_ENV) {
	        ("production" !== process.env.NODE_ENV ? warning(
	          false,
	          'Use the `defaultValue` or `value` props instead of setting ' +
	          'children on <textarea>.'
	        ) : null);
	      }
	      ("production" !== process.env.NODE_ENV ? invariant(
	        defaultValue == null,
	        'If you supply `defaultValue` on a <textarea>, do not pass children.'
	      ) : invariant(defaultValue == null));
	      if (Array.isArray(children)) {
	        ("production" !== process.env.NODE_ENV ? invariant(
	          children.length <= 1,
	          '<textarea> can only have at most one child.'
	        ) : invariant(children.length <= 1));
	        children = children[0];
	      }

	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(this);
	    return {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue)
	    };
	  },

	  render: function() {
	    // Clone `this.props` so we don't mutate the input.
	    var props = assign({}, this.props);

	    ("production" !== process.env.NODE_ENV ? invariant(
	      props.dangerouslySetInnerHTML == null,
	      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
	    ) : invariant(props.dangerouslySetInnerHTML == null));

	    props.defaultValue = null;
	    props.value = null;
	    props.onChange = this._handleChange;

	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    return textarea(props, this.state.initialValue);
	  },

	  componentDidUpdate: function(prevProps, prevState, prevContext) {
	    var value = LinkedValueUtils.getValue(this);
	    if (value != null) {
	      var rootNode = this.getDOMNode();
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      DOMPropertyOperations.setValueForProperty(rootNode, 'value', '' + value);
	    }
	  },

	  _handleChange: function(event) {
	    var returnValue;
	    var onChange = LinkedValueUtils.getOnChange(this);
	    if (onChange) {
	      returnValue = onChange.call(this, event);
	    }
	    ReactUpdates.asap(forceUpdateIfMounted, this);
	    return returnValue;
	  }

	});

	module.exports = ReactDOMTextarea;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */

	'use strict';

	var EventListener = __webpack_require__(158);
	var ExecutionEnvironment = __webpack_require__(82);
	var PooledClass = __webpack_require__(40);
	var ReactInstanceHandles = __webpack_require__(50);
	var ReactMount = __webpack_require__(98);
	var ReactUpdates = __webpack_require__(57);

	var assign = __webpack_require__(44);
	var getEventTarget = __webpack_require__(129);
	var getUnboundedScrollPosition = __webpack_require__(159);

	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}

	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(
	  TopLevelCallbackBookKeeping,
	  PooledClass.twoArgumentPooler
	);

	function handleTopLevelImpl(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(
	    getEventTarget(bookKeeping.nativeEvent)
	  ) || window;

	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }

	  for (var i = 0, l = bookKeeping.ancestors.length; i < l; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(
	      bookKeeping.topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      bookKeeping.nativeEvent
	    );
	  }
	}

	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}

	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,

	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,

	  setHandleTopLevel: function(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },

	  setEnabled: function(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },

	  isEnabled: function() {
	    return ReactEventListener._enabled;
	  },


	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(
	      element,
	      handlerBaseName,
	      ReactEventListener.dispatchEvent.bind(null, topLevelType)
	    );
	  },

	  monitorScrollValue: function(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },

	  dispatchEvent: function(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }

	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(
	      topLevelType,
	      nativeEvent
	    );
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};

	module.exports = ReactEventListener;


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */

	var emptyFunction = __webpack_require__(47);

	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },

	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function(target, eventType, callback) {
	    if (!target.addEventListener) {
	      if ("production" !== process.env.NODE_ENV) {
	        console.error(
	          'Attempted to listen to events during the capture phase on a ' +
	          'browser that does not support the capture phase. Your application ' +
	          'will not receive some events.'
	        );
	      }
	      return {
	        remove: emptyFunction
	      };
	    } else {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    }
	  },

	  registerDefault: function() {}
	};

	module.exports = EventListener;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 159 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */

	"use strict";

	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}

	module.exports = getUnboundedScrollPosition;


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */

	'use strict';

	var DOMProperty = __webpack_require__(75);
	var EventPluginHub = __webpack_require__(100);
	var ReactComponentEnvironment = __webpack_require__(116);
	var ReactClass = __webpack_require__(68);
	var ReactEmptyComponent = __webpack_require__(107);
	var ReactBrowserEventEmitter = __webpack_require__(99);
	var ReactNativeComponent = __webpack_require__(66);
	var ReactDOMComponent = __webpack_require__(118);
	var ReactPerf = __webpack_require__(59);
	var ReactRootIndex = __webpack_require__(51);
	var ReactUpdates = __webpack_require__(57);

	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMComponent: ReactDOMComponent.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};

	module.exports = ReactInjection;


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */

	'use strict';

	var CallbackQueue = __webpack_require__(58);
	var PooledClass = __webpack_require__(40);
	var ReactBrowserEventEmitter = __webpack_require__(99);
	var ReactInputSelection = __webpack_require__(162);
	var ReactPutListenerQueue = __webpack_require__(166);
	var Transaction = __webpack_require__(67);

	var assign = __webpack_require__(44);

	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};

	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },

	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occured. `close`
	   *   restores the previous value.
	   */
	  close: function(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};

	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function() {
	    this.reactMountReady.notifyAll();
	  }
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: function() {
	    this.putListenerQueue.putListeners();
	  }
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  SELECTION_RESTORATION,
	  EVENT_SUPPRESSION,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction() {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap proceedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);

	PooledClass.addPoolingTo(ReactReconcileTransaction);

	module.exports = ReactReconcileTransaction;


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */

	'use strict';

	var ReactDOMSelection = __webpack_require__(163);

	var containsNode = __webpack_require__(110);
	var focusNode = __webpack_require__(146);
	var getActiveElement = __webpack_require__(165);

	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}

	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {

	  hasSelectionCapabilities: function(elem) {
	    return elem && (
	      ((elem.nodeName === 'INPUT' && elem.type === 'text') ||
	      elem.nodeName === 'TEXTAREA' || elem.contentEditable === 'true')
	    );
	  },

	  getSelectionInformation: function() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange:
	          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
	          ReactInputSelection.getSelection(focusedElem) :
	          null
	    };
	  },

	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem &&
	        isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(
	          priorFocusedElem,
	          priorSelectionRange
	        );
	      }
	      focusNode(priorFocusedElem);
	    }
	  },

	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function(input) {
	    var selection;

	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }

	    return selection || {start: 0, end: 0};
	  },

	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }

	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName === 'INPUT') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};

	module.exports = ReactInputSelection;


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */

	'use strict';

	var ExecutionEnvironment = __webpack_require__(82);

	var getNodeForCharacterOffset = __webpack_require__(164);
	var getTextContentAccessor = __webpack_require__(126);

	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}

	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;

	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);

	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;

	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}

	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();

	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }

	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;

	  var currentRange = selection.getRangeAt(0);

	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(
	    selection.anchorNode,
	    selection.anchorOffset,
	    selection.focusNode,
	    selection.focusOffset
	  );

	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;

	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);

	  var isTempRangeCollapsed = isCollapsed(
	    tempRange.startContainer,
	    tempRange.startOffset,
	    tempRange.endContainer,
	    tempRange.endOffset
	  );

	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;

	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;

	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}

	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;

	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }

	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}

	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }

	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ?
	            start : Math.min(offsets.end, length);

	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }

	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);

	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();

	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}

	var useIEOffsets = (
	  ExecutionEnvironment.canUseDOM &&
	  'selection' in document &&
	  !('getSelection' in window)
	);

	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,

	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};

	module.exports = ReactDOMSelection;


/***/ },
/* 164 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */

	'use strict';

	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}

	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}

	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;

	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;

	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }

	      nodeStart = nodeEnd;
	    }

	    node = getLeafNode(getSiblingNode(node));
	  }
	}

	module.exports = getNodeForCharacterOffset;


/***/ },
/* 165 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */

	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document body is not yet defined.
	 */
	function getActiveElement() /*?DOMElement*/ {
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}

	module.exports = getActiveElement;


/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPutListenerQueue
	 */

	'use strict';

	var PooledClass = __webpack_require__(40);
	var ReactBrowserEventEmitter = __webpack_require__(99);

	var assign = __webpack_require__(44);

	function ReactPutListenerQueue() {
	  this.listenersToPut = [];
	}

	assign(ReactPutListenerQueue.prototype, {
	  enqueuePutListener: function(rootNodeID, propKey, propValue) {
	    this.listenersToPut.push({
	      rootNodeID: rootNodeID,
	      propKey: propKey,
	      propValue: propValue
	    });
	  },

	  putListeners: function() {
	    for (var i = 0; i < this.listenersToPut.length; i++) {
	      var listenerToPut = this.listenersToPut[i];
	      ReactBrowserEventEmitter.putListener(
	        listenerToPut.rootNodeID,
	        listenerToPut.propKey,
	        listenerToPut.propValue
	      );
	    }
	  },

	  reset: function() {
	    this.listenersToPut.length = 0;
	  },

	  destructor: function() {
	    this.reset();
	  }
	});

	PooledClass.addPoolingTo(ReactPutListenerQueue);

	module.exports = ReactPutListenerQueue;


/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var EventPropagators = __webpack_require__(124);
	var ReactInputSelection = __webpack_require__(162);
	var SyntheticEvent = __webpack_require__(128);

	var getActiveElement = __webpack_require__(165);
	var isTextInputElement = __webpack_require__(132);
	var keyOf = __webpack_require__(70);
	var shallowEqual = __webpack_require__(168);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSelect: null}),
	      captured: keyOf({onSelectCapture: null})
	    },
	    dependencies: [
	      topLevelTypes.topBlur,
	      topLevelTypes.topContextMenu,
	      topLevelTypes.topFocus,
	      topLevelTypes.topKeyDown,
	      topLevelTypes.topMouseDown,
	      topLevelTypes.topMouseUp,
	      topLevelTypes.topSelectionChange
	    ]
	  }
	};

	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;

	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @param {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node &&
	      ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}

	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown ||
	      activeElement == null ||
	      activeElement !== getActiveElement()) {
	    return null;
	  }

	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;

	    var syntheticEvent = SyntheticEvent.getPooled(
	      eventTypes.select,
	      activeElementID,
	      nativeEvent
	    );

	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;

	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);

	    return syntheticEvent;
	  }
	}

	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {

	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) ||
	            topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;

	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent);

	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't).
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      case topLevelTypes.topSelectionChange:
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent);
	    }
	  }
	};

	module.exports = SelectEventPlugin;


/***/ },
/* 168 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 */

	'use strict';

	/**
	 * Performs equality by iterating through keys on an object and returning
	 * false when any key has values which are not strictly equal between
	 * objA and objB. Returns true when the values of all keys are strictly equal.
	 *
	 * @return {boolean}
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	  var key;
	  // Test for A's keys different from B.
	  for (key in objA) {
	    if (objA.hasOwnProperty(key) &&
	        (!objB.hasOwnProperty(key) || objA[key] !== objB[key])) {
	      return false;
	    }
	  }
	  // Test for B's keys missing from A.
	  for (key in objB) {
	    if (objB.hasOwnProperty(key) && !objA.hasOwnProperty(key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = shallowEqual;


/***/ },
/* 169 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */

	'use strict';

	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);

	var ServerReactRootIndex = {
	  createReactRootIndex: function() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};

	module.exports = ServerReactRootIndex;


/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */

	'use strict';

	var EventConstants = __webpack_require__(36);
	var EventPluginUtils = __webpack_require__(35);
	var EventPropagators = __webpack_require__(124);
	var SyntheticClipboardEvent = __webpack_require__(171);
	var SyntheticEvent = __webpack_require__(128);
	var SyntheticFocusEvent = __webpack_require__(172);
	var SyntheticKeyboardEvent = __webpack_require__(173);
	var SyntheticMouseEvent = __webpack_require__(136);
	var SyntheticDragEvent = __webpack_require__(176);
	var SyntheticTouchEvent = __webpack_require__(177);
	var SyntheticUIEvent = __webpack_require__(137);
	var SyntheticWheelEvent = __webpack_require__(178);

	var getEventCharCode = __webpack_require__(174);

	var invariant = __webpack_require__(38);
	var keyOf = __webpack_require__(70);
	var warning = __webpack_require__(46);

	var topLevelTypes = EventConstants.topLevelTypes;

	var eventTypes = {
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onBlur: true}),
	      captured: keyOf({onBlurCapture: true})
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onClick: true}),
	      captured: keyOf({onClickCapture: true})
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onContextMenu: true}),
	      captured: keyOf({onContextMenuCapture: true})
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCopy: true}),
	      captured: keyOf({onCopyCapture: true})
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onCut: true}),
	      captured: keyOf({onCutCapture: true})
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDoubleClick: true}),
	      captured: keyOf({onDoubleClickCapture: true})
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrag: true}),
	      captured: keyOf({onDragCapture: true})
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnd: true}),
	      captured: keyOf({onDragEndCapture: true})
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragEnter: true}),
	      captured: keyOf({onDragEnterCapture: true})
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragExit: true}),
	      captured: keyOf({onDragExitCapture: true})
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragLeave: true}),
	      captured: keyOf({onDragLeaveCapture: true})
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragOver: true}),
	      captured: keyOf({onDragOverCapture: true})
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDragStart: true}),
	      captured: keyOf({onDragStartCapture: true})
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onDrop: true}),
	      captured: keyOf({onDropCapture: true})
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onFocus: true}),
	      captured: keyOf({onFocusCapture: true})
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onInput: true}),
	      captured: keyOf({onInputCapture: true})
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyDown: true}),
	      captured: keyOf({onKeyDownCapture: true})
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyPress: true}),
	      captured: keyOf({onKeyPressCapture: true})
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onKeyUp: true}),
	      captured: keyOf({onKeyUpCapture: true})
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onLoad: true}),
	      captured: keyOf({onLoadCapture: true})
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onError: true}),
	      captured: keyOf({onErrorCapture: true})
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseDown: true}),
	      captured: keyOf({onMouseDownCapture: true})
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseMove: true}),
	      captured: keyOf({onMouseMoveCapture: true})
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOut: true}),
	      captured: keyOf({onMouseOutCapture: true})
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseOver: true}),
	      captured: keyOf({onMouseOverCapture: true})
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onMouseUp: true}),
	      captured: keyOf({onMouseUpCapture: true})
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onPaste: true}),
	      captured: keyOf({onPasteCapture: true})
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onReset: true}),
	      captured: keyOf({onResetCapture: true})
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onScroll: true}),
	      captured: keyOf({onScrollCapture: true})
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onSubmit: true}),
	      captured: keyOf({onSubmitCapture: true})
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchCancel: true}),
	      captured: keyOf({onTouchCancelCapture: true})
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchEnd: true}),
	      captured: keyOf({onTouchEndCapture: true})
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchMove: true}),
	      captured: keyOf({onTouchMoveCapture: true})
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchStart: true}),
	      captured: keyOf({onTouchStartCapture: true})
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onWheel: true}),
	      captured: keyOf({onWheelCapture: true})
	    }
	  }
	};

	var topLevelEventsToDispatchConfig = {
	  topBlur:        eventTypes.blur,
	  topClick:       eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy:        eventTypes.copy,
	  topCut:         eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag:        eventTypes.drag,
	  topDragEnd:     eventTypes.dragEnd,
	  topDragEnter:   eventTypes.dragEnter,
	  topDragExit:    eventTypes.dragExit,
	  topDragLeave:   eventTypes.dragLeave,
	  topDragOver:    eventTypes.dragOver,
	  topDragStart:   eventTypes.dragStart,
	  topDrop:        eventTypes.drop,
	  topError:       eventTypes.error,
	  topFocus:       eventTypes.focus,
	  topInput:       eventTypes.input,
	  topKeyDown:     eventTypes.keyDown,
	  topKeyPress:    eventTypes.keyPress,
	  topKeyUp:       eventTypes.keyUp,
	  topLoad:        eventTypes.load,
	  topMouseDown:   eventTypes.mouseDown,
	  topMouseMove:   eventTypes.mouseMove,
	  topMouseOut:    eventTypes.mouseOut,
	  topMouseOver:   eventTypes.mouseOver,
	  topMouseUp:     eventTypes.mouseUp,
	  topPaste:       eventTypes.paste,
	  topReset:       eventTypes.reset,
	  topScroll:      eventTypes.scroll,
	  topSubmit:      eventTypes.submit,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd:    eventTypes.touchEnd,
	  topTouchMove:   eventTypes.touchMove,
	  topTouchStart:  eventTypes.touchStart,
	  topWheel:       eventTypes.wheel
	};

	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}

	var SimpleEventPlugin = {

	  eventTypes: eventTypes,

	  /**
	   * Same as the default implementation, except cancels the event when return
	   * value is false. This behavior will be disabled in a future release.
	   *
	   * @param {object} Event to be dispatched.
	   * @param {function} Application-level callback.
	   * @param {string} domID DOM ID to pass to the callback.
	   */
	  executeDispatch: function(event, listener, domID) {
	    var returnValue = EventPluginUtils.executeDispatch(event, listener, domID);

	    ("production" !== process.env.NODE_ENV ? warning(
	      typeof returnValue !== 'boolean',
	      'Returning `false` from an event handler is deprecated and will be ' +
	      'ignored in a future release. Instead, manually call ' +
	      'e.stopPropagation() or e.preventDefault(), as appropriate.'
	    ) : null);

	    if (returnValue === false) {
	      event.stopPropagation();
	      event.preventDefault();
	    }
	  },

	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function(
	      topLevelType,
	      topLevelTarget,
	      topLevelTargetID,
	      nativeEvent) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topError:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSubmit:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	        /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    ("production" !== process.env.NODE_ENV ? invariant(
	      EventConstructor,
	      'SimpleEventPlugin: Unhandled event type, `%s`.',
	      topLevelType
	    ) : invariant(EventConstructor));
	    var event = EventConstructor.getPooled(
	      dispatchConfig,
	      topLevelTargetID,
	      nativeEvent
	    );
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  }

	};

	module.exports = SimpleEventPlugin;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticEvent = __webpack_require__(128);

	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function(event) {
	    return (
	      'clipboardData' in event ?
	        event.clipboardData :
	        window.clipboardData
	    );
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);

	module.exports = SyntheticClipboardEvent;


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(137);

	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);

	module.exports = SyntheticFocusEvent;


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(137);

	var getEventCharCode = __webpack_require__(174);
	var getEventKey = __webpack_require__(175);
	var getEventModifierState = __webpack_require__(138);

	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.

	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.

	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);

	module.exports = SyntheticKeyboardEvent;


/***/ },
/* 174 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */

	'use strict';

	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `charCode` property.
	 */
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;

	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;

	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }

	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }

	  return 0;
	}

	module.exports = getEventCharCode;


/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */

	'use strict';

	var getEventCharCode = __webpack_require__(174);

	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};

	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};

	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.

	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }

	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);

	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}

	module.exports = getEventKey;


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(136);

	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);

	module.exports = SyntheticDragEvent;


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticUIEvent = __webpack_require__(137);

	var getEventModifierState = __webpack_require__(138);

	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);

	module.exports = SyntheticTouchEvent;


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */

	'use strict';

	var SyntheticMouseEvent = __webpack_require__(136);

	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function(event) {
	    return (
	      'deltaX' in event ? event.deltaX :
	      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
	    );
	  },
	  deltaY: function(event) {
	    return (
	      'deltaY' in event ? event.deltaY :
	      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	      'wheelDeltaY' in event ? -event.wheelDeltaY :
	      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	      'wheelDelta' in event ? -event.wheelDelta : 0
	    );
	  },
	  deltaZ: null,

	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};

	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent);
	}

	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);

	module.exports = SyntheticWheelEvent;


/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */

	/*jslint bitwise: true*/

	'use strict';

	var DOMProperty = __webpack_require__(75);

	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;

	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox'
	  }
	};

	module.exports = SVGDOMPropertyConfig;


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createFullPageComponent
	 * @typechecks
	 */

	'use strict';

	// Defeat circular references by requiring this directly.
	var ReactClass = __webpack_require__(68);
	var ReactElement = __webpack_require__(42);

	var invariant = __webpack_require__(38);

	/**
	 * Create a component that will throw an exception when unmounted.
	 *
	 * Components like <html> <head> and <body> can't be removed or added
	 * easily in a cross-browser way, however it's valuable to be able to
	 * take advantage of React's reconciliation for styling and <title>
	 * management. So we just document it and throw in dangerous cases.
	 *
	 * @param {string} tag The tag to wrap
	 * @return {function} convenience constructor of new component
	 */
	function createFullPageComponent(tag) {
	  var elementFactory = ReactElement.createFactory(tag);

	  var FullPageComponent = ReactClass.createClass({
	    tagName: tag.toUpperCase(),
	    displayName: 'ReactFullPageComponent' + tag,

	    componentWillUnmount: function() {
	      ("production" !== process.env.NODE_ENV ? invariant(
	        false,
	        '%s tried to unmount. Because of cross-browser quirks it is ' +
	        'impossible to unmount some top-level components (eg <html>, <head>, ' +
	        'and <body>) reliably and efficiently. To fix this, have a single ' +
	        'top-level component that never unmounts render these elements.',
	        this.constructor.displayName
	      ) : invariant(false));
	    },

	    render: function() {
	      return elementFactory(this.props);
	    }
	  });

	  return FullPageComponent;
	}

	module.exports = createFullPageComponent;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */

	'use strict';

	var DOMProperty = __webpack_require__(75);
	var ReactDefaultPerfAnalysis = __webpack_require__(182);
	var ReactMount = __webpack_require__(98);
	var ReactPerf = __webpack_require__(59);

	var performanceNow = __webpack_require__(183);

	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}

	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}

	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,

	  start: function() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }

	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },

	  stop: function() {
	    ReactPerf.enableMeasure = false;
	  },

	  getLastMeasurements: function() {
	    return ReactDefaultPerf._allMeasurements;
	  },

	  printExclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },

	  printInclusive: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  getMeasurementsSummaryMap: function(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
	      measurements,
	      true
	    );
	    return summary.map(function(item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },

	  printWasted: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  printDOM: function(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function(item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result['type'] = item.type;
	      result['args'] = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log(
	      'Total time:',
	      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
	    );
	  },

	  _recordWrite: function(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes =
	      ReactDefaultPerf
	        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1]
	        .writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },

	  measure: function(moduleName, fnName, func) {
	    return function() {for (var args=[],$__0=0,$__1=arguments.length;$__0<$__1;$__0++) args.push(arguments[$__0]);
	      var totalTime;
	      var rv;
	      var start;

	      if (fnName === '_renderNewRootComponent' ||
	          fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' ||
	          moduleName === 'ReactDOMIDOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function(update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(
	              update.parentID,
	              update.type,
	              totalTime,
	              writeArgs
	            );
	          });
	        } else {
	          // basic format
	          ReactDefaultPerf._recordWrite(
	            args[0],
	            fnName,
	            totalTime,
	            Array.prototype.slice.call(args, 1)
	          );
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (
	        (// TODO: receiveComponent()?
	        (fnName === 'mountComponent' ||
	        fnName === 'updateComponent' || fnName === '_renderValidatedComponent')))) {

	        if (typeof this._currentElement.type === 'string') {
	          return func.apply(this, args);
	        }

	        var rootNodeID = fnName === 'mountComponent' ?
	          args[0] :
	          this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';

	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[
	          ReactDefaultPerf._allMeasurements.length - 1
	        ];

	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          mountStack.push(0);
	        }

	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;

	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }

	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ?
	            this._currentElement._owner.getName() :
	            '<root>'
	        };

	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};

	module.exports = ReactDefaultPerf;


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */

	var assign = __webpack_require__(44);

	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  TEXT_CONTENT: 'set textContent',
	  'updatePropertyByID': 'update attribute',
	  'deletePropertyByID': 'delete attribute',
	  'updateStylesByID': 'update styles',
	  'updateInnerHTMLByID': 'set innerHTML',
	  'dangerouslyReplaceNodeWithMarkupByID': 'replace'
	};

	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}

	function getDOMSummary(measurements) {
	  var items = [];
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var id;

	    for (id in measurement.writes) {
	      measurement.writes[id].forEach(function(write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    }
	  }
	  return items;
	}

	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );

	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;

	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.exclusive - a.exclusive;
	  });

	  return arr;
	}

	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;

	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign(
	      {},
	      measurement.exclusive,
	      measurement.inclusive
	    );
	    var cleanComponents;

	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }

	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }

	      var displayName = measurement.displayNames[id];

	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;

	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };

	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }

	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }

	  arr.sort(function(a, b) {
	    return b.time - a.time;
	  });

	  return arr;
	}

	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);

	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}

	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};

	module.exports = ReactDefaultPerfAnalysis;


/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */

	var performance = __webpack_require__(184);

	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (!performance || !performance.now) {
	  performance = Date;
	}

	var performanceNow = performance.now.bind(performance);

	module.exports = performanceNow;


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */

	"use strict";

	var ExecutionEnvironment = __webpack_require__(82);

	var performance;

	if (ExecutionEnvironment.canUseDOM) {
	  performance =
	    window.performance ||
	    window.msPerformance ||
	    window.webkitPerformance;
	}

	module.exports = performance || {};


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';

	var ReactElement = __webpack_require__(42);
	var ReactInstanceHandles = __webpack_require__(50);
	var ReactMarkupChecksum = __webpack_require__(108);
	var ReactServerRenderingTransaction =
	  __webpack_require__(186);

	var emptyObject = __webpack_require__(45);
	var instantiateReactComponent = __webpack_require__(114);
	var invariant = __webpack_require__(38);

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToString(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup =
	        componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(element),
	    'renderToStaticMarkup(): You must pass a valid ReactElement.'
	  ) : invariant(ReactElement.isValidElement(element)));

	  var transaction;
	  try {
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);

	    return transaction.perform(function() {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	  }
	}

	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */

	'use strict';

	var PooledClass = __webpack_require__(40);
	var CallbackQueue = __webpack_require__(58);
	var ReactPutListenerQueue = __webpack_require__(166);
	var Transaction = __webpack_require__(67);

	var assign = __webpack_require__(44);
	var emptyFunction = __webpack_require__(47);

	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function() {
	    this.reactMountReady.reset();
	  },

	  close: emptyFunction
	};

	var PUT_LISTENER_QUEUEING = {
	  initialize: function() {
	    this.putListenerQueue.reset();
	  },

	  close: emptyFunction
	};

	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [
	  PUT_LISTENER_QUEUEING,
	  ON_DOM_READY_QUEUEING
	];

	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.putListenerQueue = ReactPutListenerQueue.getPooled();
	}

	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap proceedures.
	   */
	  getTransactionWrappers: function() {
	    return TRANSACTION_WRAPPERS;
	  },

	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function() {
	    return this.reactMountReady;
	  },

	  getPutListenerQueue: function() {
	    return this.putListenerQueue;
	  },

	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be resused.
	   */
	  destructor: function() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;

	    ReactPutListenerQueue.release(this.putListenerQueue);
	    this.putListenerQueue = null;
	  }
	};


	assign(
	  ReactServerRenderingTransaction.prototype,
	  Transaction.Mixin,
	  Mixin
	);

	PooledClass.addPoolingTo(ReactServerRenderingTransaction);

	module.exports = ReactServerRenderingTransaction;


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';

	var ReactElement = __webpack_require__(42);

	var invariant = __webpack_require__(38);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  ("production" !== process.env.NODE_ENV ? invariant(
	    ReactElement.isValidElement(children),
	    'onlyChild must be passed a children with exactly one child.'
	  ) : invariant(ReactElement.isValidElement(children)));
	  return children;
	}

	module.exports = onlyChild;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Left pane of the application
	 *
	 * Created by dmitri on 30/03/15.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _toolsPalettesMinimap = __webpack_require__(189);

	var _toolsPalettesMinimap2 = _interopRequireDefault(_toolsPalettesMinimap);

	var _toolsPalettesToolbox = __webpack_require__(198);

	var _toolsPalettesToolbox2 = _interopRequireDefault(_toolsPalettesToolbox);

	var _toolsPalettesViewController = __webpack_require__(282);

	var _toolsPalettesViewController2 = _interopRequireDefault(_toolsPalettesViewController);

	var _toolsPalettesModeSwitcher = __webpack_require__(283);

	var _toolsPalettesModeSwitcher2 = _interopRequireDefault(_toolsPalettesModeSwitcher);

	var _toolsPalettesGroupSelector = __webpack_require__(284);

	var _toolsPalettesGroupSelector2 = _interopRequireDefault(_toolsPalettesGroupSelector);

	var _toolsPalettesSetQuickAccess = __webpack_require__(289);

	var _toolsPalettesSetQuickAccess2 = _interopRequireDefault(_toolsPalettesSetQuickAccess);

	var _toolsPalettesSetManagerMainButtons = __webpack_require__(292);

	var _toolsPalettesSetManagerMainButtons2 = _interopRequireDefault(_toolsPalettesSetManagerMainButtons);

	var LeftPane = (function (_React$Component) {
	  _inherits(LeftPane, _React$Component);

	  function LeftPane(params) {
	    var _this = this;

	    _classCallCheck(this, LeftPane);

	    _get(Object.getPrototypeOf(LeftPane.prototype), 'constructor', this).call(this, params);
	    this.containerStyle = {
	      backgroundColor: '#F2F2F2',
	      height: '100%',
	      width: '100%',
	      marginTop: '10px'
	    };

	    this._onModeChange = function () {
	      var update = function update() {
	        return _this.setState({});
	      };
	      return update.apply(_this);
	    };
	  }

	  _createClass(LeftPane, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.modestore.addModeChangeListener(this._onModeChange);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.modestore.removeModeChangeListener(this._onModeChange);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (this.props.modestore.isInSetMode()) {
	        return _react2['default'].createElement(
	          'div',
	          { ref: 'self',
	            style: this.containerStyle,
	            className: 'ui container' },
	          _react2['default'].createElement('div', { className: 'ui divider' }),
	          _react2['default'].createElement(_toolsPalettesModeSwitcher2['default'], {
	            key: 'ModeSwitcher',
	            modestore: this.props.modestore,
	            userstore: this.props.userstore }),
	          _react2['default'].createElement(_toolsPalettesSetManagerMainButtons2['default'], {
	            key: 'SetManagerMainButtons',
	            userstore: this.props.userstore,
	            managerstore: this.props.managerstore,
	            modestore: this.props.modestore }),
	          _react2['default'].createElement(_toolsPalettesSetQuickAccess2['default'], {
	            key: 'SetQuickAccess',
	            modestore: this.props.modestore,
	            userstore: this.props.userstore,
	            managerstore: this.props.managerstore })
	        );
	      } else if (this.props.modestore.isInObservationMode()) {
	        return _react2['default'].createElement(
	          'div',
	          { ref: 'self',
	            style: this.containerStyle,
	            className: 'ui container' },
	          _react2['default'].createElement('div', { className: 'ui divider' }),
	          _react2['default'].createElement(_toolsPalettesModeSwitcher2['default'], {
	            key: 'ModeSwitcher',
	            modestore: this.props.modestore,
	            userstore: this.props.userstore }),
	          _react2['default'].createElement(_toolsPalettesGroupSelector2['default'], {
	            key: 'GroupSelector',
	            modestore: this.props.modestore,
	            userstore: this.props.userstore,
	            toolstore: this.props.toolstore,
	            benchstore: this.props.benchstore }),
	          _react2['default'].createElement(_toolsPalettesMinimap2['default'], {
	            key: 'Minimap',
	            ministore: this.props.ministore,
	            userstore: this.props.userstore,
	            viewstore: this.props.viewstore,
	            modestore: this.props.modestore,
	            toolstore: this.props.toolstore,
	            benchstore: this.props.benchstore }),
	          _react2['default'].createElement(_toolsPalettesViewController2['default'], {
	            key: 'ViewController',
	            ministore: this.props.ministore,
	            userstore: this.props.userstore,
	            modestore: this.props.modestore,
	            toolstore: this.props.toolstore,
	            viewstore: this.props.viewstore }),
	          _react2['default'].createElement(_toolsPalettesToolbox2['default'], {
	            key: 'Toolbox',
	            ministore: this.props.ministore,
	            userstore: this.props.userstore,
	            modestore: this.props.modestore,
	            viewstore: this.props.viewstore,
	            toolstore: this.props.toolstore,
	            metastore: this.props.metastore,
	            benchstore: this.props.benchstore })
	        );
	      } else if (this.props.modestore.isInOrganisationMode()) {
	        return _react2['default'].createElement(
	          'div',
	          { ref: 'self',
	            style: this.containerStyle,
	            className: 'ui container' },
	          _react2['default'].createElement('div', { className: 'ui divider' }),
	          _react2['default'].createElement(_toolsPalettesModeSwitcher2['default'], {
	            key: 'ModeSwitcher',
	            modestore: this.props.modestore,
	            userstore: this.props.userstore }),
	          _react2['default'].createElement(_toolsPalettesGroupSelector2['default'], {
	            key: 'GroupSelector',
	            modestore: this.props.modestore,
	            userstore: this.props.userstore,
	            toolstore: this.props.toolstore,
	            benchstore: this.props.benchstore }),
	          _react2['default'].createElement(_toolsPalettesViewController2['default'], {
	            key: 'ViewController',
	            ministore: this.props.ministore,
	            userstore: this.props.userstore,
	            modestore: this.props.modestore,
	            toolstore: this.props.toolstore,
	            viewstore: this.props.viewstore })
	        );
	      } else {
	        console.error('No render handler in mode ' + this.props.modestore.getMode());
	        return null;
	      }
	    }
	  }]);

	  return LeftPane;
	})(_react2['default'].Component);

	exports['default'] = LeftPane;
	module.exports = exports['default'];

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This component displays an image's minimap and provides limited viewport controls.
	 *
	 * Created by hector on 04/08/15.
	 */
	"use strict";

	var _get = __webpack_require__(3)["default"];

	var _inherits = __webpack_require__(19)["default"];

	var _createClass = __webpack_require__(28)["default"];

	var _classCallCheck = __webpack_require__(31)["default"];

	var _interopRequireDefault = __webpack_require__(1)["default"];

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsMinimapActions = __webpack_require__(190);

	var _actionsMinimapActions2 = _interopRequireDefault(_actionsMinimapActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var Minimap = (function (_React$Component) {
	  _inherits(Minimap, _React$Component);

	  function Minimap(props) {
	    var _this = this;

	    _classCallCheck(this, Minimap);

	    _get(Object.getPrototypeOf(Minimap.prototype), "constructor", this).call(this, props);

	    this.componentStyle = {
	      padding: '5px 5px 5px 5px',
	      borderColor: '#2185d0!important'
	    };

	    this.labelContainerStyle = {
	      position: 'relative',
	      width: 0,
	      height: '10px'
	    };

	    this.labelStyle = {
	      position: 'relative',
	      top: '-15px',
	      left: '10px',
	      whiteSpace: 'nowrap'
	    };

	    this.imageContainerStyle = {
	      position: "relative",
	      overflow: "hidden"
	    };

	    this.imageStyle = {
	      minWidth: '185px',
	      width: '185px',
	      maxWidth: '185px'
	    };

	    this.boundingBoxStyle = {
	      display: "inline",
	      position: "absolute",
	      borderStyle: "solid",
	      borderWidth: "1px",
	      borderColor: "red"
	    };

	    this._onImageInit = function () {
	      var initMap = function initMap() {
	        return _this.initMinimap(_this.props.ministore.getImage(), _this.props.viewstore.getView());
	      };
	      return initMap.apply(_this);
	    };

	    this._onViewChange = function () {
	      var updateView = function updateView() {
	        return _this.updateViewportLocation(_this.props.viewstore.getView());
	      };
	      return updateView.apply(_this);
	    };

	    this._onLabBenchUpdate = function () {
	      var updateStoreWithPosition = function updateStoreWithPosition() {
	        _this.updateStoreWithPosition();
	      };
	      return updateStoreWithPosition.apply(_this);
	    };

	    this._forceUpdate = function () {
	      var update = function update() {
	        return _this.setState({});
	      };
	      return update.apply(_this);
	    };

	    this.state = {
	      imgUrl: null,
	      view: {
	        top: 0,
	        left: 0,
	        height: 0,
	        width: 0,
	        zoom: 1.0
	      },
	      ratio: null,
	      dragging: false
	    };
	  }

	  _createClass(Minimap, [{
	    key: "updateStoreWithPosition",
	    value: function updateStoreWithPosition() {
	      var imageId = this.props.toolstore.getSelectedImageId();
	      if (!imageId) {
	        window.setTimeout(_actionsMinimapActions2["default"].unsetMinimap, 10);
	        return;
	      }
	      var viewData = this.props.benchstore.getActiveViewData();
	      if (!viewData) {
	        window.setTimeout(_actionsMinimapActions2["default"].unsetMinimap, 10);
	        return;
	      }
	      var imageUrl = this.props.ministore.getImage().url;
	      if (!imageUrl) {
	        return;
	      }

	      for (var i = 0; i < viewData.displays.length; ++i) {
	        if (viewData.displays[i].link == imageId) {
	          var displayData = viewData.displays[i];
	          window.setTimeout(_actionsMinimapActions2["default"].initMinimap.bind(null, imageUrl, displayData.displayWidth, displayData.displayHeight, displayData.x, displayData.y), 10);
	          break;
	        }
	      }
	    }
	  }, {
	    key: "initMinimap",
	    value: function initMinimap(image, view) {
	      this.setState({
	        imgUrl: image.url,
	        ratio: null
	      });
	    }
	  }, {
	    key: "updateViewportLocation",
	    value: function updateViewportLocation(view) {
	      var node = this.refs.image.getDOMNode().getBoundingClientRect();
	      var image = this.props.ministore.getImage();
	      var ratio = image.height / node.height;
	      this.setState({
	        view: {
	          top: -(view.top / view.scale + image.yZero) / ratio,
	          left: -(view.left / view.scale + image.xZero) / ratio,
	          height: view.height / (ratio * view.scale),
	          width: view.width / (ratio * view.scale),
	          zoom: view.scale
	        },
	        ratio: ratio
	      });
	    }
	  }, {
	    key: "moveViewToClickLocation",
	    value: function moveViewToClickLocation(event) {
	      var image = this.props.ministore.getImage();
	      var node = this.refs.image.getDOMNode().getBoundingClientRect();

	      _actionsViewActions2["default"].updateViewport(-((event.clientX - node.left - this.state.view.width / 2) * this.state.ratio + image.xZero) * this.state.view.zoom, -((event.clientY - node.top - this.state.view.height / 2) * this.state.ratio + image.yZero) * this.state.view.zoom, this.state.view.width * this.state.ratio * this.state.view.zoom, this.state.view.height * this.state.ratio * this.state.view.zoom, this.state.view.zoom, true);
	    }
	  }, {
	    key: "beginDragViewport",
	    value: function beginDragViewport(event) {
	      if (event.button == 0) {
	        this.setState({ dragging: true });
	      }
	    }
	  }, {
	    key: "endDragViewport",
	    value: function endDragViewport(event) {
	      this.setState({ dragging: false });
	    }
	  }, {
	    key: "trackMouseMove",
	    value: function trackMouseMove(event) {
	      if (this.state.dragging) {
	        event.preventDefault();
	        event.stopPropagation();
	        this.moveViewToClickLocation(event);
	      }
	    }
	  }, {
	    key: "suppress",
	    value: function suppress(event) {
	      event.preventDefault();
	      event.stopPropagation();
	    }
	  }, {
	    key: "changeZoom",
	    value: function changeZoom(event) {
	      //event.stopPropagation();
	      event.preventDefault();
	      // Needed to get offset from page to image
	      var node = this.refs.image.getDOMNode().getBoundingClientRect();
	      var image = this.props.ministore.getImage();
	      if (event.deltaY < 0) {
	        // Zoom out
	        _actionsViewActions2["default"].updateViewport(-((event.clientX - node.left - this.state.view.width / 2) * this.state.ratio + image.xZero) * this.state.view.zoom * 1.05, -((event.clientY - node.top - this.state.view.height / 2) * this.state.ratio + image.yZero) * this.state.view.zoom * 1.05, null, null, this.state.view.zoom * 1.05, true);
	      }
	      if (event.deltaY > 0) {
	        // Zoom in
	        _actionsViewActions2["default"].updateViewport(-((event.clientX - node.left - this.state.view.width / 2) * this.state.ratio + image.xZero) * this.state.view.zoom * 0.95, -((event.clientY - node.top - this.state.view.height / 2) * this.state.ratio + image.yZero) * this.state.view.zoom * 0.95, null, null, this.state.view.zoom * 0.95, true);
	      }
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.props.modestore.addModeChangeListener(this._forceUpdate);
	      this.props.ministore.addInitListener(this._onImageInit);
	      this.props.viewstore.addViewportListener(this._onViewChange);
	      this.props.benchstore.addLabBenchLoadListener(this._onLabBenchUpdate);
	      this.props.userstore.addLanguageChangeListener(this._forceUpdate);
	      $('.ui.button.small.compact', this.refs.component.getDOMNode()).popup();
	    }
	  }, {
	    key: "componentWillUpdate",
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.view.left != null) {
	        this.boundingBoxStyle.left = nextState.view.left + "px";
	      }
	      if (nextState.view.top != null) {
	        this.boundingBoxStyle.top = nextState.view.top + "px";
	      }
	      if (nextState.view.width != null) {
	        this.boundingBoxStyle.width = nextState.view.width + "px";
	      }
	      if (nextState.view.height != null) {
	        this.boundingBoxStyle.height = nextState.view.height + "px";
	      }
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.ratio == null) {
	        this.updateViewportLocation(this.props.viewstore.getView());
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.props.userstore.removeLanguageChangeListener(this._forceUpdate);
	      this.props.ministore.removeInitListener(this._onImageInit);
	      this.props.viewstore.removeViewportListener(this._onViewChange);
	      this.props.benchstore.removeLabBenchLoadListener(this._onLabBenchUpdate);
	      this.props.modestore.removeModeChangeListener(this._forceUpdate);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return _react2["default"].createElement(
	        "div",
	        { style: this.componentStyle,
	          className: "ui container segment",
	          ref: "component" },
	        _react2["default"].createElement(
	          "div",
	          { style: this.labelContainerStyle },
	          _react2["default"].createElement(
	            "div",
	            { className: "ui blue tiny basic label",
	              style: this.labelStyle },
	            this.props.userstore.getText('minimap')
	          )
	        ),
	        _react2["default"].createElement(
	          "div",
	          { style: this.imageContainerStyle,
	            onClick: this.moveViewToClickLocation.bind(this),
	            onMouseDown: this.beginDragViewport.bind(this),
	            onMouseUp: this.endDragViewport.bind(this),
	            onMouseMove: this.trackMouseMove.bind(this),
	            onWheel: this.changeZoom.bind(this) },
	          _react2["default"].createElement("img", {
	            className: "ui fluid image",
	            style: this.imageStyle,
	            src: this.state.imgUrl,
	            alt: this.props.userstore.getText('noActiveImage'),
	            onDragStart: this.suppress.bind(this),
	            ref: "image" }),
	          _react2["default"].createElement("div", { style: this.boundingBoxStyle })
	        )
	      );
	    }
	  }]);

	  return Minimap;
	})(_react2["default"].Component);

	exports["default"] = Minimap;
	module.exports = exports["default"];

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Actions for the minimap component.
	 *
	 * Created by dmitri on 05/10/15.
	 */
	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsMinimapConstants = __webpack_require__(195);

	var _constantsMinimapConstants2 = _interopRequireDefault(_constantsMinimapConstants);

	exports['default'] = {
	  /**
	   * Initializes the minimap with given parameters
	   * @param imgUrl String url of the image to display in minimap
	   * @param imgWidth Integer natural width of the image as displayed in the View
	   * @param imgHeight Integer natural height of the image as displayed in the View
	   * @param xZero Integer x-coordinate of the image in the View
	   * @param yZero Integer y-coordinate of the image in the View
	   */
	  initMinimap: function initMinimap(imgUrl, imgWidth, imgHeight, xZero, yZero) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsMinimapConstants2['default'].ActionTypes.INIT_MINIMAP,
	      url: imgUrl,
	      imgWidth: imgWidth,
	      imgHeight: imgHeight,
	      xZero: xZero,
	      yZero: yZero
	    });
	  },

	  /**
	   * Clears the current minimap image
	   */
	  unsetMinimap: function unsetMinimap() {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsMinimapConstants2['default'].ActionTypes.UNSET_MINIMAP
	    });
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Flux action dispatcher
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _flux = __webpack_require__(192);

	exports['default'] = new _flux.Dispatcher();
	module.exports = exports['default'];

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	module.exports.Dispatcher = __webpack_require__(193);


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Dispatcher
	 * 
	 * @preventMunge
	 */

	'use strict';

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var invariant = __webpack_require__(194);

	var _prefix = 'ID_';

	/**
	 * Dispatcher is used to broadcast payloads to registered callbacks. This is
	 * different from generic pub-sub systems in two ways:
	 *
	 *   1) Callbacks are not subscribed to particular events. Every payload is
	 *      dispatched to every registered callback.
	 *   2) Callbacks can be deferred in whole or part until other callbacks have
	 *      been executed.
	 *
	 * For example, consider this hypothetical flight destination form, which
	 * selects a default city when a country is selected:
	 *
	 *   var flightDispatcher = new Dispatcher();
	 *
	 *   // Keeps track of which country is selected
	 *   var CountryStore = {country: null};
	 *
	 *   // Keeps track of which city is selected
	 *   var CityStore = {city: null};
	 *
	 *   // Keeps track of the base flight price of the selected city
	 *   var FlightPriceStore = {price: null}
	 *
	 * When a user changes the selected city, we dispatch the payload:
	 *
	 *   flightDispatcher.dispatch({
	 *     actionType: 'city-update',
	 *     selectedCity: 'paris'
	 *   });
	 *
	 * This payload is digested by `CityStore`:
	 *
	 *   flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'city-update') {
	 *       CityStore.city = payload.selectedCity;
	 *     }
	 *   });
	 *
	 * When the user selects a country, we dispatch the payload:
	 *
	 *   flightDispatcher.dispatch({
	 *     actionType: 'country-update',
	 *     selectedCountry: 'australia'
	 *   });
	 *
	 * This payload is digested by both stores:
	 *
	 *   CountryStore.dispatchToken = flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'country-update') {
	 *       CountryStore.country = payload.selectedCountry;
	 *     }
	 *   });
	 *
	 * When the callback to update `CountryStore` is registered, we save a reference
	 * to the returned token. Using this token with `waitFor()`, we can guarantee
	 * that `CountryStore` is updated before the callback that updates `CityStore`
	 * needs to query its data.
	 *
	 *   CityStore.dispatchToken = flightDispatcher.register(function(payload) {
	 *     if (payload.actionType === 'country-update') {
	 *       // `CountryStore.country` may not be updated.
	 *       flightDispatcher.waitFor([CountryStore.dispatchToken]);
	 *       // `CountryStore.country` is now guaranteed to be updated.
	 *
	 *       // Select the default city for the new country
	 *       CityStore.city = getDefaultCityForCountry(CountryStore.country);
	 *     }
	 *   });
	 *
	 * The usage of `waitFor()` can be chained, for example:
	 *
	 *   FlightPriceStore.dispatchToken =
	 *     flightDispatcher.register(function(payload) {
	 *       switch (payload.actionType) {
	 *         case 'country-update':
	 *         case 'city-update':
	 *           flightDispatcher.waitFor([CityStore.dispatchToken]);
	 *           FlightPriceStore.price =
	 *             getFlightPriceStore(CountryStore.country, CityStore.city);
	 *           break;
	 *     }
	 *   });
	 *
	 * The `country-update` payload will be guaranteed to invoke the stores'
	 * registered callbacks in order: `CountryStore`, `CityStore`, then
	 * `FlightPriceStore`.
	 */

	var Dispatcher = (function () {
	  function Dispatcher() {
	    _classCallCheck(this, Dispatcher);

	    this._callbacks = {};
	    this._isDispatching = false;
	    this._isHandled = {};
	    this._isPending = {};
	    this._lastID = 1;
	  }

	  /**
	   * Registers a callback to be invoked with every dispatched payload. Returns
	   * a token that can be used with `waitFor()`.
	   */

	  Dispatcher.prototype.register = function register(callback) {
	    var id = _prefix + this._lastID++;
	    this._callbacks[id] = callback;
	    return id;
	  };

	  /**
	   * Removes a callback based on its token.
	   */

	  Dispatcher.prototype.unregister = function unregister(id) {
	    !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.unregister(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
	    delete this._callbacks[id];
	  };

	  /**
	   * Waits for the callbacks specified to be invoked before continuing execution
	   * of the current callback. This method should only be used by a callback in
	   * response to a dispatched payload.
	   */

	  Dispatcher.prototype.waitFor = function waitFor(ids) {
	    !this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Must be invoked while dispatching.') : invariant(false) : undefined;
	    for (var ii = 0; ii < ids.length; ii++) {
	      var id = ids[ii];
	      if (this._isPending[id]) {
	        !this._isHandled[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): Circular dependency detected while ' + 'waiting for `%s`.', id) : invariant(false) : undefined;
	        continue;
	      }
	      !this._callbacks[id] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatcher.waitFor(...): `%s` does not map to a registered callback.', id) : invariant(false) : undefined;
	      this._invokeCallback(id);
	    }
	  };

	  /**
	   * Dispatches a payload to all registered callbacks.
	   */

	  Dispatcher.prototype.dispatch = function dispatch(payload) {
	    !!this._isDispatching ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch.') : invariant(false) : undefined;
	    this._startDispatching(payload);
	    try {
	      for (var id in this._callbacks) {
	        if (this._isPending[id]) {
	          continue;
	        }
	        this._invokeCallback(id);
	      }
	    } finally {
	      this._stopDispatching();
	    }
	  };

	  /**
	   * Is this Dispatcher currently dispatching.
	   */

	  Dispatcher.prototype.isDispatching = function isDispatching() {
	    return this._isDispatching;
	  };

	  /**
	   * Call the callback stored with the given id. Also do some internal
	   * bookkeeping.
	   *
	   * @internal
	   */

	  Dispatcher.prototype._invokeCallback = function _invokeCallback(id) {
	    this._isPending[id] = true;
	    this._callbacks[id](this._pendingPayload);
	    this._isHandled[id] = true;
	  };

	  /**
	   * Set up bookkeeping needed when dispatching.
	   *
	   * @internal
	   */

	  Dispatcher.prototype._startDispatching = function _startDispatching(payload) {
	    for (var id in this._callbacks) {
	      this._isPending[id] = false;
	      this._isHandled[id] = false;
	    }
	    this._pendingPayload = payload;
	    this._isDispatching = true;
	  };

	  /**
	   * Clear bookkeeping used for dispatching.
	   *
	   * @internal
	   */

	  Dispatcher.prototype._stopDispatching = function _stopDispatching() {
	    delete this._pendingPayload;
	    this._isDispatching = false;
	  };

	  return Dispatcher;
	})();

	module.exports = Dispatcher;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */

	"use strict";

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function (condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error('Invariant Violation: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 195 */
/***/ function(module, exports) {

	/**
	 * Constants for the minimap actions.
	 *
	 * Created by dmitri on 06/10/15.
	 */
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  ActionTypes: {
	    INIT_MINIMAP: "INIT_MINIMAP",
	    UNSET_MINIMAP: "UNSET_MINIMAP"
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Actions on the view (most only produce results when lab bench is active)
	 */
	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsViewConstants = __webpack_require__(197);

	var _constantsViewConstants2 = _interopRequireDefault(_constantsViewConstants);

	exports['default'] = {
	  /**
	   * Sets the id of the active set in LabBenchStore
	   * @param setId String UID of the Set
	   */
	  setActiveSet: function setActiveSet(setId) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsViewConstants2['default'].ActionTypes.Server.VIEW_SET_DISPLAYED_SET,
	      id: setId
	    });
	  },

	  /**
	   * Sets the id of the active view in LabBenchStore. Not used yet as only one View per Set
	   * @param viewId String UID of the View
	   */
	  setActiveView: function setActiveView(viewId) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsViewConstants2['default'].ActionTypes.Local.SET_ACTIVE_VIEW,
	      id: viewId
	    });
	  },

	  /**
	   * Changes the selected entity in the displayed lab bench. This is used by tools and palettes.
	   * @param id String UID of the entity to be selected
	   * @param data Object data of the entity (usually the D3 datum)
	   */
	  changeSelection: function changeSelection(id, data) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsViewConstants2['default'].ActionTypes.Local.VIEW_SET_SELECTION,
	      selection: { id: id, data: data }
	    });
	  },

	  /**
	   * Changes the view to fit all entities in it
	   */
	  fitView: function fitView() {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsViewConstants2['default'].ActionTypes.Local.VIEW_FIT_ALL
	    });
	  },

	  /**
	   * Changes the viewport data.
	   * @param x Integer left of the viewport (D3 coordinates)
	   * @param y Integer top of the viewport (D3 coordinates)
	   * @param width Integer width of the viewport (in browser window pixels)
	   * @param height Integer height of the viewport (in browser window pixels)
	   * @param scale Integer current display scale transformation factor (D3 transform)
	   * @param animate Boolean optional, specifies if the transition should be progressive (true) or instant (false, default)
	   */
	  updateViewport: function updateViewport(x, y, width, height, scale) {
	    var animate = arguments.length <= 5 || arguments[5] === undefined ? false : arguments[5];

	    //console.log('updateViewport(' + x + ',' + y + ',' + width + ',' + height + ',' + scale + ')');
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsViewConstants2['default'].ActionTypes.Local.UPDATE_VIEWPORT,
	      x: x,
	      y: y,
	      height: height,
	      width: width,
	      scale: scale,
	      animate: animate
	    });
	  },

	  /**
	   * Change viewport location in browser window
	   * @param top Integer top of the viewport (browser window coordinates)
	   * @param left Integer left of the viewport (browser window coordinates)
	   */
	  updateViewportLocation: function updateViewportLocation(top, left) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsViewConstants2['default'].ActionTypes.Local.UPDATE_VIEWPORT_LOCATION,
	      top: top,
	      left: left
	    });
	  },

	  /**
	   * Change various properties of the view, such as the size of displayed objects (not used)
	   * @param properties
	   */
	  updateViewProperties: function updateViewProperties(properties) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsViewConstants2['default'].ActionTypes.Local.UPDATE_VIEW_PROPERTIES,
	      properties: properties
	    });
	  },

	  /**
	   * Change display filters (turn on or off display of spatial anchors)
	   * @param filters Object specifies which values to change, values not provided in this object are not changed. See ViewStore.displayedTypes for available filters. An additional available filter is 'all', which overrides any other parameter provided.
	   */
	  updateDisplayFilters: function updateDisplayFilters(filters) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsViewConstants2['default'].ActionTypes.Local.UPDATE_VIEW_FILTERS,
	      filters: filters
	    });
	  },

	  /**
	   * Associate a uid to a color (to be displayed in lab bench)
	   * @param uid
	   * @param color may be null (switches to default color)
	   * @param add boolean, if true add color if false remove color
	   */
	  setDisplayColor: function setDisplayColor(uid, color, add) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsViewConstants2['default'].ActionTypes.Local.UPDATE_VIEW_COLORS,
	      id: uid,
	      color: color,
	      add: add
	    });
	  },

	  /**
	   * Changes the text displayed in the lab bench loader. If null, the loader is not displayed
	   * @param text Text to use. May contain HTML
	   */
	  changeLoaderState: function changeLoaderState(text) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsViewConstants2['default'].ActionTypes.Local.LOADER_CHANGE_STATE,
	      text: text
	    });
	  },

	  /**
	   * Request for an image to be loaded in the background.
	   * @param source String url of the image to load
	   * @param onLoadCallback Function (optional) callback to be called when image is loaded. Callback is provided the Image element when loaded.
	   */
	  loadImage: function loadImage(source) {
	    var onLoadCallback = arguments.length <= 1 || arguments[1] === undefined ? function () {} : arguments[1];

	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsViewConstants2['default'].ActionTypes.Local.SCHEDULE_IMAGE_LOAD,
	      source: source,
	      callback: onLoadCallback
	    });
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 197 */
/***/ function(module, exports) {

	/**
	 * Constants for interacting with the view.
	 */
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  // Actions, the Server/Local distinction is inherited from the time of the REST API. No real reason to keep them separate now.
	  ActionTypes: {
	    Server: {
	      VIEW_SET_DISPLAYED_SET: 20
	    },
	    Local: {
	      UPDATE_VIEWPORT: "VIEW_UPDATE_VIEWPORT",
	      UPDATE_VIEWPORT_LOCATION: "VIEW_UPDATE_VIEWPORT_LOCATION",
	      UPDATE_VIEW_PROPERTIES: "VIEW_UPDATE_VIEW_PROPERTIES",
	      UPDATE_VIEW_FILTERS: "VIEW_UPDATE_VIEW_FILTERS",
	      UPDATE_VIEW_COLORS: "VIEW_UPDATE_VIEW_COLORS",
	      SET_ACTIVE_VIEW: 'VIEW_SET_ACTIVE_VIEW',
	      VIEW_SET_SELECTION: "VIEW_SET_SELECTION",
	      VIEW_FIT_ALL: "VIEW_FIT_ALL",
	      LOADER_CHANGE_STATE: "VIEW_LOADER_CHANGE_STATE",
	      SCHEDULE_IMAGE_LOAD: "VIEW_SCHEDULE_IMAGE_LOAD"
	    }
	  },
	  // z-indices for various components with fixed/absolute position
	  zIndices: {
	    topPane: 502,
	    leftPane: 500,
	    rightPane: 500,
	    leftPaneCloseButton: 499,
	    rightPaneCloseButton: 499,
	    topPaneCloseButton: 502,
	    mainMenu: 9000,
	    contextMenu: 9001,
	    modalDimmer: 10000,
	    loginRequiredModal: 10001
	  },
	  // Quality of images corresponds to their size (thumbnail, intermediate, original)
	  imageQuality: {
	    Low: 1,
	    High: 2,
	    Original: 3
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Displays the available tools. Some of the tool access buttons are hidden, these are merely here in order to be registered within the application and be callable by other means than from this Toolbox.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _implLineMeasure = __webpack_require__(199);

	var _implLineMeasure2 = _interopRequireDefault(_implLineMeasure);

	var _implCreatePoI = __webpack_require__(260);

	var _implCreatePoI2 = _interopRequireDefault(_implCreatePoI);

	var _implMoveObjectJs = __webpack_require__(262);

	var _implMoveObjectJs2 = _interopRequireDefault(_implMoveObjectJs);

	var _implCreatePath = __webpack_require__(267);

	var _implCreatePath2 = _interopRequireDefault(_implCreatePath);

	var _implCreateRoI = __webpack_require__(270);

	var _implCreateRoI2 = _interopRequireDefault(_implCreateRoI);

	var _implCreateAngle = __webpack_require__(274);

	var _implCreateAngle2 = _interopRequireDefault(_implCreateAngle);

	var _implCreateMeasureStandard = __webpack_require__(277);

	var _implCreateMeasureStandard2 = _interopRequireDefault(_implCreateMeasureStandard);

	var _implNoTool = __webpack_require__(280);

	var _implNoTool2 = _interopRequireDefault(_implNoTool);

	var Toolbox = (function (_React$Component) {
	  _inherits(Toolbox, _React$Component);

	  function Toolbox(props) {
	    var _this = this;

	    _classCallCheck(this, Toolbox);

	    _get(Object.getPrototypeOf(Toolbox.prototype), 'constructor', this).call(this, props);

	    this.componentStyle = {
	      padding: '5px 5px 5px 5px',
	      borderColor: '#2185d0!important'
	    };

	    this.labelContainerStyle = {
	      position: 'relative',
	      width: 0,
	      height: '10px'
	    };

	    this.labelStyle = {
	      position: 'relative',
	      top: '-15px',
	      left: '10px',
	      whiteSpace: 'nowrap'
	    };

	    this.buttonRowsStyle = {
	      display: "flex",
	      flexDirection: 'row',
	      flexWrap: 'wrap'
	    };

	    this.hiddenButtons = {
	      position: 'absolute',
	      left: '-20px',
	      top: '-20px',
	      //zIndex: -10000,
	      maxWidth: '1px',
	      maxHeight: '1px',
	      overflow: 'hidden'
	    };

	    this._forceUpdate = function () {
	      var update = function update() {
	        return _this.setState({});
	      };
	      return update.apply(_this);
	    };
	  }

	  _createClass(Toolbox, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.modestore.addModeChangeListener(this._forceUpdate);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {}
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.modestore.removeModeChangeListener(this._forceUpdate);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { style: this.componentStyle, className: 'ui container segment' },
	        _react2['default'].createElement(
	          'div',
	          { style: this.labelContainerStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui blue tiny basic label',
	              style: this.labelStyle },
	            this.props.userstore.getText('tools')
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.hiddenButtons },
	          _react2['default'].createElement(_implNoTool2['default'], {
	            userstore: this.props.userstore }),
	          _react2['default'].createElement(_implMoveObjectJs2['default'], { viewstore: this.props.viewstore,
	            userstore: this.props.userstore })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui three buttons', style: this.buttonRowsStyle },
	          _react2['default'].createElement(_implLineMeasure2['default'], {
	            toolstore: this.props.toolstore,
	            userstore: this.props.userstore,
	            benchstore: this.props.benchstore,
	            metastore: this.props.metastore,
	            viewstore: this.props.viewstore }),
	          _react2['default'].createElement(_implCreateAngle2['default'], {
	            viewstore: this.props.viewstore,
	            userstore: this.props.userstore,
	            metastore: this.props.metastore,
	            toolstore: this.props.toolstore }),
	          _react2['default'].createElement(_implCreateMeasureStandard2['default'], {
	            viewstore: this.props.viewstore,
	            userstore: this.props.userstore,
	            metastore: this.props.metastore,
	            toolstore: this.props.toolstore })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui three buttons', style: this.buttonRowsStyle },
	          _react2['default'].createElement(_implCreatePoI2['default'], {
	            toolstore: this.props.toolstore,
	            userstore: this.props.userstore,
	            metastore: this.props.metastore,
	            viewstore: this.props.viewstore }),
	          _react2['default'].createElement(_implCreatePath2['default'], {
	            viewstore: this.props.viewstore,
	            benchstore: this.props.benchstore,
	            userstore: this.props.userstore,
	            metastore: this.props.metastore,
	            toolstore: this.props.toolstore }),
	          _react2['default'].createElement(_implCreateRoI2['default'], {
	            viewstore: this.props.viewstore,
	            userstore: this.props.userstore,
	            metastore: this.props.metastore,
	            toolstore: this.props.toolstore })
	        )
	      );
	    }
	  }]);

	  return Toolbox;
	})(_react2['default'].Component);

	exports['default'] = Toolbox;
	module.exports = exports['default'];

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Implementation of AbstractTool to measure lines. Works exactly as a ToI (down to database type) but does not allow to create 'broken' lines.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _nodeUuid = __webpack_require__(201);

	var _nodeUuid2 = _interopRequireDefault(_nodeUuid);

	var _constantsCommonSVGClasses = __webpack_require__(224);

	var _constantsCommonSVGClasses2 = _interopRequireDefault(_constantsCommonSVGClasses);

	var _popupsLineMeasurePopup = __webpack_require__(225);

	var _popupsLineMeasurePopup2 = _interopRequireDefault(_popupsLineMeasurePopup);

	var _AbstractTool2 = __webpack_require__(258);

	var _AbstractTool3 = _interopRequireDefault(_AbstractTool2);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _confToolsConf = __webpack_require__(257);

	var _confToolsConf2 = _interopRequireDefault(_confToolsConf);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var _imagesMeasureSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/measure.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesMeasureSvg2 = _interopRequireDefault(_imagesMeasureSvg);

	/**
	 * A tool registers itself with the ToolStore, providing its name and a callback function.
	 */

	var LineMeasure = (function (_AbstractTool) {
	  _inherits(LineMeasure, _AbstractTool);

	  function LineMeasure(props) {
	    var _this = this;

	    _classCallCheck(this, LineMeasure);

	    _get(Object.getPrototypeOf(LineMeasure.prototype), 'constructor', this).call(this, props);

	    this.dragStartVertex = _d32['default'].behavior.drag().origin(function (d) {
	      return d;
	    }).on('drag', LineMeasure.dragStartVertexDrag);

	    this.dragEndVertex = _d32['default'].behavior.drag().origin(function (d) {
	      return d;
	    }).on('drag', LineMeasure.dragEndVertexDrag);

	    this.iconStyle = {
	      margin: '8px 10px 0px 0px'
	    };

	    this._onZoom = function () {
	      var adaptDisplay = function adaptDisplay() {
	        return _this.adaptMeasureDisplaysToZoom(_this.props.viewstore.getView());
	      };
	      return adaptDisplay.apply(_this);
	    };

	    this.popup = null;

	    this.state = this.initialState();
	  }

	  // <i className='ui large wizard icon'></i>

	  _createClass(LineMeasure, [{
	    key: 'initialState',
	    value: function initialState() {
	      return {
	        active: false,
	        imageUri: null,
	        imageLinkUri: null,
	        tooltip: null,
	        start: null,
	        end: null,
	        uuid: null,
	        scale: null,
	        mmPerPixel: null
	      };
	    }
	  }, {
	    key: 'adaptMeasureDisplaysToZoom',
	    value: function adaptMeasureDisplaysToZoom(view) {
	      _d32['default'].selectAll('.' + LineMeasure.classes().selfSvgClass).attr('stroke-width', 2 / view.scale);

	      _d32['default'].selectAll('.' + LineMeasure.classes().selfDashSvgClass).attr('stroke-width', 2 / view.scale).attr('stroke-dasharray', 5 / view.scale + ',' + 5 / view.scale);

	      _d32['default'].selectAll('.' + LineMeasure.classes().selfTextSvgClass).attr('stroke-width', 1 / (4 * view.scale) + 'px')
	      //.attr('dy', 0.35/view.scale + 'em')
	      .attr('font-size', 20 / view.scale + 'px');

	      _d32['default'].selectAll('.' + LineMeasure.classes().selfStartVertexClass).attr('stroke-width', 3 / view.scale).attr('r', 6 / view.scale);

	      _d32['default'].selectAll('.' + LineMeasure.classes().selfEndVertexClass).attr('stroke-width', 3 / view.scale).attr('r', 6 / view.scale);
	    }
	  }, {
	    key: 'createActiveMeasure',
	    value: function createActiveMeasure(x, y, uuid, data) {
	      var activeToolGroup = _d32['default'].select('#OVER-' + data.link);

	      var scales = {};
	      var imageMetadata = this.props.benchstore.getData(data.entity);
	      var scaleIds = JSON.parse(JSON.stringify(imageMetadata.scales));
	      var exifMmPerPx = _utilsGlobals2['default'].getEXIFScalingData(imageMetadata);
	      if (exifMmPerPx) {
	        scales.exif = {
	          name: this.props.userstore.getText('exifData'),
	          uid: 'exif',
	          mmPerPixel: exifMmPerPx
	        };
	      }

	      var useScaleId = null;
	      for (var i = 0; i < scaleIds.length; ++i) {
	        //console.log(JSON.stringify(this.props.benchstore.getData(scaleIds[i])));
	        var scale = this.props.metastore.getMetadataAbout(scaleIds[i]);
	        if (scale) {
	          scales[scaleIds[i]] = {
	            name: scale.name,
	            uid: scale.uid,
	            mmPerPixel: scale.mmPerPixel
	          };
	          useScaleId = scale.uid;
	        }
	      }

	      var lineData = {
	        x1: x,
	        y1: y,
	        x2: x,
	        y2: y,
	        id: uuid,
	        image: data.entity,
	        link: data.link,
	        scales: scales,
	        scale: useScaleId ? useScaleId : exifMmPerPx ? 'exif' : null,
	        unit: useScaleId || exifMmPerPx ? 'mm' : 'px',
	        date: new Date(),
	        mmPerPixel: useScaleId ? scales[useScaleId].mmPerPixel : exifMmPerPx ? exifMmPerPx : null
	      };

	      // if(this.state.scale) {
	      //   if(scales[this.state.scale]) {
	      //     lineData.mmPerPixel = scales[this.state.scale].mmPerPixel;
	      //     lineData.unit = 'mm';
	      //   } else {
	      //     this.setState({scale: useScaleId});
	      //   }
	      // }else {
	      //   this.setState({scale: useScaleId});
	      // }

	      var view = this.props.viewstore.getView();

	      var newMeasure = activeToolGroup.append('g').datum(lineData).attr('id', function (d) {
	        return 'MEASURE-' + d.id;
	      }).attr('class', LineMeasure.classes().selfGroupSvgClass);

	      newMeasure.append('line').datum(lineData).attr('class', LineMeasure.classes().selfSvgClass).attr('stroke-width', 2 / view.scale).attr('stroke', 'white').style('pointer-events', 'none');

	      newMeasure.append('line').datum(lineData).attr('class', LineMeasure.classes().selfDashSvgClass).attr('stroke-width', 2 / view.scale).attr('stroke-dasharray', 5 / view.scale + ',' + 5 / view.scale).attr('stroke', 'black').style('pointer-events', 'none');

	      var group = newMeasure.append('g').datum(lineData).attr('class', LineMeasure.classes().selfDataContainerClass);

	      group.append('text').datum(lineData).attr('class', LineMeasure.classes().selfTextSvgClass).attr('text-anchor', 'middle').attr('stroke-width', 1 / (4 * view.scale) + 'px').attr('font-size', 20 / view.scale + 'px').attr('stroke', 'black').attr('fill', 'white').style('filter', 'url(#drop-shadow)').style('pointer-events', 'none');

	      LineMeasure.updateLineDisplay(lineData.id);

	      var self = this;
	      _d32['default'].select('#GROUP-' + data.link).on("mousemove", function (d, i) {
	        self.setLineEndPosition.call(this, self);
	      });

	      window.setTimeout(_actionsToolActions2['default'].updateToolData.bind(null, null), 10);
	    }
	  }, {
	    key: 'makeActiveMeasurePassive',
	    value: function makeActiveMeasurePassive(x, y, data) {
	      var view = this.props.viewstore.getView();
	      // Grab active measure
	      var activeToolGroup = _d32['default'].select('#MEASURE-' + this.state.uuid);
	      var self = this;
	      var lineData = activeToolGroup.datum();
	      // Remove mousemove listener
	      _d32['default'].select('#GROUP' + this.state.imageLinkUri).on("mousemove", null);
	      // Create point (circle) at both ends with drag listeners
	      activeToolGroup.append('circle').datum(lineData).attr('class', LineMeasure.classes().selfStartVertexClass).attr('r', 6 / view.scale).attr('stroke-width', 3 / view.scale).attr('fill', 'black').attr('stroke', 'white').style('cursor', '-webkit-grab').style('cursor', 'grab').on('click', LineMeasure.stopEvent).on('mousedown', LineMeasure.stopEvent).call(this.dragStartVertex);

	      activeToolGroup.append('circle').datum(lineData).attr('class', LineMeasure.classes().selfEndVertexClass).attr('r', 6 / view.scale).attr('stroke-width', 3 / view.scale).attr('fill', 'black').attr('stroke', 'white').style('cursor', '-webkit-grab').style('cursor', 'grab').on('click', LineMeasure.stopEvent).on('mousedown', LineMeasure.stopEvent).call(this.dragEndVertex);

	      LineMeasure.updateLineDisplay(this.state.uuid);

	      // window.setTimeout(ToolActions.updateToolData.bind(null, null), 10);
	    }
	  }, {
	    key: 'removeSVG',
	    value: function removeSVG() {
	      _d32['default'].selectAll('.' + LineMeasure.classes().selfGroupSvgClass).remove();
	    }
	  }, {
	    key: 'begin',
	    value: function begin() {
	      var popup = _react2['default'].createElement(_popupsLineMeasurePopup2['default'], {
	        userstore: this.props.userstore,
	        toolstore: this.props.toolstore,
	        metastore: this.props.metastore,
	        viewstore: this.props.viewstore,
	        setScaleCallback: this.setScale.bind(this) });
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate.bind(null, popup), 10);

	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('lineMeasureTooltip')), 10);
	      window.setTimeout(_actionsViewActions2['default'].updateDisplayFilters.bind(null, { trails: true }), 10);

	      var self = this;
	      _d32['default'].selectAll('.' + _constantsCommonSVGClasses2['default'].IMAGE_CLASS).style('cursor', 'crosshair').on('click', function (d, i) {
	        if (_d32['default'].event.defaultPrevented) return;
	        _d32['default'].event.preventDefault();
	        _d32['default'].event.stopPropagation();
	        if (_d32['default'].event.button == 0) {
	          self.leftClick.call(this, self, d);
	        }
	      }).on('contextmenu', function (d, i) {
	        if (_d32['default'].event.defaultPrevented) return;
	        _d32['default'].event.preventDefault();
	        _d32['default'].event.stopPropagation();
	        self.rightClick.call(this, self, d);
	      });

	      this.setState({ active: true });
	    }
	  }, {
	    key: 'reset',
	    value: function reset() {
	      this.removeMouseMoveListener();
	      this.removeSVG();
	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('lineMeasureTooltip')), 10);
	      this.setState({ start: null, end: null,
	        imageUri: null, imageLinkUri: null, uuid: null });

	      window.setTimeout(_actionsToolActions2['default'].updateToolData.bind(null, null), 10);
	    }
	  }, {
	    key: 'finish',
	    value: function finish() {
	      _d32['default'].selectAll('.' + _constantsCommonSVGClasses2['default'].IMAGE_CLASS).style('cursor', 'default').on('click', null).on('contextmenu', null);
	      // TODO remove all measures
	      this.removeSVG();

	      this.removeMouseMoveListener();
	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, ''), 10);
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate.bind(null, null), 10);
	      window.setTimeout(_actionsToolActions2['default'].updateToolData.bind(null, null), 10);
	      this.setState(this.initialState());
	    }
	  }, {
	    key: 'click',
	    value: function click(self, x, y) {
	      // This is no longer necessary
	    }
	  }, {
	    key: 'setMode',
	    value: function setMode() {
	      _actionsToolActions2['default'].setTool(_confToolsConf2['default'].lineMeasure.id);
	    }
	  }, {
	    key: 'startLine',
	    value: function startLine(x, y, data) {
	      var uuid = _nodeUuid2['default'].v4();
	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('lineMeasureTooltip1')), 10);
	      this.createActiveMeasure(x, y, uuid, data);
	      this.setState({
	        //  start: {x: x, y: y},
	        uuid: uuid,
	        imageLinkUri: data.link,
	        imageUri: data.entity
	      });
	      window.setTimeout(_actionsToolActions2['default'].updateToolData.bind(null, null), 10);
	    }
	  }, {
	    key: 'endLine',
	    value: function endLine(x, y, data) {
	      this.removeMouseMoveListener();
	      this.makeActiveMeasurePassive(x, y, data);

	      // window.setTimeout(ToolActions.updateToolData.bind(null, null), 10);

	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('lineMeasureTooltip')), 10);
	      this.setState({ start: null, end: null,
	        imageUri: null, imageLinkUri: null, uuid: null });
	    }
	  }, {
	    key: 'leftClick',
	    value: function leftClick(self, d) {
	      if (!self.state.imageLinkUri) {
	        var coords = _d32['default'].mouse(this);
	        self.startLine.call(self, coords[0], coords[1], d);
	      } else if (self.state.imageLinkUri == d.link) {
	        var coords = _d32['default'].mouse(this);
	        self.endLine.call(self, coords[0], coords[1], d);
	      } else {
	        _actionsToolActions2['default'].updateTooltipData(self.props.userstore.getText('lineMeasureTooltip2'));
	      }
	    }
	  }, {
	    key: 'rightClick',
	    value: function rightClick(self, d) {
	      self.reset.call(self);
	    }
	  }, {
	    key: 'canSave',
	    value: function canSave() {
	      return false;
	    }
	  }, {
	    key: 'save',
	    value: function save(d) {
	      // The save action is called from/by the popup in the current ergonomy.
	    }
	  }, {
	    key: 'setLineEndPosition',
	    value: function setLineEndPosition(self) {
	      var coords = _d32['default'].mouse(this);

	      var measure = _d32['default'].select('#MEASURE-' + self.state.uuid);
	      var lineData = measure.datum();
	      lineData.x2 = coords[0];
	      lineData.y2 = coords[1];
	      measure.datum(lineData);
	      measure.selectAll('*').datum(lineData);

	      LineMeasure.updateLineDisplay(lineData.id);

	      window.setTimeout(_actionsToolActions2['default'].updateToolData.bind(null, null), 10);
	    }
	  }, {
	    key: 'removeMouseMoveListener',
	    value: function removeMouseMoveListener() {
	      _d32['default'].select('#GROUP-' + this.state.imageLinkUri).on("mousemove", null);
	    }
	  }, {
	    key: 'setScale',
	    value: function setScale(scaleId) {
	      _d32['default'].selectAll('.' + LineMeasure.classes().selfGroupSvgClass).each(function (d) {
	        LineMeasure.updateLineDisplay(d.id);
	      });
	      this.setState({ scale: scaleId });
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _get(Object.getPrototypeOf(LineMeasure.prototype), 'componentDidMount', this).call(this);
	      this.props.viewstore.addViewportListener(this._onZoom);
	      window.setTimeout(_actionsToolActions2['default'].registerTool.bind(null, _confToolsConf2['default'].lineMeasure.id, this.click, this), 10);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.active) {
	        this.buttonStyle.backgroundColor = 'rgba(200,200,200,1.0)';
	      } else {
	        this.buttonStyle.backgroundColor = null;
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _get(Object.getPrototypeOf(LineMeasure.prototype), 'componentWillUnmount', this).call(this);
	      this.props.viewstore.removeViewportListener(this._onZoom);
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate, 10);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'button',
	        { ref: 'button',
	          style: this.buttonStyle,
	          className: 'ui button compact',
	          onClick: this.setMode,
	          'data-content': this.props.userstore.getText('newLineMeasure') },
	        _react2['default'].createElement('img', { src: _imagesMeasureSvg2['default'], style: this.iconStyle, height: '20px', width: '20px' })
	      );
	    }
	  }], [{
	    key: 'classes',
	    value: function classes() {
	      return {
	        selfSvgClass: "LINE_MEASURE_TOOL_CLASS",
	        selfDashSvgClass: "LINE_MEASURE_LINE_DASH_CLASS",
	        selfGroupSvgClass: "LINE_MEASURE_GROUP_CLASS",
	        selfDataContainerClass: "LINE_MEASURE_GROUP_DATA_CONTAINER_CLASS",
	        selfRectSvgClass: "LINE_MEASURE_RECT_TOOL_CLASS",
	        selfTextSvgClass: "LINE_MEASURE_TEXT_TOOL_CLASS",
	        selfStartVertexClass: "LINE_MEASURE_RECT_START_CLASS",
	        selfEndVertexClass: "LINE_MEASURE_RECT_END_CLASS"
	      };
	    }
	  }, {
	    key: 'updateLineDisplay',
	    value: function updateLineDisplay(id) {
	      //console.log("updating " + id);
	      var measure = _d32['default'].select('#MEASURE-' + id);

	      measure.selectAll('.' + LineMeasure.classes().selfSvgClass).attr('x1', function (d) {
	        return d.x1;
	      }).attr('y1', function (d) {
	        return d.y1;
	      }).attr('x2', function (d) {
	        return d.x2;
	      }).attr('y2', function (d) {
	        return d.y2;
	      });

	      measure.selectAll('.' + LineMeasure.classes().selfDashSvgClass).attr('x1', function (d) {
	        return d.x1;
	      }).attr('y1', function (d) {
	        return d.y1;
	      }).attr('x2', function (d) {
	        return d.x2;
	      }).attr('y2', function (d) {
	        return d.y2;
	      });

	      // var text = measure.select('.' + LineMeasure.classes().selfTextSvgClass)
	      //   .attr('x', d => (d.x2 + d.x1) / 2)
	      //   .attr('y', d => (d.y2 + d.y1) / 2)
	      //   .text(d => LineMeasure.calculateMeasuredLength(d).toFixed(2) + '' + d.unit);

	      // var width = text.node().getBBox().width;
	      // var height = text.node().getBBox().height;

	      measure.select('.' + LineMeasure.classes().selfStartVertexClass).attr('cx', function (d) {
	        return d.x1;
	      }).attr('cy', function (d) {
	        return d.y1;
	      });

	      measure.select('.' + LineMeasure.classes().selfEndVertexClass).attr('cx', function (d) {
	        return d.x2;
	      }).attr('cy', function (d) {
	        return d.y2;
	      });

	      window.setTimeout(_actionsToolActions2['default'].updateToolData.bind(null, null), 10);
	    }
	  }, {
	    key: 'stopEvent',
	    value: function stopEvent(d) {
	      if (_d32['default'].event.preventDefault) {
	        _d32['default'].event.preventDefault();
	      } else {
	        _d32['default'].event.returnValue = false;
	      }

	      if (_d32['default'].event.stopPropagation) {
	        _d32['default'].event.stopPropagation();
	      }

	      return false;
	    }
	  }, {
	    key: 'dragStartVertexDrag',
	    value: function dragStartVertexDrag(d) {
	      _d32['default'].event.sourceEvent.preventDefault();
	      _d32['default'].event.sourceEvent.stopPropagation();
	      d.x1 = _d32['default'].event.dx + d.x1;
	      d.y1 = _d32['default'].event.dy + d.y1;
	      _d32['default'].select('#MEASURE-' + d.id).datum(d).selectAll('*').datum(d);
	      LineMeasure.updateLineDisplay(d.id);
	      return false;
	    }
	  }, {
	    key: 'dragEndVertexDrag',
	    value: function dragEndVertexDrag(d) {
	      _d32['default'].event.sourceEvent.preventDefault();
	      _d32['default'].event.sourceEvent.stopPropagation();
	      d.x2 = _d32['default'].event.dx + d.x2;
	      d.y2 = _d32['default'].event.dy + d.y2;
	      _d32['default'].select('#MEASURE-' + d.id).datum(d).selectAll('*').datum(d);
	      LineMeasure.updateLineDisplay(d.id);
	      return false;
	    }
	  }, {
	    key: 'calculateMeasuredLength',
	    value: function calculateMeasuredLength(d) {
	      var yMax = Math.max(d.y1, d.y2);
	      var yMin = Math.min(d.y1, d.y2);
	      var xMax = Math.max(d.x1, d.x2);
	      var xMin = Math.min(d.x1, d.x2);
	      if (d.mmPerPixel) {
	        return Math.sqrt(Math.pow(yMax - yMin, 2) + Math.pow(xMax - xMin, 2)) * d.mmPerPixel;
	      } else {
	        return Math.sqrt(Math.pow(yMax - yMin, 2) + Math.pow(xMax - xMin, 2));
	      }
	    }
	  }]);

	  return LineMeasure;
	})(_AbstractTool3['default']);

	exports['default'] = LineMeasure;
	module.exports = exports['default'];

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {
	  var d3 = {
	    version: "3.5.17"
	  };
	  var d3_arraySlice = [].slice, d3_array = function(list) {
	    return d3_arraySlice.call(list);
	  };
	  var d3_document = this.document;
	  function d3_documentElement(node) {
	    return node && (node.ownerDocument || node.document || node).documentElement;
	  }
	  function d3_window(node) {
	    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
	  }
	  if (d3_document) {
	    try {
	      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
	    } catch (e) {
	      d3_array = function(list) {
	        var i = list.length, array = new Array(i);
	        while (i--) array[i] = list[i];
	        return array;
	      };
	    }
	  }
	  if (!Date.now) Date.now = function() {
	    return +new Date();
	  };
	  if (d3_document) {
	    try {
	      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
	    } catch (error) {
	      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
	      d3_element_prototype.setAttribute = function(name, value) {
	        d3_element_setAttribute.call(this, name, value + "");
	      };
	      d3_element_prototype.setAttributeNS = function(space, local, value) {
	        d3_element_setAttributeNS.call(this, space, local, value + "");
	      };
	      d3_style_prototype.setProperty = function(name, value, priority) {
	        d3_style_setProperty.call(this, name, value + "", priority);
	      };
	    }
	  }
	  d3.ascending = d3_ascending;
	  function d3_ascending(a, b) {
	    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	  }
	  d3.descending = function(a, b) {
	    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	  };
	  d3.min = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
	    }
	    return a;
	  };
	  d3.max = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
	    }
	    return a;
	  };
	  d3.extent = function(array, f) {
	    var i = -1, n = array.length, a, b, c;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    }
	    return [ a, c ];
	  };
	  function d3_number(x) {
	    return x === null ? NaN : +x;
	  }
	  function d3_numeric(x) {
	    return !isNaN(x);
	  }
	  d3.sum = function(array, f) {
	    var s = 0, n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
	    } else {
	      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
	    }
	    return s;
	  };
	  d3.mean = function(array, f) {
	    var s = 0, n = array.length, a, i = -1, j = n;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
	    }
	    if (j) return s / j;
	  };
	  d3.quantile = function(values, p) {
	    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
	    return e ? v + e * (values[h] - v) : v;
	  };
	  d3.median = function(array, f) {
	    var numbers = [], n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
	    }
	    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
	  };
	  d3.variance = function(array, f) {
	    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
	    if (arguments.length === 1) {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(array[i]))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    } else {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    }
	    if (j > 1) return s / (j - 1);
	  };
	  d3.deviation = function() {
	    var v = d3.variance.apply(this, arguments);
	    return v ? Math.sqrt(v) : v;
	  };
	  function d3_bisector(compare) {
	    return {
	      left: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
	        }
	        return lo;
	      },
	      right: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
	        }
	        return lo;
	      }
	    };
	  }
	  var d3_bisect = d3_bisector(d3_ascending);
	  d3.bisectLeft = d3_bisect.left;
	  d3.bisect = d3.bisectRight = d3_bisect.right;
	  d3.bisector = function(f) {
	    return d3_bisector(f.length === 1 ? function(d, x) {
	      return d3_ascending(f(d), x);
	    } : f);
	  };
	  d3.shuffle = function(array, i0, i1) {
	    if ((m = arguments.length) < 3) {
	      i1 = array.length;
	      if (m < 2) i0 = 0;
	    }
	    var m = i1 - i0, t, i;
	    while (m) {
	      i = Math.random() * m-- | 0;
	      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
	    }
	    return array;
	  };
	  d3.permute = function(array, indexes) {
	    var i = indexes.length, permutes = new Array(i);
	    while (i--) permutes[i] = array[indexes[i]];
	    return permutes;
	  };
	  d3.pairs = function(array) {
	    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
	    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
	    return pairs;
	  };
	  d3.transpose = function(matrix) {
	    if (!(n = matrix.length)) return [];
	    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {
	      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
	        row[j] = matrix[j][i];
	      }
	    }
	    return transpose;
	  };
	  function d3_transposeLength(d) {
	    return d.length;
	  }
	  d3.zip = function() {
	    return d3.transpose(arguments);
	  };
	  d3.keys = function(map) {
	    var keys = [];
	    for (var key in map) keys.push(key);
	    return keys;
	  };
	  d3.values = function(map) {
	    var values = [];
	    for (var key in map) values.push(map[key]);
	    return values;
	  };
	  d3.entries = function(map) {
	    var entries = [];
	    for (var key in map) entries.push({
	      key: key,
	      value: map[key]
	    });
	    return entries;
	  };
	  d3.merge = function(arrays) {
	    var n = arrays.length, m, i = -1, j = 0, merged, array;
	    while (++i < n) j += arrays[i].length;
	    merged = new Array(j);
	    while (--n >= 0) {
	      array = arrays[n];
	      m = array.length;
	      while (--m >= 0) {
	        merged[--j] = array[m];
	      }
	    }
	    return merged;
	  };
	  var abs = Math.abs;
	  d3.range = function(start, stop, step) {
	    if (arguments.length < 3) {
	      step = 1;
	      if (arguments.length < 2) {
	        stop = start;
	        start = 0;
	      }
	    }
	    if ((stop - start) / step === Infinity) throw new Error("infinite range");
	    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
	    start *= k, stop *= k, step *= k;
	    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
	    return range;
	  };
	  function d3_range_integerScale(x) {
	    var k = 1;
	    while (x * k % 1) k *= 10;
	    return k;
	  }
	  function d3_class(ctor, properties) {
	    for (var key in properties) {
	      Object.defineProperty(ctor.prototype, key, {
	        value: properties[key],
	        enumerable: false
	      });
	    }
	  }
	  d3.map = function(object, f) {
	    var map = new d3_Map();
	    if (object instanceof d3_Map) {
	      object.forEach(function(key, value) {
	        map.set(key, value);
	      });
	    } else if (Array.isArray(object)) {
	      var i = -1, n = object.length, o;
	      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
	    } else {
	      for (var key in object) map.set(key, object[key]);
	    }
	    return map;
	  };
	  function d3_Map() {
	    this._ = Object.create(null);
	  }
	  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
	  d3_class(d3_Map, {
	    has: d3_map_has,
	    get: function(key) {
	      return this._[d3_map_escape(key)];
	    },
	    set: function(key, value) {
	      return this._[d3_map_escape(key)] = value;
	    },
	    remove: d3_map_remove,
	    keys: d3_map_keys,
	    values: function() {
	      var values = [];
	      for (var key in this._) values.push(this._[key]);
	      return values;
	    },
	    entries: function() {
	      var entries = [];
	      for (var key in this._) entries.push({
	        key: d3_map_unescape(key),
	        value: this._[key]
	      });
	      return entries;
	    },
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
	    }
	  });
	  function d3_map_escape(key) {
	    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
	  }
	  function d3_map_unescape(key) {
	    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
	  }
	  function d3_map_has(key) {
	    return d3_map_escape(key) in this._;
	  }
	  function d3_map_remove(key) {
	    return (key = d3_map_escape(key)) in this._ && delete this._[key];
	  }
	  function d3_map_keys() {
	    var keys = [];
	    for (var key in this._) keys.push(d3_map_unescape(key));
	    return keys;
	  }
	  function d3_map_size() {
	    var size = 0;
	    for (var key in this._) ++size;
	    return size;
	  }
	  function d3_map_empty() {
	    for (var key in this._) return false;
	    return true;
	  }
	  d3.nest = function() {
	    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
	    function map(mapType, array, depth) {
	      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
	      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
	      while (++i < n) {
	        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
	          values.push(object);
	        } else {
	          valuesByKey.set(keyValue, [ object ]);
	        }
	      }
	      if (mapType) {
	        object = mapType();
	        setter = function(keyValue, values) {
	          object.set(keyValue, map(mapType, values, depth));
	        };
	      } else {
	        object = {};
	        setter = function(keyValue, values) {
	          object[keyValue] = map(mapType, values, depth);
	        };
	      }
	      valuesByKey.forEach(setter);
	      return object;
	    }
	    function entries(map, depth) {
	      if (depth >= keys.length) return map;
	      var array = [], sortKey = sortKeys[depth++];
	      map.forEach(function(key, keyMap) {
	        array.push({
	          key: key,
	          values: entries(keyMap, depth)
	        });
	      });
	      return sortKey ? array.sort(function(a, b) {
	        return sortKey(a.key, b.key);
	      }) : array;
	    }
	    nest.map = function(array, mapType) {
	      return map(mapType, array, 0);
	    };
	    nest.entries = function(array) {
	      return entries(map(d3.map, array, 0), 0);
	    };
	    nest.key = function(d) {
	      keys.push(d);
	      return nest;
	    };
	    nest.sortKeys = function(order) {
	      sortKeys[keys.length - 1] = order;
	      return nest;
	    };
	    nest.sortValues = function(order) {
	      sortValues = order;
	      return nest;
	    };
	    nest.rollup = function(f) {
	      rollup = f;
	      return nest;
	    };
	    return nest;
	  };
	  d3.set = function(array) {
	    var set = new d3_Set();
	    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
	    return set;
	  };
	  function d3_Set() {
	    this._ = Object.create(null);
	  }
	  d3_class(d3_Set, {
	    has: d3_map_has,
	    add: function(key) {
	      this._[d3_map_escape(key += "")] = true;
	      return key;
	    },
	    remove: d3_map_remove,
	    values: d3_map_keys,
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key));
	    }
	  });
	  d3.behavior = {};
	  function d3_identity(d) {
	    return d;
	  }
	  d3.rebind = function(target, source) {
	    var i = 1, n = arguments.length, method;
	    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
	    return target;
	  };
	  function d3_rebind(target, source, method) {
	    return function() {
	      var value = method.apply(source, arguments);
	      return value === source ? target : value;
	    };
	  }
	  function d3_vendorSymbol(object, name) {
	    if (name in object) return name;
	    name = name.charAt(0).toUpperCase() + name.slice(1);
	    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
	      var prefixName = d3_vendorPrefixes[i] + name;
	      if (prefixName in object) return prefixName;
	    }
	  }
	  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
	  function d3_noop() {}
	  d3.dispatch = function() {
	    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    return dispatch;
	  };
	  function d3_dispatch() {}
	  d3_dispatch.prototype.on = function(type, listener) {
	    var i = type.indexOf("."), name = "";
	    if (i >= 0) {
	      name = type.slice(i + 1);
	      type = type.slice(0, i);
	    }
	    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
	    if (arguments.length === 2) {
	      if (listener == null) for (type in this) {
	        if (this.hasOwnProperty(type)) this[type].on(name, null);
	      }
	      return this;
	    }
	  };
	  function d3_dispatch_event(dispatch) {
	    var listeners = [], listenerByName = new d3_Map();
	    function event() {
	      var z = listeners, i = -1, n = z.length, l;
	      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
	      return dispatch;
	    }
	    event.on = function(name, listener) {
	      var l = listenerByName.get(name), i;
	      if (arguments.length < 2) return l && l.on;
	      if (l) {
	        l.on = null;
	        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
	        listenerByName.remove(name);
	      }
	      if (listener) listeners.push(listenerByName.set(name, {
	        on: listener
	      }));
	      return dispatch;
	    };
	    return event;
	  }
	  d3.event = null;
	  function d3_eventPreventDefault() {
	    d3.event.preventDefault();
	  }
	  function d3_eventSource() {
	    var e = d3.event, s;
	    while (s = e.sourceEvent) e = s;
	    return e;
	  }
	  function d3_eventDispatch(target) {
	    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    dispatch.of = function(thiz, argumentz) {
	      return function(e1) {
	        try {
	          var e0 = e1.sourceEvent = d3.event;
	          e1.target = target;
	          d3.event = e1;
	          dispatch[e1.type].apply(thiz, argumentz);
	        } finally {
	          d3.event = e0;
	        }
	      };
	    };
	    return dispatch;
	  }
	  d3.requote = function(s) {
	    return s.replace(d3_requote_re, "\\$&");
	  };
	  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
	  var d3_subclass = {}.__proto__ ? function(object, prototype) {
	    object.__proto__ = prototype;
	  } : function(object, prototype) {
	    for (var property in prototype) object[property] = prototype[property];
	  };
	  function d3_selection(groups) {
	    d3_subclass(groups, d3_selectionPrototype);
	    return groups;
	  }
	  var d3_select = function(s, n) {
	    return n.querySelector(s);
	  }, d3_selectAll = function(s, n) {
	    return n.querySelectorAll(s);
	  }, d3_selectMatches = function(n, s) {
	    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
	    d3_selectMatches = function(n, s) {
	      return d3_selectMatcher.call(n, s);
	    };
	    return d3_selectMatches(n, s);
	  };
	  if (typeof Sizzle === "function") {
	    d3_select = function(s, n) {
	      return Sizzle(s, n)[0] || null;
	    };
	    d3_selectAll = Sizzle;
	    d3_selectMatches = Sizzle.matchesSelector;
	  }
	  d3.selection = function() {
	    return d3.select(d3_document.documentElement);
	  };
	  var d3_selectionPrototype = d3.selection.prototype = [];
	  d3_selectionPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, group, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
	          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selector(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_select(selector, this);
	    };
	  }
	  d3_selectionPrototype.selectAll = function(selector) {
	    var subgroups = [], subgroup, node;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
	          subgroup.parentNode = node;
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selectorAll(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_selectAll(selector, this);
	    };
	  }
	  var d3_nsXhtml = "http://www.w3.org/1999/xhtml";
	  var d3_nsPrefix = {
	    svg: "http://www.w3.org/2000/svg",
	    xhtml: d3_nsXhtml,
	    xlink: "http://www.w3.org/1999/xlink",
	    xml: "http://www.w3.org/XML/1998/namespace",
	    xmlns: "http://www.w3.org/2000/xmlns/"
	  };
	  d3.ns = {
	    prefix: d3_nsPrefix,
	    qualify: function(name) {
	      var i = name.indexOf(":"), prefix = name;
	      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	      return d3_nsPrefix.hasOwnProperty(prefix) ? {
	        space: d3_nsPrefix[prefix],
	        local: name
	      } : name;
	    }
	  };
	  d3_selectionPrototype.attr = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node();
	        name = d3.ns.qualify(name);
	        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
	      }
	      for (value in name) this.each(d3_selection_attr(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_attr(name, value));
	  };
	  function d3_selection_attr(name, value) {
	    name = d3.ns.qualify(name);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrConstant() {
	      this.setAttribute(name, value);
	    }
	    function attrConstantNS() {
	      this.setAttributeNS(name.space, name.local, value);
	    }
	    function attrFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
	    }
	    function attrFunctionNS() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
	    }
	    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
	  }
	  function d3_collapse(s) {
	    return s.trim().replace(/\s+/g, " ");
	  }
	  d3_selectionPrototype.classed = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
	        if (value = node.classList) {
	          while (++i < n) if (!value.contains(name[i])) return false;
	        } else {
	          value = node.getAttribute("class");
	          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
	        }
	        return true;
	      }
	      for (value in name) this.each(d3_selection_classed(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_classed(name, value));
	  };
	  function d3_selection_classedRe(name) {
	    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
	  }
	  function d3_selection_classes(name) {
	    return (name + "").trim().split(/^|\s+/);
	  }
	  function d3_selection_classed(name, value) {
	    name = d3_selection_classes(name).map(d3_selection_classedName);
	    var n = name.length;
	    function classedConstant() {
	      var i = -1;
	      while (++i < n) name[i](this, value);
	    }
	    function classedFunction() {
	      var i = -1, x = value.apply(this, arguments);
	      while (++i < n) name[i](this, x);
	    }
	    return typeof value === "function" ? classedFunction : classedConstant;
	  }
	  function d3_selection_classedName(name) {
	    var re = d3_selection_classedRe(name);
	    return function(node, value) {
	      if (c = node.classList) return value ? c.add(name) : c.remove(name);
	      var c = node.getAttribute("class") || "";
	      if (value) {
	        re.lastIndex = 0;
	        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
	      } else {
	        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
	      }
	    };
	  }
	  d3_selectionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
	        return this;
	      }
	      if (n < 2) {
	        var node = this.node();
	        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
	      }
	      priority = "";
	    }
	    return this.each(d3_selection_style(name, value, priority));
	  };
	  function d3_selection_style(name, value, priority) {
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleConstant() {
	      this.style.setProperty(name, value, priority);
	    }
	    function styleFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
	    }
	    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
	  }
	  d3_selectionPrototype.property = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") return this.node()[name];
	      for (value in name) this.each(d3_selection_property(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_property(name, value));
	  };
	  function d3_selection_property(name, value) {
	    function propertyNull() {
	      delete this[name];
	    }
	    function propertyConstant() {
	      this[name] = value;
	    }
	    function propertyFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) delete this[name]; else this[name] = x;
	    }
	    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
	  }
	  d3_selectionPrototype.text = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.textContent = v == null ? "" : v;
	    } : value == null ? function() {
	      this.textContent = "";
	    } : function() {
	      this.textContent = value;
	    }) : this.node().textContent;
	  };
	  d3_selectionPrototype.html = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.innerHTML = v == null ? "" : v;
	    } : value == null ? function() {
	      this.innerHTML = "";
	    } : function() {
	      this.innerHTML = value;
	    }) : this.node().innerHTML;
	  };
	  d3_selectionPrototype.append = function(name) {
	    name = d3_selection_creator(name);
	    return this.select(function() {
	      return this.appendChild(name.apply(this, arguments));
	    });
	  };
	  function d3_selection_creator(name) {
	    function create() {
	      var document = this.ownerDocument, namespace = this.namespaceURI;
	      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);
	    }
	    function createNS() {
	      return this.ownerDocument.createElementNS(name.space, name.local);
	    }
	    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
	  }
	  d3_selectionPrototype.insert = function(name, before) {
	    name = d3_selection_creator(name);
	    before = d3_selection_selector(before);
	    return this.select(function() {
	      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
	    });
	  };
	  d3_selectionPrototype.remove = function() {
	    return this.each(d3_selectionRemove);
	  };
	  function d3_selectionRemove() {
	    var parent = this.parentNode;
	    if (parent) parent.removeChild(this);
	  }
	  d3_selectionPrototype.data = function(value, key) {
	    var i = -1, n = this.length, group, node;
	    if (!arguments.length) {
	      value = new Array(n = (group = this[0]).length);
	      while (++i < n) {
	        if (node = group[i]) {
	          value[i] = node.__data__;
	        }
	      }
	      return value;
	    }
	    function bind(group, groupData) {
	      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
	      if (key) {
	        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
	        for (i = -1; ++i < n; ) {
	          if (node = group[i]) {
	            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
	              exitNodes[i] = node;
	            } else {
	              nodeByKeyValue.set(keyValue, node);
	            }
	            keyValues[i] = keyValue;
	          }
	        }
	        for (i = -1; ++i < m; ) {
	          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          } else if (node !== true) {
	            updateNodes[i] = node;
	            node.__data__ = nodeData;
	          }
	          nodeByKeyValue.set(keyValue, true);
	        }
	        for (i = -1; ++i < n; ) {
	          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
	            exitNodes[i] = group[i];
	          }
	        }
	      } else {
	        for (i = -1; ++i < n0; ) {
	          node = group[i];
	          nodeData = groupData[i];
	          if (node) {
	            node.__data__ = nodeData;
	            updateNodes[i] = node;
	          } else {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          }
	        }
	        for (;i < m; ++i) {
	          enterNodes[i] = d3_selection_dataNode(groupData[i]);
	        }
	        for (;i < n; ++i) {
	          exitNodes[i] = group[i];
	        }
	      }
	      enterNodes.update = updateNodes;
	      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
	      enter.push(enterNodes);
	      update.push(updateNodes);
	      exit.push(exitNodes);
	    }
	    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
	    if (typeof value === "function") {
	      while (++i < n) {
	        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
	      }
	    } else {
	      while (++i < n) {
	        bind(group = this[i], value);
	      }
	    }
	    update.enter = function() {
	      return enter;
	    };
	    update.exit = function() {
	      return exit;
	    };
	    return update;
	  };
	  function d3_selection_dataNode(data) {
	    return {
	      __data__: data
	    };
	  }
	  d3_selectionPrototype.datum = function(value) {
	    return arguments.length ? this.property("__data__", value) : this.property("__data__");
	  };
	  d3_selectionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_filter(selector) {
	    return function() {
	      return d3_selectMatches(this, selector);
	    };
	  }
	  d3_selectionPrototype.order = function() {
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
	        if (node = group[i]) {
	          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	          next = node;
	        }
	      }
	    }
	    return this;
	  };
	  d3_selectionPrototype.sort = function(comparator) {
	    comparator = d3_selection_sortComparator.apply(this, arguments);
	    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
	    return this.order();
	  };
	  function d3_selection_sortComparator(comparator) {
	    if (!arguments.length) comparator = d3_ascending;
	    return function(a, b) {
	      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
	    };
	  }
	  d3_selectionPrototype.each = function(callback) {
	    return d3_selection_each(this, function(node, i, j) {
	      callback.call(node, node.__data__, i, j);
	    });
	  };
	  function d3_selection_each(groups, callback) {
	    for (var j = 0, m = groups.length; j < m; j++) {
	      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
	        if (node = group[i]) callback(node, i, j);
	      }
	    }
	    return groups;
	  }
	  d3_selectionPrototype.call = function(callback) {
	    var args = d3_array(arguments);
	    callback.apply(args[0] = this, args);
	    return this;
	  };
	  d3_selectionPrototype.empty = function() {
	    return !this.node();
	  };
	  d3_selectionPrototype.node = function() {
	    for (var j = 0, m = this.length; j < m; j++) {
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        var node = group[i];
	        if (node) return node;
	      }
	    }
	    return null;
	  };
	  d3_selectionPrototype.size = function() {
	    var n = 0;
	    d3_selection_each(this, function() {
	      ++n;
	    });
	    return n;
	  };
	  function d3_selection_enter(selection) {
	    d3_subclass(selection, d3_selection_enterPrototype);
	    return selection;
	  }
	  var d3_selection_enterPrototype = [];
	  d3.selection.enter = d3_selection_enter;
	  d3.selection.enter.prototype = d3_selection_enterPrototype;
	  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
	  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
	  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
	  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
	  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
	  d3_selection_enterPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, upgroup, group, node;
	    for (var j = -1, m = this.length; ++j < m; ) {
	      upgroup = (group = this[j]).update;
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = group.parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
	          subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  d3_selection_enterPrototype.insert = function(name, before) {
	    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
	    return d3_selectionPrototype.insert.call(this, name, before);
	  };
	  function d3_selection_enterInsertBefore(enter) {
	    var i0, j0;
	    return function(d, i, j) {
	      var group = enter[j].update, n = group.length, node;
	      if (j != j0) j0 = j, i0 = 0;
	      if (i >= i0) i0 = i + 1;
	      while (!(node = group[i0]) && ++i0 < n) ;
	      return node;
	    };
	  }
	  d3.select = function(node) {
	    var group;
	    if (typeof node === "string") {
	      group = [ d3_select(node, d3_document) ];
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = [ node ];
	      group.parentNode = d3_documentElement(node);
	    }
	    return d3_selection([ group ]);
	  };
	  d3.selectAll = function(nodes) {
	    var group;
	    if (typeof nodes === "string") {
	      group = d3_array(d3_selectAll(nodes, d3_document));
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = d3_array(nodes);
	      group.parentNode = null;
	    }
	    return d3_selection([ group ]);
	  };
	  d3_selectionPrototype.on = function(type, listener, capture) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof type !== "string") {
	        if (n < 2) listener = false;
	        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
	        return this;
	      }
	      if (n < 2) return (n = this.node()["__on" + type]) && n._;
	      capture = false;
	    }
	    return this.each(d3_selection_on(type, listener, capture));
	  };
	  function d3_selection_on(type, listener, capture) {
	    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
	    if (i > 0) type = type.slice(0, i);
	    var filter = d3_selection_onFilters.get(type);
	    if (filter) type = filter, wrap = d3_selection_onFilter;
	    function onRemove() {
	      var l = this[name];
	      if (l) {
	        this.removeEventListener(type, l, l.$);
	        delete this[name];
	      }
	    }
	    function onAdd() {
	      var l = wrap(listener, d3_array(arguments));
	      onRemove.call(this);
	      this.addEventListener(type, this[name] = l, l.$ = capture);
	      l._ = listener;
	    }
	    function removeAll() {
	      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
	      for (var name in this) {
	        if (match = name.match(re)) {
	          var l = this[name];
	          this.removeEventListener(match[1], l, l.$);
	          delete this[name];
	        }
	      }
	    }
	    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
	  }
	  var d3_selection_onFilters = d3.map({
	    mouseenter: "mouseover",
	    mouseleave: "mouseout"
	  });
	  if (d3_document) {
	    d3_selection_onFilters.forEach(function(k) {
	      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
	    });
	  }
	  function d3_selection_onListener(listener, argumentz) {
	    return function(e) {
	      var o = d3.event;
	      d3.event = e;
	      argumentz[0] = this.__data__;
	      try {
	        listener.apply(this, argumentz);
	      } finally {
	        d3.event = o;
	      }
	    };
	  }
	  function d3_selection_onFilter(listener, argumentz) {
	    var l = d3_selection_onListener(listener, argumentz);
	    return function(e) {
	      var target = this, related = e.relatedTarget;
	      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
	        l.call(target, e);
	      }
	    };
	  }
	  var d3_event_dragSelect, d3_event_dragId = 0;
	  function d3_event_dragSuppress(node) {
	    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
	    if (d3_event_dragSelect == null) {
	      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
	    }
	    if (d3_event_dragSelect) {
	      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
	      style[d3_event_dragSelect] = "none";
	    }
	    return function(suppressClick) {
	      w.on(name, null);
	      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
	      if (suppressClick) {
	        var off = function() {
	          w.on(click, null);
	        };
	        w.on(click, function() {
	          d3_eventPreventDefault();
	          off();
	        }, true);
	        setTimeout(off, 0);
	      }
	    };
	  }
	  d3.mouse = function(container) {
	    return d3_mousePoint(container, d3_eventSource());
	  };
	  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
	  function d3_mousePoint(container, e) {
	    if (e.changedTouches) e = e.changedTouches[0];
	    var svg = container.ownerSVGElement || container;
	    if (svg.createSVGPoint) {
	      var point = svg.createSVGPoint();
	      if (d3_mouse_bug44083 < 0) {
	        var window = d3_window(container);
	        if (window.scrollX || window.scrollY) {
	          svg = d3.select("body").append("svg").style({
	            position: "absolute",
	            top: 0,
	            left: 0,
	            margin: 0,
	            padding: 0,
	            border: "none"
	          }, "important");
	          var ctm = svg[0][0].getScreenCTM();
	          d3_mouse_bug44083 = !(ctm.f || ctm.e);
	          svg.remove();
	        }
	      }
	      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
	      point.y = e.clientY;
	      point = point.matrixTransform(container.getScreenCTM().inverse());
	      return [ point.x, point.y ];
	    }
	    var rect = container.getBoundingClientRect();
	    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
	  }
	  d3.touch = function(container, touches, identifier) {
	    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
	    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
	      if ((touch = touches[i]).identifier === identifier) {
	        return d3_mousePoint(container, touch);
	      }
	    }
	  };
	  d3.behavior.drag = function() {
	    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
	    function drag() {
	      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
	    }
	    function dragstart(id, position, subject, move, end) {
	      return function() {
	        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
	        if (origin) {
	          dragOffset = origin.apply(that, arguments);
	          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
	        } else {
	          dragOffset = [ 0, 0 ];
	        }
	        dispatch({
	          type: "dragstart"
	        });
	        function moved() {
	          var position1 = position(parent, dragId), dx, dy;
	          if (!position1) return;
	          dx = position1[0] - position0[0];
	          dy = position1[1] - position0[1];
	          dragged |= dx | dy;
	          position0 = position1;
	          dispatch({
	            type: "drag",
	            x: position1[0] + dragOffset[0],
	            y: position1[1] + dragOffset[1],
	            dx: dx,
	            dy: dy
	          });
	        }
	        function ended() {
	          if (!position(parent, dragId)) return;
	          dragSubject.on(move + dragName, null).on(end + dragName, null);
	          dragRestore(dragged);
	          dispatch({
	            type: "dragend"
	          });
	        }
	      };
	    }
	    drag.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return drag;
	    };
	    return d3.rebind(drag, event, "on");
	  };
	  function d3_behavior_dragTouchId() {
	    return d3.event.changedTouches[0].identifier;
	  }
	  d3.touches = function(container, touches) {
	    if (arguments.length < 2) touches = d3_eventSource().touches;
	    return touches ? d3_array(touches).map(function(touch) {
	      var point = d3_mousePoint(container, touch);
	      point.identifier = touch.identifier;
	      return point;
	    }) : [];
	  };
	  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
	  function d3_sgn(x) {
	    return x > 0 ? 1 : x < 0 ? -1 : 0;
	  }
	  function d3_cross2d(a, b, c) {
	    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
	  }
	  function d3_acos(x) {
	    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
	  }
	  function d3_asin(x) {
	    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
	  }
	  function d3_sinh(x) {
	    return ((x = Math.exp(x)) - 1 / x) / 2;
	  }
	  function d3_cosh(x) {
	    return ((x = Math.exp(x)) + 1 / x) / 2;
	  }
	  function d3_tanh(x) {
	    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	  }
	  function d3_haversin(x) {
	    return (x = Math.sin(x / 2)) * x;
	  }
	  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
	  d3.interpolateZoom = function(p0, p1) {
	    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
	    if (d2 < ε2) {
	      S = Math.log(w1 / w0) / ρ;
	      i = function(t) {
	        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];
	      };
	    } else {
	      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	      S = (r1 - r0) / ρ;
	      i = function(t) {
	        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
	        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
	      };
	    }
	    i.duration = S * 1e3;
	    return i;
	  };
	  d3.behavior.zoom = function() {
	    var view = {
	      x: 0,
	      y: 0,
	      k: 1
	    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
	    if (!d3_behavior_zoomWheel) {
	      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
	      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	        return d3.event.wheelDelta;
	      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
	        return -d3.event.detail;
	      }, "MozMousePixelScroll");
	    }
	    function zoom(g) {
	      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
	    }
	    zoom.event = function(g) {
	      g.each(function() {
	        var dispatch = event.of(this, arguments), view1 = view;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.zoom", function() {
	            view = this.__chart__ || {
	              x: 0,
	              y: 0,
	              k: 1
	            };
	            zoomstarted(dispatch);
	          }).tween("zoom:zoom", function() {
	            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
	            return function(t) {
	              var l = i(t), k = dx / l[2];
	              this.__chart__ = view = {
	                x: cx - l[0] * k,
	                y: cy - l[1] * k,
	                k: k
	              };
	              zoomed(dispatch);
	            };
	          }).each("interrupt.zoom", function() {
	            zoomended(dispatch);
	          }).each("end.zoom", function() {
	            zoomended(dispatch);
	          });
	        } else {
	          this.__chart__ = view;
	          zoomstarted(dispatch);
	          zoomed(dispatch);
	          zoomended(dispatch);
	        }
	      });
	    };
	    zoom.translate = function(_) {
	      if (!arguments.length) return [ view.x, view.y ];
	      view = {
	        x: +_[0],
	        y: +_[1],
	        k: view.k
	      };
	      rescale();
	      return zoom;
	    };
	    zoom.scale = function(_) {
	      if (!arguments.length) return view.k;
	      view = {
	        x: view.x,
	        y: view.y,
	        k: null
	      };
	      scaleTo(+_);
	      rescale();
	      return zoom;
	    };
	    zoom.scaleExtent = function(_) {
	      if (!arguments.length) return scaleExtent;
	      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.center = function(_) {
	      if (!arguments.length) return center;
	      center = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.size = function(_) {
	      if (!arguments.length) return size;
	      size = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.duration = function(_) {
	      if (!arguments.length) return duration;
	      duration = +_;
	      return zoom;
	    };
	    zoom.x = function(z) {
	      if (!arguments.length) return x1;
	      x1 = z;
	      x0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    zoom.y = function(z) {
	      if (!arguments.length) return y1;
	      y1 = z;
	      y0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    function location(p) {
	      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
	    }
	    function point(l) {
	      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
	    }
	    function scaleTo(s) {
	      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
	    }
	    function translateTo(p, l) {
	      l = point(l);
	      view.x += p[0] - l[0];
	      view.y += p[1] - l[1];
	    }
	    function zoomTo(that, p, l, k) {
	      that.__chart__ = {
	        x: view.x,
	        y: view.y,
	        k: view.k
	      };
	      scaleTo(Math.pow(2, k));
	      translateTo(center0 = p, l);
	      that = d3.select(that);
	      if (duration > 0) that = that.transition().duration(duration);
	      that.call(zoom.event);
	    }
	    function rescale() {
	      if (x1) x1.domain(x0.range().map(function(x) {
	        return (x - view.x) / view.k;
	      }).map(x0.invert));
	      if (y1) y1.domain(y0.range().map(function(y) {
	        return (y - view.y) / view.k;
	      }).map(y0.invert));
	    }
	    function zoomstarted(dispatch) {
	      if (!zooming++) dispatch({
	        type: "zoomstart"
	      });
	    }
	    function zoomed(dispatch) {
	      rescale();
	      dispatch({
	        type: "zoom",
	        scale: view.k,
	        translate: [ view.x, view.y ]
	      });
	    }
	    function zoomended(dispatch) {
	      if (!--zooming) dispatch({
	        type: "zoomend"
	      }), center0 = null;
	    }
	    function mousedowned() {
	      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
	      d3_selection_interrupt.call(that);
	      zoomstarted(dispatch);
	      function moved() {
	        dragged = 1;
	        translateTo(d3.mouse(that), location0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        subject.on(mousemove, null).on(mouseup, null);
	        dragRestore(dragged);
	        zoomended(dispatch);
	      }
	    }
	    function touchstarted() {
	      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
	      started();
	      zoomstarted(dispatch);
	      subject.on(mousedown, null).on(touchstart, started);
	      function relocate() {
	        var touches = d3.touches(that);
	        scale0 = view.k;
	        touches.forEach(function(t) {
	          if (t.identifier in locations0) locations0[t.identifier] = location(t);
	        });
	        return touches;
	      }
	      function started() {
	        var target = d3.event.target;
	        d3.select(target).on(touchmove, moved).on(touchend, ended);
	        targets.push(target);
	        var changed = d3.event.changedTouches;
	        for (var i = 0, n = changed.length; i < n; ++i) {
	          locations0[changed[i].identifier] = null;
	        }
	        var touches = relocate(), now = Date.now();
	        if (touches.length === 1) {
	          if (now - touchtime < 500) {
	            var p = touches[0];
	            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
	            d3_eventPreventDefault();
	          }
	          touchtime = now;
	        } else if (touches.length > 1) {
	          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
	          distance0 = dx * dx + dy * dy;
	        }
	      }
	      function moved() {
	        var touches = d3.touches(that), p0, l0, p1, l1;
	        d3_selection_interrupt.call(that);
	        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
	          p1 = touches[i];
	          if (l1 = locations0[p1.identifier]) {
	            if (l0) break;
	            p0 = p1, l0 = l1;
	          }
	        }
	        if (l1) {
	          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
	          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
	          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
	          scaleTo(scale1 * scale0);
	        }
	        touchtime = null;
	        translateTo(p0, l0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        if (d3.event.touches.length) {
	          var changed = d3.event.changedTouches;
	          for (var i = 0, n = changed.length; i < n; ++i) {
	            delete locations0[changed[i].identifier];
	          }
	          for (var identifier in locations0) {
	            return void relocate();
	          }
	        }
	        d3.selectAll(targets).on(zoomName, null);
	        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
	        dragRestore();
	        zoomended(dispatch);
	      }
	    }
	    function mousewheeled() {
	      var dispatch = event.of(this, arguments);
	      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
	      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
	      mousewheelTimer = setTimeout(function() {
	        mousewheelTimer = null;
	        zoomended(dispatch);
	      }, 50);
	      d3_eventPreventDefault();
	      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
	      translateTo(center0, translate0);
	      zoomed(dispatch);
	    }
	    function dblclicked() {
	      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
	      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
	    }
	    return d3.rebind(zoom, event, "on");
	  };
	  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
	  d3.color = d3_color;
	  function d3_color() {}
	  d3_color.prototype.toString = function() {
	    return this.rgb() + "";
	  };
	  d3.hsl = d3_hsl;
	  function d3_hsl(h, s, l) {
	    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
	  }
	  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
	  d3_hslPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, this.l / k);
	  };
	  d3_hslPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, k * this.l);
	  };
	  d3_hslPrototype.rgb = function() {
	    return d3_hsl_rgb(this.h, this.s, this.l);
	  };
	  function d3_hsl_rgb(h, s, l) {
	    var m1, m2;
	    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
	    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
	    l = l < 0 ? 0 : l > 1 ? 1 : l;
	    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
	    m1 = 2 * l - m2;
	    function v(h) {
	      if (h > 360) h -= 360; else if (h < 0) h += 360;
	      if (h < 60) return m1 + (m2 - m1) * h / 60;
	      if (h < 180) return m2;
	      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
	      return m1;
	    }
	    function vv(h) {
	      return Math.round(v(h) * 255);
	    }
	    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
	  }
	  d3.hcl = d3_hcl;
	  function d3_hcl(h, c, l) {
	    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
	  }
	  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
	  d3_hclPrototype.brighter = function(k) {
	    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.darker = function(k) {
	    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.rgb = function() {
	    return d3_hcl_lab(this.h, this.c, this.l).rgb();
	  };
	  function d3_hcl_lab(h, c, l) {
	    if (isNaN(h)) h = 0;
	    if (isNaN(c)) c = 0;
	    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
	  }
	  d3.lab = d3_lab;
	  function d3_lab(l, a, b) {
	    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
	  }
	  var d3_lab_K = 18;
	  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
	  var d3_labPrototype = d3_lab.prototype = new d3_color();
	  d3_labPrototype.brighter = function(k) {
	    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.darker = function(k) {
	    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.rgb = function() {
	    return d3_lab_rgb(this.l, this.a, this.b);
	  };
	  function d3_lab_rgb(l, a, b) {
	    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
	    x = d3_lab_xyz(x) * d3_lab_X;
	    y = d3_lab_xyz(y) * d3_lab_Y;
	    z = d3_lab_xyz(z) * d3_lab_Z;
	    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
	  }
	  function d3_lab_hcl(l, a, b) {
	    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
	  }
	  function d3_lab_xyz(x) {
	    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
	  }
	  function d3_xyz_lab(x) {
	    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
	  }
	  function d3_xyz_rgb(r) {
	    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
	  }
	  d3.rgb = d3_rgb;
	  function d3_rgb(r, g, b) {
	    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
	  }
	  function d3_rgbNumber(value) {
	    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
	  }
	  function d3_rgbString(value) {
	    return d3_rgbNumber(value) + "";
	  }
	  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
	  d3_rgbPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    var r = this.r, g = this.g, b = this.b, i = 30;
	    if (!r && !g && !b) return new d3_rgb(i, i, i);
	    if (r && r < i) r = i;
	    if (g && g < i) g = i;
	    if (b && b < i) b = i;
	    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
	  };
	  d3_rgbPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_rgb(k * this.r, k * this.g, k * this.b);
	  };
	  d3_rgbPrototype.hsl = function() {
	    return d3_rgb_hsl(this.r, this.g, this.b);
	  };
	  d3_rgbPrototype.toString = function() {
	    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
	  };
	  function d3_rgb_hex(v) {
	    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
	  }
	  function d3_rgb_parse(format, rgb, hsl) {
	    var r = 0, g = 0, b = 0, m1, m2, color;
	    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
	    if (m1) {
	      m2 = m1[2].split(",");
	      switch (m1[1]) {
	       case "hsl":
	        {
	          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
	        }

	       case "rgb":
	        {
	          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
	        }
	      }
	    }
	    if (color = d3_rgb_names.get(format)) {
	      return rgb(color.r, color.g, color.b);
	    }
	    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
	      if (format.length === 4) {
	        r = (color & 3840) >> 4;
	        r = r >> 4 | r;
	        g = color & 240;
	        g = g >> 4 | g;
	        b = color & 15;
	        b = b << 4 | b;
	      } else if (format.length === 7) {
	        r = (color & 16711680) >> 16;
	        g = (color & 65280) >> 8;
	        b = color & 255;
	      }
	    }
	    return rgb(r, g, b);
	  }
	  function d3_rgb_hsl(r, g, b) {
	    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
	    if (d) {
	      s = l < .5 ? d / (max + min) : d / (2 - max - min);
	      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
	      h *= 60;
	    } else {
	      h = NaN;
	      s = l > 0 && l < 1 ? 0 : h;
	    }
	    return new d3_hsl(h, s, l);
	  }
	  function d3_rgb_lab(r, g, b) {
	    r = d3_rgb_xyz(r);
	    g = d3_rgb_xyz(g);
	    b = d3_rgb_xyz(b);
	    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
	    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
	  }
	  function d3_rgb_xyz(r) {
	    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
	  }
	  function d3_rgb_parseNumber(c) {
	    var f = parseFloat(c);
	    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
	  }
	  var d3_rgb_names = d3.map({
	    aliceblue: 15792383,
	    antiquewhite: 16444375,
	    aqua: 65535,
	    aquamarine: 8388564,
	    azure: 15794175,
	    beige: 16119260,
	    bisque: 16770244,
	    black: 0,
	    blanchedalmond: 16772045,
	    blue: 255,
	    blueviolet: 9055202,
	    brown: 10824234,
	    burlywood: 14596231,
	    cadetblue: 6266528,
	    chartreuse: 8388352,
	    chocolate: 13789470,
	    coral: 16744272,
	    cornflowerblue: 6591981,
	    cornsilk: 16775388,
	    crimson: 14423100,
	    cyan: 65535,
	    darkblue: 139,
	    darkcyan: 35723,
	    darkgoldenrod: 12092939,
	    darkgray: 11119017,
	    darkgreen: 25600,
	    darkgrey: 11119017,
	    darkkhaki: 12433259,
	    darkmagenta: 9109643,
	    darkolivegreen: 5597999,
	    darkorange: 16747520,
	    darkorchid: 10040012,
	    darkred: 9109504,
	    darksalmon: 15308410,
	    darkseagreen: 9419919,
	    darkslateblue: 4734347,
	    darkslategray: 3100495,
	    darkslategrey: 3100495,
	    darkturquoise: 52945,
	    darkviolet: 9699539,
	    deeppink: 16716947,
	    deepskyblue: 49151,
	    dimgray: 6908265,
	    dimgrey: 6908265,
	    dodgerblue: 2003199,
	    firebrick: 11674146,
	    floralwhite: 16775920,
	    forestgreen: 2263842,
	    fuchsia: 16711935,
	    gainsboro: 14474460,
	    ghostwhite: 16316671,
	    gold: 16766720,
	    goldenrod: 14329120,
	    gray: 8421504,
	    green: 32768,
	    greenyellow: 11403055,
	    grey: 8421504,
	    honeydew: 15794160,
	    hotpink: 16738740,
	    indianred: 13458524,
	    indigo: 4915330,
	    ivory: 16777200,
	    khaki: 15787660,
	    lavender: 15132410,
	    lavenderblush: 16773365,
	    lawngreen: 8190976,
	    lemonchiffon: 16775885,
	    lightblue: 11393254,
	    lightcoral: 15761536,
	    lightcyan: 14745599,
	    lightgoldenrodyellow: 16448210,
	    lightgray: 13882323,
	    lightgreen: 9498256,
	    lightgrey: 13882323,
	    lightpink: 16758465,
	    lightsalmon: 16752762,
	    lightseagreen: 2142890,
	    lightskyblue: 8900346,
	    lightslategray: 7833753,
	    lightslategrey: 7833753,
	    lightsteelblue: 11584734,
	    lightyellow: 16777184,
	    lime: 65280,
	    limegreen: 3329330,
	    linen: 16445670,
	    magenta: 16711935,
	    maroon: 8388608,
	    mediumaquamarine: 6737322,
	    mediumblue: 205,
	    mediumorchid: 12211667,
	    mediumpurple: 9662683,
	    mediumseagreen: 3978097,
	    mediumslateblue: 8087790,
	    mediumspringgreen: 64154,
	    mediumturquoise: 4772300,
	    mediumvioletred: 13047173,
	    midnightblue: 1644912,
	    mintcream: 16121850,
	    mistyrose: 16770273,
	    moccasin: 16770229,
	    navajowhite: 16768685,
	    navy: 128,
	    oldlace: 16643558,
	    olive: 8421376,
	    olivedrab: 7048739,
	    orange: 16753920,
	    orangered: 16729344,
	    orchid: 14315734,
	    palegoldenrod: 15657130,
	    palegreen: 10025880,
	    paleturquoise: 11529966,
	    palevioletred: 14381203,
	    papayawhip: 16773077,
	    peachpuff: 16767673,
	    peru: 13468991,
	    pink: 16761035,
	    plum: 14524637,
	    powderblue: 11591910,
	    purple: 8388736,
	    rebeccapurple: 6697881,
	    red: 16711680,
	    rosybrown: 12357519,
	    royalblue: 4286945,
	    saddlebrown: 9127187,
	    salmon: 16416882,
	    sandybrown: 16032864,
	    seagreen: 3050327,
	    seashell: 16774638,
	    sienna: 10506797,
	    silver: 12632256,
	    skyblue: 8900331,
	    slateblue: 6970061,
	    slategray: 7372944,
	    slategrey: 7372944,
	    snow: 16775930,
	    springgreen: 65407,
	    steelblue: 4620980,
	    tan: 13808780,
	    teal: 32896,
	    thistle: 14204888,
	    tomato: 16737095,
	    turquoise: 4251856,
	    violet: 15631086,
	    wheat: 16113331,
	    white: 16777215,
	    whitesmoke: 16119285,
	    yellow: 16776960,
	    yellowgreen: 10145074
	  });
	  d3_rgb_names.forEach(function(key, value) {
	    d3_rgb_names.set(key, d3_rgbNumber(value));
	  });
	  function d3_functor(v) {
	    return typeof v === "function" ? v : function() {
	      return v;
	    };
	  }
	  d3.functor = d3_functor;
	  d3.xhr = d3_xhrType(d3_identity);
	  function d3_xhrType(response) {
	    return function(url, mimeType, callback) {
	      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
	      mimeType = null;
	      return d3_xhr(url, mimeType, response, callback);
	    };
	  }
	  function d3_xhr(url, mimeType, response, callback) {
	    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
	    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
	    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
	      request.readyState > 3 && respond();
	    };
	    function respond() {
	      var status = request.status, result;
	      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
	        try {
	          result = response.call(xhr, request);
	        } catch (e) {
	          dispatch.error.call(xhr, e);
	          return;
	        }
	        dispatch.load.call(xhr, result);
	      } else {
	        dispatch.error.call(xhr, request);
	      }
	    }
	    request.onprogress = function(event) {
	      var o = d3.event;
	      d3.event = event;
	      try {
	        dispatch.progress.call(xhr, request);
	      } finally {
	        d3.event = o;
	      }
	    };
	    xhr.header = function(name, value) {
	      name = (name + "").toLowerCase();
	      if (arguments.length < 2) return headers[name];
	      if (value == null) delete headers[name]; else headers[name] = value + "";
	      return xhr;
	    };
	    xhr.mimeType = function(value) {
	      if (!arguments.length) return mimeType;
	      mimeType = value == null ? null : value + "";
	      return xhr;
	    };
	    xhr.responseType = function(value) {
	      if (!arguments.length) return responseType;
	      responseType = value;
	      return xhr;
	    };
	    xhr.response = function(value) {
	      response = value;
	      return xhr;
	    };
	    [ "get", "post" ].forEach(function(method) {
	      xhr[method] = function() {
	        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
	      };
	    });
	    xhr.send = function(method, data, callback) {
	      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
	      request.open(method, url, true);
	      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
	      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
	      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
	      if (responseType != null) request.responseType = responseType;
	      if (callback != null) xhr.on("error", callback).on("load", function(request) {
	        callback(null, request);
	      });
	      dispatch.beforesend.call(xhr, request);
	      request.send(data == null ? null : data);
	      return xhr;
	    };
	    xhr.abort = function() {
	      request.abort();
	      return xhr;
	    };
	    d3.rebind(xhr, dispatch, "on");
	    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
	  }
	  function d3_xhr_fixCallback(callback) {
	    return callback.length === 1 ? function(error, request) {
	      callback(error == null ? request : null);
	    } : callback;
	  }
	  function d3_xhrHasResponse(request) {
	    var type = request.responseType;
	    return type && type !== "text" ? request.response : request.responseText;
	  }
	  d3.dsv = function(delimiter, mimeType) {
	    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
	    function dsv(url, row, callback) {
	      if (arguments.length < 3) callback = row, row = null;
	      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
	      xhr.row = function(_) {
	        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
	      };
	      return xhr;
	    }
	    function response(request) {
	      return dsv.parse(request.responseText);
	    }
	    function typedResponse(f) {
	      return function(request) {
	        return dsv.parse(request.responseText, f);
	      };
	    }
	    dsv.parse = function(text, f) {
	      var o;
	      return dsv.parseRows(text, function(row, i) {
	        if (o) return o(row, i - 1);
	        var a = new Function("d", "return {" + row.map(function(name, i) {
	          return JSON.stringify(name) + ": d[" + i + "]";
	        }).join(",") + "}");
	        o = f ? function(row, i) {
	          return f(a(row), i);
	        } : a;
	      });
	    };
	    dsv.parseRows = function(text, f) {
	      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
	      function token() {
	        if (I >= N) return EOF;
	        if (eol) return eol = false, EOL;
	        var j = I;
	        if (text.charCodeAt(j) === 34) {
	          var i = j;
	          while (i++ < N) {
	            if (text.charCodeAt(i) === 34) {
	              if (text.charCodeAt(i + 1) !== 34) break;
	              ++i;
	            }
	          }
	          I = i + 2;
	          var c = text.charCodeAt(i + 1);
	          if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(i + 2) === 10) ++I;
	          } else if (c === 10) {
	            eol = true;
	          }
	          return text.slice(j + 1, i).replace(/""/g, '"');
	        }
	        while (I < N) {
	          var c = text.charCodeAt(I++), k = 1;
	          if (c === 10) eol = true; else if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(I) === 10) ++I, ++k;
	          } else if (c !== delimiterCode) continue;
	          return text.slice(j, I - k);
	        }
	        return text.slice(j);
	      }
	      while ((t = token()) !== EOF) {
	        var a = [];
	        while (t !== EOL && t !== EOF) {
	          a.push(t);
	          t = token();
	        }
	        if (f && (a = f(a, n++)) == null) continue;
	        rows.push(a);
	      }
	      return rows;
	    };
	    dsv.format = function(rows) {
	      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
	      var fieldSet = new d3_Set(), fields = [];
	      rows.forEach(function(row) {
	        for (var field in row) {
	          if (!fieldSet.has(field)) {
	            fields.push(fieldSet.add(field));
	          }
	        }
	      });
	      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
	        return fields.map(function(field) {
	          return formatValue(row[field]);
	        }).join(delimiter);
	      })).join("\n");
	    };
	    dsv.formatRows = function(rows) {
	      return rows.map(formatRow).join("\n");
	    };
	    function formatRow(row) {
	      return row.map(formatValue).join(delimiter);
	    }
	    function formatValue(text) {
	      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
	    }
	    return dsv;
	  };
	  d3.csv = d3.dsv(",", "text/csv");
	  d3.tsv = d3.dsv("	", "text/tab-separated-values");
	  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
	    setTimeout(callback, 17);
	  };
	  d3.timer = function() {
	    d3_timer.apply(this, arguments);
	  };
	  function d3_timer(callback, delay, then) {
	    var n = arguments.length;
	    if (n < 2) delay = 0;
	    if (n < 3) then = Date.now();
	    var time = then + delay, timer = {
	      c: callback,
	      t: time,
	      n: null
	    };
	    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
	    d3_timer_queueTail = timer;
	    if (!d3_timer_interval) {
	      d3_timer_timeout = clearTimeout(d3_timer_timeout);
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	    return timer;
	  }
	  function d3_timer_step() {
	    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
	    if (delay > 24) {
	      if (isFinite(delay)) {
	        clearTimeout(d3_timer_timeout);
	        d3_timer_timeout = setTimeout(d3_timer_step, delay);
	      }
	      d3_timer_interval = 0;
	    } else {
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	  }
	  d3.timer.flush = function() {
	    d3_timer_mark();
	    d3_timer_sweep();
	  };
	  function d3_timer_mark() {
	    var now = Date.now(), timer = d3_timer_queueHead;
	    while (timer) {
	      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
	      timer = timer.n;
	    }
	    return now;
	  }
	  function d3_timer_sweep() {
	    var t0, t1 = d3_timer_queueHead, time = Infinity;
	    while (t1) {
	      if (t1.c) {
	        if (t1.t < time) time = t1.t;
	        t1 = (t0 = t1).n;
	      } else {
	        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
	      }
	    }
	    d3_timer_queueTail = t0;
	    return time;
	  }
	  function d3_format_precision(x, p) {
	    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
	  }
	  d3.round = function(x, n) {
	    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
	  };
	  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
	  d3.formatPrefix = function(value, precision) {
	    var i = 0;
	    if (value = +value) {
	      if (value < 0) value *= -1;
	      if (precision) value = d3.round(value, d3_format_precision(value, precision));
	      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
	      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
	    }
	    return d3_formatPrefixes[8 + i / 3];
	  };
	  function d3_formatPrefix(d, i) {
	    var k = Math.pow(10, abs(8 - i) * 3);
	    return {
	      scale: i > 8 ? function(d) {
	        return d / k;
	      } : function(d) {
	        return d * k;
	      },
	      symbol: d
	    };
	  }
	  function d3_locale_numberFormat(locale) {
	    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
	      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
	      while (i > 0 && g > 0) {
	        if (length + g + 1 > width) g = Math.max(1, width - length);
	        t.push(value.substring(i -= g, i + g));
	        if ((length += g + 1) > width) break;
	        g = locale_grouping[j = (j + 1) % locale_grouping.length];
	      }
	      return t.reverse().join(locale_thousands);
	    } : d3_identity;
	    return function(specifier) {
	      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
	      if (precision) precision = +precision.substring(1);
	      if (zfill || fill === "0" && align === "=") {
	        zfill = fill = "0";
	        align = "=";
	      }
	      switch (type) {
	       case "n":
	        comma = true;
	        type = "g";
	        break;

	       case "%":
	        scale = 100;
	        suffix = "%";
	        type = "f";
	        break;

	       case "p":
	        scale = 100;
	        suffix = "%";
	        type = "r";
	        break;

	       case "b":
	       case "o":
	       case "x":
	       case "X":
	        if (symbol === "#") prefix = "0" + type.toLowerCase();

	       case "c":
	        exponent = false;

	       case "d":
	        integer = true;
	        precision = 0;
	        break;

	       case "s":
	        scale = -1;
	        type = "r";
	        break;
	      }
	      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
	      if (type == "r" && !precision) type = "g";
	      if (precision != null) {
	        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
	      }
	      type = d3_format_types.get(type) || d3_format_typeDefault;
	      var zcomma = zfill && comma;
	      return function(value) {
	        var fullSuffix = suffix;
	        if (integer && value % 1) return "";
	        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
	        if (scale < 0) {
	          var unit = d3.formatPrefix(value, precision);
	          value = unit.scale(value);
	          fullSuffix = unit.symbol + suffix;
	        } else {
	          value *= scale;
	        }
	        value = type(value, precision);
	        var i = value.lastIndexOf("."), before, after;
	        if (i < 0) {
	          var j = exponent ? value.lastIndexOf("e") : -1;
	          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
	        } else {
	          before = value.substring(0, i);
	          after = locale_decimal + value.substring(i + 1);
	        }
	        if (!zfill && comma) before = formatGroup(before, Infinity);
	        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
	        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
	        negative += prefix;
	        value = before + after;
	        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
	      };
	    };
	  }
	  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
	  var d3_format_types = d3.map({
	    b: function(x) {
	      return x.toString(2);
	    },
	    c: function(x) {
	      return String.fromCharCode(x);
	    },
	    o: function(x) {
	      return x.toString(8);
	    },
	    x: function(x) {
	      return x.toString(16);
	    },
	    X: function(x) {
	      return x.toString(16).toUpperCase();
	    },
	    g: function(x, p) {
	      return x.toPrecision(p);
	    },
	    e: function(x, p) {
	      return x.toExponential(p);
	    },
	    f: function(x, p) {
	      return x.toFixed(p);
	    },
	    r: function(x, p) {
	      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
	    }
	  });
	  function d3_format_typeDefault(x) {
	    return x + "";
	  }
	  var d3_time = d3.time = {}, d3_date = Date;
	  function d3_date_utc() {
	    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
	  }
	  d3_date_utc.prototype = {
	    getDate: function() {
	      return this._.getUTCDate();
	    },
	    getDay: function() {
	      return this._.getUTCDay();
	    },
	    getFullYear: function() {
	      return this._.getUTCFullYear();
	    },
	    getHours: function() {
	      return this._.getUTCHours();
	    },
	    getMilliseconds: function() {
	      return this._.getUTCMilliseconds();
	    },
	    getMinutes: function() {
	      return this._.getUTCMinutes();
	    },
	    getMonth: function() {
	      return this._.getUTCMonth();
	    },
	    getSeconds: function() {
	      return this._.getUTCSeconds();
	    },
	    getTime: function() {
	      return this._.getTime();
	    },
	    getTimezoneOffset: function() {
	      return 0;
	    },
	    valueOf: function() {
	      return this._.valueOf();
	    },
	    setDate: function() {
	      d3_time_prototype.setUTCDate.apply(this._, arguments);
	    },
	    setDay: function() {
	      d3_time_prototype.setUTCDay.apply(this._, arguments);
	    },
	    setFullYear: function() {
	      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
	    },
	    setHours: function() {
	      d3_time_prototype.setUTCHours.apply(this._, arguments);
	    },
	    setMilliseconds: function() {
	      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
	    },
	    setMinutes: function() {
	      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
	    },
	    setMonth: function() {
	      d3_time_prototype.setUTCMonth.apply(this._, arguments);
	    },
	    setSeconds: function() {
	      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
	    },
	    setTime: function() {
	      d3_time_prototype.setTime.apply(this._, arguments);
	    }
	  };
	  var d3_time_prototype = Date.prototype;
	  function d3_time_interval(local, step, number) {
	    function round(date) {
	      var d0 = local(date), d1 = offset(d0, 1);
	      return date - d0 < d1 - date ? d0 : d1;
	    }
	    function ceil(date) {
	      step(date = local(new d3_date(date - 1)), 1);
	      return date;
	    }
	    function offset(date, k) {
	      step(date = new d3_date(+date), k);
	      return date;
	    }
	    function range(t0, t1, dt) {
	      var time = ceil(t0), times = [];
	      if (dt > 1) {
	        while (time < t1) {
	          if (!(number(time) % dt)) times.push(new Date(+time));
	          step(time, 1);
	        }
	      } else {
	        while (time < t1) times.push(new Date(+time)), step(time, 1);
	      }
	      return times;
	    }
	    function range_utc(t0, t1, dt) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = t0;
	        return range(utc, t1, dt);
	      } finally {
	        d3_date = Date;
	      }
	    }
	    local.floor = local;
	    local.round = round;
	    local.ceil = ceil;
	    local.offset = offset;
	    local.range = range;
	    var utc = local.utc = d3_time_interval_utc(local);
	    utc.floor = utc;
	    utc.round = d3_time_interval_utc(round);
	    utc.ceil = d3_time_interval_utc(ceil);
	    utc.offset = d3_time_interval_utc(offset);
	    utc.range = range_utc;
	    return local;
	  }
	  function d3_time_interval_utc(method) {
	    return function(date, k) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = date;
	        return method(utc, k)._;
	      } finally {
	        d3_date = Date;
	      }
	    };
	  }
	  d3_time.year = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setMonth(0, 1);
	    return date;
	  }, function(date, offset) {
	    date.setFullYear(date.getFullYear() + offset);
	  }, function(date) {
	    return date.getFullYear();
	  });
	  d3_time.years = d3_time.year.range;
	  d3_time.years.utc = d3_time.year.utc.range;
	  d3_time.day = d3_time_interval(function(date) {
	    var day = new d3_date(2e3, 0);
	    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
	    return day;
	  }, function(date, offset) {
	    date.setDate(date.getDate() + offset);
	  }, function(date) {
	    return date.getDate() - 1;
	  });
	  d3_time.days = d3_time.day.range;
	  d3_time.days.utc = d3_time.day.utc.range;
	  d3_time.dayOfYear = function(date) {
	    var year = d3_time.year(date);
	    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
	  };
	  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
	    i = 7 - i;
	    var interval = d3_time[day] = d3_time_interval(function(date) {
	      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
	      return date;
	    }, function(date, offset) {
	      date.setDate(date.getDate() + Math.floor(offset) * 7);
	    }, function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
	    });
	    d3_time[day + "s"] = interval.range;
	    d3_time[day + "s"].utc = interval.utc.range;
	    d3_time[day + "OfYear"] = function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
	    };
	  });
	  d3_time.week = d3_time.sunday;
	  d3_time.weeks = d3_time.sunday.range;
	  d3_time.weeks.utc = d3_time.sunday.utc.range;
	  d3_time.weekOfYear = d3_time.sundayOfYear;
	  function d3_locale_timeFormat(locale) {
	    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
	    function d3_time_format(template) {
	      var n = template.length;
	      function format(date) {
	        var string = [], i = -1, j = 0, c, p, f;
	        while (++i < n) {
	          if (template.charCodeAt(i) === 37) {
	            string.push(template.slice(j, i));
	            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
	            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
	            string.push(c);
	            j = i + 1;
	          }
	        }
	        string.push(template.slice(j, i));
	        return string.join("");
	      }
	      format.parse = function(string) {
	        var d = {
	          y: 1900,
	          m: 0,
	          d: 1,
	          H: 0,
	          M: 0,
	          S: 0,
	          L: 0,
	          Z: null
	        }, i = d3_time_parse(d, template, string, 0);
	        if (i != string.length) return null;
	        if ("p" in d) d.H = d.H % 12 + d.p * 12;
	        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
	        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
	          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
	          date.setFullYear(d.y, 0, 1);
	          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
	        } else date.setFullYear(d.y, d.m, d.d);
	        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
	        return localZ ? date._ : date;
	      };
	      format.toString = function() {
	        return template;
	      };
	      return format;
	    }
	    function d3_time_parse(date, template, string, j) {
	      var c, p, t, i = 0, n = template.length, m = string.length;
	      while (i < n) {
	        if (j >= m) return -1;
	        c = template.charCodeAt(i++);
	        if (c === 37) {
	          t = template.charAt(i++);
	          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
	          if (!p || (j = p(date, string, j)) < 0) return -1;
	        } else if (c != string.charCodeAt(j++)) {
	          return -1;
	        }
	      }
	      return j;
	    }
	    d3_time_format.utc = function(template) {
	      var local = d3_time_format(template);
	      function format(date) {
	        try {
	          d3_date = d3_date_utc;
	          var utc = new d3_date();
	          utc._ = date;
	          return local(utc);
	        } finally {
	          d3_date = Date;
	        }
	      }
	      format.parse = function(string) {
	        try {
	          d3_date = d3_date_utc;
	          var date = local.parse(string);
	          return date && date._;
	        } finally {
	          d3_date = Date;
	        }
	      };
	      format.toString = local.toString;
	      return format;
	    };
	    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
	    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
	    locale_periods.forEach(function(p, i) {
	      d3_time_periodLookup.set(p.toLowerCase(), i);
	    });
	    var d3_time_formats = {
	      a: function(d) {
	        return locale_shortDays[d.getDay()];
	      },
	      A: function(d) {
	        return locale_days[d.getDay()];
	      },
	      b: function(d) {
	        return locale_shortMonths[d.getMonth()];
	      },
	      B: function(d) {
	        return locale_months[d.getMonth()];
	      },
	      c: d3_time_format(locale_dateTime),
	      d: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      e: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      H: function(d, p) {
	        return d3_time_formatPad(d.getHours(), p, 2);
	      },
	      I: function(d, p) {
	        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
	      },
	      j: function(d, p) {
	        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
	      },
	      L: function(d, p) {
	        return d3_time_formatPad(d.getMilliseconds(), p, 3);
	      },
	      m: function(d, p) {
	        return d3_time_formatPad(d.getMonth() + 1, p, 2);
	      },
	      M: function(d, p) {
	        return d3_time_formatPad(d.getMinutes(), p, 2);
	      },
	      p: function(d) {
	        return locale_periods[+(d.getHours() >= 12)];
	      },
	      S: function(d, p) {
	        return d3_time_formatPad(d.getSeconds(), p, 2);
	      },
	      U: function(d, p) {
	        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
	      },
	      w: function(d) {
	        return d.getDay();
	      },
	      W: function(d, p) {
	        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
	      },
	      x: d3_time_format(locale_date),
	      X: d3_time_format(locale_time),
	      y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
	      },
	      Y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
	      },
	      Z: d3_time_zone,
	      "%": function() {
	        return "%";
	      }
	    };
	    var d3_time_parsers = {
	      a: d3_time_parseWeekdayAbbrev,
	      A: d3_time_parseWeekday,
	      b: d3_time_parseMonthAbbrev,
	      B: d3_time_parseMonth,
	      c: d3_time_parseLocaleFull,
	      d: d3_time_parseDay,
	      e: d3_time_parseDay,
	      H: d3_time_parseHour24,
	      I: d3_time_parseHour24,
	      j: d3_time_parseDayOfYear,
	      L: d3_time_parseMilliseconds,
	      m: d3_time_parseMonthNumber,
	      M: d3_time_parseMinutes,
	      p: d3_time_parseAmPm,
	      S: d3_time_parseSeconds,
	      U: d3_time_parseWeekNumberSunday,
	      w: d3_time_parseWeekdayNumber,
	      W: d3_time_parseWeekNumberMonday,
	      x: d3_time_parseLocaleDate,
	      X: d3_time_parseLocaleTime,
	      y: d3_time_parseYear,
	      Y: d3_time_parseFullYear,
	      Z: d3_time_parseZone,
	      "%": d3_time_parseLiteralPercent
	    };
	    function d3_time_parseWeekdayAbbrev(date, string, i) {
	      d3_time_dayAbbrevRe.lastIndex = 0;
	      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseWeekday(date, string, i) {
	      d3_time_dayRe.lastIndex = 0;
	      var n = d3_time_dayRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonthAbbrev(date, string, i) {
	      d3_time_monthAbbrevRe.lastIndex = 0;
	      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonth(date, string, i) {
	      d3_time_monthRe.lastIndex = 0;
	      var n = d3_time_monthRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseLocaleFull(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
	    }
	    function d3_time_parseLocaleDate(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
	    }
	    function d3_time_parseLocaleTime(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
	    }
	    function d3_time_parseAmPm(date, string, i) {
	      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
	      return n == null ? -1 : (date.p = n, i);
	    }
	    return d3_time_format;
	  }
	  var d3_time_formatPads = {
	    "-": "",
	    _: " ",
	    "0": "0"
	  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
	  function d3_time_formatPad(value, fill, width) {
	    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
	    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	  }
	  function d3_time_formatRe(names) {
	    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
	  }
	  function d3_time_formatLookup(names) {
	    var map = new d3_Map(), i = -1, n = names.length;
	    while (++i < n) map.set(names[i].toLowerCase(), i);
	    return map;
	  }
	  function d3_time_parseWeekdayNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
	    return n ? (date.w = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberSunday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.U = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberMonday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.W = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseFullYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
	    return n ? (date.y = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
	  }
	  function d3_time_parseZone(date, string, i) {
	    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
	    i + 5) : -1;
	  }
	  function d3_time_expandYear(d) {
	    return d + (d > 68 ? 1900 : 2e3);
	  }
	  function d3_time_parseMonthNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
	  }
	  function d3_time_parseDay(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.d = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseDayOfYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.j = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseHour24(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.H = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMinutes(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.M = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseSeconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.S = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMilliseconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.L = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_zone(d) {
	    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
	    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
	  }
	  function d3_time_parseLiteralPercent(date, string, i) {
	    d3_time_percentRe.lastIndex = 0;
	    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
	    return n ? i + n[0].length : -1;
	  }
	  function d3_time_formatMulti(formats) {
	    var n = formats.length, i = -1;
	    while (++i < n) formats[i][0] = this(formats[i][0]);
	    return function(date) {
	      var i = 0, f = formats[i];
	      while (!f[1](date)) f = formats[++i];
	      return f[0](date);
	    };
	  }
	  d3.locale = function(locale) {
	    return {
	      numberFormat: d3_locale_numberFormat(locale),
	      timeFormat: d3_locale_timeFormat(locale)
	    };
	  };
	  var d3_locale_enUS = d3.locale({
	    decimal: ".",
	    thousands: ",",
	    grouping: [ 3 ],
	    currency: [ "$", "" ],
	    dateTime: "%a %b %e %X %Y",
	    date: "%m/%d/%Y",
	    time: "%H:%M:%S",
	    periods: [ "AM", "PM" ],
	    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
	    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
	    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
	    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
	  });
	  d3.format = d3_locale_enUS.numberFormat;
	  d3.geo = {};
	  function d3_adder() {}
	  d3_adder.prototype = {
	    s: 0,
	    t: 0,
	    add: function(y) {
	      d3_adderSum(y, this.t, d3_adderTemp);
	      d3_adderSum(d3_adderTemp.s, this.s, this);
	      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
	    },
	    reset: function() {
	      this.s = this.t = 0;
	    },
	    valueOf: function() {
	      return this.s;
	    }
	  };
	  var d3_adderTemp = new d3_adder();
	  function d3_adderSum(a, b, o) {
	    var x = o.s = a + b, bv = x - a, av = x - bv;
	    o.t = a - av + (b - bv);
	  }
	  d3.geo.stream = function(object, listener) {
	    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
	      d3_geo_streamObjectType[object.type](object, listener);
	    } else {
	      d3_geo_streamGeometry(object, listener);
	    }
	  };
	  function d3_geo_streamGeometry(geometry, listener) {
	    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
	      d3_geo_streamGeometryType[geometry.type](geometry, listener);
	    }
	  }
	  var d3_geo_streamObjectType = {
	    Feature: function(feature, listener) {
	      d3_geo_streamGeometry(feature.geometry, listener);
	    },
	    FeatureCollection: function(object, listener) {
	      var features = object.features, i = -1, n = features.length;
	      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
	    }
	  };
	  var d3_geo_streamGeometryType = {
	    Sphere: function(object, listener) {
	      listener.sphere();
	    },
	    Point: function(object, listener) {
	      object = object.coordinates;
	      listener.point(object[0], object[1], object[2]);
	    },
	    MultiPoint: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
	    },
	    LineString: function(object, listener) {
	      d3_geo_streamLine(object.coordinates, listener, 0);
	    },
	    MultiLineString: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
	    },
	    Polygon: function(object, listener) {
	      d3_geo_streamPolygon(object.coordinates, listener);
	    },
	    MultiPolygon: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
	    },
	    GeometryCollection: function(object, listener) {
	      var geometries = object.geometries, i = -1, n = geometries.length;
	      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
	    }
	  };
	  function d3_geo_streamLine(coordinates, listener, closed) {
	    var i = -1, n = coordinates.length - closed, coordinate;
	    listener.lineStart();
	    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
	    listener.lineEnd();
	  }
	  function d3_geo_streamPolygon(coordinates, listener) {
	    var i = -1, n = coordinates.length;
	    listener.polygonStart();
	    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
	    listener.polygonEnd();
	  }
	  d3.geo.area = function(object) {
	    d3_geo_areaSum = 0;
	    d3.geo.stream(object, d3_geo_area);
	    return d3_geo_areaSum;
	  };
	  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
	  var d3_geo_area = {
	    sphere: function() {
	      d3_geo_areaSum += 4 * π;
	    },
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_areaRingSum.reset();
	      d3_geo_area.lineStart = d3_geo_areaRingStart;
	    },
	    polygonEnd: function() {
	      var area = 2 * d3_geo_areaRingSum;
	      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
	      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
	    }
	  };
	  function d3_geo_areaRingStart() {
	    var λ00, φ00, λ0, cosφ0, sinφ0;
	    d3_geo_area.point = function(λ, φ) {
	      d3_geo_area.point = nextPoint;
	      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
	      sinφ0 = Math.sin(φ);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      φ = φ * d3_radians / 2 + π / 4;
	      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
	      d3_geo_areaRingSum.add(Math.atan2(v, u));
	      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
	    }
	    d3_geo_area.lineEnd = function() {
	      nextPoint(λ00, φ00);
	    };
	  }
	  function d3_geo_cartesian(spherical) {
	    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
	    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
	  }
	  function d3_geo_cartesianDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	  }
	  function d3_geo_cartesianCross(a, b) {
	    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
	  }
	  function d3_geo_cartesianAdd(a, b) {
	    a[0] += b[0];
	    a[1] += b[1];
	    a[2] += b[2];
	  }
	  function d3_geo_cartesianScale(vector, k) {
	    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
	  }
	  function d3_geo_cartesianNormalize(d) {
	    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	    d[0] /= l;
	    d[1] /= l;
	    d[2] /= l;
	  }
	  function d3_geo_spherical(cartesian) {
	    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
	  }
	  function d3_geo_sphericalEqual(a, b) {
	    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
	  }
	  d3.geo.bounds = function() {
	    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
	    var bound = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        bound.point = ringPoint;
	        bound.lineStart = ringStart;
	        bound.lineEnd = ringEnd;
	        dλSum = 0;
	        d3_geo_area.polygonStart();
	      },
	      polygonEnd: function() {
	        d3_geo_area.polygonEnd();
	        bound.point = point;
	        bound.lineStart = lineStart;
	        bound.lineEnd = lineEnd;
	        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
	        range[0] = λ0, range[1] = λ1;
	      }
	    };
	    function point(λ, φ) {
	      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
	      if (φ < φ0) φ0 = φ;
	      if (φ > φ1) φ1 = φ;
	    }
	    function linePoint(λ, φ) {
	      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
	      if (p0) {
	        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
	        d3_geo_cartesianNormalize(inflection);
	        inflection = d3_geo_spherical(inflection);
	        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
	        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = inflection[1] * d3_degrees;
	          if (φi > φ1) φ1 = φi;
	        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = -inflection[1] * d3_degrees;
	          if (φi < φ0) φ0 = φi;
	        } else {
	          if (φ < φ0) φ0 = φ;
	          if (φ > φ1) φ1 = φ;
	        }
	        if (antimeridian) {
	          if (λ < λ_) {
	            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	          } else {
	            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	          }
	        } else {
	          if (λ1 >= λ0) {
	            if (λ < λ0) λ0 = λ;
	            if (λ > λ1) λ1 = λ;
	          } else {
	            if (λ > λ_) {
	              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	            } else {
	              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	            }
	          }
	        }
	      } else {
	        point(λ, φ);
	      }
	      p0 = p, λ_ = λ;
	    }
	    function lineStart() {
	      bound.point = linePoint;
	    }
	    function lineEnd() {
	      range[0] = λ0, range[1] = λ1;
	      bound.point = point;
	      p0 = null;
	    }
	    function ringPoint(λ, φ) {
	      if (p0) {
	        var dλ = λ - λ_;
	        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
	      } else λ__ = λ, φ__ = φ;
	      d3_geo_area.point(λ, φ);
	      linePoint(λ, φ);
	    }
	    function ringStart() {
	      d3_geo_area.lineStart();
	    }
	    function ringEnd() {
	      ringPoint(λ__, φ__);
	      d3_geo_area.lineEnd();
	      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
	      range[0] = λ0, range[1] = λ1;
	      p0 = null;
	    }
	    function angle(λ0, λ1) {
	      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
	    }
	    function compareRanges(a, b) {
	      return a[0] - b[0];
	    }
	    function withinRange(x, range) {
	      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
	    }
	    return function(feature) {
	      φ1 = λ1 = -(λ0 = φ0 = Infinity);
	      ranges = [];
	      d3.geo.stream(feature, bound);
	      var n = ranges.length;
	      if (n) {
	        ranges.sort(compareRanges);
	        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
	          b = ranges[i];
	          if (withinRange(b[0], a) || withinRange(b[1], a)) {
	            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	          } else {
	            merged.push(a = b);
	          }
	        }
	        var best = -Infinity, dλ;
	        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
	          b = merged[i];
	          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
	        }
	      }
	      ranges = range = null;
	      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
	    };
	  }();
	  d3.geo.centroid = function(object) {
	    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	    d3.geo.stream(object, d3_geo_centroid);
	    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
	    if (m < ε2) {
	      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
	      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
	      m = x * x + y * y + z * z;
	      if (m < ε2) return [ NaN, NaN ];
	    }
	    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
	  };
	  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
	  var d3_geo_centroid = {
	    sphere: d3_noop,
	    point: d3_geo_centroidPoint,
	    lineStart: d3_geo_centroidLineStart,
	    lineEnd: d3_geo_centroidLineEnd,
	    polygonStart: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
	    }
	  };
	  function d3_geo_centroidPoint(λ, φ) {
	    λ *= d3_radians;
	    var cosφ = Math.cos(φ *= d3_radians);
	    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
	  }
	  function d3_geo_centroidPointXYZ(x, y, z) {
	    ++d3_geo_centroidW0;
	    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
	    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
	    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
	  }
	  function d3_geo_centroidLineStart() {
	    var x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroid.point = nextPoint;
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_centroidLineEnd() {
	    d3_geo_centroid.point = d3_geo_centroidPoint;
	  }
	  function d3_geo_centroidRingStart() {
	    var λ00, φ00, x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ00 = λ, φ00 = φ;
	      d3_geo_centroid.point = nextPoint;
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    d3_geo_centroid.lineEnd = function() {
	      nextPoint(λ00, φ00);
	      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
	      d3_geo_centroid.point = d3_geo_centroidPoint;
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
	      d3_geo_centroidX2 += v * cx;
	      d3_geo_centroidY2 += v * cy;
	      d3_geo_centroidZ2 += v * cz;
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_compose(a, b) {
	    function compose(x, y) {
	      return x = a(x, y), b(x[0], x[1]);
	    }
	    if (a.invert && b.invert) compose.invert = function(x, y) {
	      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	    };
	    return compose;
	  }
	  function d3_true() {
	    return true;
	  }
	  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
	    var subject = [], clip = [];
	    segments.forEach(function(segment) {
	      if ((n = segment.length - 1) <= 0) return;
	      var n, p0 = segment[0], p1 = segment[n];
	      if (d3_geo_sphericalEqual(p0, p1)) {
	        listener.lineStart();
	        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
	        listener.lineEnd();
	        return;
	      }
	      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
	      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	    });
	    clip.sort(compare);
	    d3_geo_clipPolygonLinkCircular(subject);
	    d3_geo_clipPolygonLinkCircular(clip);
	    if (!subject.length) return;
	    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
	      clip[i].e = entry = !entry;
	    }
	    var start = subject[0], points, point;
	    while (1) {
	      var current = start, isSubject = true;
	      while (current.v) if ((current = current.n) === start) return;
	      points = current.z;
	      listener.lineStart();
	      do {
	        current.v = current.o.v = true;
	        if (current.e) {
	          if (isSubject) {
	            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.n.x, 1, listener);
	          }
	          current = current.n;
	        } else {
	          if (isSubject) {
	            points = current.p.z;
	            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.p.x, -1, listener);
	          }
	          current = current.p;
	        }
	        current = current.o;
	        points = current.z;
	        isSubject = !isSubject;
	      } while (!current.v);
	      listener.lineEnd();
	    }
	  }
	  function d3_geo_clipPolygonLinkCircular(array) {
	    if (!(n = array.length)) return;
	    var n, i = 0, a = array[0], b;
	    while (++i < n) {
	      a.n = b = array[i];
	      b.p = a;
	      a = b;
	    }
	    a.n = b = array[0];
	    b.p = a;
	  }
	  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
	    this.x = point;
	    this.z = points;
	    this.o = other;
	    this.e = entry;
	    this.v = false;
	    this.n = this.p = null;
	  }
	  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
	    return function(rotate, listener) {
	      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          clip.point = pointRing;
	          clip.lineStart = ringStart;
	          clip.lineEnd = ringEnd;
	          segments = [];
	          polygon = [];
	        },
	        polygonEnd: function() {
	          clip.point = point;
	          clip.lineStart = lineStart;
	          clip.lineEnd = lineEnd;
	          segments = d3.merge(segments);
	          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
	          if (segments.length) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
	          } else if (clipStartInside) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            interpolate(null, null, 1, listener);
	            listener.lineEnd();
	          }
	          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
	          segments = polygon = null;
	        },
	        sphere: function() {
	          listener.polygonStart();
	          listener.lineStart();
	          interpolate(null, null, 1, listener);
	          listener.lineEnd();
	          listener.polygonEnd();
	        }
	      };
	      function point(λ, φ) {
	        var point = rotate(λ, φ);
	        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
	      }
	      function pointLine(λ, φ) {
	        var point = rotate(λ, φ);
	        line.point(point[0], point[1]);
	      }
	      function lineStart() {
	        clip.point = pointLine;
	        line.lineStart();
	      }
	      function lineEnd() {
	        clip.point = point;
	        line.lineEnd();
	      }
	      var segments;
	      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
	      function pointRing(λ, φ) {
	        ring.push([ λ, φ ]);
	        var point = rotate(λ, φ);
	        ringListener.point(point[0], point[1]);
	      }
	      function ringStart() {
	        ringListener.lineStart();
	        ring = [];
	      }
	      function ringEnd() {
	        pointRing(ring[0][0], ring[0][1]);
	        ringListener.lineEnd();
	        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
	        ring.pop();
	        polygon.push(ring);
	        ring = null;
	        if (!n) return;
	        if (clean & 1) {
	          segment = ringSegments[0];
	          var n = segment.length - 1, i = -1, point;
	          if (n > 0) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            while (++i < n) listener.point((point = segment[i])[0], point[1]);
	            listener.lineEnd();
	          }
	          return;
	        }
	        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
	        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
	      }
	      return clip;
	    };
	  }
	  function d3_geo_clipSegmentLength1(segment) {
	    return segment.length > 1;
	  }
	  function d3_geo_clipBufferListener() {
	    var lines = [], line;
	    return {
	      lineStart: function() {
	        lines.push(line = []);
	      },
	      point: function(λ, φ) {
	        line.push([ λ, φ ]);
	      },
	      lineEnd: d3_noop,
	      buffer: function() {
	        var buffer = lines;
	        lines = [];
	        line = null;
	        return buffer;
	      },
	      rejoin: function() {
	        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	      }
	    };
	  }
	  function d3_geo_clipSort(a, b) {
	    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
	  }
	  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
	  function d3_geo_clipAntimeridianLine(listener) {
	    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
	    return {
	      lineStart: function() {
	        listener.lineStart();
	        clean = 1;
	      },
	      point: function(λ1, φ1) {
	        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
	        if (abs(dλ - π) < ε) {
	          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          listener.point(λ1, φ0);
	          clean = 0;
	        } else if (sλ0 !== sλ1 && dλ >= π) {
	          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
	          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
	          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          clean = 0;
	        }
	        listener.point(λ0 = λ1, φ0 = φ1);
	        sλ0 = sλ1;
	      },
	      lineEnd: function() {
	        listener.lineEnd();
	        λ0 = φ0 = NaN;
	      },
	      clean: function() {
	        return 2 - clean;
	      }
	    };
	  }
	  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
	    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
	    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
	  }
	  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
	    var φ;
	    if (from == null) {
	      φ = direction * halfπ;
	      listener.point(-π, φ);
	      listener.point(0, φ);
	      listener.point(π, φ);
	      listener.point(π, 0);
	      listener.point(π, -φ);
	      listener.point(0, -φ);
	      listener.point(-π, -φ);
	      listener.point(-π, 0);
	      listener.point(-π, φ);
	    } else if (abs(from[0] - to[0]) > ε) {
	      var s = from[0] < to[0] ? π : -π;
	      φ = direction * s / 2;
	      listener.point(-s, φ);
	      listener.point(0, φ);
	      listener.point(s, φ);
	    } else {
	      listener.point(to[0], to[1]);
	    }
	  }
	  function d3_geo_pointInPolygon(point, polygon) {
	    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
	    d3_geo_areaRingSum.reset();
	    for (var i = 0, n = polygon.length; i < n; ++i) {
	      var ring = polygon[i], m = ring.length;
	      if (!m) continue;
	      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
	      while (true) {
	        if (j === m) j = 0;
	        point = ring[j];
	        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
	        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
	        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
	        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
	          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
	          d3_geo_cartesianNormalize(arc);
	          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
	          d3_geo_cartesianNormalize(intersection);
	          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
	          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
	            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
	          }
	        }
	        if (!j++) break;
	        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
	      }
	    }
	    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;
	  }
	  function d3_geo_clipCircle(radius) {
	    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
	    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
	    function visible(λ, φ) {
	      return Math.cos(λ) * Math.cos(φ) > cr;
	    }
	    function clipLine(listener) {
	      var point0, c0, v0, v00, clean;
	      return {
	        lineStart: function() {
	          v00 = v0 = false;
	          clean = 1;
	        },
	        point: function(λ, φ) {
	          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
	          if (!point0 && (v00 = v0 = v)) listener.lineStart();
	          if (v !== v0) {
	            point2 = intersect(point0, point1);
	            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
	              point1[0] += ε;
	              point1[1] += ε;
	              v = visible(point1[0], point1[1]);
	            }
	          }
	          if (v !== v0) {
	            clean = 0;
	            if (v) {
	              listener.lineStart();
	              point2 = intersect(point1, point0);
	              listener.point(point2[0], point2[1]);
	            } else {
	              point2 = intersect(point0, point1);
	              listener.point(point2[0], point2[1]);
	              listener.lineEnd();
	            }
	            point0 = point2;
	          } else if (notHemisphere && point0 && smallRadius ^ v) {
	            var t;
	            if (!(c & c0) && (t = intersect(point1, point0, true))) {
	              clean = 0;
	              if (smallRadius) {
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	              } else {
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	              }
	            }
	          }
	          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
	            listener.point(point1[0], point1[1]);
	          }
	          point0 = point1, v0 = v, c0 = c;
	        },
	        lineEnd: function() {
	          if (v0) listener.lineEnd();
	          point0 = null;
	        },
	        clean: function() {
	          return clean | (v00 && v0) << 1;
	        }
	      };
	    }
	    function intersect(a, b, two) {
	      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
	      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
	      if (!determinant) return !two && a;
	      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
	      d3_geo_cartesianAdd(A, B);
	      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
	      if (t2 < 0) return;
	      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
	      d3_geo_cartesianAdd(q, A);
	      q = d3_geo_spherical(q);
	      if (!two) return q;
	      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
	      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
	      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
	      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
	      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
	        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
	        d3_geo_cartesianAdd(q1, A);
	        return [ q, d3_geo_spherical(q1) ];
	      }
	    }
	    function code(λ, φ) {
	      var r = smallRadius ? radius : π - radius, code = 0;
	      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
	      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
	      return code;
	    }
	  }
	  function d3_geom_clipLine(x0, y0, x1, y1) {
	    return function(line) {
	      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
	      r = x0 - ax;
	      if (!dx && r > 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dx > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = x1 - ax;
	      if (!dx && r < 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dx > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      r = y0 - ay;
	      if (!dy && r > 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dy > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = y1 - ay;
	      if (!dy && r < 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dy > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      if (t0 > 0) line.a = {
	        x: ax + t0 * dx,
	        y: ay + t0 * dy
	      };
	      if (t1 < 1) line.b = {
	        x: ax + t1 * dx,
	        y: ay + t1 * dy
	      };
	      return line;
	    };
	  }
	  var d3_geo_clipExtentMAX = 1e9;
	  d3.geo.clipExtent = function() {
	    var x0, y0, x1, y1, stream, clip, clipExtent = {
	      stream: function(output) {
	        if (stream) stream.valid = false;
	        stream = clip(output);
	        stream.valid = true;
	        return stream;
	      },
	      extent: function(_) {
	        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
	        if (stream) stream.valid = false, stream = null;
	        return clipExtent;
	      }
	    };
	    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
	  };
	  function d3_geo_clipExtent(x0, y0, x1, y1) {
	    return function(listener) {
	      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          listener = bufferListener;
	          segments = [];
	          polygon = [];
	          clean = true;
	        },
	        polygonEnd: function() {
	          listener = listener_;
	          segments = d3.merge(segments);
	          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
	          if (inside || visible) {
	            listener.polygonStart();
	            if (inside) {
	              listener.lineStart();
	              interpolate(null, null, 1, listener);
	              listener.lineEnd();
	            }
	            if (visible) {
	              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
	            }
	            listener.polygonEnd();
	          }
	          segments = polygon = ring = null;
	        }
	      };
	      function insidePolygon(p) {
	        var wn = 0, n = polygon.length, y = p[1];
	        for (var i = 0; i < n; ++i) {
	          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
	            b = v[j];
	            if (a[1] <= y) {
	              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
	            } else {
	              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
	            }
	            a = b;
	          }
	        }
	        return wn !== 0;
	      }
	      function interpolate(from, to, direction, listener) {
	        var a = 0, a1 = 0;
	        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
	          do {
	            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	          } while ((a = (a + direction + 4) % 4) !== a1);
	        } else {
	          listener.point(to[0], to[1]);
	        }
	      }
	      function pointVisible(x, y) {
	        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	      }
	      function point(x, y) {
	        if (pointVisible(x, y)) listener.point(x, y);
	      }
	      var x__, y__, v__, x_, y_, v_, first, clean;
	      function lineStart() {
	        clip.point = linePoint;
	        if (polygon) polygon.push(ring = []);
	        first = true;
	        v_ = false;
	        x_ = y_ = NaN;
	      }
	      function lineEnd() {
	        if (segments) {
	          linePoint(x__, y__);
	          if (v__ && v_) bufferListener.rejoin();
	          segments.push(bufferListener.buffer());
	        }
	        clip.point = point;
	        if (v_) listener.lineEnd();
	      }
	      function linePoint(x, y) {
	        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
	        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
	        var v = pointVisible(x, y);
	        if (polygon) ring.push([ x, y ]);
	        if (first) {
	          x__ = x, y__ = y, v__ = v;
	          first = false;
	          if (v) {
	            listener.lineStart();
	            listener.point(x, y);
	          }
	        } else {
	          if (v && v_) listener.point(x, y); else {
	            var l = {
	              a: {
	                x: x_,
	                y: y_
	              },
	              b: {
	                x: x,
	                y: y
	              }
	            };
	            if (clipLine(l)) {
	              if (!v_) {
	                listener.lineStart();
	                listener.point(l.a.x, l.a.y);
	              }
	              listener.point(l.b.x, l.b.y);
	              if (!v) listener.lineEnd();
	              clean = false;
	            } else if (v) {
	              listener.lineStart();
	              listener.point(x, y);
	              clean = false;
	            }
	          }
	        }
	        x_ = x, y_ = y, v_ = v;
	      }
	      return clip;
	    };
	    function corner(p, direction) {
	      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
	    }
	    function compare(a, b) {
	      return comparePoints(a.x, b.x);
	    }
	    function comparePoints(a, b) {
	      var ca = corner(a, 1), cb = corner(b, 1);
	      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
	    }
	  }
	  function d3_geo_conic(projectAt) {
	    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
	    p.parallels = function(_) {
	      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
	      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
	    };
	    return p;
	  }
	  function d3_geo_conicEqualArea(φ0, φ1) {
	    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
	    function forward(λ, φ) {
	      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
	      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = ρ0 - y;
	      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEqualArea = function() {
	    return d3_geo_conic(d3_geo_conicEqualArea);
	  }).raw = d3_geo_conicEqualArea;
	  d3.geo.albers = function() {
	    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
	  };
	  d3.geo.albersUsa = function() {
	    var lower48 = d3.geo.albers();
	    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
	    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
	    var point, pointStream = {
	      point: function(x, y) {
	        point = [ x, y ];
	      }
	    }, lower48Point, alaskaPoint, hawaiiPoint;
	    function albersUsa(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      point = null;
	      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
	      return point;
	    }
	    albersUsa.invert = function(coordinates) {
	      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
	      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
	    };
	    albersUsa.stream = function(stream) {
	      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
	      return {
	        point: function(x, y) {
	          lower48Stream.point(x, y);
	          alaskaStream.point(x, y);
	          hawaiiStream.point(x, y);
	        },
	        sphere: function() {
	          lower48Stream.sphere();
	          alaskaStream.sphere();
	          hawaiiStream.sphere();
	        },
	        lineStart: function() {
	          lower48Stream.lineStart();
	          alaskaStream.lineStart();
	          hawaiiStream.lineStart();
	        },
	        lineEnd: function() {
	          lower48Stream.lineEnd();
	          alaskaStream.lineEnd();
	          hawaiiStream.lineEnd();
	        },
	        polygonStart: function() {
	          lower48Stream.polygonStart();
	          alaskaStream.polygonStart();
	          hawaiiStream.polygonStart();
	        },
	        polygonEnd: function() {
	          lower48Stream.polygonEnd();
	          alaskaStream.polygonEnd();
	          hawaiiStream.polygonEnd();
	        }
	      };
	    };
	    albersUsa.precision = function(_) {
	      if (!arguments.length) return lower48.precision();
	      lower48.precision(_);
	      alaska.precision(_);
	      hawaii.precision(_);
	      return albersUsa;
	    };
	    albersUsa.scale = function(_) {
	      if (!arguments.length) return lower48.scale();
	      lower48.scale(_);
	      alaska.scale(_ * .35);
	      hawaii.scale(_);
	      return albersUsa.translate(lower48.translate());
	    };
	    albersUsa.translate = function(_) {
	      if (!arguments.length) return lower48.translate();
	      var k = lower48.scale(), x = +_[0], y = +_[1];
	      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
	      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      return albersUsa;
	    };
	    return albersUsa.scale(1070);
	  };
	  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_pathAreaPolygon = 0;
	      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
	      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
	    }
	  };
	  function d3_geo_pathAreaRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathArea.point = function(x, y) {
	      d3_geo_pathArea.point = nextPoint;
	      x00 = x0 = x, y00 = y0 = y;
	    };
	    function nextPoint(x, y) {
	      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
	      x0 = x, y0 = y;
	    }
	    d3_geo_pathArea.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
	  var d3_geo_pathBounds = {
	    point: d3_geo_pathBoundsPoint,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_pathBoundsPoint(x, y) {
	    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
	    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
	    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
	    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
	  }
	  function d3_geo_pathBuffer() {
	    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointCircle = d3_geo_pathBufferCircle(_);
	        return stream;
	      },
	      result: function() {
	        if (buffer.length) {
	          var result = buffer.join("");
	          buffer = [];
	          return result;
	        }
	      }
	    };
	    function point(x, y) {
	      buffer.push("M", x, ",", y, pointCircle);
	    }
	    function pointLineStart(x, y) {
	      buffer.push("M", x, ",", y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      buffer.push("L", x, ",", y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      buffer.push("Z");
	    }
	    return stream;
	  }
	  function d3_geo_pathBufferCircle(radius) {
	    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
	  }
	  var d3_geo_pathCentroid = {
	    point: d3_geo_pathCentroidPoint,
	    lineStart: d3_geo_pathCentroidLineStart,
	    lineEnd: d3_geo_pathCentroidLineEnd,
	    polygonStart: function() {
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
	      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
	    }
	  };
	  function d3_geo_pathCentroidPoint(x, y) {
	    d3_geo_centroidX0 += x;
	    d3_geo_centroidY0 += y;
	    ++d3_geo_centroidZ0;
	  }
	  function d3_geo_pathCentroidLineStart() {
	    var x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	  }
	  function d3_geo_pathCentroidLineEnd() {
	    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	  }
	  function d3_geo_pathCentroidRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      z = y0 * x - x0 * y;
	      d3_geo_centroidX2 += z * (x0 + x);
	      d3_geo_centroidY2 += z * (y0 + y);
	      d3_geo_centroidZ2 += z * 3;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	    d3_geo_pathCentroid.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  function d3_geo_pathContext(context) {
	    var pointRadius = 4.5;
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointRadius = _;
	        return stream;
	      },
	      result: d3_noop
	    };
	    function point(x, y) {
	      context.moveTo(x + pointRadius, y);
	      context.arc(x, y, pointRadius, 0, τ);
	    }
	    function pointLineStart(x, y) {
	      context.moveTo(x, y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      context.lineTo(x, y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      context.closePath();
	    }
	    return stream;
	  }
	  function d3_geo_resample(project) {
	    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
	    function resample(stream) {
	      return (maxDepth ? resampleRecursive : resampleNone)(stream);
	    }
	    function resampleNone(stream) {
	      return d3_geo_transformPoint(stream, function(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      });
	    }
	    function resampleRecursive(stream) {
	      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
	      var resample = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          stream.polygonStart();
	          resample.lineStart = ringStart;
	        },
	        polygonEnd: function() {
	          stream.polygonEnd();
	          resample.lineStart = lineStart;
	        }
	      };
	      function point(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      }
	      function lineStart() {
	        x0 = NaN;
	        resample.point = linePoint;
	        stream.lineStart();
	      }
	      function linePoint(λ, φ) {
	        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	        stream.point(x0, y0);
	      }
	      function lineEnd() {
	        resample.point = point;
	        stream.lineEnd();
	      }
	      function ringStart() {
	        lineStart();
	        resample.point = ringPoint;
	        resample.lineEnd = ringEnd;
	      }
	      function ringPoint(λ, φ) {
	        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	        resample.point = linePoint;
	      }
	      function ringEnd() {
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
	        resample.lineEnd = lineEnd;
	        lineEnd();
	      }
	      return resample;
	    }
	    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
	      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
	      if (d2 > 4 * δ2 && depth--) {
	        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
	        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
	          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
	          stream.point(x2, y2);
	          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
	        }
	      }
	    }
	    resample.precision = function(_) {
	      if (!arguments.length) return Math.sqrt(δ2);
	      maxDepth = (δ2 = _ * _) > 0 && 16;
	      return resample;
	    };
	    return resample;
	  }
	  d3.geo.path = function() {
	    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
	    function path(object) {
	      if (object) {
	        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
	        d3.geo.stream(object, cacheStream);
	      }
	      return contextStream.result();
	    }
	    path.area = function(object) {
	      d3_geo_pathAreaSum = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathArea));
	      return d3_geo_pathAreaSum;
	    };
	    path.centroid = function(object) {
	      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
	      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
	    };
	    path.bounds = function(object) {
	      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
	      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
	      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
	    };
	    path.projection = function(_) {
	      if (!arguments.length) return projection;
	      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
	      return reset();
	    };
	    path.context = function(_) {
	      if (!arguments.length) return context;
	      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
	      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	      return reset();
	    };
	    path.pointRadius = function(_) {
	      if (!arguments.length) return pointRadius;
	      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	      return path;
	    };
	    function reset() {
	      cacheStream = null;
	      return path;
	    }
	    return path.projection(d3.geo.albersUsa()).context(null);
	  };
	  function d3_geo_pathProjectStream(project) {
	    var resample = d3_geo_resample(function(x, y) {
	      return project([ x * d3_degrees, y * d3_degrees ]);
	    });
	    return function(stream) {
	      return d3_geo_projectionRadians(resample(stream));
	    };
	  }
	  d3.geo.transform = function(methods) {
	    return {
	      stream: function(stream) {
	        var transform = new d3_geo_transform(stream);
	        for (var k in methods) transform[k] = methods[k];
	        return transform;
	      }
	    };
	  };
	  function d3_geo_transform(stream) {
	    this.stream = stream;
	  }
	  d3_geo_transform.prototype = {
	    point: function(x, y) {
	      this.stream.point(x, y);
	    },
	    sphere: function() {
	      this.stream.sphere();
	    },
	    lineStart: function() {
	      this.stream.lineStart();
	    },
	    lineEnd: function() {
	      this.stream.lineEnd();
	    },
	    polygonStart: function() {
	      this.stream.polygonStart();
	    },
	    polygonEnd: function() {
	      this.stream.polygonEnd();
	    }
	  };
	  function d3_geo_transformPoint(stream, point) {
	    return {
	      point: point,
	      sphere: function() {
	        stream.sphere();
	      },
	      lineStart: function() {
	        stream.lineStart();
	      },
	      lineEnd: function() {
	        stream.lineEnd();
	      },
	      polygonStart: function() {
	        stream.polygonStart();
	      },
	      polygonEnd: function() {
	        stream.polygonEnd();
	      }
	    };
	  }
	  d3.geo.projection = d3_geo_projection;
	  d3.geo.projectionMutator = d3_geo_projectionMutator;
	  function d3_geo_projection(project) {
	    return d3_geo_projectionMutator(function() {
	      return project;
	    })();
	  }
	  function d3_geo_projectionMutator(projectAt) {
	    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
	      x = project(x, y);
	      return [ x[0] * k + δx, δy - x[1] * k ];
	    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
	    function projection(point) {
	      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
	      return [ point[0] * k + δx, δy - point[1] * k ];
	    }
	    function invert(point) {
	      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
	      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
	    }
	    projection.stream = function(output) {
	      if (stream) stream.valid = false;
	      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
	      stream.valid = true;
	      return stream;
	    };
	    projection.clipAngle = function(_) {
	      if (!arguments.length) return clipAngle;
	      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
	      return invalidate();
	    };
	    projection.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent;
	      clipExtent = _;
	      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
	      return invalidate();
	    };
	    projection.scale = function(_) {
	      if (!arguments.length) return k;
	      k = +_;
	      return reset();
	    };
	    projection.translate = function(_) {
	      if (!arguments.length) return [ x, y ];
	      x = +_[0];
	      y = +_[1];
	      return reset();
	    };
	    projection.center = function(_) {
	      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
	      λ = _[0] % 360 * d3_radians;
	      φ = _[1] % 360 * d3_radians;
	      return reset();
	    };
	    projection.rotate = function(_) {
	      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
	      δλ = _[0] % 360 * d3_radians;
	      δφ = _[1] % 360 * d3_radians;
	      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
	      return reset();
	    };
	    d3.rebind(projection, projectResample, "precision");
	    function reset() {
	      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
	      var center = project(λ, φ);
	      δx = x - center[0] * k;
	      δy = y + center[1] * k;
	      return invalidate();
	    }
	    function invalidate() {
	      if (stream) stream.valid = false, stream = null;
	      return projection;
	    }
	    return function() {
	      project = projectAt.apply(this, arguments);
	      projection.invert = project.invert && invert;
	      return reset();
	    };
	  }
	  function d3_geo_projectionRadians(stream) {
	    return d3_geo_transformPoint(stream, function(x, y) {
	      stream.point(x * d3_radians, y * d3_radians);
	    });
	  }
	  function d3_geo_equirectangular(λ, φ) {
	    return [ λ, φ ];
	  }
	  (d3.geo.equirectangular = function() {
	    return d3_geo_projection(d3_geo_equirectangular);
	  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
	  d3.geo.rotation = function(rotate) {
	    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
	    function forward(coordinates) {
	      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    }
	    forward.invert = function(coordinates) {
	      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    };
	    return forward;
	  };
	  function d3_geo_identityRotation(λ, φ) {
	    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	  }
	  d3_geo_identityRotation.invert = d3_geo_equirectangular;
	  function d3_geo_rotation(δλ, δφ, δγ) {
	    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
	  }
	  function d3_geo_forwardRotationλ(δλ) {
	    return function(λ, φ) {
	      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	    };
	  }
	  function d3_geo_rotationλ(δλ) {
	    var rotation = d3_geo_forwardRotationλ(δλ);
	    rotation.invert = d3_geo_forwardRotationλ(-δλ);
	    return rotation;
	  }
	  function d3_geo_rotationφγ(δφ, δγ) {
	    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
	    function rotation(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
	      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
	    }
	    rotation.invert = function(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
	      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
	    };
	    return rotation;
	  }
	  d3.geo.circle = function() {
	    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
	    function circle() {
	      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
	      interpolate(null, null, 1, {
	        point: function(x, y) {
	          ring.push(x = rotate(x, y));
	          x[0] *= d3_degrees, x[1] *= d3_degrees;
	        }
	      });
	      return {
	        type: "Polygon",
	        coordinates: [ ring ]
	      };
	    }
	    circle.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return circle;
	    };
	    circle.angle = function(x) {
	      if (!arguments.length) return angle;
	      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
	      return circle;
	    };
	    circle.precision = function(_) {
	      if (!arguments.length) return precision;
	      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
	      return circle;
	    };
	    return circle.angle(90);
	  };
	  function d3_geo_circleInterpolate(radius, precision) {
	    var cr = Math.cos(radius), sr = Math.sin(radius);
	    return function(from, to, direction, listener) {
	      var step = direction * precision;
	      if (from != null) {
	        from = d3_geo_circleAngle(cr, from);
	        to = d3_geo_circleAngle(cr, to);
	        if (direction > 0 ? from < to : from > to) from += direction * τ;
	      } else {
	        from = radius + direction * τ;
	        to = radius - .5 * step;
	      }
	      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
	        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
	      }
	    };
	  }
	  function d3_geo_circleAngle(cr, point) {
	    var a = d3_geo_cartesian(point);
	    a[0] -= cr;
	    d3_geo_cartesianNormalize(a);
	    var angle = d3_acos(-a[1]);
	    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
	  }
	  d3.geo.distance = function(a, b) {
	    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
	    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
	  };
	  d3.geo.graticule = function() {
	    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
	    function graticule() {
	      return {
	        type: "MultiLineString",
	        coordinates: lines()
	      };
	    }
	    function lines() {
	      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
	        return abs(x % DX) > ε;
	      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
	        return abs(y % DY) > ε;
	      }).map(y));
	    }
	    graticule.lines = function() {
	      return lines().map(function(coordinates) {
	        return {
	          type: "LineString",
	          coordinates: coordinates
	        };
	      });
	    };
	    graticule.outline = function() {
	      return {
	        type: "Polygon",
	        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
	      };
	    };
	    graticule.extent = function(_) {
	      if (!arguments.length) return graticule.minorExtent();
	      return graticule.majorExtent(_).minorExtent(_);
	    };
	    graticule.majorExtent = function(_) {
	      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
	      X0 = +_[0][0], X1 = +_[1][0];
	      Y0 = +_[0][1], Y1 = +_[1][1];
	      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.minorExtent = function(_) {
	      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	      x0 = +_[0][0], x1 = +_[1][0];
	      y0 = +_[0][1], y1 = +_[1][1];
	      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.step = function(_) {
	      if (!arguments.length) return graticule.minorStep();
	      return graticule.majorStep(_).minorStep(_);
	    };
	    graticule.majorStep = function(_) {
	      if (!arguments.length) return [ DX, DY ];
	      DX = +_[0], DY = +_[1];
	      return graticule;
	    };
	    graticule.minorStep = function(_) {
	      if (!arguments.length) return [ dx, dy ];
	      dx = +_[0], dy = +_[1];
	      return graticule;
	    };
	    graticule.precision = function(_) {
	      if (!arguments.length) return precision;
	      precision = +_;
	      x = d3_geo_graticuleX(y0, y1, 90);
	      y = d3_geo_graticuleY(x0, x1, precision);
	      X = d3_geo_graticuleX(Y0, Y1, 90);
	      Y = d3_geo_graticuleY(X0, X1, precision);
	      return graticule;
	    };
	    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
	  };
	  function d3_geo_graticuleX(y0, y1, dy) {
	    var y = d3.range(y0, y1 - ε, dy).concat(y1);
	    return function(x) {
	      return y.map(function(y) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_geo_graticuleY(x0, x1, dx) {
	    var x = d3.range(x0, x1 - ε, dx).concat(x1);
	    return function(y) {
	      return x.map(function(x) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_source(d) {
	    return d.source;
	  }
	  function d3_target(d) {
	    return d.target;
	  }
	  d3.geo.greatArc = function() {
	    var source = d3_source, source_, target = d3_target, target_;
	    function greatArc() {
	      return {
	        type: "LineString",
	        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
	      };
	    }
	    greatArc.distance = function() {
	      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
	    };
	    greatArc.source = function(_) {
	      if (!arguments.length) return source;
	      source = _, source_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.target = function(_) {
	      if (!arguments.length) return target;
	      target = _, target_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.precision = function() {
	      return arguments.length ? greatArc : 0;
	    };
	    return greatArc;
	  };
	  d3.geo.interpolate = function(source, target) {
	    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
	  };
	  function d3_geo_interpolate(x0, y0, x1, y1) {
	    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
	    var interpolate = d ? function(t) {
	      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
	      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
	    } : function() {
	      return [ x0 * d3_degrees, y0 * d3_degrees ];
	    };
	    interpolate.distance = d;
	    return interpolate;
	  }
	  d3.geo.length = function(object) {
	    d3_geo_lengthSum = 0;
	    d3.geo.stream(object, d3_geo_length);
	    return d3_geo_lengthSum;
	  };
	  var d3_geo_lengthSum;
	  var d3_geo_length = {
	    sphere: d3_noop,
	    point: d3_noop,
	    lineStart: d3_geo_lengthLineStart,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_lengthLineStart() {
	    var λ0, sinφ0, cosφ0;
	    d3_geo_length.point = function(λ, φ) {
	      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
	      d3_geo_length.point = nextPoint;
	    };
	    d3_geo_length.lineEnd = function() {
	      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
	    };
	    function nextPoint(λ, φ) {
	      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
	      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
	      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
	    }
	  }
	  function d3_geo_azimuthal(scale, angle) {
	    function azimuthal(λ, φ) {
	      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
	      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
	    }
	    azimuthal.invert = function(x, y) {
	      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
	      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
	    };
	    return azimuthal;
	  }
	  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
	    return Math.sqrt(2 / (1 + cosλcosφ));
	  }, function(ρ) {
	    return 2 * Math.asin(ρ / 2);
	  });
	  (d3.geo.azimuthalEqualArea = function() {
	    return d3_geo_projection(d3_geo_azimuthalEqualArea);
	  }).raw = d3_geo_azimuthalEqualArea;
	  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
	    var c = Math.acos(cosλcosφ);
	    return c && c / Math.sin(c);
	  }, d3_identity);
	  (d3.geo.azimuthalEquidistant = function() {
	    return d3_geo_projection(d3_geo_azimuthalEquidistant);
	  }).raw = d3_geo_azimuthalEquidistant;
	  function d3_geo_conicConformal(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), t = function(φ) {
	      return Math.tan(π / 4 + φ / 2);
	    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
	    if (!n) return d3_geo_mercator;
	    function forward(λ, φ) {
	      if (F > 0) {
	        if (φ < -halfπ + ε) φ = -halfπ + ε;
	      } else {
	        if (φ > halfπ - ε) φ = halfπ - ε;
	      }
	      var ρ = F / Math.pow(t(φ), n);
	      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
	      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
	    };
	    return forward;
	  }
	  (d3.geo.conicConformal = function() {
	    return d3_geo_conic(d3_geo_conicConformal);
	  }).raw = d3_geo_conicConformal;
	  function d3_geo_conicEquidistant(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
	    if (abs(n) < ε) return d3_geo_equirectangular;
	    function forward(λ, φ) {
	      var ρ = G - φ;
	      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = G - y;
	      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEquidistant = function() {
	    return d3_geo_conic(d3_geo_conicEquidistant);
	  }).raw = d3_geo_conicEquidistant;
	  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / cosλcosφ;
	  }, Math.atan);
	  (d3.geo.gnomonic = function() {
	    return d3_geo_projection(d3_geo_gnomonic);
	  }).raw = d3_geo_gnomonic;
	  function d3_geo_mercator(λ, φ) {
	    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
	  }
	  d3_geo_mercator.invert = function(x, y) {
	    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
	  };
	  function d3_geo_mercatorProjection(project) {
	    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
	    m.scale = function() {
	      var v = scale.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.translate = function() {
	      var v = translate.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.clipExtent = function(_) {
	      var v = clipExtent.apply(m, arguments);
	      if (v === m) {
	        if (clipAuto = _ == null) {
	          var k = π * scale(), t = translate();
	          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
	        }
	      } else if (clipAuto) {
	        v = null;
	      }
	      return v;
	    };
	    return m.clipExtent(null);
	  }
	  (d3.geo.mercator = function() {
	    return d3_geo_mercatorProjection(d3_geo_mercator);
	  }).raw = d3_geo_mercator;
	  var d3_geo_orthographic = d3_geo_azimuthal(function() {
	    return 1;
	  }, Math.asin);
	  (d3.geo.orthographic = function() {
	    return d3_geo_projection(d3_geo_orthographic);
	  }).raw = d3_geo_orthographic;
	  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / (1 + cosλcosφ);
	  }, function(ρ) {
	    return 2 * Math.atan(ρ);
	  });
	  (d3.geo.stereographic = function() {
	    return d3_geo_projection(d3_geo_stereographic);
	  }).raw = d3_geo_stereographic;
	  function d3_geo_transverseMercator(λ, φ) {
	    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
	  }
	  d3_geo_transverseMercator.invert = function(x, y) {
	    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
	  };
	  (d3.geo.transverseMercator = function() {
	    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
	    projection.center = function(_) {
	      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
	    };
	    projection.rotate = function(_) {
	      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
	      [ _[0], _[1], _[2] - 90 ]);
	    };
	    return rotate([ 0, 0, 90 ]);
	  }).raw = d3_geo_transverseMercator;
	  d3.geom = {};
	  function d3_geom_pointX(d) {
	    return d[0];
	  }
	  function d3_geom_pointY(d) {
	    return d[1];
	  }
	  d3.geom.hull = function(vertices) {
	    var x = d3_geom_pointX, y = d3_geom_pointY;
	    if (arguments.length) return hull(vertices);
	    function hull(data) {
	      if (data.length < 3) return [];
	      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
	      for (i = 0; i < n; i++) {
	        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
	      }
	      points.sort(d3_geom_hullOrder);
	      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
	      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
	      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
	      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
	      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
	      return polygon;
	    }
	    hull.x = function(_) {
	      return arguments.length ? (x = _, hull) : x;
	    };
	    hull.y = function(_) {
	      return arguments.length ? (y = _, hull) : y;
	    };
	    return hull;
	  };
	  function d3_geom_hullUpper(points) {
	    var n = points.length, hull = [ 0, 1 ], hs = 2;
	    for (var i = 2; i < n; i++) {
	      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
	      hull[hs++] = i;
	    }
	    return hull.slice(0, hs);
	  }
	  function d3_geom_hullOrder(a, b) {
	    return a[0] - b[0] || a[1] - b[1];
	  }
	  d3.geom.polygon = function(coordinates) {
	    d3_subclass(coordinates, d3_geom_polygonPrototype);
	    return coordinates;
	  };
	  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
	  d3_geom_polygonPrototype.area = function() {
	    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      area += a[1] * b[0] - a[0] * b[1];
	    }
	    return area * .5;
	  };
	  d3_geom_polygonPrototype.centroid = function(k) {
	    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
	    if (!arguments.length) k = -1 / (6 * this.area());
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      c = a[0] * b[1] - b[0] * a[1];
	      x += (a[0] + b[0]) * c;
	      y += (a[1] + b[1]) * c;
	    }
	    return [ x * k, y * k ];
	  };
	  d3_geom_polygonPrototype.clip = function(subject) {
	    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
	    while (++i < n) {
	      input = subject.slice();
	      subject.length = 0;
	      b = this[i];
	      c = input[(m = input.length - closed) - 1];
	      j = -1;
	      while (++j < m) {
	        d = input[j];
	        if (d3_geom_polygonInside(d, a, b)) {
	          if (!d3_geom_polygonInside(c, a, b)) {
	            subject.push(d3_geom_polygonIntersect(c, d, a, b));
	          }
	          subject.push(d);
	        } else if (d3_geom_polygonInside(c, a, b)) {
	          subject.push(d3_geom_polygonIntersect(c, d, a, b));
	        }
	        c = d;
	      }
	      if (closed) subject.push(subject[0]);
	      a = b;
	    }
	    return subject;
	  };
	  function d3_geom_polygonInside(p, a, b) {
	    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
	  }
	  function d3_geom_polygonIntersect(c, d, a, b) {
	    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
	    return [ x1 + ua * x21, y1 + ua * y21 ];
	  }
	  function d3_geom_polygonClosed(coordinates) {
	    var a = coordinates[0], b = coordinates[coordinates.length - 1];
	    return !(a[0] - b[0] || a[1] - b[1]);
	  }
	  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
	  function d3_geom_voronoiBeach() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.edge = this.site = this.circle = null;
	  }
	  function d3_geom_voronoiCreateBeach(site) {
	    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
	    beach.site = site;
	    return beach;
	  }
	  function d3_geom_voronoiDetachBeach(beach) {
	    d3_geom_voronoiDetachCircle(beach);
	    d3_geom_voronoiBeaches.remove(beach);
	    d3_geom_voronoiBeachPool.push(beach);
	    d3_geom_voronoiRedBlackNode(beach);
	  }
	  function d3_geom_voronoiRemoveBeach(beach) {
	    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
	      x: x,
	      y: y
	    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
	    d3_geom_voronoiDetachBeach(beach);
	    var lArc = previous;
	    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
	      previous = lArc.P;
	      disappearing.unshift(lArc);
	      d3_geom_voronoiDetachBeach(lArc);
	      lArc = previous;
	    }
	    disappearing.unshift(lArc);
	    d3_geom_voronoiDetachCircle(lArc);
	    var rArc = next;
	    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
	      next = rArc.N;
	      disappearing.push(rArc);
	      d3_geom_voronoiDetachBeach(rArc);
	      rArc = next;
	    }
	    disappearing.push(rArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var nArcs = disappearing.length, iArc;
	    for (iArc = 1; iArc < nArcs; ++iArc) {
	      rArc = disappearing[iArc];
	      lArc = disappearing[iArc - 1];
	      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	    }
	    lArc = disappearing[0];
	    rArc = disappearing[nArcs - 1];
	    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiAddBeach(site) {
	    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
	    while (node) {
	      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
	      if (dxl > ε) node = node.L; else {
	        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
	        if (dxr > ε) {
	          if (!node.R) {
	            lArc = node;
	            break;
	          }
	          node = node.R;
	        } else {
	          if (dxl > -ε) {
	            lArc = node.P;
	            rArc = node;
	          } else if (dxr > -ε) {
	            lArc = node;
	            rArc = node.N;
	          } else {
	            lArc = rArc = node;
	          }
	          break;
	        }
	      }
	    }
	    var newArc = d3_geom_voronoiCreateBeach(site);
	    d3_geom_voronoiBeaches.insert(lArc, newArc);
	    if (!lArc && !rArc) return;
	    if (lArc === rArc) {
	      d3_geom_voronoiDetachCircle(lArc);
	      rArc = d3_geom_voronoiCreateBeach(lArc.site);
	      d3_geom_voronoiBeaches.insert(newArc, rArc);
	      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      d3_geom_voronoiAttachCircle(lArc);
	      d3_geom_voronoiAttachCircle(rArc);
	      return;
	    }
	    if (!rArc) {
	      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      return;
	    }
	    d3_geom_voronoiDetachCircle(lArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
	      x: (cy * hb - by * hc) / d + ax,
	      y: (bx * hc - cx * hb) / d + ay
	    };
	    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
	    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
	    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
	    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
	    if (!pby2) return rfocx;
	    var lArc = arc.P;
	    if (!lArc) return -Infinity;
	    site = lArc.site;
	    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
	    if (!plby2) return lfocx;
	    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
	    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
	    return (rfocx + lfocx) / 2;
	  }
	  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
	    var rArc = arc.N;
	    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
	    var site = arc.site;
	    return site.y === directrix ? site.x : Infinity;
	  }
	  function d3_geom_voronoiCell(site) {
	    this.site = site;
	    this.edges = [];
	  }
	  d3_geom_voronoiCell.prototype.prepare = function() {
	    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
	    while (iHalfEdge--) {
	      edge = halfEdges[iHalfEdge].edge;
	      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
	    }
	    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
	    return halfEdges.length;
	  };
	  function d3_geom_voronoiCloseCells(extent) {
	    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
	    while (iCell--) {
	      cell = cells[iCell];
	      if (!cell || !cell.prepare()) continue;
	      halfEdges = cell.edges;
	      nHalfEdges = halfEdges.length;
	      iHalfEdge = 0;
	      while (iHalfEdge < nHalfEdges) {
	        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
	        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
	        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
	          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
	            x: x0,
	            y: abs(x2 - x0) < ε ? y2 : y1
	          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
	            x: abs(y2 - y1) < ε ? x2 : x1,
	            y: y1
	          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
	            x: x1,
	            y: abs(x2 - x1) < ε ? y2 : y0
	          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
	            x: abs(y2 - y0) < ε ? x2 : x0,
	            y: y0
	          } : null), cell.site, null));
	          ++nHalfEdges;
	        }
	      }
	    }
	  }
	  function d3_geom_voronoiHalfEdgeOrder(a, b) {
	    return b.angle - a.angle;
	  }
	  function d3_geom_voronoiCircle() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.x = this.y = this.arc = this.site = this.cy = null;
	  }
	  function d3_geom_voronoiAttachCircle(arc) {
	    var lArc = arc.P, rArc = arc.N;
	    if (!lArc || !rArc) return;
	    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
	    if (lSite === rSite) return;
	    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
	    var d = 2 * (ax * cy - ay * cx);
	    if (d >= -ε2) return;
	    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
	    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
	    circle.arc = arc;
	    circle.site = cSite;
	    circle.x = x + bx;
	    circle.y = cy + Math.sqrt(x * x + y * y);
	    circle.cy = cy;
	    arc.circle = circle;
	    var before = null, node = d3_geom_voronoiCircles._;
	    while (node) {
	      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
	        if (node.L) node = node.L; else {
	          before = node.P;
	          break;
	        }
	      } else {
	        if (node.R) node = node.R; else {
	          before = node;
	          break;
	        }
	      }
	    }
	    d3_geom_voronoiCircles.insert(before, circle);
	    if (!before) d3_geom_voronoiFirstCircle = circle;
	  }
	  function d3_geom_voronoiDetachCircle(arc) {
	    var circle = arc.circle;
	    if (circle) {
	      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
	      d3_geom_voronoiCircles.remove(circle);
	      d3_geom_voronoiCirclePool.push(circle);
	      d3_geom_voronoiRedBlackNode(circle);
	      arc.circle = null;
	    }
	  }
	  function d3_geom_voronoiClipEdges(extent) {
	    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
	    while (i--) {
	      e = edges[i];
	      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
	        e.a = e.b = null;
	        edges.splice(i, 1);
	      }
	    }
	  }
	  function d3_geom_voronoiConnectEdge(edge, extent) {
	    var vb = edge.b;
	    if (vb) return true;
	    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
	    if (ry === ly) {
	      if (fx < x0 || fx >= x1) return;
	      if (lx > rx) {
	        if (!va) va = {
	          x: fx,
	          y: y0
	        }; else if (va.y >= y1) return;
	        vb = {
	          x: fx,
	          y: y1
	        };
	      } else {
	        if (!va) va = {
	          x: fx,
	          y: y1
	        }; else if (va.y < y0) return;
	        vb = {
	          x: fx,
	          y: y0
	        };
	      }
	    } else {
	      fm = (lx - rx) / (ry - ly);
	      fb = fy - fm * fx;
	      if (fm < -1 || fm > 1) {
	        if (lx > rx) {
	          if (!va) va = {
	            x: (y0 - fb) / fm,
	            y: y0
	          }; else if (va.y >= y1) return;
	          vb = {
	            x: (y1 - fb) / fm,
	            y: y1
	          };
	        } else {
	          if (!va) va = {
	            x: (y1 - fb) / fm,
	            y: y1
	          }; else if (va.y < y0) return;
	          vb = {
	            x: (y0 - fb) / fm,
	            y: y0
	          };
	        }
	      } else {
	        if (ly < ry) {
	          if (!va) va = {
	            x: x0,
	            y: fm * x0 + fb
	          }; else if (va.x >= x1) return;
	          vb = {
	            x: x1,
	            y: fm * x1 + fb
	          };
	        } else {
	          if (!va) va = {
	            x: x1,
	            y: fm * x1 + fb
	          }; else if (va.x < x0) return;
	          vb = {
	            x: x0,
	            y: fm * x0 + fb
	          };
	        }
	      }
	    }
	    edge.a = va;
	    edge.b = vb;
	    return true;
	  }
	  function d3_geom_voronoiEdge(lSite, rSite) {
	    this.l = lSite;
	    this.r = rSite;
	    this.a = this.b = null;
	  }
	  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, rSite);
	    d3_geom_voronoiEdges.push(edge);
	    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
	    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
	    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
	    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
	    return edge;
	  }
	  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, null);
	    edge.a = va;
	    edge.b = vb;
	    d3_geom_voronoiEdges.push(edge);
	    return edge;
	  }
	  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
	    if (!edge.a && !edge.b) {
	      edge.a = vertex;
	      edge.l = lSite;
	      edge.r = rSite;
	    } else if (edge.l === rSite) {
	      edge.b = vertex;
	    } else {
	      edge.a = vertex;
	    }
	  }
	  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
	    var va = edge.a, vb = edge.b;
	    this.edge = edge;
	    this.site = lSite;
	    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
	  }
	  d3_geom_voronoiHalfEdge.prototype = {
	    start: function() {
	      return this.edge.l === this.site ? this.edge.a : this.edge.b;
	    },
	    end: function() {
	      return this.edge.l === this.site ? this.edge.b : this.edge.a;
	    }
	  };
	  function d3_geom_voronoiRedBlackTree() {
	    this._ = null;
	  }
	  function d3_geom_voronoiRedBlackNode(node) {
	    node.U = node.C = node.L = node.R = node.P = node.N = null;
	  }
	  d3_geom_voronoiRedBlackTree.prototype = {
	    insert: function(after, node) {
	      var parent, grandpa, uncle;
	      if (after) {
	        node.P = after;
	        node.N = after.N;
	        if (after.N) after.N.P = node;
	        after.N = node;
	        if (after.R) {
	          after = after.R;
	          while (after.L) after = after.L;
	          after.L = node;
	        } else {
	          after.R = node;
	        }
	        parent = after;
	      } else if (this._) {
	        after = d3_geom_voronoiRedBlackFirst(this._);
	        node.P = null;
	        node.N = after;
	        after.P = after.L = node;
	        parent = after;
	      } else {
	        node.P = node.N = null;
	        this._ = node;
	        parent = null;
	      }
	      node.L = node.R = null;
	      node.U = parent;
	      node.C = true;
	      after = node;
	      while (parent && parent.C) {
	        grandpa = parent.U;
	        if (parent === grandpa.L) {
	          uncle = grandpa.R;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.R) {
	              d3_geom_voronoiRedBlackRotateLeft(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
	          }
	        } else {
	          uncle = grandpa.L;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.L) {
	              d3_geom_voronoiRedBlackRotateRight(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
	          }
	        }
	        parent = after.U;
	      }
	      this._.C = false;
	    },
	    remove: function(node) {
	      if (node.N) node.N.P = node.P;
	      if (node.P) node.P.N = node.N;
	      node.N = node.P = null;
	      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
	      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
	      if (parent) {
	        if (parent.L === node) parent.L = next; else parent.R = next;
	      } else {
	        this._ = next;
	      }
	      if (left && right) {
	        red = next.C;
	        next.C = node.C;
	        next.L = left;
	        left.U = next;
	        if (next !== right) {
	          parent = next.U;
	          next.U = node.U;
	          node = next.R;
	          parent.L = node;
	          next.R = right;
	          right.U = next;
	        } else {
	          next.U = parent;
	          parent = next;
	          node = next.R;
	        }
	      } else {
	        red = node.C;
	        node = next;
	      }
	      if (node) node.U = parent;
	      if (red) return;
	      if (node && node.C) {
	        node.C = false;
	        return;
	      }
	      do {
	        if (node === this._) break;
	        if (node === parent.L) {
	          sibling = parent.R;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            sibling = parent.R;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.R || !sibling.R.C) {
	              sibling.L.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateRight(this, sibling);
	              sibling = parent.R;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.R.C = false;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            node = this._;
	            break;
	          }
	        } else {
	          sibling = parent.L;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            sibling = parent.L;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.L || !sibling.L.C) {
	              sibling.R.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
	              sibling = parent.L;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.L.C = false;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            node = this._;
	            break;
	          }
	        }
	        sibling.C = true;
	        node = parent;
	        parent = parent.U;
	      } while (!node.C);
	      if (node) node.C = false;
	    }
	  };
	  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
	    var p = node, q = node.R, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.R = q.L;
	    if (p.R) p.R.U = p;
	    q.L = p;
	  }
	  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
	    var p = node, q = node.L, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.L = q.R;
	    if (p.L) p.L.U = p;
	    q.R = p;
	  }
	  function d3_geom_voronoiRedBlackFirst(node) {
	    while (node.L) node = node.L;
	    return node;
	  }
	  function d3_geom_voronoi(sites, bbox) {
	    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
	    d3_geom_voronoiEdges = [];
	    d3_geom_voronoiCells = new Array(sites.length);
	    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
	    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
	    while (true) {
	      circle = d3_geom_voronoiFirstCircle;
	      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
	        if (site.x !== x0 || site.y !== y0) {
	          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
	          d3_geom_voronoiAddBeach(site);
	          x0 = site.x, y0 = site.y;
	        }
	        site = sites.pop();
	      } else if (circle) {
	        d3_geom_voronoiRemoveBeach(circle.arc);
	      } else {
	        break;
	      }
	    }
	    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
	    var diagram = {
	      cells: d3_geom_voronoiCells,
	      edges: d3_geom_voronoiEdges
	    };
	    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
	    return diagram;
	  }
	  function d3_geom_voronoiVertexOrder(a, b) {
	    return b.y - a.y || b.x - a.x;
	  }
	  d3.geom.voronoi = function(points) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
	    if (points) return voronoi(points);
	    function voronoi(data) {
	      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
	      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
	        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
	          var s = e.start();
	          return [ s.x, s.y ];
	        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
	        polygon.point = data[i];
	      });
	      return polygons;
	    }
	    function sites(data) {
	      return data.map(function(d, i) {
	        return {
	          x: Math.round(fx(d, i) / ε) * ε,
	          y: Math.round(fy(d, i) / ε) * ε,
	          i: i
	        };
	      });
	    }
	    voronoi.links = function(data) {
	      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
	        return edge.l && edge.r;
	      }).map(function(edge) {
	        return {
	          source: data[edge.l.i],
	          target: data[edge.r.i]
	        };
	      });
	    };
	    voronoi.triangles = function(data) {
	      var triangles = [];
	      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
	        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
	        while (++j < m) {
	          e0 = e1;
	          s0 = s1;
	          e1 = edges[j].edge;
	          s1 = e1.l === site ? e1.r : e1.l;
	          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
	            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
	          }
	        }
	      });
	      return triangles;
	    };
	    voronoi.x = function(_) {
	      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
	    };
	    voronoi.y = function(_) {
	      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
	    };
	    voronoi.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
	      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
	      return voronoi;
	    };
	    voronoi.size = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
	      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
	    };
	    return voronoi;
	  };
	  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
	  function d3_geom_voronoiTriangleArea(a, b, c) {
	    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
	  }
	  d3.geom.delaunay = function(vertices) {
	    return d3.geom.voronoi().triangles(vertices);
	  };
	  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
	    if (compat = arguments.length) {
	      x = d3_geom_quadtreeCompatX;
	      y = d3_geom_quadtreeCompatY;
	      if (compat === 3) {
	        y2 = y1;
	        x2 = x1;
	        y1 = x1 = 0;
	      }
	      return quadtree(points);
	    }
	    function quadtree(data) {
	      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
	      if (x1 != null) {
	        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
	      } else {
	        x2_ = y2_ = -(x1_ = y1_ = Infinity);
	        xs = [], ys = [];
	        n = data.length;
	        if (compat) for (i = 0; i < n; ++i) {
	          d = data[i];
	          if (d.x < x1_) x1_ = d.x;
	          if (d.y < y1_) y1_ = d.y;
	          if (d.x > x2_) x2_ = d.x;
	          if (d.y > y2_) y2_ = d.y;
	          xs.push(d.x);
	          ys.push(d.y);
	        } else for (i = 0; i < n; ++i) {
	          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
	          if (x_ < x1_) x1_ = x_;
	          if (y_ < y1_) y1_ = y_;
	          if (x_ > x2_) x2_ = x_;
	          if (y_ > y2_) y2_ = y_;
	          xs.push(x_);
	          ys.push(y_);
	        }
	      }
	      var dx = x2_ - x1_, dy = y2_ - y1_;
	      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
	      function insert(n, d, x, y, x1, y1, x2, y2) {
	        if (isNaN(x) || isNaN(y)) return;
	        if (n.leaf) {
	          var nx = n.x, ny = n.y;
	          if (nx != null) {
	            if (abs(nx - x) + abs(ny - y) < .01) {
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            } else {
	              var nPoint = n.point;
	              n.x = n.y = n.point = null;
	              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            }
	          } else {
	            n.x = x, n.y = y, n.point = d;
	          }
	        } else {
	          insertChild(n, d, x, y, x1, y1, x2, y2);
	        }
	      }
	      function insertChild(n, d, x, y, x1, y1, x2, y2) {
	        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
	        n.leaf = false;
	        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
	        if (right) x1 = xm; else x2 = xm;
	        if (below) y1 = ym; else y2 = ym;
	        insert(n, d, x, y, x1, y1, x2, y2);
	      }
	      var root = d3_geom_quadtreeNode();
	      root.add = function(d) {
	        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
	      };
	      root.visit = function(f) {
	        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
	      };
	      root.find = function(point) {
	        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
	      };
	      i = -1;
	      if (x1 == null) {
	        while (++i < n) {
	          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
	        }
	        --i;
	      } else data.forEach(root.add);
	      xs = ys = data = d = null;
	      return root;
	    }
	    quadtree.x = function(_) {
	      return arguments.length ? (x = _, quadtree) : x;
	    };
	    quadtree.y = function(_) {
	      return arguments.length ? (y = _, quadtree) : y;
	    };
	    quadtree.extent = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
	      y2 = +_[1][1];
	      return quadtree;
	    };
	    quadtree.size = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
	      return quadtree;
	    };
	    return quadtree;
	  };
	  function d3_geom_quadtreeCompatX(d) {
	    return d.x;
	  }
	  function d3_geom_quadtreeCompatY(d) {
	    return d.y;
	  }
	  function d3_geom_quadtreeNode() {
	    return {
	      leaf: true,
	      nodes: [],
	      point: null,
	      x: null,
	      y: null
	    };
	  }
	  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
	    if (!f(node, x1, y1, x2, y2)) {
	      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
	      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
	      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
	      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
	      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
	    }
	  }
	  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
	    var minDistance2 = Infinity, closestPoint;
	    (function find(node, x1, y1, x2, y2) {
	      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
	      if (point = node.point) {
	        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
	        if (distance2 < minDistance2) {
	          var distance = Math.sqrt(minDistance2 = distance2);
	          x0 = x - distance, y0 = y - distance;
	          x3 = x + distance, y3 = y + distance;
	          closestPoint = point;
	        }
	      }
	      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
	      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
	        if (node = children[i & 3]) switch (i & 3) {
	         case 0:
	          find(node, x1, y1, xm, ym);
	          break;

	         case 1:
	          find(node, xm, y1, x2, ym);
	          break;

	         case 2:
	          find(node, x1, ym, xm, y2);
	          break;

	         case 3:
	          find(node, xm, ym, x2, y2);
	          break;
	        }
	      }
	    })(root, x0, y0, x3, y3);
	    return closestPoint;
	  }
	  d3.interpolateRgb = d3_interpolateRgb;
	  function d3_interpolateRgb(a, b) {
	    a = d3.rgb(a);
	    b = d3.rgb(b);
	    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
	    return function(t) {
	      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
	    };
	  }
	  d3.interpolateObject = d3_interpolateObject;
	  function d3_interpolateObject(a, b) {
	    var i = {}, c = {}, k;
	    for (k in a) {
	      if (k in b) {
	        i[k] = d3_interpolate(a[k], b[k]);
	      } else {
	        c[k] = a[k];
	      }
	    }
	    for (k in b) {
	      if (!(k in a)) {
	        c[k] = b[k];
	      }
	    }
	    return function(t) {
	      for (k in i) c[k] = i[k](t);
	      return c;
	    };
	  }
	  d3.interpolateNumber = d3_interpolateNumber;
	  function d3_interpolateNumber(a, b) {
	    a = +a, b = +b;
	    return function(t) {
	      return a * (1 - t) + b * t;
	    };
	  }
	  d3.interpolateString = d3_interpolateString;
	  function d3_interpolateString(a, b) {
	    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
	    a = a + "", b = b + "";
	    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
	      if ((bs = bm.index) > bi) {
	        bs = b.slice(bi, bs);
	        if (s[i]) s[i] += bs; else s[++i] = bs;
	      }
	      if ((am = am[0]) === (bm = bm[0])) {
	        if (s[i]) s[i] += bm; else s[++i] = bm;
	      } else {
	        s[++i] = null;
	        q.push({
	          i: i,
	          x: d3_interpolateNumber(am, bm)
	        });
	      }
	      bi = d3_interpolate_numberB.lastIndex;
	    }
	    if (bi < b.length) {
	      bs = b.slice(bi);
	      if (s[i]) s[i] += bs; else s[++i] = bs;
	    }
	    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
	      return b(t) + "";
	    }) : function() {
	      return b;
	    } : (b = q.length, function(t) {
	      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    });
	  }
	  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
	  d3.interpolate = d3_interpolate;
	  function d3_interpolate(a, b) {
	    var i = d3.interpolators.length, f;
	    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
	    return f;
	  }
	  d3.interpolators = [ function(a, b) {
	    var t = typeof b;
	    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
	  } ];
	  d3.interpolateArray = d3_interpolateArray;
	  function d3_interpolateArray(a, b) {
	    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
	    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
	    for (;i < na; ++i) c[i] = a[i];
	    for (;i < nb; ++i) c[i] = b[i];
	    return function(t) {
	      for (i = 0; i < n0; ++i) c[i] = x[i](t);
	      return c;
	    };
	  }
	  var d3_ease_default = function() {
	    return d3_identity;
	  };
	  var d3_ease = d3.map({
	    linear: d3_ease_default,
	    poly: d3_ease_poly,
	    quad: function() {
	      return d3_ease_quad;
	    },
	    cubic: function() {
	      return d3_ease_cubic;
	    },
	    sin: function() {
	      return d3_ease_sin;
	    },
	    exp: function() {
	      return d3_ease_exp;
	    },
	    circle: function() {
	      return d3_ease_circle;
	    },
	    elastic: d3_ease_elastic,
	    back: d3_ease_back,
	    bounce: function() {
	      return d3_ease_bounce;
	    }
	  });
	  var d3_ease_mode = d3.map({
	    "in": d3_identity,
	    out: d3_ease_reverse,
	    "in-out": d3_ease_reflect,
	    "out-in": function(f) {
	      return d3_ease_reflect(d3_ease_reverse(f));
	    }
	  });
	  d3.ease = function(name) {
	    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
	    t = d3_ease.get(t) || d3_ease_default;
	    m = d3_ease_mode.get(m) || d3_identity;
	    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
	  };
	  function d3_ease_clamp(f) {
	    return function(t) {
	      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
	    };
	  }
	  function d3_ease_reverse(f) {
	    return function(t) {
	      return 1 - f(1 - t);
	    };
	  }
	  function d3_ease_reflect(f) {
	    return function(t) {
	      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
	    };
	  }
	  function d3_ease_quad(t) {
	    return t * t;
	  }
	  function d3_ease_cubic(t) {
	    return t * t * t;
	  }
	  function d3_ease_cubicInOut(t) {
	    if (t <= 0) return 0;
	    if (t >= 1) return 1;
	    var t2 = t * t, t3 = t2 * t;
	    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
	  }
	  function d3_ease_poly(e) {
	    return function(t) {
	      return Math.pow(t, e);
	    };
	  }
	  function d3_ease_sin(t) {
	    return 1 - Math.cos(t * halfπ);
	  }
	  function d3_ease_exp(t) {
	    return Math.pow(2, 10 * (t - 1));
	  }
	  function d3_ease_circle(t) {
	    return 1 - Math.sqrt(1 - t * t);
	  }
	  function d3_ease_elastic(a, p) {
	    var s;
	    if (arguments.length < 2) p = .45;
	    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
	    return function(t) {
	      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
	    };
	  }
	  function d3_ease_back(s) {
	    if (!s) s = 1.70158;
	    return function(t) {
	      return t * t * ((s + 1) * t - s);
	    };
	  }
	  function d3_ease_bounce(t) {
	    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
	  }
	  d3.interpolateHcl = d3_interpolateHcl;
	  function d3_interpolateHcl(a, b) {
	    a = d3.hcl(a);
	    b = d3.hcl(b);
	    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
	    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateHsl = d3_interpolateHsl;
	  function d3_interpolateHsl(a, b) {
	    a = d3.hsl(a);
	    b = d3.hsl(b);
	    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
	    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateLab = d3_interpolateLab;
	  function d3_interpolateLab(a, b) {
	    a = d3.lab(a);
	    b = d3.lab(b);
	    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
	    return function(t) {
	      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
	    };
	  }
	  d3.interpolateRound = d3_interpolateRound;
	  function d3_interpolateRound(a, b) {
	    b -= a;
	    return function(t) {
	      return Math.round(a + b * t);
	    };
	  }
	  d3.transform = function(string) {
	    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
	    return (d3.transform = function(string) {
	      if (string != null) {
	        g.setAttribute("transform", string);
	        var t = g.transform.baseVal.consolidate();
	      }
	      return new d3_transform(t ? t.matrix : d3_transformIdentity);
	    })(string);
	  };
	  function d3_transform(m) {
	    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
	    if (r0[0] * r1[1] < r1[0] * r0[1]) {
	      r0[0] *= -1;
	      r0[1] *= -1;
	      kx *= -1;
	      kz *= -1;
	    }
	    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
	    this.translate = [ m.e, m.f ];
	    this.scale = [ kx, ky ];
	    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
	  }
	  d3_transform.prototype.toString = function() {
	    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
	  };
	  function d3_transformDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1];
	  }
	  function d3_transformNormalize(a) {
	    var k = Math.sqrt(d3_transformDot(a, a));
	    if (k) {
	      a[0] /= k;
	      a[1] /= k;
	    }
	    return k;
	  }
	  function d3_transformCombine(a, b, k) {
	    a[0] += k * b[0];
	    a[1] += k * b[1];
	    return a;
	  }
	  var d3_transformIdentity = {
	    a: 1,
	    b: 0,
	    c: 0,
	    d: 1,
	    e: 0,
	    f: 0
	  };
	  d3.interpolateTransform = d3_interpolateTransform;
	  function d3_interpolateTransformPop(s) {
	    return s.length ? s.pop() + "," : "";
	  }
	  function d3_interpolateTranslate(ta, tb, s, q) {
	    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
	      var i = s.push("translate(", null, ",", null, ")");
	      q.push({
	        i: i - 4,
	        x: d3_interpolateNumber(ta[0], tb[0])
	      }, {
	        i: i - 2,
	        x: d3_interpolateNumber(ta[1], tb[1])
	      });
	    } else if (tb[0] || tb[1]) {
	      s.push("translate(" + tb + ")");
	    }
	  }
	  function d3_interpolateRotate(ra, rb, s, q) {
	    if (ra !== rb) {
	      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
	      q.push({
	        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
	        x: d3_interpolateNumber(ra, rb)
	      });
	    } else if (rb) {
	      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
	    }
	  }
	  function d3_interpolateSkew(wa, wb, s, q) {
	    if (wa !== wb) {
	      q.push({
	        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
	        x: d3_interpolateNumber(wa, wb)
	      });
	    } else if (wb) {
	      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
	    }
	  }
	  function d3_interpolateScale(ka, kb, s, q) {
	    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
	      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
	      q.push({
	        i: i - 4,
	        x: d3_interpolateNumber(ka[0], kb[0])
	      }, {
	        i: i - 2,
	        x: d3_interpolateNumber(ka[1], kb[1])
	      });
	    } else if (kb[0] !== 1 || kb[1] !== 1) {
	      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
	    }
	  }
	  function d3_interpolateTransform(a, b) {
	    var s = [], q = [];
	    a = d3.transform(a), b = d3.transform(b);
	    d3_interpolateTranslate(a.translate, b.translate, s, q);
	    d3_interpolateRotate(a.rotate, b.rotate, s, q);
	    d3_interpolateSkew(a.skew, b.skew, s, q);
	    d3_interpolateScale(a.scale, b.scale, s, q);
	    a = b = null;
	    return function(t) {
	      var i = -1, n = q.length, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  }
	  function d3_uninterpolateNumber(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return (x - a) / b;
	    };
	  }
	  function d3_uninterpolateClamp(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return Math.max(0, Math.min(1, (x - a) / b));
	    };
	  }
	  d3.layout = {};
	  d3.layout.bundle = function() {
	    return function(links) {
	      var paths = [], i = -1, n = links.length;
	      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
	      return paths;
	    };
	  };
	  function d3_layout_bundlePath(link) {
	    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
	    while (start !== lca) {
	      start = start.parent;
	      points.push(start);
	    }
	    var k = points.length;
	    while (end !== lca) {
	      points.splice(k, 0, end);
	      end = end.parent;
	    }
	    return points;
	  }
	  function d3_layout_bundleAncestors(node) {
	    var ancestors = [], parent = node.parent;
	    while (parent != null) {
	      ancestors.push(node);
	      node = parent;
	      parent = parent.parent;
	    }
	    ancestors.push(node);
	    return ancestors;
	  }
	  function d3_layout_bundleLeastCommonAncestor(a, b) {
	    if (a === b) return a;
	    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
	    while (aNode === bNode) {
	      sharedNode = aNode;
	      aNode = aNodes.pop();
	      bNode = bNodes.pop();
	    }
	    return sharedNode;
	  }
	  d3.layout.chord = function() {
	    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
	    function relayout() {
	      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
	      chords = [];
	      groups = [];
	      k = 0, i = -1;
	      while (++i < n) {
	        x = 0, j = -1;
	        while (++j < n) {
	          x += matrix[i][j];
	        }
	        groupSums.push(x);
	        subgroupIndex.push(d3.range(n));
	        k += x;
	      }
	      if (sortGroups) {
	        groupIndex.sort(function(a, b) {
	          return sortGroups(groupSums[a], groupSums[b]);
	        });
	      }
	      if (sortSubgroups) {
	        subgroupIndex.forEach(function(d, i) {
	          d.sort(function(a, b) {
	            return sortSubgroups(matrix[i][a], matrix[i][b]);
	          });
	        });
	      }
	      k = (τ - padding * n) / k;
	      x = 0, i = -1;
	      while (++i < n) {
	        x0 = x, j = -1;
	        while (++j < n) {
	          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
	          subgroups[di + "-" + dj] = {
	            index: di,
	            subindex: dj,
	            startAngle: a0,
	            endAngle: a1,
	            value: v
	          };
	        }
	        groups[di] = {
	          index: di,
	          startAngle: x0,
	          endAngle: x,
	          value: groupSums[di]
	        };
	        x += padding;
	      }
	      i = -1;
	      while (++i < n) {
	        j = i - 1;
	        while (++j < n) {
	          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
	          if (source.value || target.value) {
	            chords.push(source.value < target.value ? {
	              source: target,
	              target: source
	            } : {
	              source: source,
	              target: target
	            });
	          }
	        }
	      }
	      if (sortChords) resort();
	    }
	    function resort() {
	      chords.sort(function(a, b) {
	        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
	      });
	    }
	    chord.matrix = function(x) {
	      if (!arguments.length) return matrix;
	      n = (matrix = x) && matrix.length;
	      chords = groups = null;
	      return chord;
	    };
	    chord.padding = function(x) {
	      if (!arguments.length) return padding;
	      padding = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortGroups = function(x) {
	      if (!arguments.length) return sortGroups;
	      sortGroups = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortSubgroups = function(x) {
	      if (!arguments.length) return sortSubgroups;
	      sortSubgroups = x;
	      chords = null;
	      return chord;
	    };
	    chord.sortChords = function(x) {
	      if (!arguments.length) return sortChords;
	      sortChords = x;
	      if (chords) resort();
	      return chord;
	    };
	    chord.chords = function() {
	      if (!chords) relayout();
	      return chords;
	    };
	    chord.groups = function() {
	      if (!groups) relayout();
	      return groups;
	    };
	    return chord;
	  };
	  d3.layout.force = function() {
	    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
	    function repulse(node) {
	      return function(quad, x1, _, x2) {
	        if (quad.point !== node) {
	          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
	          if (dw * dw / theta2 < dn) {
	            if (dn < chargeDistance2) {
	              var k = quad.charge / dn;
	              node.px -= dx * k;
	              node.py -= dy * k;
	            }
	            return true;
	          }
	          if (quad.point && dn && dn < chargeDistance2) {
	            var k = quad.pointCharge / dn;
	            node.px -= dx * k;
	            node.py -= dy * k;
	          }
	        }
	        return !quad.charge;
	      };
	    }
	    force.tick = function() {
	      if ((alpha *= .99) < .005) {
	        timer = null;
	        event.end({
	          type: "end",
	          alpha: alpha = 0
	        });
	        return true;
	      }
	      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        s = o.source;
	        t = o.target;
	        x = t.x - s.x;
	        y = t.y - s.y;
	        if (l = x * x + y * y) {
	          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
	          x *= l;
	          y *= l;
	          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
	          t.y -= y * k;
	          s.x += x * (k = 1 - k);
	          s.y += y * k;
	        }
	      }
	      if (k = alpha * gravity) {
	        x = size[0] / 2;
	        y = size[1] / 2;
	        i = -1;
	        if (k) while (++i < n) {
	          o = nodes[i];
	          o.x += (x - o.x) * k;
	          o.y += (y - o.y) * k;
	        }
	      }
	      if (charge) {
	        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
	        i = -1;
	        while (++i < n) {
	          if (!(o = nodes[i]).fixed) {
	            q.visit(repulse(o));
	          }
	        }
	      }
	      i = -1;
	      while (++i < n) {
	        o = nodes[i];
	        if (o.fixed) {
	          o.x = o.px;
	          o.y = o.py;
	        } else {
	          o.x -= (o.px - (o.px = o.x)) * friction;
	          o.y -= (o.py - (o.py = o.y)) * friction;
	        }
	      }
	      event.tick({
	        type: "tick",
	        alpha: alpha
	      });
	    };
	    force.nodes = function(x) {
	      if (!arguments.length) return nodes;
	      nodes = x;
	      return force;
	    };
	    force.links = function(x) {
	      if (!arguments.length) return links;
	      links = x;
	      return force;
	    };
	    force.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return force;
	    };
	    force.linkDistance = function(x) {
	      if (!arguments.length) return linkDistance;
	      linkDistance = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.distance = force.linkDistance;
	    force.linkStrength = function(x) {
	      if (!arguments.length) return linkStrength;
	      linkStrength = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.friction = function(x) {
	      if (!arguments.length) return friction;
	      friction = +x;
	      return force;
	    };
	    force.charge = function(x) {
	      if (!arguments.length) return charge;
	      charge = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.chargeDistance = function(x) {
	      if (!arguments.length) return Math.sqrt(chargeDistance2);
	      chargeDistance2 = x * x;
	      return force;
	    };
	    force.gravity = function(x) {
	      if (!arguments.length) return gravity;
	      gravity = +x;
	      return force;
	    };
	    force.theta = function(x) {
	      if (!arguments.length) return Math.sqrt(theta2);
	      theta2 = x * x;
	      return force;
	    };
	    force.alpha = function(x) {
	      if (!arguments.length) return alpha;
	      x = +x;
	      if (alpha) {
	        if (x > 0) {
	          alpha = x;
	        } else {
	          timer.c = null, timer.t = NaN, timer = null;
	          event.end({
	            type: "end",
	            alpha: alpha = 0
	          });
	        }
	      } else if (x > 0) {
	        event.start({
	          type: "start",
	          alpha: alpha = x
	        });
	        timer = d3_timer(force.tick);
	      }
	      return force;
	    };
	    force.start = function() {
	      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
	      for (i = 0; i < n; ++i) {
	        (o = nodes[i]).index = i;
	        o.weight = 0;
	      }
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        if (typeof o.source == "number") o.source = nodes[o.source];
	        if (typeof o.target == "number") o.target = nodes[o.target];
	        ++o.source.weight;
	        ++o.target.weight;
	      }
	      for (i = 0; i < n; ++i) {
	        o = nodes[i];
	        if (isNaN(o.x)) o.x = position("x", w);
	        if (isNaN(o.y)) o.y = position("y", h);
	        if (isNaN(o.px)) o.px = o.x;
	        if (isNaN(o.py)) o.py = o.y;
	      }
	      distances = [];
	      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
	      strengths = [];
	      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
	      charges = [];
	      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
	      function position(dimension, size) {
	        if (!neighbors) {
	          neighbors = new Array(n);
	          for (j = 0; j < n; ++j) {
	            neighbors[j] = [];
	          }
	          for (j = 0; j < m; ++j) {
	            var o = links[j];
	            neighbors[o.source.index].push(o.target);
	            neighbors[o.target.index].push(o.source);
	          }
	        }
	        var candidates = neighbors[i], j = -1, l = candidates.length, x;
	        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
	        return Math.random() * size;
	      }
	      return force.resume();
	    };
	    force.resume = function() {
	      return force.alpha(.1);
	    };
	    force.stop = function() {
	      return force.alpha(0);
	    };
	    force.drag = function() {
	      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
	      if (!arguments.length) return drag;
	      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
	    };
	    function dragmove(d) {
	      d.px = d3.event.x, d.py = d3.event.y;
	      force.resume();
	    }
	    return d3.rebind(force, event, "on");
	  };
	  function d3_layout_forceDragstart(d) {
	    d.fixed |= 2;
	  }
	  function d3_layout_forceDragend(d) {
	    d.fixed &= ~6;
	  }
	  function d3_layout_forceMouseover(d) {
	    d.fixed |= 4;
	    d.px = d.x, d.py = d.y;
	  }
	  function d3_layout_forceMouseout(d) {
	    d.fixed &= ~4;
	  }
	  function d3_layout_forceAccumulate(quad, alpha, charges) {
	    var cx = 0, cy = 0;
	    quad.charge = 0;
	    if (!quad.leaf) {
	      var nodes = quad.nodes, n = nodes.length, i = -1, c;
	      while (++i < n) {
	        c = nodes[i];
	        if (c == null) continue;
	        d3_layout_forceAccumulate(c, alpha, charges);
	        quad.charge += c.charge;
	        cx += c.charge * c.cx;
	        cy += c.charge * c.cy;
	      }
	    }
	    if (quad.point) {
	      if (!quad.leaf) {
	        quad.point.x += Math.random() - .5;
	        quad.point.y += Math.random() - .5;
	      }
	      var k = alpha * charges[quad.point.index];
	      quad.charge += quad.pointCharge = k;
	      cx += k * quad.point.x;
	      cy += k * quad.point.y;
	    }
	    quad.cx = cx / quad.charge;
	    quad.cy = cy / quad.charge;
	  }
	  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
	  d3.layout.hierarchy = function() {
	    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
	    function hierarchy(root) {
	      var stack = [ root ], nodes = [], node;
	      root.depth = 0;
	      while ((node = stack.pop()) != null) {
	        nodes.push(node);
	        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
	          var n, childs, child;
	          while (--n >= 0) {
	            stack.push(child = childs[n]);
	            child.parent = node;
	            child.depth = node.depth + 1;
	          }
	          if (value) node.value = 0;
	          node.children = childs;
	        } else {
	          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          delete node.children;
	        }
	      }
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var childs, parent;
	        if (sort && (childs = node.children)) childs.sort(sort);
	        if (value && (parent = node.parent)) parent.value += node.value;
	      });
	      return nodes;
	    }
	    hierarchy.sort = function(x) {
	      if (!arguments.length) return sort;
	      sort = x;
	      return hierarchy;
	    };
	    hierarchy.children = function(x) {
	      if (!arguments.length) return children;
	      children = x;
	      return hierarchy;
	    };
	    hierarchy.value = function(x) {
	      if (!arguments.length) return value;
	      value = x;
	      return hierarchy;
	    };
	    hierarchy.revalue = function(root) {
	      if (value) {
	        d3_layout_hierarchyVisitBefore(root, function(node) {
	          if (node.children) node.value = 0;
	        });
	        d3_layout_hierarchyVisitAfter(root, function(node) {
	          var parent;
	          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          if (parent = node.parent) parent.value += node.value;
	        });
	      }
	      return root;
	    };
	    return hierarchy;
	  };
	  function d3_layout_hierarchyRebind(object, hierarchy) {
	    d3.rebind(object, hierarchy, "sort", "children", "value");
	    object.nodes = object;
	    object.links = d3_layout_hierarchyLinks;
	    return object;
	  }
	  function d3_layout_hierarchyVisitBefore(node, callback) {
	    var nodes = [ node ];
	    while ((node = nodes.pop()) != null) {
	      callback(node);
	      if ((children = node.children) && (n = children.length)) {
	        var n, children;
	        while (--n >= 0) nodes.push(children[n]);
	      }
	    }
	  }
	  function d3_layout_hierarchyVisitAfter(node, callback) {
	    var nodes = [ node ], nodes2 = [];
	    while ((node = nodes.pop()) != null) {
	      nodes2.push(node);
	      if ((children = node.children) && (n = children.length)) {
	        var i = -1, n, children;
	        while (++i < n) nodes.push(children[i]);
	      }
	    }
	    while ((node = nodes2.pop()) != null) {
	      callback(node);
	    }
	  }
	  function d3_layout_hierarchyChildren(d) {
	    return d.children;
	  }
	  function d3_layout_hierarchyValue(d) {
	    return d.value;
	  }
	  function d3_layout_hierarchySort(a, b) {
	    return b.value - a.value;
	  }
	  function d3_layout_hierarchyLinks(nodes) {
	    return d3.merge(nodes.map(function(parent) {
	      return (parent.children || []).map(function(child) {
	        return {
	          source: parent,
	          target: child
	        };
	      });
	    }));
	  }
	  d3.layout.partition = function() {
	    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
	    function position(node, x, dx, dy) {
	      var children = node.children;
	      node.x = x;
	      node.y = node.depth * dy;
	      node.dx = dx;
	      node.dy = dy;
	      if (children && (n = children.length)) {
	        var i = -1, n, c, d;
	        dx = node.value ? dx / node.value : 0;
	        while (++i < n) {
	          position(c = children[i], x, d = c.value * dx, dy);
	          x += d;
	        }
	      }
	    }
	    function depth(node) {
	      var children = node.children, d = 0;
	      if (children && (n = children.length)) {
	        var i = -1, n;
	        while (++i < n) d = Math.max(d, depth(children[i]));
	      }
	      return 1 + d;
	    }
	    function partition(d, i) {
	      var nodes = hierarchy.call(this, d, i);
	      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
	      return nodes;
	    }
	    partition.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return partition;
	    };
	    return d3_layout_hierarchyRebind(partition, hierarchy);
	  };
	  d3.layout.pie = function() {
	    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
	    function pie(data) {
	      var n = data.length, values = data.map(function(d, i) {
	        return +value.call(pie, d, i);
	      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
	      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
	        return values[j] - values[i];
	      } : function(i, j) {
	        return sort(data[i], data[j]);
	      });
	      index.forEach(function(i) {
	        arcs[i] = {
	          data: data[i],
	          value: v = values[i],
	          startAngle: a,
	          endAngle: a += v * k + pa,
	          padAngle: p
	        };
	      });
	      return arcs;
	    }
	    pie.value = function(_) {
	      if (!arguments.length) return value;
	      value = _;
	      return pie;
	    };
	    pie.sort = function(_) {
	      if (!arguments.length) return sort;
	      sort = _;
	      return pie;
	    };
	    pie.startAngle = function(_) {
	      if (!arguments.length) return startAngle;
	      startAngle = _;
	      return pie;
	    };
	    pie.endAngle = function(_) {
	      if (!arguments.length) return endAngle;
	      endAngle = _;
	      return pie;
	    };
	    pie.padAngle = function(_) {
	      if (!arguments.length) return padAngle;
	      padAngle = _;
	      return pie;
	    };
	    return pie;
	  };
	  var d3_layout_pieSortByValue = {};
	  d3.layout.stack = function() {
	    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
	    function stack(data, index) {
	      if (!(n = data.length)) return data;
	      var series = data.map(function(d, i) {
	        return values.call(stack, d, i);
	      });
	      var points = series.map(function(d) {
	        return d.map(function(v, i) {
	          return [ x.call(stack, v, i), y.call(stack, v, i) ];
	        });
	      });
	      var orders = order.call(stack, points, index);
	      series = d3.permute(series, orders);
	      points = d3.permute(points, orders);
	      var offsets = offset.call(stack, points, index);
	      var m = series[0].length, n, i, j, o;
	      for (j = 0; j < m; ++j) {
	        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
	        for (i = 1; i < n; ++i) {
	          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
	        }
	      }
	      return data;
	    }
	    stack.values = function(x) {
	      if (!arguments.length) return values;
	      values = x;
	      return stack;
	    };
	    stack.order = function(x) {
	      if (!arguments.length) return order;
	      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
	      return stack;
	    };
	    stack.offset = function(x) {
	      if (!arguments.length) return offset;
	      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
	      return stack;
	    };
	    stack.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      return stack;
	    };
	    stack.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      return stack;
	    };
	    stack.out = function(z) {
	      if (!arguments.length) return out;
	      out = z;
	      return stack;
	    };
	    return stack;
	  };
	  function d3_layout_stackX(d) {
	    return d.x;
	  }
	  function d3_layout_stackY(d) {
	    return d.y;
	  }
	  function d3_layout_stackOut(d, y0, y) {
	    d.y0 = y0;
	    d.y = y;
	  }
	  var d3_layout_stackOrders = d3.map({
	    "inside-out": function(data) {
	      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
	        return max[a] - max[b];
	      }), top = 0, bottom = 0, tops = [], bottoms = [];
	      for (i = 0; i < n; ++i) {
	        j = index[i];
	        if (top < bottom) {
	          top += sums[j];
	          tops.push(j);
	        } else {
	          bottom += sums[j];
	          bottoms.push(j);
	        }
	      }
	      return bottoms.reverse().concat(tops);
	    },
	    reverse: function(data) {
	      return d3.range(data.length).reverse();
	    },
	    "default": d3_layout_stackOrderDefault
	  });
	  var d3_layout_stackOffsets = d3.map({
	    silhouette: function(data) {
	      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o > max) max = o;
	        sums.push(o);
	      }
	      for (j = 0; j < m; ++j) {
	        y0[j] = (max - sums[j]) / 2;
	      }
	      return y0;
	    },
	    wiggle: function(data) {
	      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
	      y0[0] = o = o0 = 0;
	      for (j = 1; j < m; ++j) {
	        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
	        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
	          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
	            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
	          }
	          s2 += s3 * data[i][j][1];
	        }
	        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
	        if (o < o0) o0 = o;
	      }
	      for (j = 0; j < m; ++j) y0[j] -= o0;
	      return y0;
	    },
	    expand: function(data) {
	      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
	      }
	      for (j = 0; j < m; ++j) y0[j] = 0;
	      return y0;
	    },
	    zero: d3_layout_stackOffsetZero
	  });
	  function d3_layout_stackOrderDefault(data) {
	    return d3.range(data.length);
	  }
	  function d3_layout_stackOffsetZero(data) {
	    var j = -1, m = data[0].length, y0 = [];
	    while (++j < m) y0[j] = 0;
	    return y0;
	  }
	  function d3_layout_stackMaxIndex(array) {
	    var i = 1, j = 0, v = array[0][1], k, n = array.length;
	    for (;i < n; ++i) {
	      if ((k = array[i][1]) > v) {
	        j = i;
	        v = k;
	      }
	    }
	    return j;
	  }
	  function d3_layout_stackReduceSum(d) {
	    return d.reduce(d3_layout_stackSum, 0);
	  }
	  function d3_layout_stackSum(p, d) {
	    return p + d[1];
	  }
	  d3.layout.histogram = function() {
	    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
	    function histogram(data, i) {
	      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
	      while (++i < m) {
	        bin = bins[i] = [];
	        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
	        bin.y = 0;
	      }
	      if (m > 0) {
	        i = -1;
	        while (++i < n) {
	          x = values[i];
	          if (x >= range[0] && x <= range[1]) {
	            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
	            bin.y += k;
	            bin.push(data[i]);
	          }
	        }
	      }
	      return bins;
	    }
	    histogram.value = function(x) {
	      if (!arguments.length) return valuer;
	      valuer = x;
	      return histogram;
	    };
	    histogram.range = function(x) {
	      if (!arguments.length) return ranger;
	      ranger = d3_functor(x);
	      return histogram;
	    };
	    histogram.bins = function(x) {
	      if (!arguments.length) return binner;
	      binner = typeof x === "number" ? function(range) {
	        return d3_layout_histogramBinFixed(range, x);
	      } : d3_functor(x);
	      return histogram;
	    };
	    histogram.frequency = function(x) {
	      if (!arguments.length) return frequency;
	      frequency = !!x;
	      return histogram;
	    };
	    return histogram;
	  };
	  function d3_layout_histogramBinSturges(range, values) {
	    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
	  }
	  function d3_layout_histogramBinFixed(range, n) {
	    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
	    while (++x <= n) f[x] = m * x + b;
	    return f;
	  }
	  function d3_layout_histogramRange(values) {
	    return [ d3.min(values), d3.max(values) ];
	  }
	  d3.layout.pack = function() {
	    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
	    function pack(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
	        return radius;
	      };
	      root.x = root.y = 0;
	      d3_layout_hierarchyVisitAfter(root, function(d) {
	        d.r = +r(d.value);
	      });
	      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	      if (padding) {
	        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r += dr;
	        });
	        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r -= dr;
	        });
	      }
	      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
	      return nodes;
	    }
	    pack.size = function(_) {
	      if (!arguments.length) return size;
	      size = _;
	      return pack;
	    };
	    pack.radius = function(_) {
	      if (!arguments.length) return radius;
	      radius = _ == null || typeof _ === "function" ? _ : +_;
	      return pack;
	    };
	    pack.padding = function(_) {
	      if (!arguments.length) return padding;
	      padding = +_;
	      return pack;
	    };
	    return d3_layout_hierarchyRebind(pack, hierarchy);
	  };
	  function d3_layout_packSort(a, b) {
	    return a.value - b.value;
	  }
	  function d3_layout_packInsert(a, b) {
	    var c = a._pack_next;
	    a._pack_next = b;
	    b._pack_prev = a;
	    b._pack_next = c;
	    c._pack_prev = b;
	  }
	  function d3_layout_packSplice(a, b) {
	    a._pack_next = b;
	    b._pack_prev = a;
	  }
	  function d3_layout_packIntersects(a, b) {
	    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
	    return .999 * dr * dr > dx * dx + dy * dy;
	  }
	  function d3_layout_packSiblings(node) {
	    if (!(nodes = node.children) || !(n = nodes.length)) return;
	    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
	    function bound(node) {
	      xMin = Math.min(node.x - node.r, xMin);
	      xMax = Math.max(node.x + node.r, xMax);
	      yMin = Math.min(node.y - node.r, yMin);
	      yMax = Math.max(node.y + node.r, yMax);
	    }
	    nodes.forEach(d3_layout_packLink);
	    a = nodes[0];
	    a.x = -a.r;
	    a.y = 0;
	    bound(a);
	    if (n > 1) {
	      b = nodes[1];
	      b.x = b.r;
	      b.y = 0;
	      bound(b);
	      if (n > 2) {
	        c = nodes[2];
	        d3_layout_packPlace(a, b, c);
	        bound(c);
	        d3_layout_packInsert(a, c);
	        a._pack_prev = c;
	        d3_layout_packInsert(c, b);
	        b = a._pack_next;
	        for (i = 3; i < n; i++) {
	          d3_layout_packPlace(a, b, c = nodes[i]);
	          var isect = 0, s1 = 1, s2 = 1;
	          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
	            if (d3_layout_packIntersects(j, c)) {
	              isect = 1;
	              break;
	            }
	          }
	          if (isect == 1) {
	            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
	              if (d3_layout_packIntersects(k, c)) {
	                break;
	              }
	            }
	          }
	          if (isect) {
	            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
	            i--;
	          } else {
	            d3_layout_packInsert(a, c);
	            b = c;
	            bound(c);
	          }
	        }
	      }
	    }
	    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
	    for (i = 0; i < n; i++) {
	      c = nodes[i];
	      c.x -= cx;
	      c.y -= cy;
	      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
	    }
	    node.r = cr;
	    nodes.forEach(d3_layout_packUnlink);
	  }
	  function d3_layout_packLink(node) {
	    node._pack_next = node._pack_prev = node;
	  }
	  function d3_layout_packUnlink(node) {
	    delete node._pack_next;
	    delete node._pack_prev;
	  }
	  function d3_layout_packTransform(node, x, y, k) {
	    var children = node.children;
	    node.x = x += k * node.x;
	    node.y = y += k * node.y;
	    node.r *= k;
	    if (children) {
	      var i = -1, n = children.length;
	      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
	    }
	  }
	  function d3_layout_packPlace(a, b, c) {
	    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
	    if (db && (dx || dy)) {
	      var da = b.r + c.r, dc = dx * dx + dy * dy;
	      da *= da;
	      db *= db;
	      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
	      c.x = a.x + x * dx + y * dy;
	      c.y = a.y + x * dy - y * dx;
	    } else {
	      c.x = a.x + db;
	      c.y = a.y;
	    }
	  }
	  d3.layout.tree = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
	    function tree(d, i) {
	      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
	      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
	      d3_layout_hierarchyVisitBefore(root1, secondWalk);
	      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
	        var left = root0, right = root0, bottom = root0;
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          if (node.x < left.x) left = node;
	          if (node.x > right.x) right = node;
	          if (node.depth > bottom.depth) bottom = node;
	        });
	        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          node.x = (node.x + tx) * kx;
	          node.y = node.depth * ky;
	        });
	      }
	      return nodes;
	    }
	    function wrapTree(root0) {
	      var root1 = {
	        A: null,
	        children: [ root0 ]
	      }, queue = [ root1 ], node1;
	      while ((node1 = queue.pop()) != null) {
	        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
	          queue.push((children[i] = child = {
	            _: children[i],
	            parent: node1,
	            children: (child = children[i].children) && child.slice() || [],
	            A: null,
	            a: null,
	            z: 0,
	            m: 0,
	            c: 0,
	            s: 0,
	            t: null,
	            i: i
	          }).a = child);
	        }
	      }
	      return root1.children[0];
	    }
	    function firstWalk(v) {
	      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
	      if (children.length) {
	        d3_layout_treeShift(v);
	        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	        if (w) {
	          v.z = w.z + separation(v._, w._);
	          v.m = v.z - midpoint;
	        } else {
	          v.z = midpoint;
	        }
	      } else if (w) {
	        v.z = w.z + separation(v._, w._);
	      }
	      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	    }
	    function secondWalk(v) {
	      v._.x = v.z + v.parent.m;
	      v.m += v.parent.m;
	    }
	    function apportion(v, w, ancestor) {
	      if (w) {
	        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
	        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
	          vom = d3_layout_treeLeft(vom);
	          vop = d3_layout_treeRight(vop);
	          vop.a = v;
	          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	          if (shift > 0) {
	            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
	            sip += shift;
	            sop += shift;
	          }
	          sim += vim.m;
	          sip += vip.m;
	          som += vom.m;
	          sop += vop.m;
	        }
	        if (vim && !d3_layout_treeRight(vop)) {
	          vop.t = vim;
	          vop.m += sim - sop;
	        }
	        if (vip && !d3_layout_treeLeft(vom)) {
	          vom.t = vip;
	          vom.m += sip - som;
	          ancestor = v;
	        }
	      }
	      return ancestor;
	    }
	    function sizeNode(node) {
	      node.x *= size[0];
	      node.y = node.depth * size[1];
	    }
	    tree.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return tree;
	    };
	    tree.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null ? sizeNode : null;
	      return tree;
	    };
	    tree.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) == null ? null : sizeNode;
	      return tree;
	    };
	    return d3_layout_hierarchyRebind(tree, hierarchy);
	  };
	  function d3_layout_treeSeparation(a, b) {
	    return a.parent == b.parent ? 1 : 2;
	  }
	  function d3_layout_treeLeft(v) {
	    var children = v.children;
	    return children.length ? children[0] : v.t;
	  }
	  function d3_layout_treeRight(v) {
	    var children = v.children, n;
	    return (n = children.length) ? children[n - 1] : v.t;
	  }
	  function d3_layout_treeMove(wm, wp, shift) {
	    var change = shift / (wp.i - wm.i);
	    wp.c -= change;
	    wp.s += shift;
	    wm.c += change;
	    wp.z += shift;
	    wp.m += shift;
	  }
	  function d3_layout_treeShift(v) {
	    var shift = 0, change = 0, children = v.children, i = children.length, w;
	    while (--i >= 0) {
	      w = children[i];
	      w.z += shift;
	      w.m += shift;
	      shift += w.s + (change += w.c);
	    }
	  }
	  function d3_layout_treeAncestor(vim, v, ancestor) {
	    return vim.a.parent === v.parent ? vim.a : ancestor;
	  }
	  d3.layout.cluster = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
	    function cluster(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var children = node.children;
	        if (children && children.length) {
	          node.x = d3_layout_clusterX(children);
	          node.y = d3_layout_clusterY(children);
	        } else {
	          node.x = previousNode ? x += separation(node, previousNode) : 0;
	          node.y = 0;
	          previousNode = node;
	        }
	      });
	      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
	      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
	        node.x = (node.x - root.x) * size[0];
	        node.y = (root.y - node.y) * size[1];
	      } : function(node) {
	        node.x = (node.x - x0) / (x1 - x0) * size[0];
	        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
	      });
	      return nodes;
	    }
	    cluster.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return cluster;
	    };
	    cluster.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null;
	      return cluster;
	    };
	    cluster.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) != null;
	      return cluster;
	    };
	    return d3_layout_hierarchyRebind(cluster, hierarchy);
	  };
	  function d3_layout_clusterY(children) {
	    return 1 + d3.max(children, function(child) {
	      return child.y;
	    });
	  }
	  function d3_layout_clusterX(children) {
	    return children.reduce(function(x, child) {
	      return x + child.x;
	    }, 0) / children.length;
	  }
	  function d3_layout_clusterLeft(node) {
	    var children = node.children;
	    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
	  }
	  function d3_layout_clusterRight(node) {
	    var children = node.children, n;
	    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
	  }
	  d3.layout.treemap = function() {
	    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
	    function scale(children, k) {
	      var i = -1, n = children.length, child, area;
	      while (++i < n) {
	        area = (child = children[i]).value * (k < 0 ? 0 : k);
	        child.area = isNaN(area) || area <= 0 ? 0 : area;
	      }
	    }
	    function squarify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while ((n = remaining.length) > 0) {
	          row.push(child = remaining[n - 1]);
	          row.area += child.area;
	          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
	            remaining.pop();
	            best = score;
	          } else {
	            row.area -= row.pop().area;
	            position(row, u, rect, false);
	            u = Math.min(rect.dx, rect.dy);
	            row.length = row.area = 0;
	            best = Infinity;
	          }
	        }
	        if (row.length) {
	          position(row, u, rect, true);
	          row.length = row.area = 0;
	        }
	        children.forEach(squarify);
	      }
	    }
	    function stickify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), remaining = children.slice(), child, row = [];
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while (child = remaining.pop()) {
	          row.push(child);
	          row.area += child.area;
	          if (child.z != null) {
	            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
	            row.length = row.area = 0;
	          }
	        }
	        children.forEach(stickify);
	      }
	    }
	    function worst(row, u) {
	      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
	      while (++i < n) {
	        if (!(r = row[i].area)) continue;
	        if (r < rmin) rmin = r;
	        if (r > rmax) rmax = r;
	      }
	      s *= s;
	      u *= u;
	      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
	    }
	    function position(row, u, rect, flush) {
	      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
	      if (u == rect.dx) {
	        if (flush || v > rect.dy) v = rect.dy;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dy = v;
	          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
	        }
	        o.z = true;
	        o.dx += rect.x + rect.dx - x;
	        rect.y += v;
	        rect.dy -= v;
	      } else {
	        if (flush || v > rect.dx) v = rect.dx;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dx = v;
	          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
	        }
	        o.z = false;
	        o.dy += rect.y + rect.dy - y;
	        rect.x += v;
	        rect.dx -= v;
	      }
	    }
	    function treemap(d) {
	      var nodes = stickies || hierarchy(d), root = nodes[0];
	      root.x = root.y = 0;
	      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
	      if (stickies) hierarchy.revalue(root);
	      scale([ root ], root.dx * root.dy / root.value);
	      (stickies ? stickify : squarify)(root);
	      if (sticky) stickies = nodes;
	      return nodes;
	    }
	    treemap.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return treemap;
	    };
	    treemap.padding = function(x) {
	      if (!arguments.length) return padding;
	      function padFunction(node) {
	        var p = x.call(treemap, node, node.depth);
	        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
	      }
	      function padConstant(node) {
	        return d3_layout_treemapPad(node, x);
	      }
	      var type;
	      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
	      padConstant) : padConstant;
	      return treemap;
	    };
	    treemap.round = function(x) {
	      if (!arguments.length) return round != Number;
	      round = x ? Math.round : Number;
	      return treemap;
	    };
	    treemap.sticky = function(x) {
	      if (!arguments.length) return sticky;
	      sticky = x;
	      stickies = null;
	      return treemap;
	    };
	    treemap.ratio = function(x) {
	      if (!arguments.length) return ratio;
	      ratio = x;
	      return treemap;
	    };
	    treemap.mode = function(x) {
	      if (!arguments.length) return mode;
	      mode = x + "";
	      return treemap;
	    };
	    return d3_layout_hierarchyRebind(treemap, hierarchy);
	  };
	  function d3_layout_treemapPadNull(node) {
	    return {
	      x: node.x,
	      y: node.y,
	      dx: node.dx,
	      dy: node.dy
	    };
	  }
	  function d3_layout_treemapPad(node, padding) {
	    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
	    if (dx < 0) {
	      x += dx / 2;
	      dx = 0;
	    }
	    if (dy < 0) {
	      y += dy / 2;
	      dy = 0;
	    }
	    return {
	      x: x,
	      y: y,
	      dx: dx,
	      dy: dy
	    };
	  }
	  d3.random = {
	    normal: function(µ, σ) {
	      var n = arguments.length;
	      if (n < 2) σ = 1;
	      if (n < 1) µ = 0;
	      return function() {
	        var x, y, r;
	        do {
	          x = Math.random() * 2 - 1;
	          y = Math.random() * 2 - 1;
	          r = x * x + y * y;
	        } while (!r || r > 1);
	        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
	      };
	    },
	    logNormal: function() {
	      var random = d3.random.normal.apply(d3, arguments);
	      return function() {
	        return Math.exp(random());
	      };
	    },
	    bates: function(m) {
	      var random = d3.random.irwinHall(m);
	      return function() {
	        return random() / m;
	      };
	    },
	    irwinHall: function(m) {
	      return function() {
	        for (var s = 0, j = 0; j < m; j++) s += Math.random();
	        return s;
	      };
	    }
	  };
	  d3.scale = {};
	  function d3_scaleExtent(domain) {
	    var start = domain[0], stop = domain[domain.length - 1];
	    return start < stop ? [ start, stop ] : [ stop, start ];
	  }
	  function d3_scaleRange(scale) {
	    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
	  }
	  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
	    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
	    return function(x) {
	      return i(u(x));
	    };
	  }
	  function d3_scale_nice(domain, nice) {
	    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
	    if (x1 < x0) {
	      dx = i0, i0 = i1, i1 = dx;
	      dx = x0, x0 = x1, x1 = dx;
	    }
	    domain[i0] = nice.floor(x0);
	    domain[i1] = nice.ceil(x1);
	    return domain;
	  }
	  function d3_scale_niceStep(step) {
	    return step ? {
	      floor: function(x) {
	        return Math.floor(x / step) * step;
	      },
	      ceil: function(x) {
	        return Math.ceil(x / step) * step;
	      }
	    } : d3_scale_niceIdentity;
	  }
	  var d3_scale_niceIdentity = {
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
	    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
	    if (domain[k] < domain[0]) {
	      domain = domain.slice().reverse();
	      range = range.slice().reverse();
	    }
	    while (++j <= k) {
	      u.push(uninterpolate(domain[j - 1], domain[j]));
	      i.push(interpolate(range[j - 1], range[j]));
	    }
	    return function(x) {
	      var j = d3.bisect(domain, x, 1, k) - 1;
	      return i[j](u[j](x));
	    };
	  }
	  d3.scale.linear = function() {
	    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
	  };
	  function d3_scale_linear(domain, range, interpolate, clamp) {
	    var output, input;
	    function rescale() {
	      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
	      output = linear(domain, range, uninterpolate, interpolate);
	      input = linear(range, domain, uninterpolate, d3_interpolate);
	      return scale;
	    }
	    function scale(x) {
	      return output(x);
	    }
	    scale.invert = function(y) {
	      return input(y);
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(Number);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.rangeRound = function(x) {
	      return scale.range(x).interpolate(d3_interpolateRound);
	    };
	    scale.clamp = function(x) {
	      if (!arguments.length) return clamp;
	      clamp = x;
	      return rescale();
	    };
	    scale.interpolate = function(x) {
	      if (!arguments.length) return interpolate;
	      interpolate = x;
	      return rescale();
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      d3_scale_linearNice(domain, m);
	      return rescale();
	    };
	    scale.copy = function() {
	      return d3_scale_linear(domain, range, interpolate, clamp);
	    };
	    return rescale();
	  }
	  function d3_scale_linearRebind(scale, linear) {
	    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
	  }
	  function d3_scale_linearNice(domain, m) {
	    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	    return domain;
	  }
	  function d3_scale_linearTickRange(domain, m) {
	    if (m == null) m = 10;
	    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
	    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
	    extent[0] = Math.ceil(extent[0] / step) * step;
	    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
	    extent[2] = step;
	    return extent;
	  }
	  function d3_scale_linearTicks(domain, m) {
	    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
	  }
	  function d3_scale_linearTickFormat(domain, m, format) {
	    var range = d3_scale_linearTickRange(domain, m);
	    if (format) {
	      var match = d3_format_re.exec(format);
	      match.shift();
	      if (match[8] === "s") {
	        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
	        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
	        match[8] = "f";
	        format = d3.format(match.join(""));
	        return function(d) {
	          return format(prefix.scale(d)) + prefix.symbol;
	        };
	      }
	      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
	      format = match.join("");
	    } else {
	      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
	    }
	    return d3.format(format);
	  }
	  var d3_scale_linearFormatSignificant = {
	    s: 1,
	    g: 1,
	    p: 1,
	    r: 1,
	    e: 1
	  };
	  function d3_scale_linearPrecision(value) {
	    return -Math.floor(Math.log(value) / Math.LN10 + .01);
	  }
	  function d3_scale_linearFormatPrecision(type, range) {
	    var p = d3_scale_linearPrecision(range[2]);
	    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
	  }
	  d3.scale.log = function() {
	    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
	  };
	  function d3_scale_log(linear, base, positive, domain) {
	    function log(x) {
	      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
	    }
	    function pow(x) {
	      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
	    }
	    function scale(x) {
	      return linear(log(x));
	    }
	    scale.invert = function(x) {
	      return pow(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      positive = x[0] >= 0;
	      linear.domain((domain = x.map(Number)).map(log));
	      return scale;
	    };
	    scale.base = function(_) {
	      if (!arguments.length) return base;
	      base = +_;
	      linear.domain(domain.map(log));
	      return scale;
	    };
	    scale.nice = function() {
	      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
	      linear.domain(niced);
	      domain = niced.map(pow);
	      return scale;
	    };
	    scale.ticks = function() {
	      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
	      if (isFinite(j - i)) {
	        if (positive) {
	          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
	          ticks.push(pow(i));
	        } else {
	          ticks.push(pow(i));
	          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
	        }
	        for (i = 0; ticks[i] < u; i++) {}
	        for (j = ticks.length; ticks[j - 1] > v; j--) {}
	        ticks = ticks.slice(i, j);
	      }
	      return ticks;
	    };
	    scale.tickFormat = function(n, format) {
	      if (!arguments.length) return d3_scale_logFormat;
	      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
	      var k = Math.max(1, base * n / scale.ticks().length);
	      return function(d) {
	        var i = d / pow(Math.round(log(d)));
	        if (i * base < base - .5) i *= base;
	        return i <= k ? format(d) : "";
	      };
	    };
	    scale.copy = function() {
	      return d3_scale_log(linear.copy(), base, positive, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
	    floor: function(x) {
	      return -Math.ceil(-x);
	    },
	    ceil: function(x) {
	      return -Math.floor(-x);
	    }
	  };
	  d3.scale.pow = function() {
	    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
	  };
	  function d3_scale_pow(linear, exponent, domain) {
	    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
	    function scale(x) {
	      return linear(powp(x));
	    }
	    scale.invert = function(x) {
	      return powb(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      linear.domain((domain = x.map(Number)).map(powp));
	      return scale;
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      return scale.domain(d3_scale_linearNice(domain, m));
	    };
	    scale.exponent = function(x) {
	      if (!arguments.length) return exponent;
	      powp = d3_scale_powPow(exponent = x);
	      powb = d3_scale_powPow(1 / exponent);
	      linear.domain(domain.map(powp));
	      return scale;
	    };
	    scale.copy = function() {
	      return d3_scale_pow(linear.copy(), exponent, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_scale_powPow(e) {
	    return function(x) {
	      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
	    };
	  }
	  d3.scale.sqrt = function() {
	    return d3.scale.pow().exponent(.5);
	  };
	  d3.scale.ordinal = function() {
	    return d3_scale_ordinal([], {
	      t: "range",
	      a: [ [] ]
	    });
	  };
	  function d3_scale_ordinal(domain, ranger) {
	    var index, range, rangeBand;
	    function scale(x) {
	      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
	    }
	    function steps(start, step) {
	      return d3.range(domain.length).map(function(i) {
	        return start + step * i;
	      });
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = [];
	      index = new d3_Map();
	      var i = -1, n = x.length, xi;
	      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
	      return scale[ranger.t].apply(scale, ranger.a);
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      rangeBand = 0;
	      ranger = {
	        t: "range",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangePoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
	      0) : (stop - start) / (domain.length - 1 + padding);
	      range = steps(start + step * padding / 2, step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangePoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundPoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
	      0) : (stop - start) / (domain.length - 1 + padding) | 0;
	      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangeRoundPoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
	      range = steps(start + step * outerPadding, step);
	      if (reverse) range.reverse();
	      rangeBand = step * (1 - padding);
	      ranger = {
	        t: "rangeBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
	      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
	      if (reverse) range.reverse();
	      rangeBand = Math.round(step * (1 - padding));
	      ranger = {
	        t: "rangeRoundBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBand = function() {
	      return rangeBand;
	    };
	    scale.rangeExtent = function() {
	      return d3_scaleExtent(ranger.a[0]);
	    };
	    scale.copy = function() {
	      return d3_scale_ordinal(domain, ranger);
	    };
	    return scale.domain(domain);
	  }
	  d3.scale.category10 = function() {
	    return d3.scale.ordinal().range(d3_category10);
	  };
	  d3.scale.category20 = function() {
	    return d3.scale.ordinal().range(d3_category20);
	  };
	  d3.scale.category20b = function() {
	    return d3.scale.ordinal().range(d3_category20b);
	  };
	  d3.scale.category20c = function() {
	    return d3.scale.ordinal().range(d3_category20c);
	  };
	  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
	  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
	  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
	  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
	  d3.scale.quantile = function() {
	    return d3_scale_quantile([], []);
	  };
	  function d3_scale_quantile(domain, range) {
	    var thresholds;
	    function rescale() {
	      var k = 0, q = range.length;
	      thresholds = [];
	      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
	      return scale;
	    }
	    function scale(x) {
	      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.quantiles = function() {
	      return thresholds;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantile(domain, range);
	    };
	    return rescale();
	  }
	  d3.scale.quantize = function() {
	    return d3_scale_quantize(0, 1, [ 0, 1 ]);
	  };
	  function d3_scale_quantize(x0, x1, range) {
	    var kx, i;
	    function scale(x) {
	      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
	    }
	    function rescale() {
	      kx = range.length / (x1 - x0);
	      i = range.length - 1;
	      return scale;
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return [ x0, x1 ];
	      x0 = +x[0];
	      x1 = +x[x.length - 1];
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      y = y < 0 ? NaN : y / kx + x0;
	      return [ y, y + 1 / kx ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantize(x0, x1, range);
	    };
	    return rescale();
	  }
	  d3.scale.threshold = function() {
	    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
	  };
	  function d3_scale_threshold(domain, range) {
	    function scale(x) {
	      if (x <= x) return range[d3.bisect(domain, x)];
	    }
	    scale.domain = function(_) {
	      if (!arguments.length) return domain;
	      domain = _;
	      return scale;
	    };
	    scale.range = function(_) {
	      if (!arguments.length) return range;
	      range = _;
	      return scale;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return [ domain[y - 1], domain[y] ];
	    };
	    scale.copy = function() {
	      return d3_scale_threshold(domain, range);
	    };
	    return scale;
	  }
	  d3.scale.identity = function() {
	    return d3_scale_identity([ 0, 1 ]);
	  };
	  function d3_scale_identity(domain) {
	    function identity(x) {
	      return +x;
	    }
	    identity.invert = identity;
	    identity.domain = identity.range = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(identity);
	      return identity;
	    };
	    identity.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    identity.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    identity.copy = function() {
	      return d3_scale_identity(domain);
	    };
	    return identity;
	  }
	  d3.svg = {};
	  function d3_zero() {
	    return 0;
	  }
	  d3.svg.arc = function() {
	    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
	    function arc() {
	      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
	      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
	      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
	      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
	      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
	        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
	        if (!cw) p1 *= -1;
	        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
	        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
	      }
	      if (r1) {
	        x0 = r1 * Math.cos(a0 + p1);
	        y0 = r1 * Math.sin(a0 + p1);
	        x1 = r1 * Math.cos(a1 - p1);
	        y1 = r1 * Math.sin(a1 - p1);
	        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
	        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
	          var h1 = (a0 + a1) / 2;
	          x0 = r1 * Math.cos(h1);
	          y0 = r1 * Math.sin(h1);
	          x1 = y1 = null;
	        }
	      } else {
	        x0 = y0 = 0;
	      }
	      if (r0) {
	        x2 = r0 * Math.cos(a1 - p0);
	        y2 = r0 * Math.sin(a1 - p0);
	        x3 = r0 * Math.cos(a0 + p0);
	        y3 = r0 * Math.sin(a0 + p0);
	        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
	        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
	          var h0 = (a0 + a1) / 2;
	          x2 = r0 * Math.cos(h0);
	          y2 = r0 * Math.sin(h0);
	          x3 = y3 = null;
	        }
	      } else {
	        x2 = y2 = 0;
	      }
	      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
	        cr = r0 < r1 ^ cw ? 0 : 1;
	        var rc1 = rc, rc0 = rc;
	        if (da < π) {
	          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
	          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
	          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
	        }
	        if (x1 != null) {
	          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
	          if (rc === rc1) {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
	          } else {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
	          }
	        } else {
	          path.push("M", x0, ",", y0);
	        }
	        if (x3 != null) {
	          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
	          if (rc === rc0) {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          } else {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          }
	        } else {
	          path.push("L", x2, ",", y2);
	        }
	      } else {
	        path.push("M", x0, ",", y0);
	        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
	        path.push("L", x2, ",", y2);
	        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
	      }
	      path.push("Z");
	      return path.join("");
	    }
	    function circleSegment(r1, cw) {
	      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
	    }
	    arc.innerRadius = function(v) {
	      if (!arguments.length) return innerRadius;
	      innerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.outerRadius = function(v) {
	      if (!arguments.length) return outerRadius;
	      outerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.cornerRadius = function(v) {
	      if (!arguments.length) return cornerRadius;
	      cornerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.padRadius = function(v) {
	      if (!arguments.length) return padRadius;
	      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
	      return arc;
	    };
	    arc.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return arc;
	    };
	    arc.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return arc;
	    };
	    arc.padAngle = function(v) {
	      if (!arguments.length) return padAngle;
	      padAngle = d3_functor(v);
	      return arc;
	    };
	    arc.centroid = function() {
	      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
	      return [ Math.cos(a) * r, Math.sin(a) * r ];
	    };
	    return arc;
	  };
	  var d3_svg_arcAuto = "auto";
	  function d3_svg_arcInnerRadius(d) {
	    return d.innerRadius;
	  }
	  function d3_svg_arcOuterRadius(d) {
	    return d.outerRadius;
	  }
	  function d3_svg_arcStartAngle(d) {
	    return d.startAngle;
	  }
	  function d3_svg_arcEndAngle(d) {
	    return d.endAngle;
	  }
	  function d3_svg_arcPadAngle(d) {
	    return d && d.padAngle;
	  }
	  function d3_svg_arcSweep(x0, y0, x1, y1) {
	    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
	  }
	  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
	    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
	    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
	    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
	  }
	  function d3_svg_line(projection) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
	    function line(data) {
	      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
	      function segment() {
	        segments.push("M", interpolate(projection(points), tension));
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
	        } else if (points.length) {
	          segment();
	          points = [];
	        }
	      }
	      if (points.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    line.x = function(_) {
	      if (!arguments.length) return x;
	      x = _;
	      return line;
	    };
	    line.y = function(_) {
	      if (!arguments.length) return y;
	      y = _;
	      return line;
	    };
	    line.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return line;
	    };
	    line.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      return line;
	    };
	    line.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return line;
	    };
	    return line;
	  }
	  d3.svg.line = function() {
	    return d3_svg_line(d3_identity);
	  };
	  var d3_svg_lineInterpolators = d3.map({
	    linear: d3_svg_lineLinear,
	    "linear-closed": d3_svg_lineLinearClosed,
	    step: d3_svg_lineStep,
	    "step-before": d3_svg_lineStepBefore,
	    "step-after": d3_svg_lineStepAfter,
	    basis: d3_svg_lineBasis,
	    "basis-open": d3_svg_lineBasisOpen,
	    "basis-closed": d3_svg_lineBasisClosed,
	    bundle: d3_svg_lineBundle,
	    cardinal: d3_svg_lineCardinal,
	    "cardinal-open": d3_svg_lineCardinalOpen,
	    "cardinal-closed": d3_svg_lineCardinalClosed,
	    monotone: d3_svg_lineMonotone
	  });
	  d3_svg_lineInterpolators.forEach(function(key, value) {
	    value.key = key;
	    value.closed = /-closed$/.test(key);
	  });
	  function d3_svg_lineLinear(points) {
	    return points.length > 1 ? points.join("L") : points + "Z";
	  }
	  function d3_svg_lineLinearClosed(points) {
	    return points.join("L") + "Z";
	  }
	  function d3_svg_lineStep(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
	    if (n > 1) path.push("H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepBefore(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepAfter(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
	    return path.join("");
	  }
	  function d3_svg_lineCardinalOpen(points, tension) {
	    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineCardinalClosed(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
	    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
	  }
	  function d3_svg_lineCardinal(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineHermite(points, tangents) {
	    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
	      return d3_svg_lineLinear(points);
	    }
	    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
	    if (quad) {
	      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
	      p0 = points[1];
	      pi = 2;
	    }
	    if (tangents.length > 1) {
	      t = tangents[1];
	      p = points[pi];
	      pi++;
	      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      for (var i = 2; i < tangents.length; i++, pi++) {
	        p = points[pi];
	        t = tangents[i];
	        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      }
	    }
	    if (quad) {
	      var lp = points[pi];
	      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
	    }
	    return path;
	  }
	  function d3_svg_lineCardinalTangents(points, tension) {
	    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
	    while (++i < n) {
	      p0 = p1;
	      p1 = p2;
	      p2 = points[i];
	      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineBasis(points) {
	    if (points.length < 3) return d3_svg_lineLinear(points);
	    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    points.push(points[n - 1]);
	    while (++i <= n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    points.pop();
	    path.push("L", pi);
	    return path.join("");
	  }
	  function d3_svg_lineBasisOpen(points) {
	    if (points.length < 4) return d3_svg_lineLinear(points);
	    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
	    while (++i < 3) {
	      pi = points[i];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
	    --i;
	    while (++i < n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBasisClosed(points) {
	    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
	    while (++i < 4) {
	      pi = points[i % n];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    --i;
	    while (++i < m) {
	      pi = points[i % n];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBundle(points, tension) {
	    var n = points.length - 1;
	    if (n) {
	      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
	      while (++i <= n) {
	        p = points[i];
	        t = i / n;
	        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
	        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
	      }
	    }
	    return d3_svg_lineBasis(points);
	  }
	  function d3_svg_lineDot4(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
	  }
	  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
	  function d3_svg_lineBasisBezier(path, x, y) {
	    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
	  }
	  function d3_svg_lineSlope(p0, p1) {
	    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
	  }
	  function d3_svg_lineFiniteDifferences(points) {
	    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
	    while (++i < j) {
	      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
	    }
	    m[i] = d;
	    return m;
	  }
	  function d3_svg_lineMonotoneTangents(points) {
	    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
	    while (++i < j) {
	      d = d3_svg_lineSlope(points[i], points[i + 1]);
	      if (abs(d) < ε) {
	        m[i] = m[i + 1] = 0;
	      } else {
	        a = m[i] / d;
	        b = m[i + 1] / d;
	        s = a * a + b * b;
	        if (s > 9) {
	          s = d * 3 / Math.sqrt(s);
	          m[i] = s * a;
	          m[i + 1] = s * b;
	        }
	      }
	    }
	    i = -1;
	    while (++i <= j) {
	      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
	      tangents.push([ s || 0, m[i] * s || 0 ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineMonotone(points) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
	  }
	  d3.svg.line.radial = function() {
	    var line = d3_svg_line(d3_svg_lineRadial);
	    line.radius = line.x, delete line.x;
	    line.angle = line.y, delete line.y;
	    return line;
	  };
	  function d3_svg_lineRadial(points) {
	    var point, i = -1, n = points.length, r, a;
	    while (++i < n) {
	      point = points[i];
	      r = point[0];
	      a = point[1] - halfπ;
	      point[0] = r * Math.cos(a);
	      point[1] = r * Math.sin(a);
	    }
	    return points;
	  }
	  function d3_svg_area(projection) {
	    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
	    function area(data) {
	      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
	        return x;
	      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
	        return y;
	      } : d3_functor(y1), x, y;
	      function segment() {
	        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
	          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
	        } else if (points0.length) {
	          segment();
	          points0 = [];
	          points1 = [];
	        }
	      }
	      if (points0.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    area.x = function(_) {
	      if (!arguments.length) return x1;
	      x0 = x1 = _;
	      return area;
	    };
	    area.x0 = function(_) {
	      if (!arguments.length) return x0;
	      x0 = _;
	      return area;
	    };
	    area.x1 = function(_) {
	      if (!arguments.length) return x1;
	      x1 = _;
	      return area;
	    };
	    area.y = function(_) {
	      if (!arguments.length) return y1;
	      y0 = y1 = _;
	      return area;
	    };
	    area.y0 = function(_) {
	      if (!arguments.length) return y0;
	      y0 = _;
	      return area;
	    };
	    area.y1 = function(_) {
	      if (!arguments.length) return y1;
	      y1 = _;
	      return area;
	    };
	    area.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return area;
	    };
	    area.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      interpolateReverse = interpolate.reverse || interpolate;
	      L = interpolate.closed ? "M" : "L";
	      return area;
	    };
	    area.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return area;
	    };
	    return area;
	  }
	  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
	  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
	  d3.svg.area = function() {
	    return d3_svg_area(d3_identity);
	  };
	  d3.svg.area.radial = function() {
	    var area = d3_svg_area(d3_svg_lineRadial);
	    area.radius = area.x, delete area.x;
	    area.innerRadius = area.x0, delete area.x0;
	    area.outerRadius = area.x1, delete area.x1;
	    area.angle = area.y, delete area.y;
	    area.startAngle = area.y0, delete area.y0;
	    area.endAngle = area.y1, delete area.y1;
	    return area;
	  };
	  d3.svg.chord = function() {
	    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
	    function chord(d, i) {
	      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
	      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
	    }
	    function subgroup(self, f, d, i) {
	      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
	      return {
	        r: r,
	        a0: a0,
	        a1: a1,
	        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
	        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
	      };
	    }
	    function equals(a, b) {
	      return a.a0 == b.a0 && a.a1 == b.a1;
	    }
	    function arc(r, p, a) {
	      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
	    }
	    function curve(r0, p0, r1, p1) {
	      return "Q 0,0 " + p1;
	    }
	    chord.radius = function(v) {
	      if (!arguments.length) return radius;
	      radius = d3_functor(v);
	      return chord;
	    };
	    chord.source = function(v) {
	      if (!arguments.length) return source;
	      source = d3_functor(v);
	      return chord;
	    };
	    chord.target = function(v) {
	      if (!arguments.length) return target;
	      target = d3_functor(v);
	      return chord;
	    };
	    chord.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return chord;
	    };
	    chord.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return chord;
	    };
	    return chord;
	  };
	  function d3_svg_chordRadius(d) {
	    return d.radius;
	  }
	  d3.svg.diagonal = function() {
	    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
	    function diagonal(d, i) {
	      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
	        x: p0.x,
	        y: m
	      }, {
	        x: p3.x,
	        y: m
	      }, p3 ];
	      p = p.map(projection);
	      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
	    }
	    diagonal.source = function(x) {
	      if (!arguments.length) return source;
	      source = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.target = function(x) {
	      if (!arguments.length) return target;
	      target = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.projection = function(x) {
	      if (!arguments.length) return projection;
	      projection = x;
	      return diagonal;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalProjection(d) {
	    return [ d.x, d.y ];
	  }
	  d3.svg.diagonal.radial = function() {
	    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
	    diagonal.projection = function(x) {
	      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalRadialProjection(projection) {
	    return function() {
	      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
	      return [ r * Math.cos(a), r * Math.sin(a) ];
	    };
	  }
	  d3.svg.symbol = function() {
	    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
	    function symbol(d, i) {
	      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
	    }
	    symbol.type = function(x) {
	      if (!arguments.length) return type;
	      type = d3_functor(x);
	      return symbol;
	    };
	    symbol.size = function(x) {
	      if (!arguments.length) return size;
	      size = d3_functor(x);
	      return symbol;
	    };
	    return symbol;
	  };
	  function d3_svg_symbolSize() {
	    return 64;
	  }
	  function d3_svg_symbolType() {
	    return "circle";
	  }
	  function d3_svg_symbolCircle(size) {
	    var r = Math.sqrt(size / π);
	    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
	  }
	  var d3_svg_symbols = d3.map({
	    circle: d3_svg_symbolCircle,
	    cross: function(size) {
	      var r = Math.sqrt(size / 5) / 2;
	      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
	    },
	    diamond: function(size) {
	      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
	      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
	    },
	    square: function(size) {
	      var r = Math.sqrt(size) / 2;
	      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
	    },
	    "triangle-down": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
	    },
	    "triangle-up": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
	    }
	  });
	  d3.svg.symbolTypes = d3_svg_symbols.keys();
	  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
	  d3_selectionPrototype.transition = function(name) {
	    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
	      time: Date.now(),
	      ease: d3_ease_cubicInOut,
	      delay: 0,
	      duration: 250
	    };
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_selectionPrototype.interrupt = function(name) {
	    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
	  };
	  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
	  function d3_selection_interruptNS(ns) {
	    return function() {
	      var lock, activeId, active;
	      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
	        active.timer.c = null;
	        active.timer.t = NaN;
	        if (--lock.count) delete lock[activeId]; else delete this[ns];
	        lock.active += .5;
	        active.event && active.event.interrupt.call(this, this.__data__, active.index);
	      }
	    };
	  }
	  function d3_transition(groups, ns, id) {
	    d3_subclass(groups, d3_transitionPrototype);
	    groups.namespace = ns;
	    groups.id = id;
	    return groups;
	  }
	  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
	  d3_transitionPrototype.call = d3_selectionPrototype.call;
	  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
	  d3_transitionPrototype.node = d3_selectionPrototype.node;
	  d3_transitionPrototype.size = d3_selectionPrototype.size;
	  d3.transition = function(selection, name) {
	    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
	  };
	  d3.transition.prototype = d3_transitionPrototype;
	  d3_transitionPrototype.select = function(selector) {
	    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
	          if ("__data__" in node) subnode.__data__ = node.__data__;
	          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
	          subgroup.push(subnode);
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.selectAll = function(selector) {
	    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          transition = node[ns][id];
	          subnodes = selector.call(node, node.__data__, i, j);
	          subgroups.push(subgroup = []);
	          for (var k = -1, o = subnodes.length; ++k < o; ) {
	            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
	            subgroup.push(subnode);
	          }
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_transition(subgroups, this.namespace, this.id);
	  };
	  d3_transitionPrototype.tween = function(name, tween) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
	    return d3_selection_each(this, tween == null ? function(node) {
	      node[ns][id].tween.remove(name);
	    } : function(node) {
	      node[ns][id].tween.set(name, tween);
	    });
	  };
	  function d3_transition_tween(groups, name, value, tween) {
	    var id = groups.id, ns = groups.namespace;
	    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
	    } : (value = tween(value), function(node) {
	      node[ns][id].tween.set(name, value);
	    }));
	  }
	  d3_transitionPrototype.attr = function(nameNS, value) {
	    if (arguments.length < 2) {
	      for (value in nameNS) this.attr(value, nameNS[value]);
	      return this;
	    }
	    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrTween(b) {
	      return b == null ? attrNull : (b += "", function() {
	        var a = this.getAttribute(name), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttribute(name, i(t));
	        });
	      });
	    }
	    function attrTweenNS(b) {
	      return b == null ? attrNullNS : (b += "", function() {
	        var a = this.getAttributeNS(name.space, name.local), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttributeNS(name.space, name.local, i(t));
	        });
	      });
	    }
	    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.attrTween = function(nameNS, tween) {
	    var name = d3.ns.qualify(nameNS);
	    function attrTween(d, i) {
	      var f = tween.call(this, d, i, this.getAttribute(name));
	      return f && function(t) {
	        this.setAttribute(name, f(t));
	      };
	    }
	    function attrTweenNS(d, i) {
	      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
	      return f && function(t) {
	        this.setAttributeNS(name.space, name.local, f(t));
	      };
	    }
	    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.style(priority, name[priority], value);
	        return this;
	      }
	      priority = "";
	    }
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleString(b) {
	      return b == null ? styleNull : (b += "", function() {
	        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
	        return a !== b && (i = d3_interpolate(a, b), function(t) {
	          this.style.setProperty(name, i(t), priority);
	        });
	      });
	    }
	    return d3_transition_tween(this, "style." + name, value, styleString);
	  };
	  d3_transitionPrototype.styleTween = function(name, tween, priority) {
	    if (arguments.length < 3) priority = "";
	    function styleTween(d, i) {
	      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
	      return f && function(t) {
	        this.style.setProperty(name, f(t), priority);
	      };
	    }
	    return this.tween("style." + name, styleTween);
	  };
	  d3_transitionPrototype.text = function(value) {
	    return d3_transition_tween(this, "text", value, d3_transition_text);
	  };
	  function d3_transition_text(b) {
	    if (b == null) b = "";
	    return function() {
	      this.textContent = b;
	    };
	  }
	  d3_transitionPrototype.remove = function() {
	    var ns = this.namespace;
	    return this.each("end.transition", function() {
	      var p;
	      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
	    });
	  };
	  d3_transitionPrototype.ease = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].ease;
	    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
	    return d3_selection_each(this, function(node) {
	      node[ns][id].ease = value;
	    });
	  };
	  d3_transitionPrototype.delay = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].delay;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].delay = +value.call(node, node.__data__, i, j);
	    } : (value = +value, function(node) {
	      node[ns][id].delay = value;
	    }));
	  };
	  d3_transitionPrototype.duration = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].duration;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
	    } : (value = Math.max(1, value), function(node) {
	      node[ns][id].duration = value;
	    }));
	  };
	  d3_transitionPrototype.each = function(type, listener) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 2) {
	      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
	      try {
	        d3_transitionInheritId = id;
	        d3_selection_each(this, function(node, i, j) {
	          d3_transitionInherit = node[ns][id];
	          type.call(node, node.__data__, i, j);
	        });
	      } finally {
	        d3_transitionInherit = inherit;
	        d3_transitionInheritId = inheritId;
	      }
	    } else {
	      d3_selection_each(this, function(node) {
	        var transition = node[ns][id];
	        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
	      });
	    }
	    return this;
	  };
	  d3_transitionPrototype.transition = function() {
	    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if (node = group[i]) {
	          transition = node[ns][id0];
	          d3_transitionNode(node, i, ns, id1, {
	            time: transition.time,
	            ease: transition.ease,
	            delay: transition.delay + transition.duration,
	            duration: transition.duration
	          });
	        }
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id1);
	  };
	  function d3_transitionNamespace(name) {
	    return name == null ? "__transition__" : "__transition_" + name + "__";
	  }
	  function d3_transitionNode(node, i, ns, id, inherit) {
	    var lock = node[ns] || (node[ns] = {
	      active: 0,
	      count: 0
	    }), transition = lock[id], time, timer, duration, ease, tweens;
	    function schedule(elapsed) {
	      var delay = transition.delay;
	      timer.t = delay + time;
	      if (delay <= elapsed) return start(elapsed - delay);
	      timer.c = start;
	    }
	    function start(elapsed) {
	      var activeId = lock.active, active = lock[activeId];
	      if (active) {
	        active.timer.c = null;
	        active.timer.t = NaN;
	        --lock.count;
	        delete lock[activeId];
	        active.event && active.event.interrupt.call(node, node.__data__, active.index);
	      }
	      for (var cancelId in lock) {
	        if (+cancelId < id) {
	          var cancel = lock[cancelId];
	          cancel.timer.c = null;
	          cancel.timer.t = NaN;
	          --lock.count;
	          delete lock[cancelId];
	        }
	      }
	      timer.c = tick;
	      d3_timer(function() {
	        if (timer.c && tick(elapsed || 1)) {
	          timer.c = null;
	          timer.t = NaN;
	        }
	        return 1;
	      }, 0, time);
	      lock.active = id;
	      transition.event && transition.event.start.call(node, node.__data__, i);
	      tweens = [];
	      transition.tween.forEach(function(key, value) {
	        if (value = value.call(node, node.__data__, i)) {
	          tweens.push(value);
	        }
	      });
	      ease = transition.ease;
	      duration = transition.duration;
	    }
	    function tick(elapsed) {
	      var t = elapsed / duration, e = ease(t), n = tweens.length;
	      while (n > 0) {
	        tweens[--n].call(node, e);
	      }
	      if (t >= 1) {
	        transition.event && transition.event.end.call(node, node.__data__, i);
	        if (--lock.count) delete lock[id]; else delete node[ns];
	        return 1;
	      }
	    }
	    if (!transition) {
	      time = inherit.time;
	      timer = d3_timer(schedule, 0, time);
	      transition = lock[id] = {
	        tween: new d3_Map(),
	        time: time,
	        timer: timer,
	        delay: inherit.delay,
	        duration: inherit.duration,
	        ease: inherit.ease,
	        index: i
	      };
	      inherit = null;
	      ++lock.count;
	    }
	  }
	  d3.svg.axis = function() {
	    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
	    function axis(g) {
	      g.each(function() {
	        var g = d3.select(this);
	        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
	        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
	        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
	        d3.transition(path));
	        tickEnter.append("line");
	        tickEnter.append("text");
	        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
	        if (orient === "bottom" || orient === "top") {
	          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
	          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
	          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
	        } else {
	          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
	          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
	          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
	        }
	        lineEnter.attr(y2, sign * innerTickSize);
	        textEnter.attr(y1, sign * tickSpacing);
	        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
	        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
	        if (scale1.rangeBand) {
	          var x = scale1, dx = x.rangeBand() / 2;
	          scale0 = scale1 = function(d) {
	            return x(d) + dx;
	          };
	        } else if (scale0.rangeBand) {
	          scale0 = scale1;
	        } else {
	          tickExit.call(tickTransform, scale1, scale0);
	        }
	        tickEnter.call(tickTransform, scale0, scale1);
	        tickUpdate.call(tickTransform, scale1, scale1);
	      });
	    }
	    axis.scale = function(x) {
	      if (!arguments.length) return scale;
	      scale = x;
	      return axis;
	    };
	    axis.orient = function(x) {
	      if (!arguments.length) return orient;
	      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
	      return axis;
	    };
	    axis.ticks = function() {
	      if (!arguments.length) return tickArguments_;
	      tickArguments_ = d3_array(arguments);
	      return axis;
	    };
	    axis.tickValues = function(x) {
	      if (!arguments.length) return tickValues;
	      tickValues = x;
	      return axis;
	    };
	    axis.tickFormat = function(x) {
	      if (!arguments.length) return tickFormat_;
	      tickFormat_ = x;
	      return axis;
	    };
	    axis.tickSize = function(x) {
	      var n = arguments.length;
	      if (!n) return innerTickSize;
	      innerTickSize = +x;
	      outerTickSize = +arguments[n - 1];
	      return axis;
	    };
	    axis.innerTickSize = function(x) {
	      if (!arguments.length) return innerTickSize;
	      innerTickSize = +x;
	      return axis;
	    };
	    axis.outerTickSize = function(x) {
	      if (!arguments.length) return outerTickSize;
	      outerTickSize = +x;
	      return axis;
	    };
	    axis.tickPadding = function(x) {
	      if (!arguments.length) return tickPadding;
	      tickPadding = +x;
	      return axis;
	    };
	    axis.tickSubdivide = function() {
	      return arguments.length && axis;
	    };
	    return axis;
	  };
	  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
	    top: 1,
	    right: 1,
	    bottom: 1,
	    left: 1
	  };
	  function d3_svg_axisX(selection, x0, x1) {
	    selection.attr("transform", function(d) {
	      var v0 = x0(d);
	      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
	    });
	  }
	  function d3_svg_axisY(selection, y0, y1) {
	    selection.attr("transform", function(d) {
	      var v0 = y0(d);
	      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
	    });
	  }
	  d3.svg.brush = function() {
	    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
	    function brush(g) {
	      g.each(function() {
	        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
	        var background = g.selectAll(".background").data([ 0 ]);
	        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
	        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
	        var resize = g.selectAll(".resize").data(resizes, d3_identity);
	        resize.exit().remove();
	        resize.enter().append("g").attr("class", function(d) {
	          return "resize " + d;
	        }).style("cursor", function(d) {
	          return d3_svg_brushCursor[d];
	        }).append("rect").attr("x", function(d) {
	          return /[ew]$/.test(d) ? -3 : null;
	        }).attr("y", function(d) {
	          return /^[ns]/.test(d) ? -3 : null;
	        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
	        resize.style("display", brush.empty() ? "none" : null);
	        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
	        if (x) {
	          range = d3_scaleRange(x);
	          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
	          redrawX(gUpdate);
	        }
	        if (y) {
	          range = d3_scaleRange(y);
	          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
	          redrawY(gUpdate);
	        }
	        redraw(gUpdate);
	      });
	    }
	    brush.event = function(g) {
	      g.each(function() {
	        var event_ = event.of(this, arguments), extent1 = {
	          x: xExtent,
	          y: yExtent,
	          i: xExtentDomain,
	          j: yExtentDomain
	        }, extent0 = this.__chart__ || extent1;
	        this.__chart__ = extent1;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.brush", function() {
	            xExtentDomain = extent0.i;
	            yExtentDomain = extent0.j;
	            xExtent = extent0.x;
	            yExtent = extent0.y;
	            event_({
	              type: "brushstart"
	            });
	          }).tween("brush:brush", function() {
	            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
	            xExtentDomain = yExtentDomain = null;
	            return function(t) {
	              xExtent = extent1.x = xi(t);
	              yExtent = extent1.y = yi(t);
	              event_({
	                type: "brush",
	                mode: "resize"
	              });
	            };
	          }).each("end.brush", function() {
	            xExtentDomain = extent1.i;
	            yExtentDomain = extent1.j;
	            event_({
	              type: "brush",
	              mode: "resize"
	            });
	            event_({
	              type: "brushend"
	            });
	          });
	        } else {
	          event_({
	            type: "brushstart"
	          });
	          event_({
	            type: "brush",
	            mode: "resize"
	          });
	          event_({
	            type: "brushend"
	          });
	        }
	      });
	    };
	    function redraw(g) {
	      g.selectAll(".resize").attr("transform", function(d) {
	        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
	      });
	    }
	    function redrawX(g) {
	      g.select(".extent").attr("x", xExtent[0]);
	      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
	    }
	    function redrawY(g) {
	      g.select(".extent").attr("y", yExtent[0]);
	      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
	    }
	    function brushstart() {
	      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
	      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
	      if (d3.event.changedTouches) {
	        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
	      } else {
	        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
	      }
	      g.interrupt().selectAll("*").interrupt();
	      if (dragging) {
	        origin[0] = xExtent[0] - origin[0];
	        origin[1] = yExtent[0] - origin[1];
	      } else if (resizing) {
	        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
	        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
	        origin[0] = xExtent[ex];
	        origin[1] = yExtent[ey];
	      } else if (d3.event.altKey) center = origin.slice();
	      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
	      d3.select("body").style("cursor", eventTarget.style("cursor"));
	      event_({
	        type: "brushstart"
	      });
	      brushmove();
	      function keydown() {
	        if (d3.event.keyCode == 32) {
	          if (!dragging) {
	            center = null;
	            origin[0] -= xExtent[1];
	            origin[1] -= yExtent[1];
	            dragging = 2;
	          }
	          d3_eventPreventDefault();
	        }
	      }
	      function keyup() {
	        if (d3.event.keyCode == 32 && dragging == 2) {
	          origin[0] += xExtent[1];
	          origin[1] += yExtent[1];
	          dragging = 0;
	          d3_eventPreventDefault();
	        }
	      }
	      function brushmove() {
	        var point = d3.mouse(target), moved = false;
	        if (offset) {
	          point[0] += offset[0];
	          point[1] += offset[1];
	        }
	        if (!dragging) {
	          if (d3.event.altKey) {
	            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
	            origin[0] = xExtent[+(point[0] < center[0])];
	            origin[1] = yExtent[+(point[1] < center[1])];
	          } else center = null;
	        }
	        if (resizingX && move1(point, x, 0)) {
	          redrawX(g);
	          moved = true;
	        }
	        if (resizingY && move1(point, y, 1)) {
	          redrawY(g);
	          moved = true;
	        }
	        if (moved) {
	          redraw(g);
	          event_({
	            type: "brush",
	            mode: dragging ? "move" : "resize"
	          });
	        }
	      }
	      function move1(point, scale, i) {
	        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
	        if (dragging) {
	          r0 -= position;
	          r1 -= size + position;
	        }
	        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
	        if (dragging) {
	          max = (min += position) + size;
	        } else {
	          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
	          if (position < min) {
	            max = min;
	            min = position;
	          } else {
	            max = position;
	          }
	        }
	        if (extent[0] != min || extent[1] != max) {
	          if (i) yExtentDomain = null; else xExtentDomain = null;
	          extent[0] = min;
	          extent[1] = max;
	          return true;
	        }
	      }
	      function brushend() {
	        brushmove();
	        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
	        d3.select("body").style("cursor", null);
	        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
	        dragRestore();
	        event_({
	          type: "brushend"
	        });
	      }
	    }
	    brush.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.clamp = function(z) {
	      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
	      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
	      return brush;
	    };
	    brush.extent = function(z) {
	      var x0, x1, y0, y1, t;
	      if (!arguments.length) {
	        if (x) {
	          if (xExtentDomain) {
	            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
	          } else {
	            x0 = xExtent[0], x1 = xExtent[1];
	            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
	            if (x1 < x0) t = x0, x0 = x1, x1 = t;
	          }
	        }
	        if (y) {
	          if (yExtentDomain) {
	            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
	          } else {
	            y0 = yExtent[0], y1 = yExtent[1];
	            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
	            if (y1 < y0) t = y0, y0 = y1, y1 = t;
	          }
	        }
	        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
	      }
	      if (x) {
	        x0 = z[0], x1 = z[1];
	        if (y) x0 = x0[0], x1 = x1[0];
	        xExtentDomain = [ x0, x1 ];
	        if (x.invert) x0 = x(x0), x1 = x(x1);
	        if (x1 < x0) t = x0, x0 = x1, x1 = t;
	        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
	      }
	      if (y) {
	        y0 = z[0], y1 = z[1];
	        if (x) y0 = y0[1], y1 = y1[1];
	        yExtentDomain = [ y0, y1 ];
	        if (y.invert) y0 = y(y0), y1 = y(y1);
	        if (y1 < y0) t = y0, y0 = y1, y1 = t;
	        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
	      }
	      return brush;
	    };
	    brush.clear = function() {
	      if (!brush.empty()) {
	        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
	        xExtentDomain = yExtentDomain = null;
	      }
	      return brush;
	    };
	    brush.empty = function() {
	      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
	    };
	    return d3.rebind(brush, event, "on");
	  };
	  var d3_svg_brushCursor = {
	    n: "ns-resize",
	    e: "ew-resize",
	    s: "ns-resize",
	    w: "ew-resize",
	    nw: "nwse-resize",
	    ne: "nesw-resize",
	    se: "nwse-resize",
	    sw: "nesw-resize"
	  };
	  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
	  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
	  var d3_time_formatUtc = d3_time_format.utc;
	  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
	  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
	  function d3_time_formatIsoNative(date) {
	    return date.toISOString();
	  }
	  d3_time_formatIsoNative.parse = function(string) {
	    var date = new Date(string);
	    return isNaN(date) ? null : date;
	  };
	  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
	  d3_time.second = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 1e3) * 1e3);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
	  }, function(date) {
	    return date.getSeconds();
	  });
	  d3_time.seconds = d3_time.second.range;
	  d3_time.seconds.utc = d3_time.second.utc.range;
	  d3_time.minute = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 6e4) * 6e4);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
	  }, function(date) {
	    return date.getMinutes();
	  });
	  d3_time.minutes = d3_time.minute.range;
	  d3_time.minutes.utc = d3_time.minute.utc.range;
	  d3_time.hour = d3_time_interval(function(date) {
	    var timezone = date.getTimezoneOffset() / 60;
	    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
	  }, function(date) {
	    return date.getHours();
	  });
	  d3_time.hours = d3_time.hour.range;
	  d3_time.hours.utc = d3_time.hour.utc.range;
	  d3_time.month = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setDate(1);
	    return date;
	  }, function(date, offset) {
	    date.setMonth(date.getMonth() + offset);
	  }, function(date) {
	    return date.getMonth();
	  });
	  d3_time.months = d3_time.month.range;
	  d3_time.months.utc = d3_time.month.utc.range;
	  function d3_time_scale(linear, methods, format) {
	    function scale(x) {
	      return linear(x);
	    }
	    scale.invert = function(x) {
	      return d3_time_scaleDate(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
	      linear.domain(x);
	      return scale;
	    };
	    function tickMethod(extent, count) {
	      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
	      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
	        return d / 31536e6;
	      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
	    }
	    scale.nice = function(interval, skip) {
	      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
	      if (method) interval = method[0], skip = method[1];
	      function skipped(date) {
	        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
	      }
	      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
	        floor: function(date) {
	          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
	          return date;
	        },
	        ceil: function(date) {
	          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
	          return date;
	        }
	      } : interval));
	    };
	    scale.ticks = function(interval, skip) {
	      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
	        range: interval
	      }, skip ];
	      if (method) interval = method[0], skip = method[1];
	      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
	    };
	    scale.tickFormat = function() {
	      return format;
	    };
	    scale.copy = function() {
	      return d3_time_scale(linear.copy(), methods, format);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_time_scaleDate(t) {
	    return new Date(t);
	  }
	  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
	  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
	  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
	    return d.getMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getHours();
	  } ], [ "%a %d", function(d) {
	    return d.getDay() && d.getDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getMonth();
	  } ], [ "%Y", d3_true ] ]);
	  var d3_time_scaleMilliseconds = {
	    range: function(start, stop, step) {
	      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
	    },
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  d3_time_scaleLocalMethods.year = d3_time.year;
	  d3_time.scale = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
	  };
	  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
	    return [ m[0].utc, m[1] ];
	  });
	  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
	    return d.getUTCMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getUTCSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getUTCMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getUTCHours();
	  } ], [ "%a %d", function(d) {
	    return d.getUTCDay() && d.getUTCDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getUTCDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getUTCMonth();
	  } ], [ "%Y", d3_true ] ]);
	  d3_time_scaleUtcMethods.year = d3_time.year.utc;
	  d3_time.scale.utc = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
	  };
	  d3.text = d3_xhrType(function(request) {
	    return request.responseText;
	  });
	  d3.json = function(url, callback) {
	    return d3_xhr(url, "application/json", d3_json, callback);
	  };
	  function d3_json(request) {
	    return JSON.parse(request.responseText);
	  }
	  d3.html = function(url, callback) {
	    return d3_xhr(url, "text/html", d3_html, callback);
	  };
	  function d3_html(request) {
	    var range = d3_document.createRange();
	    range.selectNode(d3_document.body);
	    return range.createContextualFragment(request.responseText);
	  }
	  d3.xml = d3_xhrType(function(request) {
	    return request.responseXML;
	  });
	  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === "object" && module.exports) module.exports = d3; else this.d3 = d3;
	}();

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Buffer) {//     uuid.js
	//
	//     Copyright (c) 2010-2012 Robert Kieffer
	//     MIT License - http://opensource.org/licenses/mit-license.php

	/*global window, require, define */
	(function(_window) {
	  'use strict';

	  // Unique ID creation requires a high quality random # generator.  We feature
	  // detect to determine the best RNG source, normalizing to a function that
	  // returns 128-bits of randomness, since that's what's usually required
	  var _rng, _mathRNG, _nodeRNG, _whatwgRNG, _previousRoot;

	  function setupBrowser() {
	    // Allow for MSIE11 msCrypto
	    var _crypto = _window.crypto || _window.msCrypto;

	    if (!_rng && _crypto && _crypto.getRandomValues) {
	      // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto
	      //
	      // Moderately fast, high quality
	      try {
	        var _rnds8 = new Uint8Array(16);
	        _whatwgRNG = _rng = function whatwgRNG() {
	          _crypto.getRandomValues(_rnds8);
	          return _rnds8;
	        };
	        _rng();
	      } catch(e) {}
	    }

	    if (!_rng) {
	      // Math.random()-based (RNG)
	      //
	      // If all else fails, use Math.random().  It's fast, but is of unspecified
	      // quality.
	      var  _rnds = new Array(16);
	      _mathRNG = _rng = function() {
	        for (var i = 0, r; i < 16; i++) {
	          if ((i & 0x03) === 0) { r = Math.random() * 0x100000000; }
	          _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
	        }

	        return _rnds;
	      };
	      if ('undefined' !== typeof console && console.warn) {
	        console.warn("[SECURITY] node-uuid: crypto not usable, falling back to insecure Math.random()");
	      }
	    }
	  }

	  function setupNode() {
	    // Node.js crypto-based RNG - http://nodejs.org/docs/v0.6.2/api/crypto.html
	    //
	    // Moderately fast, high quality
	    if (true) {
	      try {
	        var _rb = __webpack_require__(206).randomBytes;
	        _nodeRNG = _rng = _rb && function() {return _rb(16);};
	        _rng();
	      } catch(e) {}
	    }
	  }

	  if (_window) {
	    setupBrowser();
	  } else {
	    setupNode();
	  }

	  // Buffer class to use
	  var BufferClass = ('function' === typeof Buffer) ? Buffer : Array;

	  // Maps for number <-> hex string conversion
	  var _byteToHex = [];
	  var _hexToByte = {};
	  for (var i = 0; i < 256; i++) {
	    _byteToHex[i] = (i + 0x100).toString(16).substr(1);
	    _hexToByte[_byteToHex[i]] = i;
	  }

	  // **`parse()` - Parse a UUID into it's component bytes**
	  function parse(s, buf, offset) {
	    var i = (buf && offset) || 0, ii = 0;

	    buf = buf || [];
	    s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
	      if (ii < 16) { // Don't overflow!
	        buf[i + ii++] = _hexToByte[oct];
	      }
	    });

	    // Zero out remaining bytes if string was short
	    while (ii < 16) {
	      buf[i + ii++] = 0;
	    }

	    return buf;
	  }

	  // **`unparse()` - Convert UUID byte array (ala parse()) into a string**
	  function unparse(buf, offset) {
	    var i = offset || 0, bth = _byteToHex;
	    return  bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] + '-' +
	            bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]] +
	            bth[buf[i++]] + bth[buf[i++]];
	  }

	  // **`v1()` - Generate time-based UUID**
	  //
	  // Inspired by https://github.com/LiosK/UUID.js
	  // and http://docs.python.org/library/uuid.html

	  // random #'s we need to init node and clockseq
	  var _seedBytes = _rng();

	  // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
	  var _nodeId = [
	    _seedBytes[0] | 0x01,
	    _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]
	  ];

	  // Per 4.2.2, randomize (14 bit) clockseq
	  var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

	  // Previous uuid creation time
	  var _lastMSecs = 0, _lastNSecs = 0;

	  // See https://github.com/broofa/node-uuid for API details
	  function v1(options, buf, offset) {
	    var i = buf && offset || 0;
	    var b = buf || [];

	    options = options || {};

	    var clockseq = (options.clockseq != null) ? options.clockseq : _clockseq;

	    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
	    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
	    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
	    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
	    var msecs = (options.msecs != null) ? options.msecs : new Date().getTime();

	    // Per 4.2.1.2, use count of uuid's generated during the current clock
	    // cycle to simulate higher resolution clock
	    var nsecs = (options.nsecs != null) ? options.nsecs : _lastNSecs + 1;

	    // Time since last uuid creation (in msecs)
	    var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

	    // Per 4.2.1.2, Bump clockseq on clock regression
	    if (dt < 0 && options.clockseq == null) {
	      clockseq = clockseq + 1 & 0x3fff;
	    }

	    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
	    // time interval
	    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs == null) {
	      nsecs = 0;
	    }

	    // Per 4.2.1.2 Throw error if too many uuids are requested
	    if (nsecs >= 10000) {
	      throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
	    }

	    _lastMSecs = msecs;
	    _lastNSecs = nsecs;
	    _clockseq = clockseq;

	    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
	    msecs += 12219292800000;

	    // `time_low`
	    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
	    b[i++] = tl >>> 24 & 0xff;
	    b[i++] = tl >>> 16 & 0xff;
	    b[i++] = tl >>> 8 & 0xff;
	    b[i++] = tl & 0xff;

	    // `time_mid`
	    var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
	    b[i++] = tmh >>> 8 & 0xff;
	    b[i++] = tmh & 0xff;

	    // `time_high_and_version`
	    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
	    b[i++] = tmh >>> 16 & 0xff;

	    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
	    b[i++] = clockseq >>> 8 | 0x80;

	    // `clock_seq_low`
	    b[i++] = clockseq & 0xff;

	    // `node`
	    var node = options.node || _nodeId;
	    for (var n = 0; n < 6; n++) {
	      b[i + n] = node[n];
	    }

	    return buf ? buf : unparse(b);
	  }

	  // **`v4()` - Generate random UUID**

	  // See https://github.com/broofa/node-uuid for API details
	  function v4(options, buf, offset) {
	    // Deprecated - 'format' argument, as supported in v1.2
	    var i = buf && offset || 0;

	    if (typeof(options) === 'string') {
	      buf = (options === 'binary') ? new BufferClass(16) : null;
	      options = null;
	    }
	    options = options || {};

	    var rnds = options.random || (options.rng || _rng)();

	    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
	    rnds[6] = (rnds[6] & 0x0f) | 0x40;
	    rnds[8] = (rnds[8] & 0x3f) | 0x80;

	    // Copy bytes to buffer, if provided
	    if (buf) {
	      for (var ii = 0; ii < 16; ii++) {
	        buf[i + ii] = rnds[ii];
	      }
	    }

	    return buf || unparse(rnds);
	  }

	  // Export public API
	  var uuid = v4;
	  uuid.v1 = v1;
	  uuid.v4 = v4;
	  uuid.parse = parse;
	  uuid.unparse = unparse;
	  uuid.BufferClass = BufferClass;
	  uuid._rng = _rng;
	  uuid._mathRNG = _mathRNG;
	  uuid._nodeRNG = _nodeRNG;
	  uuid._whatwgRNG = _whatwgRNG;

	  if (('undefined' !== typeof module) && module.exports) {
	    // Publish as node.js module
	    module.exports = uuid;
	  } else if (true) {
	    // Publish as AMD module
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {return uuid;}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


	  } else {
	    // Publish as global (in browsers)
	    _previousRoot = _window.uuid;

	    // **`noConflict()` - (browser only) to reset global 'uuid' var**
	    uuid.noConflict = function() {
	      _window.uuid = _previousRoot;
	      return uuid;
	    };

	    _window.uuid = uuid;
	  }
	})('undefined' !== typeof window ? window : null);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(202).Buffer))

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(203)
	var ieee754 = __webpack_require__(204)
	var isArray = __webpack_require__(205)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(202).Buffer, (function() { return this; }())))

/***/ },
/* 203 */
/***/ function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}

	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}

	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)

	  arr = new Arr(len * 3 / 4 - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ },
/* 204 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 205 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(207)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(209)

	exports.createHmac = __webpack_require__(221)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(222)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync


	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createCipher'
	, 'createCipheriv'
	, 'createDecipher'
	, 'createDecipheriv'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(202).Buffer))

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(208)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(202).Buffer))

/***/ },
/* 208 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(210)

	var md5 = toConstructor(__webpack_require__(218))
	var rmd160 = toConstructor(__webpack_require__(220))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(202).Buffer))

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(202).Buffer
	var Hash   = __webpack_require__(211)(Buffer)

	exports.sha1 = __webpack_require__(212)(Buffer, Hash)
	exports.sha256 = __webpack_require__(216)(Buffer, Hash)
	exports.sha512 = __webpack_require__(217)(Buffer, Hash)


/***/ },
/* 211 */
/***/ function(module, exports) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(213).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(214);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(215);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(34)))

/***/ },
/* 214 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 215 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(213).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(213).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(219);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(202).Buffer))

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(202).Buffer))

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(209)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(202).Buffer))

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(223)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(202).Buffer))

/***/ },
/* 224 */
/***/ function(module, exports) {

	/**
	 * List of class names to be used for SVG components
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  // Class for container which contains everything
	  ROOT_CLASS: 'workbenchRootSvg',

	  /**
	   *Class for all containers which are supposed to contain a single image. Such a group contains three children:
	   * - UNDER_CHILD_CLASS with everything that should be displayed under (in z-stack terms) the image such as the border
	   * - IMAGE CLASS the image itself,
	   * - OVER_CHILD_CLASS with everything that should be above the image (again, above in the z-stack) such as annotations
	   */
	  CHILD_GROUP_CLASS: 'childGroup',
	  // Stuff that should appear under the child goes in this group
	  UNDER_CHILD_CLASS: 'underChild',
	  // The image element itself goes here
	  IMAGE_CLASS: 'image',
	  // Stuff that should be drawn over the child goes here
	  OVER_CHILD_CLASS: 'overChild',

	  // Stuff in the UNDER_CHILD_CLASS
	  // Class for the border (a rect)
	  BORDER_CLASS: 'border',
	  // The textPath along which the name is drawn (for overflow reasons)
	  NAME_PATH_CLASS: 'namePath',
	  // The actual <text> element containing the name for the image
	  NAME_CLASS: 'nameText',
	  // <rect> which when dragged resizes an image
	  RESIZE_CLASS: 'imageGroupResize',
	  // <rect> which, when dragged, moves an image
	  MOVE_CLASS: 'imageGroupMove',
	  // End UNDER_CHILD_CLASS

	  OBJECTS_CONTAINER_CLASS: 'objectsContainer',

	  ACTIVE_TOOL_DISPLAY_CLASS: 'activeToolDisplay',

	  // Stuff in OVER_CHILD_CLASS
	  ANNOTATIONS_CONTAINER_CLASS: 'annotationsContainer',
	  POI_CLASS: "pointOfInterest",
	  PATH_CLASS: 'path',
	  ROI_CLASS: 'regionOfInterest',
	  AOI_CLASS: 'angleOfInterest'
	};
	module.exports = exports['default'];

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Popup for the LineMeasure tool.
	 *
	 * Created by dmitri on 30/09/15.
	 */
	"use strict";

	var _get = __webpack_require__(3)["default"];

	var _inherits = __webpack_require__(19)["default"];

	var _createClass = __webpack_require__(28)["default"];

	var _classCallCheck = __webpack_require__(31)["default"];

	var _interopRequireDefault = __webpack_require__(1)["default"];

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _implLineMeasure = __webpack_require__(199);

	var _implLineMeasure2 = _interopRequireDefault(_implLineMeasure);

	var _componentsBenchActiveToolTooltip = __webpack_require__(226);

	var _componentsBenchActiveToolTooltip2 = _interopRequireDefault(_componentsBenchActiveToolTooltip);

	var _componentsCommonTagInput = __webpack_require__(228);

	var _componentsCommonTagInput2 = _interopRequireDefault(_componentsCommonTagInput);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var _constantsStyles = __webpack_require__(227);

	var _constantsStyles2 = _interopRequireDefault(_constantsStyles);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _utilsD3ViewUtils = __webpack_require__(253);

	var _utilsD3ViewUtils2 = _interopRequireDefault(_utilsD3ViewUtils);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _confToolsConf = __webpack_require__(257);

	var _confToolsConf2 = _interopRequireDefault(_confToolsConf);

	var LineMeasurePopup = (function (_React$Component) {
	  _inherits(LineMeasurePopup, _React$Component);

	  function LineMeasurePopup(props) {
	    var _this = this;

	    _classCallCheck(this, LineMeasurePopup);

	    _get(Object.getPrototypeOf(LineMeasurePopup.prototype), "constructor", this).call(this, props);

	    this.containerStyle = {
	      width: '200px',
	      display: "flex",
	      flexDirection: "column",
	      borderStyle: "solid",
	      borderWidth: "1px",
	      borderColor: "black",
	      padding: "5px",
	      color: 'black',
	      marginTop: '5px'
	    };

	    this.titleBarStyle = {
	      display: 'flex',
	      width: '198px',
	      flexDirection: 'row',
	      justifyContent: 'space-between',
	      backgroundColor: 'whitesmoke',
	      borderStyle: "solid",
	      borderWidth: "0 0 1px 0",
	      borderColor: "black",
	      padding: 0,
	      margin: 0,
	      position: 'relative',
	      top: '-5px',
	      left: '-5px'
	    };

	    this.titleStyle = {
	      marginLeft: '5px',
	      WebkitUserSelect: 'none',
	      MozUserSelect: 'none',
	      MsUserSelect: 'none',
	      userSelect: 'none',
	      cursor: 'default'
	    };

	    this.pixelValueDisplayStyle = JSON.parse(JSON.stringify(_constantsStyles2["default"].buttonSubText));
	    this.pixelValueDisplayStyle.display = 'relative';
	    this.pixelValueDisplayStyle.top = '-10px';

	    this.iconStyle = {
	      cursor: 'pointer'
	    };

	    this.windowBodyStyle = {
	      display: ''
	    };

	    this.optionStyle = {
	      color: '#2f4f4f'
	    };

	    this.horizontalContainerStyle = {
	      display: "flex",
	      flexDirection: "row",
	      maxWidth: '100%',
	      paddingBottom: '3px'
	    };

	    this.textAreaStyle = {
	      width: '100%'
	      // height: '30px'
	    };

	    this.headerStyle = {
	      display: 'flex',
	      alignItems: 'baseline'
	    };

	    this.headerTextStyle = {
	      fontSize: "10px"
	    };

	    this.tagListStyle = {
	      maxHeight: '30px',
	      overflow: 'auto'
	    };

	    this.imageNameTextStyle = {
	      fontSize: "10px",
	      fontWeight: 'bold',
	      charSet: "utf8"
	    };

	    this.nameAssistanceButtonStyle = {
	      display: 'flex',
	      justifyContent: 'flex-end',
	      fontSize: "8px",
	      cursor: 'pointer'
	    };

	    this.tableCellStyle = {
	      fontSize: '10px',
	      margin: '1px 2px',
	      padding: 0
	    };

	    this.scrollingTableStyle = JSON.parse(JSON.stringify(_constantsStyles2["default"].compact));
	    this.scrollingTableStyle.maxHeight = '200px';
	    this.scrollingTableStyle.overflow = 'auto';

	    this.measureStandardPanelStyle = {
	      padding: '5px 5px 5px 5px',
	      margin: 0,
	      display: 'none'
	    };

	    this.currentMeasurePanelStyle = {
	      padding: '5px 5px 5px 5px',
	      margin: 0,
	      display: ''
	    };

	    this._toolDataUpdated = function () {
	      var displayData = function displayData() {
	        return _this.getMeasures();
	      };
	      return displayData.apply(_this);
	    };

	    this._forceRender = function () {
	      var update = function update() {
	        return _this.setState({});
	      };
	      return update.apply(_this);
	    };

	    this.state = {
	      measures: [],
	      scales: {},
	      scale: "null",
	      name: '',
	      prefix: '',
	      index: 1,
	      imageName: '',
	      lengthInPx: 0,
	      refName: null,
	      mmPerPx: null,
	      mode: 'measure',
	      nameAssistanceFillMode: 0,
	      tags: [],
	      inputTag: false,
	      position: {
	        top: null,
	        left: null
	      }
	    };
	  }

	  _createClass(LineMeasurePopup, [{
	    key: "activateTagInput",
	    value: function activateTagInput() {
	      var box = _react2["default"].findDOMNode(this.refs.tagHelp).getBoundingClientRect();
	      this.setState({ inputTag: true, position: { top: box.top, left: box.left } });
	    }
	  }, {
	    key: "getName",
	    value: function getName() {
	      if (this.state.nameAssistanceFillMode === 0) {
	        return this.state.name;
	      } else if (this.state.nameAssistanceFillMode === 2) {
	        return this.state.prefix + ' ' + this.state.index;
	      } else {
	        console.error('No naming handler for assistance fill mode ' + this.state.nameAssistanceFillMode);
	        return this.state.name;
	      }
	    }
	  }, {
	    key: "getMeasures",
	    value: function getMeasures() {
	      var self = this;
	      var name = this.getName();
	      var newTempMeasures = [];
	      var scales = {};
	      var currentTempMeasures = JSON.parse(JSON.stringify(this.state.measures));
	      _d32["default"].selectAll('.' + _implLineMeasure2["default"].classes().selfGroupSvgClass).each(function (d, i) {
	        d.lengthInPx = Math.sqrt(Math.pow(d.x2 - d.x1, 2) + Math.pow(d.y2 - d.y1, 2));
	        d.imageName = self.props.metastore.getMetadataAbout(d.image).name;
	        scales = _.extend(scales, d.scales);
	        if (i < currentTempMeasures.length) {
	          newTempMeasures.push(d);
	        } else {
	          d.name = name;
	          newTempMeasures.push(d);
	        }
	      });

	      newTempMeasures = _.sortBy(newTempMeasures, _utilsGlobals2["default"].getCreationDate);

	      var lastMeasure = newTempMeasures[newTempMeasures.length - 1];
	      var imageName = this.state.imageName;

	      var px = 0;
	      var mmPerPx = null;
	      var scaleDisplay = null;
	      if (lastMeasure) {
	        var imageData = this.props.metastore.getMetadataAbout(lastMeasure.image);
	        imageName = imageData.name;
	        px = Math.sqrt(Math.pow(lastMeasure.x2 - lastMeasure.x1, 2) + Math.pow(lastMeasure.y2 - lastMeasure.y1, 2));
	        mmPerPx = lastMeasure.mmPerPixel;
	        scaleDisplay = lastMeasure.scale;
	      }

	      console.log(JSON.stringify(scales));

	      this.setState({
	        measures: newTempMeasures,
	        scales: scales,
	        scale: scaleDisplay ? scaleDisplay : 'null',
	        imageName: imageName,
	        lengthInPx: px,
	        mmPerPx: mmPerPx
	      });
	    }
	  }, {
	    key: "setScale",
	    value: function setScale(uid) {
	      //console.log("Set scale " + event.target.value);
	      this.setState({ scale: uid });
	    }
	  }, {
	    key: "minimize",
	    value: function minimize() {
	      this.windowBodyStyle.display = this.windowBodyStyle.display == 'none' ? '' : 'none';
	      this.setState({});
	    }
	  }, {
	    key: "getScaleName",
	    value: function getScaleName() {
	      if (this.state.scale === 'null') {
	        return this.props.userstore.getText('nothing');
	      }
	      if (this.state.scale === 'exif') {
	        return 'EXIF';
	      }
	      if (this.state.scales[this.state.scale]) {
	        return this.state.scales[this.state.scale].name;
	      }
	    }
	  }, {
	    key: "cycleAssistFillModes",
	    value: function cycleAssistFillModes() {
	      if (this.state.nameAssistanceFillMode === 0) {
	        this.setState({ nameAssistanceFillMode: 2, prefix: this.state.name });
	      } else {
	        this.setState({ nameAssistanceFillMode: 0, name: this.state.prefix });
	      }
	    }
	  }, {
	    key: "onNameChange",
	    value: function onNameChange(event) {
	      // this.nameChanged(event.target.value);
	      this.setState({ name: event.target.value });
	    }
	  }, {
	    key: "onIndexChange",
	    value: function onIndexChange(event) {
	      // this.nameChanged(this.state.prefix + ' ' + event.target.value);
	      this.setState({ index: event.target.value });
	    }
	  }, {
	    key: "onPrefixChange",
	    value: function onPrefixChange(event) {
	      // this.nameChanged(event.target.value + ' ' + this.state.index);
	      this.setState({ prefix: event.target.value });
	    }
	  }, {
	    key: "nameChanged",
	    value: function nameChanged(name) {
	      var measures = this.state.measures;
	      if (this.state.measures.length > 0) {
	        measures[measures.length - 1].name = name;
	        _d32["default"].selectAll('#MEASURE-' + measures[measures.length - 1].uid).each(function (d) {
	          return d.name = name;
	        });
	      }
	      this.setState({
	        // name: name,
	        measures: measures });
	    }
	  }, {
	    key: "setMode",
	    value: function setMode(mode) {
	      if (mode === 'standard') {
	        if (this.state.measures.length > 0) {
	          var proceed = confirm(this.props.userstore.getText('unsavedChangesWillBeLost'));
	          if (proceed) {
	            window.setTimeout(_actionsToolActions2["default"].setTool.bind(null, _confToolsConf2["default"].newMeasureStandard.id), 10);
	          }
	        } else {
	          window.setTimeout(_actionsToolActions2["default"].setTool.bind(null, _confToolsConf2["default"].newMeasureStandard.id), 10);
	        }
	      } else {
	        this.setState({ mode: mode });
	      }
	    }
	  }, {
	    key: "getAssistFillModeDisplay",
	    value: function getAssistFillModeDisplay() {
	      switch (this.state.nameAssistanceFillMode) {
	        case 0:
	          return this.props.userstore.getText('manualInput');
	        case 1:
	          return this.props.userstore.getText('dictionary');
	        case 2:
	          return this.props.userstore.getText('titleAndNumber');
	        default:
	          return this.props.userstore.getText('error');
	      }
	    }
	  }, {
	    key: "save",
	    value: function save() {
	      for (var i = 0; i < this.state.measures.length; ++i) {
	        var measure = this.state.measures[i];
	        var path = [[measure.x1, measure.y1], [measure.x2, measure.y2]];
	        _utilsServiceMethods2["default"].createTrailOfInterest(measure.image, measure.lengthInPx, path, measure.name, this.saved.bind(this));
	      }
	      window.setTimeout(_actionsToolActions2["default"].reset, 10);

	      this.setState({
	        measures: [],
	        scales: {},
	        scale: 'null',
	        name: '',
	        imageName: '',
	        lengthInPx: 0,
	        mode: 'measure',
	        refName: null,
	        mmPerPx: null,
	        nameAssistanceFillMode: 0
	      });
	    }
	  }, {
	    key: "saved",
	    value: function saved(msg) {
	      if (msg.clientProcessError) {
	        alert('Technical problem while saving data : ' + JSON.stringify(msg));
	      } else {
	        // Save tags
	        var entityId = msg.data.id;
	        for (var i = 0; i < this.state.tags.length; ++i) {
	          var tag = this.state.tags[i];
	          _utilsServiceMethods2["default"].createAddTag(tag.key, tag.value, entityId);
	        }
	      }
	    }
	  }, {
	    key: "removeMeasure",
	    value: function removeMeasure(idx) {
	      var data = this.state.measures[idx];
	      _d32["default"].select('#MEASURE-' + data.id).remove();
	      window.setTimeout(_actionsToolActions2["default"].updateToolData.bind(null, null), 10);
	    }
	  }, {
	    key: "zoomOnMeasure",
	    value: function zoomOnMeasure(idx) {
	      var data = this.state.measures[idx];
	      _utilsD3ViewUtils2["default"].zoomToObjectBySelector('#MEASURE-' + data.id, this.props.viewstore.getView());
	    }
	  }, {
	    key: "editName",
	    value: function editName(idx) {
	      var data = this.state.measures[idx];

	      var name = prompt(this.props.userstore.getText('name'), data.name);
	      _d32["default"].selectAll('#MEASURE-' + data.id).each(function (d) {
	        d.name = name;
	      });
	      this._toolDataUpdated();
	    }
	  }, {
	    key: "getForm",
	    value: function getForm() {
	      if (this.state.nameAssistanceFillMode === 0) {
	        return _react2["default"].createElement(
	          "form",
	          { autoComplete: "on",
	            key: "noAssist",
	            onSubmit: this.saveAutofill.bind(this),
	            ref: "form" },
	          _react2["default"].createElement("input", { placeholder: this.props.userstore.getText('name'),
	            name: "name",
	            type: "text",
	            style: this.textAreaStyle,
	            onChange: this.onNameChange.bind(this),
	            value: this.state.name,
	            autoFocus: "true",
	            wrap: "hard" }),
	          _react2["default"].createElement("button", { type: "submit", ref: "autocompleteTrigger", style: { display: 'none' } })
	        );
	      } else if (this.state.nameAssistanceFillMode === 2) {
	        return _react2["default"].createElement(
	          "form",
	          { autoComplete: "on",
	            key: "nameAndIndex",
	            onSubmit: this.saveAutofill.bind(this),
	            ref: "form" },
	          _react2["default"].createElement("input", { placeholder: this.props.userstore.getText('name'),
	            name: "name",
	            type: "text",
	            style: this.textAreaStyle,
	            onChange: this.onPrefixChange.bind(this),
	            value: this.state.prefix,
	            autoFocus: "true",
	            wrap: "hard" }),
	          _react2["default"].createElement("input", { autoComplete: "off",
	            name: "index",
	            type: "number",
	            style: this.textAreaStyle,
	            onChange: this.onIndexChange.bind(this),
	            value: this.state.index,
	            autoFocus: "true",
	            wrap: "hard" }),
	          _react2["default"].createElement("button", { type: "submit", ref: "autocompleteTrigger", style: { display: 'none' } })
	        );
	      } else {
	        return null;
	      }
	    }
	  }, {
	    key: "addTag",
	    value: function addTag(entity, key, value) {
	      var tags = JSON.parse(JSON.stringify(this.state.tags));
	      tags.push({ key: key, value: value });
	      this.setState({ tags: tags });
	    }
	  }, {
	    key: "displayTag",
	    value: function displayTag(tag, idx) {
	      var displayName = tag.key;
	      if (tag.value) {
	        displayName = displayName + ' : ' + tag.value;
	      }
	      return _react2["default"].createElement(
	        "a",
	        { key: 'TAG-' + idx,
	          style: _constantsStyles2["default"].tag,
	          className: 'ui tag label' },
	        displayName
	      );
	    }
	  }, {
	    key: "updataPopups",
	    value: function updataPopups() {
	      $(_react2["default"].findDOMNode(this.refs.help)).popup({
	        popup: $(_react2["default"].findDOMNode(this.refs.tooltip)),
	        target: $(_react2["default"].findDOMNode(this.refs.container)),
	        position: 'left center'
	      });

	      $(_react2["default"].findDOMNode(this.refs.tagHelp)).popup();
	      $(_react2["default"].findDOMNode(this.refs.activateTag)).popup();
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.props.userstore.addLanguageChangeListener(this._forceRender);
	      this.props.toolstore.addToolDataChangeListener(this._toolDataUpdated);
	      this.updataPopups();
	    }
	  }, {
	    key: "componentWillUpdate",
	    value: function componentWillUpdate(nextProps, nextState) {
	      this.measureStandardPanelStyle.display = nextState.mode === 'standard' ? '' : 'none';
	      this.currentMeasurePanelStyle.display = nextState.mode === 'measure' ? '' : 'none';

	      if (nextState.nameAssistanceFillMode === 2) {
	        if (nextState.measures.length > 0) {
	          if (nextState.measures.length !== this.state.measures.length && this.state.measures.length !== 0) {
	            nextState.index++;
	          }

	          if (nextState.prefix !== this.state.prefix || nextState.index !== this.state.index) {
	            nextState.measures[nextState.measures.length - 1].name = nextState.prefix + ' ' + nextState.index;
	            _d32["default"].selectAll('#MEASURE-' + nextState.measures[nextState.measures.length - 1].uid).each(function (d) {
	              return d.name = nextState.prefix + ' ' + nextState.index;
	            });
	          }
	        }
	      } else if (nextState.nameAssistanceFillMode === 0) {
	        if (nextState.measures.length > 0 && (nextState.prefix !== this.state.prefix || nextState.index !== this.state.index)) {
	          nextState.measures[nextState.measures.length - 1].name = nextState.name;
	          _d32["default"].selectAll('#MEASURE-' + nextState.measures[nextState.measures.length - 1].uid).each(function (d) {
	            return d.name = nextState.name;
	          });
	        }
	      }
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.scale != prevState.scale) {
	        if (this.state.scale == "null") {
	          this.props.setScaleCallback(null);
	        } else {
	          this.props.setScaleCallback(this.state.scale);
	        }
	      }

	      this.updataPopups();

	      if (this.state.measures.length !== prevState.measures.length) {
	        $(_react2["default"].findDOMNode(this.refs.autocompleteTrigger)).click();
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.props.userstore.removeLanguageChangeListener(this._forceRender);
	      this.props.toolstore.removeToolDataChangeListener(this._toolDataUpdated);
	    }
	  }, {
	    key: "saveAutofill",
	    value: function saveAutofill(e) {
	      _utilsGlobals2["default"].saveAutofill(_react2["default"].findDOMNode(this.refs.form), this.saveAutofill.bind(this), e);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var self = this;

	      return _react2["default"].createElement(
	        "div",
	        { style: this.containerStyle, ref: "container", className: "ui segment" },
	        _react2["default"].createElement(
	          "div",
	          { className: "ui segment", style: this.titleBarStyle },
	          _react2["default"].createElement(
	            "div",
	            { style: this.titleStyle },
	            this.props.userstore.getText('newMeasure')
	          ),
	          _react2["default"].createElement(
	            "div",
	            null,
	            _react2["default"].createElement("i", { className: "ui blue help circle icon",
	              ref: "help",
	              style: this.iconStyle }),
	            _react2["default"].createElement("i", { className: "ui minus icon",
	              style: this.iconStyle,
	              onClick: this.minimize.bind(this) }),
	            _react2["default"].createElement("i", { className: "ui remove icon",
	              style: this.iconStyle,
	              onClick: _utilsGlobals2["default"].noActiveTool })
	          )
	        ),
	        _react2["default"].createElement(
	          "div",
	          { style: this.windowBodyStyle },
	          _react2["default"].createElement(_componentsBenchActiveToolTooltip2["default"], { userstore: this.props.userstore,
	            toolstore: this.props.toolstore,
	            ref: "tooltip",
	            cClasses: "ui popup" }),
	          _react2["default"].createElement(
	            "div",
	            { className: "ui segment", style: this.currentMeasurePanelStyle },
	            _react2["default"].createElement(
	              "div",
	              { className: "title", style: this.headerTextStyle },
	              this.props.userstore.getText('currentMeasure')
	            ),
	            _react2["default"].createElement(
	              "div",
	              { style: _constantsStyles2["default"].text },
	              _react2["default"].createElement(
	                "span",
	                { style: this.imageNameTextStyle },
	                this.state.imageName
	              )
	            ),
	            _react2["default"].createElement(
	              "div",
	              { className: "ui mini compact fluid button", onClick: this.setMode.bind(this, 'standard') },
	              _react2["default"].createElement(
	                "div",
	                null,
	                this.props.userstore.getText('measureStandard')
	              ),
	              _react2["default"].createElement(
	                "div",
	                { style: _constantsStyles2["default"].buttonSubText },
	                this.getScaleName()
	              )
	            ),
	            _react2["default"].createElement(
	              "a",
	              { className: "ui link text",
	                style: this.nameAssistanceButtonStyle,
	                onClick: this.cycleAssistFillModes.bind(this) },
	              this.getAssistFillModeDisplay()
	            ),
	            _react2["default"].createElement(
	              "div",
	              { style: this.horizontalContainerStyle },
	              this.getForm()
	            ),
	            _react2["default"].createElement(
	              "div",
	              { style: this.headerTextStyle },
	              this.props.userstore.getInterpolatedText('length', [this.state.mmPerPx ? (this.state.lengthInPx * this.state.mmPerPx).toFixed(2) : '**']),
	              "mm ",
	              _react2["default"].createElement(
	                "span",
	                { style: this.pixelValueDisplayStyle },
	                "(",
	                this.state.lengthInPx.toFixed(2),
	                " px)"
	              )
	            )
	          ),
	          _react2["default"].createElement(
	            "div",
	            { className: "ui segment", style: this.currentMeasurePanelStyle },
	            _react2["default"].createElement(
	              "div",
	              { className: "title", style: this.headerStyle },
	              _react2["default"].createElement(
	                "div",
	                { style: this.headerTextStyle },
	                this.props.userstore.getText('tags')
	              ),
	              _react2["default"].createElement("i", { className: "ui small blue help circle icon",
	                ref: "tagHelp",
	                "data-content": this.props.userstore.getText('autoTagTooltip'),
	                style: this.iconStyle })
	            ),
	            _react2["default"].createElement(
	              "div",
	              { className: "ui mini labels", style: this.tagListStyle },
	              this.state.tags.map(this.displayTag.bind(this)),
	              _react2["default"].createElement(
	                "div",
	                { className: "ui mini label basic positive button",
	                  ref: "activateTag",
	                  "data-content": this.props.userstore.getText('addATag'),
	                  onClick: this.activateTagInput.bind(this) },
	                _react2["default"].createElement(
	                  "i",
	                  { className: "icons" },
	                  _react2["default"].createElement("i", { className: "tag icon" }),
	                  _react2["default"].createElement("i", { className: "corner add icon" })
	                )
	              )
	            ),
	            this.state.inputTag ? _react2["default"].createElement(_componentsCommonTagInput2["default"], {
	              onTagSave: this.addTag.bind(this),
	              onClose: this.setState.bind(this, { inputTag: false }, null),
	              top: this.state.position.top + 10,
	              right: this.state.position.left - 50 }) : null
	          ),
	          _react2["default"].createElement(
	            "div",
	            { className: "ui segment", style: this.scrollingTableStyle },
	            _react2["default"].createElement(
	              "div",
	              { style: this.headerTextStyle },
	              this.props.userstore.getText('newMeasuresUnsaved')
	            ),
	            _react2["default"].createElement(
	              "table",
	              { className: "ui celled table", style: self.tableCellStyle },
	              _react2["default"].createElement(
	                "thead",
	                null,
	                _react2["default"].createElement(
	                  "tr",
	                  null,
	                  _react2["default"].createElement(
	                    "th",
	                    { style: self.tableCellStyle, className: "six wide" },
	                    this.props.userstore.getText('name')
	                  ),
	                  _react2["default"].createElement(
	                    "th",
	                    { style: self.tableCellStyle, className: "five wide" },
	                    this.props.userstore.getText('length')
	                  ),
	                  _react2["default"].createElement(
	                    "th",
	                    { style: self.tableCellStyle, className: "four wide" },
	                    this.props.userstore.getText('sheet')
	                  ),
	                  _react2["default"].createElement(
	                    "th",
	                    { style: self.tableCellStyle, className: "three wide" },
	                    this.props.userstore.getText('actions')
	                  )
	                )
	              ),
	              _react2["default"].createElement(
	                "tbody",
	                null,
	                _.sortBy(this.state.measures, _utilsGlobals2["default"].getCreationDate).reverse().map(function (m, idx) {
	                  return _react2["default"].createElement(
	                    "tr",
	                    { key: idx },
	                    _react2["default"].createElement(
	                      "td",
	                      { style: self.tableCellStyle, onClick: self.editName.bind(self, idx) },
	                      m.name
	                    ),
	                    _react2["default"].createElement(
	                      "td",
	                      { style: self.tableCellStyle },
	                      m.mmPerPixel ? (m.lengthInPx * m.mmPerPixel).toFixed(2) + '' + m.unit : m.lengthInPx.toFixed(2) + 'px'
	                    ),
	                    _react2["default"].createElement(
	                      "td",
	                      { style: self.tableCellStyle },
	                      m.imageName
	                    ),
	                    _react2["default"].createElement(
	                      "td",
	                      { style: self.tableCellStyle },
	                      _react2["default"].createElement("i", { style: _constantsStyles2["default"].noMargin, className: "ui remove icon", onClick: self.removeMeasure.bind(self, idx) }),
	                      _react2["default"].createElement("i", { style: _constantsStyles2["default"].noMargin, className: "ui eye icon", onClick: self.zoomOnMeasure.bind(self, idx) })
	                    )
	                  );
	                })
	              )
	            )
	          ),
	          _react2["default"].createElement(
	            "div",
	            null,
	            _react2["default"].createElement(
	              "button",
	              { className: "ui mini compact button", style: this.textStyle, onClick: _utilsGlobals2["default"].noActiveTool },
	              this.props.userstore.getText('cancel')
	            ),
	            _react2["default"].createElement(
	              "button",
	              { className: "ui compact green button", style: this.textStyle, onClick: this.save.bind(this) },
	              this.props.userstore.getText('save')
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return LineMeasurePopup;
	})(_react2["default"].Component);

	exports["default"] = LineMeasurePopup;
	module.exports = exports["default"];

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Location placeholder for a tool's tooltip.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _constantsStyles = __webpack_require__(227);

	var _constantsStyles2 = _interopRequireDefault(_constantsStyles);

	var ActiveToolTooltip = (function (_React$Component) {
	  _inherits(ActiveToolTooltip, _React$Component);

	  function ActiveToolTooltip(props) {
	    var _this = this;

	    _classCallCheck(this, ActiveToolTooltip);

	    _get(Object.getPrototypeOf(ActiveToolTooltip.prototype), 'constructor', this).call(this, props);

	    this._onTooltipContentUpdate = function () {
	      var setTooltipContent = function setTooltipContent() {
	        return _this.setState({ text: _this.props.toolstore.getTooltipContent() });
	      };
	      return setTooltipContent.apply(_this);
	    };

	    this.state = {
	      text: this.props.toolstore.getTooltipContent()
	    };
	  }

	  _createClass(ActiveToolTooltip, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.toolstore.addTooltipChangeListener(this._onTooltipContentUpdate);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {}
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.toolstore.removeTooltipChangeListener(this._onTooltipContentUpdate);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { style: _constantsStyles2['default'].compact,
	          className: this.props.cClasses ? this.props.cClasses : 'ui segment' },
	        _react2['default'].createElement(
	          'span',
	          { style: _constantsStyles2['default'].text },
	          this.state.text
	        )
	      );
	    }
	  }]);

	  return ActiveToolTooltip;
	})(_react2['default'].Component);

	exports['default'] = ActiveToolTooltip;
	module.exports = exports['default'];

/***/ },
/* 227 */
/***/ function(module, exports) {

	/**
	 * Some inline CSS styles commonly used throughout the application.
	 *
	 * Created by dmitri on 02/01/17.
	 */
	"use strict";

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  text: {
	    cursor: "default",
	    fontSize: "12px",
	    charSet: "utf8"
	  },

	  compact: {
	    padding: '5px 5px 5px 5px',
	    margin: 0
	  },

	  buttonSubText: {
	    fontSize: '10px'
	  },

	  noMargin: {
	    margin: 0
	  },

	  tag: {
	    marginBottom: 0,
	    marginRight: '1px',
	    paddingRight: '1em'
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Generic repositionable draggable auto-completing tag input component.
	 *
	 * Properties:
	 *  - embedded: Boolean toggles the draggable behaviour of this component (does not work properly). If false, this input is floating and draggable and top & right properties must be provided.
	 *  - entity: String (optional) UID of the entity to which the new tag should be associated. If not provided must provide an onTagSave callback
	 *  - onClose: Function to call when the user tries to close this input
	 *  - onTagSave: Function (optional) to call instead of saving this tag when user tries to save function(entity, key, value)
	 *  - top: Preferred location of the top of this input. Component may choose to move slightly above or below this value if screen size is deemed insufficient.
	 *  - right: Preferret location of the right of this input.
	 * Created by dmitri on 21/02/17.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _superagent = __webpack_require__(229);

	var _superagent2 = _interopRequireDefault(_superagent);

	var _superagentNoCache = __webpack_require__(235);

	var _superagentNoCache2 = _interopRequireDefault(_superagentNoCache);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var TagInput = (function (_React$Component) {
	  _inherits(TagInput, _React$Component);

	  function TagInput(props) {
	    _classCallCheck(this, TagInput);

	    _get(Object.getPrototypeOf(TagInput.prototype), 'constructor', this).call(this, props);

	    var top = this.props.top - 60;
	    if (top < 100) {
	      top = top + 60;
	    }

	    var position = 'fixed';
	    if (this.props.embedded) {
	      position = '';
	    }

	    this.componentStyle = {
	      display: 'flex',
	      position: position,
	      maxHeight: '60px',
	      top: top + 'px',
	      left: this.props.right + 'px'
	    };

	    this.labelStyle = {
	      display: 'flex',
	      backgroundColor: 'powderblue'
	    };

	    this.compactStyle = {
	      margin: 0,
	      padding: '2px 2px'
	    };

	    this.shortInputStyle = {
	      maxWidth: '70px'
	    };

	    this.actionColumnStyle = {
	      display: 'flex',
	      flexDirection: 'column'
	    };

	    this.state = {
	      tagKey: '',
	      tagValue: '',
	      invalid: '',
	      focus: 0,
	      keyProposals: [],
	      valueProposals: []
	    };
	  }

	  _createClass(TagInput, [{
	    key: 'stopEvent',
	    value: function stopEvent(e) {
	      e.preventDefault();
	      e.stopPropagation();
	    }
	  }, {
	    key: 'startDrag',
	    value: function startDrag(e) {
	      if (e.isDefaultPrevented() || e.isPropagationStopped() || this.props.embedded) {
	        return;
	      }
	      this.setState({ dragging: true });
	    }
	  }, {
	    key: 'dragging',
	    value: function dragging(e) {
	      if (this.state.dragging) {
	        if (e.clientX === 0 || e.clientY === 0) {
	          return;
	        }
	        this.componentStyle.top = e.clientY - 10;
	        this.componentStyle.left = e.clientX - 10;
	        this.setState({});
	      }
	    }
	  }, {
	    key: 'endDrag',
	    value: function endDrag() {
	      this.setState({ dragging: false });
	    }
	  }, {
	    key: 'setFocus',
	    value: function setFocus(focus) {
	      this.setState({ focus: focus });
	    }
	  }, {
	    key: 'selectProposal',
	    value: function selectProposal(index, proposal, newFocus) {
	      var state = JSON.parse(JSON.stringify(this.state));
	      if (index) {
	        state[index] = proposal;
	      }
	      if (newFocus === 0 || newFocus) {
	        state.focus = newFocus;
	      }

	      this.setState(state);
	    }
	  }, {
	    key: 'input',
	    value: function input(index, e) {
	      if (index === 'tagKey') {
	        if (e.target.value.lastIndexOf(':') != -1) {
	          // Move to value mode
	          this.setState({
	            focus: 1
	          });
	        } else {
	          this.setState({
	            tagKey: e.target.value
	          });
	        }
	      } else {
	        this.setState({
	          tagValue: e.target.value
	        });
	      }
	    }
	  }, {
	    key: 'detectEnter',
	    value: function detectEnter(e) {
	      if (e.target.code === 13) {
	        this.saveTag(this.props.entity, this.state.tagKey, this.state.tagValue);
	        e.preventDefault();
	        e.stopPropagation();
	      }
	    }
	  }, {
	    key: 'close',
	    value: function close() {
	      if (this.props.onClose) {
	        this.props.onClose();
	        return;
	      }
	      alert('Dev error: no closeCallback provided in TagInput properties.\nThis must be provided in parent component.');
	    }
	  }, {
	    key: 'saveTag',
	    value: function saveTag(entity, key, value) {
	      if (this.props.onTagSave) {
	        this.props.onTagSave(entity, key, value);
	        return;
	      }
	      if (key === '') {
	        this.setState({ invalid: 'error' });
	        return;
	      }
	      _utilsServiceMethods2['default'].createTagDefinition(key, value, this.tagDefReceived.bind(this, entity));
	    }
	  }, {
	    key: 'tagDefReceived',
	    value: function tagDefReceived(entity, msg) {
	      if (msg.clientProcessError) {
	        alert('Count not create new tag');
	        return;
	      }
	      _utilsServiceMethods2['default'].tagEntityWithTagId(msg.data.id, entity);
	    }
	  }, {
	    key: 'queryKeyProposals',
	    value: function queryKeyProposals(keyBegin) {
	      var _this = this;

	      _superagent2['default'].get(_confApplicationConfiguration2['default'].actions.tags.queryKey).query({ begin: keyBegin }).use(_superagentNoCache2['default']).end(function (err, res) {
	        if (err) {
	          console.warn('Could not retrive key proposals ' + err);
	        } else {
	          var response = JSON.parse(res.text);
	          console.log(res.text);
	          if (response.success) {
	            _this.setState({ keyProposals: response.results });
	          }
	        }
	      });
	    }
	  }, {
	    key: 'queryValueProposals',
	    value: function queryValueProposals(key, valueBegin) {
	      var _this2 = this;

	      _superagent2['default'].get(_confApplicationConfiguration2['default'].actions.tags.queryTag).query({ begin: valueBegin, key: key }).use(_superagentNoCache2['default']).end(function (err, res) {
	        if (err) {
	          console.warn('Could not retrive value proposals ' + err);
	        } else {
	          var response = JSON.parse(res.text);
	          if (response.success) {
	            _this2.setState({ valueProposals: response.results });
	          }
	        }
	      });
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {}
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.focus != this.state.focus || nextState.tagKey != this.state.tagKey || nextState.tagValue != this.state.tagValue) {
	        nextState.keyProposals = [];
	        nextState.valueProposals = [];
	      }

	      if (nextState.tagKey.length > 0) {
	        nextState.invalid = '';
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.focus === 0) {
	        if (this.state.tagKey !== prevState.tagKey && this.state.tagKey.length > 0) {
	          // query API for proposals only if at least 1 character entered
	          this.queryKeyProposals(this.state.tagKey);
	        }
	      } else if (this.state.focus === 1) {
	        if (this.state.tagValue !== prevState.tagValue || prevState.focus === 0) {
	          // query API for proposals
	          this.queryValueProposals(this.state.tagKey, this.state.tagValue);
	        }
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var self = this;
	      return _react2['default'].createElement(
	        'div',
	        { style: this.componentStyle },
	        _react2['default'].createElement(
	          'a',
	          { className: 'ui tiny tag label',
	            draggable: true,
	            onDragStart: this.startDrag.bind(this),
	            onDrag: this.dragging.bind(this),
	            onDragEnd: this.endDrag.bind(this),
	            style: this.labelStyle,
	            onKeyDown: this.detectEnter.bind(this) },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui search',
	              style: this.shortInputStyle,
	              key: 'searchKey',
	              draggable: true,
	              onDragStart: this.stopEvent.bind(this) },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui input ' + this.state.invalid },
	              _react2['default'].createElement('input', { type: 'text',
	                className: 'prompt',
	                style: this.shortInputStyle,
	                placeholder: 'descriptor',
	                value: this.state.tagKey,
	                onFocus: this.setFocus.bind(this, 0),
	                onChange: this.input.bind(this, 'tagKey') })
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'results ' + (this.state.focus === 0 ? 'transition visible' : '') },
	              this.state.keyProposals.map(function (p, idx) {
	                return _react2['default'].createElement(
	                  'a',
	                  { className: 'result',
	                    style: self.compactStyle,
	                    key: idx,
	                    value: p.name,
	                    onClick: self.setState.bind(self, { tagKey: p.name, focus: 1 }, null) },
	                  _react2['default'].createElement(
	                    'div',
	                    { className: 'content',
	                      style: self.compactStyle },
	                    _react2['default'].createElement(
	                      'div',
	                      { className: 'title',
	                        style: self.compactStyle },
	                      p.name
	                    )
	                  )
	                );
	              })
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui search',
	              style: this.shortInputStyle,
	              draggable: true,
	              onDragStart: this.stopEvent.bind(this),
	              key: 'searchValue' },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui input' },
	              _react2['default'].createElement('input', { type: 'text',
	                className: 'prompt',
	                style: this.shortInputStyle,
	                placeholder: 'value (optional)',
	                value: this.state.tagValue,
	                onFocus: this.setFocus.bind(this, 1),
	                onChange: this.input.bind(this, 'tagValue') })
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'results ' + (this.state.focus === 1 ? 'transition visible' : '') },
	              this.state.valueProposals.map(function (p, idx) {
	                return _react2['default'].createElement(
	                  'a',
	                  { className: 'result',
	                    style: self.compactStyle,
	                    key: idx,
	                    value: p.name,
	                    onClick: self.setState.bind(self, { tagValue: p.name, focus: -1 }, null) },
	                  _react2['default'].createElement(
	                    'div',
	                    { className: 'content', style: self.compactStyle },
	                    _react2['default'].createElement(
	                      'div',
	                      { className: 'title', style: self.compactStyle },
	                      p.name
	                    )
	                  )
	                );
	              })
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { style: this.actionColumnStyle },
	            _react2['default'].createElement('i', { className: 'ui large green icon checkmark',
	              draggable: true,
	              onDragStart: this.stopEvent.bind(this),
	              onClick: this.saveTag.bind(this, this.props.entity, this.state.tagKey, this.state.tagValue) }),
	            this.props.onClose ? _react2['default'].createElement('i', { className: 'ui large red icon remove',
	              draggable: true,
	              onDragStart: this.stopEvent.bind(this),
	              onClick: this.close.bind(this) }) : null
	          )
	        )
	      );
	    }
	  }]);

	  return TagInput;
	})(_react2['default'].Component);

	exports['default'] = TagInput;
	module.exports = exports['default'];

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var Emitter = __webpack_require__(230);
	var reduce = __webpack_require__(231);
	var requestBase = __webpack_require__(232);
	var isObject = __webpack_require__(233);

	/**
	 * Root reference for iframes.
	 */

	var root;
	if (typeof window !== 'undefined') { // Browser window
	  root = window;
	} else if (typeof self !== 'undefined') { // Web Worker
	  root = self;
	} else { // Other environments
	  root = this;
	}

	/**
	 * Noop.
	 */

	function noop(){};

	/**
	 * Check if `obj` is a host object,
	 * we don't want to serialize these :)
	 *
	 * TODO: future proof, move to compoent land
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */

	function isHost(obj) {
	  var str = {}.toString.call(obj);

	  switch (str) {
	    case '[object File]':
	    case '[object Blob]':
	    case '[object FormData]':
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Expose `request`.
	 */

	var request = module.exports = __webpack_require__(234).bind(null, Request);

	/**
	 * Determine XHR.
	 */

	request.getXHR = function () {
	  if (root.XMLHttpRequest
	      && (!root.location || 'file:' != root.location.protocol
	          || !root.ActiveXObject)) {
	    return new XMLHttpRequest;
	  } else {
	    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
	  }
	  return false;
	};

	/**
	 * Removes leading and trailing whitespace, added to support IE.
	 *
	 * @param {String} s
	 * @return {String}
	 * @api private
	 */

	var trim = ''.trim
	  ? function(s) { return s.trim(); }
	  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

	/**
	 * Serialize the given `obj`.
	 *
	 * @param {Object} obj
	 * @return {String}
	 * @api private
	 */

	function serialize(obj) {
	  if (!isObject(obj)) return obj;
	  var pairs = [];
	  for (var key in obj) {
	    if (null != obj[key]) {
	      pushEncodedKeyValuePair(pairs, key, obj[key]);
	        }
	      }
	  return pairs.join('&');
	}

	/**
	 * Helps 'serialize' with serializing arrays.
	 * Mutates the pairs array.
	 *
	 * @param {Array} pairs
	 * @param {String} key
	 * @param {Mixed} val
	 */

	function pushEncodedKeyValuePair(pairs, key, val) {
	  if (Array.isArray(val)) {
	    return val.forEach(function(v) {
	      pushEncodedKeyValuePair(pairs, key, v);
	    });
	  }
	  pairs.push(encodeURIComponent(key)
	    + '=' + encodeURIComponent(val));
	}

	/**
	 * Expose serialization method.
	 */

	 request.serializeObject = serialize;

	 /**
	  * Parse the given x-www-form-urlencoded `str`.
	  *
	  * @param {String} str
	  * @return {Object}
	  * @api private
	  */

	function parseString(str) {
	  var obj = {};
	  var pairs = str.split('&');
	  var parts;
	  var pair;

	  for (var i = 0, len = pairs.length; i < len; ++i) {
	    pair = pairs[i];
	    parts = pair.split('=');
	    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
	  }

	  return obj;
	}

	/**
	 * Expose parser.
	 */

	request.parseString = parseString;

	/**
	 * Default MIME type map.
	 *
	 *     superagent.types.xml = 'application/xml';
	 *
	 */

	request.types = {
	  html: 'text/html',
	  json: 'application/json',
	  xml: 'application/xml',
	  urlencoded: 'application/x-www-form-urlencoded',
	  'form': 'application/x-www-form-urlencoded',
	  'form-data': 'application/x-www-form-urlencoded'
	};

	/**
	 * Default serialization map.
	 *
	 *     superagent.serialize['application/xml'] = function(obj){
	 *       return 'generated xml here';
	 *     };
	 *
	 */

	 request.serialize = {
	   'application/x-www-form-urlencoded': serialize,
	   'application/json': JSON.stringify
	 };

	 /**
	  * Default parsers.
	  *
	  *     superagent.parse['application/xml'] = function(str){
	  *       return { object parsed from str };
	  *     };
	  *
	  */

	request.parse = {
	  'application/x-www-form-urlencoded': parseString,
	  'application/json': JSON.parse
	};

	/**
	 * Parse the given header `str` into
	 * an object containing the mapped fields.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */

	function parseHeader(str) {
	  var lines = str.split(/\r?\n/);
	  var fields = {};
	  var index;
	  var line;
	  var field;
	  var val;

	  lines.pop(); // trailing CRLF

	  for (var i = 0, len = lines.length; i < len; ++i) {
	    line = lines[i];
	    index = line.indexOf(':');
	    field = line.slice(0, index).toLowerCase();
	    val = trim(line.slice(index + 1));
	    fields[field] = val;
	  }

	  return fields;
	}

	/**
	 * Check if `mime` is json or has +json structured syntax suffix.
	 *
	 * @param {String} mime
	 * @return {Boolean}
	 * @api private
	 */

	function isJSON(mime) {
	  return /[\/+]json\b/.test(mime);
	}

	/**
	 * Return the mime type for the given `str`.
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */

	function type(str){
	  return str.split(/ *; */).shift();
	};

	/**
	 * Return header field parameters.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */

	function params(str){
	  return reduce(str.split(/ *; */), function(obj, str){
	    var parts = str.split(/ *= */)
	      , key = parts.shift()
	      , val = parts.shift();

	    if (key && val) obj[key] = val;
	    return obj;
	  }, {});
	};

	/**
	 * Initialize a new `Response` with the given `xhr`.
	 *
	 *  - set flags (.ok, .error, etc)
	 *  - parse header
	 *
	 * Examples:
	 *
	 *  Aliasing `superagent` as `request` is nice:
	 *
	 *      request = superagent;
	 *
	 *  We can use the promise-like API, or pass callbacks:
	 *
	 *      request.get('/').end(function(res){});
	 *      request.get('/', function(res){});
	 *
	 *  Sending data can be chained:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' })
	 *        .end(function(res){});
	 *
	 *  Or passed to `.send()`:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' }, function(res){});
	 *
	 *  Or passed to `.post()`:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' })
	 *        .end(function(res){});
	 *
	 * Or further reduced to a single call for simple cases:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' }, function(res){});
	 *
	 * @param {XMLHTTPRequest} xhr
	 * @param {Object} options
	 * @api private
	 */

	function Response(req, options) {
	  options = options || {};
	  this.req = req;
	  this.xhr = this.req.xhr;
	  // responseText is accessible only if responseType is '' or 'text' and on older browsers
	  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
	     ? this.xhr.responseText
	     : null;
	  this.statusText = this.req.xhr.statusText;
	  this.setStatusProperties(this.xhr.status);
	  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
	  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
	  // getResponseHeader still works. so we get content-type even if getting
	  // other headers fails.
	  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
	  this.setHeaderProperties(this.header);
	  this.body = this.req.method != 'HEAD'
	    ? this.parseBody(this.text ? this.text : this.xhr.response)
	    : null;
	}

	/**
	 * Get case-insensitive `field` value.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */

	Response.prototype.get = function(field){
	  return this.header[field.toLowerCase()];
	};

	/**
	 * Set header related properties:
	 *
	 *   - `.type` the content type without params
	 *
	 * A response of "Content-Type: text/plain; charset=utf-8"
	 * will provide you with a `.type` of "text/plain".
	 *
	 * @param {Object} header
	 * @api private
	 */

	Response.prototype.setHeaderProperties = function(header){
	  // content-type
	  var ct = this.header['content-type'] || '';
	  this.type = type(ct);

	  // params
	  var obj = params(ct);
	  for (var key in obj) this[key] = obj[key];
	};

	/**
	 * Parse the given body `str`.
	 *
	 * Used for auto-parsing of bodies. Parsers
	 * are defined on the `superagent.parse` object.
	 *
	 * @param {String} str
	 * @return {Mixed}
	 * @api private
	 */

	Response.prototype.parseBody = function(str){
	  var parse = request.parse[this.type];
	  if (!parse && isJSON(this.type)) {
	    parse = request.parse['application/json'];
	  }
	  return parse && str && (str.length || str instanceof Object)
	    ? parse(str)
	    : null;
	};

	/**
	 * Set flags such as `.ok` based on `status`.
	 *
	 * For example a 2xx response will give you a `.ok` of __true__
	 * whereas 5xx will be __false__ and `.error` will be __true__. The
	 * `.clientError` and `.serverError` are also available to be more
	 * specific, and `.statusType` is the class of error ranging from 1..5
	 * sometimes useful for mapping respond colors etc.
	 *
	 * "sugar" properties are also defined for common cases. Currently providing:
	 *
	 *   - .noContent
	 *   - .badRequest
	 *   - .unauthorized
	 *   - .notAcceptable
	 *   - .notFound
	 *
	 * @param {Number} status
	 * @api private
	 */

	Response.prototype.setStatusProperties = function(status){
	  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
	  if (status === 1223) {
	    status = 204;
	  }

	  var type = status / 100 | 0;

	  // status / class
	  this.status = this.statusCode = status;
	  this.statusType = type;

	  // basics
	  this.info = 1 == type;
	  this.ok = 2 == type;
	  this.clientError = 4 == type;
	  this.serverError = 5 == type;
	  this.error = (4 == type || 5 == type)
	    ? this.toError()
	    : false;

	  // sugar
	  this.accepted = 202 == status;
	  this.noContent = 204 == status;
	  this.badRequest = 400 == status;
	  this.unauthorized = 401 == status;
	  this.notAcceptable = 406 == status;
	  this.notFound = 404 == status;
	  this.forbidden = 403 == status;
	};

	/**
	 * Return an `Error` representative of this response.
	 *
	 * @return {Error}
	 * @api public
	 */

	Response.prototype.toError = function(){
	  var req = this.req;
	  var method = req.method;
	  var url = req.url;

	  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
	  var err = new Error(msg);
	  err.status = this.status;
	  err.method = method;
	  err.url = url;

	  return err;
	};

	/**
	 * Expose `Response`.
	 */

	request.Response = Response;

	/**
	 * Initialize a new `Request` with the given `method` and `url`.
	 *
	 * @param {String} method
	 * @param {String} url
	 * @api public
	 */

	function Request(method, url) {
	  var self = this;
	  this._query = this._query || [];
	  this.method = method;
	  this.url = url;
	  this.header = {}; // preserves header name case
	  this._header = {}; // coerces header names to lowercase
	  this.on('end', function(){
	    var err = null;
	    var res = null;

	    try {
	      res = new Response(self);
	    } catch(e) {
	      err = new Error('Parser is unable to parse the response');
	      err.parse = true;
	      err.original = e;
	      // issue #675: return the raw response if the response parsing fails
	      err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null;
	      // issue #876: return the http status code if the response parsing fails
	      err.statusCode = self.xhr && self.xhr.status ? self.xhr.status : null;
	      return self.callback(err);
	    }

	    self.emit('response', res);

	    if (err) {
	      return self.callback(err, res);
	    }

	    if (res.status >= 200 && res.status < 300) {
	      return self.callback(err, res);
	    }

	    var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
	    new_err.original = err;
	    new_err.response = res;
	    new_err.status = res.status;

	    self.callback(new_err, res);
	  });
	}

	/**
	 * Mixin `Emitter` and `requestBase`.
	 */

	Emitter(Request.prototype);
	for (var key in requestBase) {
	  Request.prototype[key] = requestBase[key];
	}

	/**
	 * Abort the request, and clear potential timeout.
	 *
	 * @return {Request}
	 * @api public
	 */

	Request.prototype.abort = function(){
	  if (this.aborted) return;
	  this.aborted = true;
	  this.xhr && this.xhr.abort();
	  this.clearTimeout();
	  this.emit('abort');
	  return this;
	};

	/**
	 * Set Content-Type to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.xml = 'application/xml';
	 *
	 *      request.post('/')
	 *        .type('xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 *      request.post('/')
	 *        .type('application/xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 * @param {String} type
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.type = function(type){
	  this.set('Content-Type', request.types[type] || type);
	  return this;
	};

	/**
	 * Set responseType to `val`. Presently valid responseTypes are 'blob' and 
	 * 'arraybuffer'.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .responseType('blob')
	 *        .end(callback);
	 *
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.responseType = function(val){
	  this._responseType = val;
	  return this;
	};

	/**
	 * Set Accept to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.json = 'application/json';
	 *
	 *      request.get('/agent')
	 *        .accept('json')
	 *        .end(callback);
	 *
	 *      request.get('/agent')
	 *        .accept('application/json')
	 *        .end(callback);
	 *
	 * @param {String} accept
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.accept = function(type){
	  this.set('Accept', request.types[type] || type);
	  return this;
	};

	/**
	 * Set Authorization field value with `user` and `pass`.
	 *
	 * @param {String} user
	 * @param {String} pass
	 * @param {Object} options with 'type' property 'auto' or 'basic' (default 'basic')
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.auth = function(user, pass, options){
	  if (!options) {
	    options = {
	      type: 'basic'
	    }
	  }

	  switch (options.type) {
	    case 'basic':
	      var str = btoa(user + ':' + pass);
	      this.set('Authorization', 'Basic ' + str);
	    break;

	    case 'auto':
	      this.username = user;
	      this.password = pass;
	    break;
	  }
	  return this;
	};

	/**
	* Add query-string `val`.
	*
	* Examples:
	*
	*   request.get('/shoes')
	*     .query('size=10')
	*     .query({ color: 'blue' })
	*
	* @param {Object|String} val
	* @return {Request} for chaining
	* @api public
	*/

	Request.prototype.query = function(val){
	  if ('string' != typeof val) val = serialize(val);
	  if (val) this._query.push(val);
	  return this;
	};

	/**
	 * Queue the given `file` as an attachment to the specified `field`,
	 * with optional `filename`.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .attach(new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} field
	 * @param {Blob|File} file
	 * @param {String} filename
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.attach = function(field, file, filename){
	  this._getFormData().append(field, file, filename || file.name);
	  return this;
	};

	Request.prototype._getFormData = function(){
	  if (!this._formData) {
	    this._formData = new root.FormData();
	  }
	  return this._formData;
	};

	/**
	 * Send `data` as the request body, defaulting the `.type()` to "json" when
	 * an object is given.
	 *
	 * Examples:
	 *
	 *       // manual json
	 *       request.post('/user')
	 *         .type('json')
	 *         .send('{"name":"tj"}')
	 *         .end(callback)
	 *
	 *       // auto json
	 *       request.post('/user')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // manual x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send('name=tj')
	 *         .end(callback)
	 *
	 *       // auto x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // defaults to x-www-form-urlencoded
	  *      request.post('/user')
	  *        .send('name=tobi')
	  *        .send('species=ferret')
	  *        .end(callback)
	 *
	 * @param {String|Object} data
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.send = function(data){
	  var obj = isObject(data);
	  var type = this._header['content-type'];

	  // merge
	  if (obj && isObject(this._data)) {
	    for (var key in data) {
	      this._data[key] = data[key];
	    }
	  } else if ('string' == typeof data) {
	    if (!type) this.type('form');
	    type = this._header['content-type'];
	    if ('application/x-www-form-urlencoded' == type) {
	      this._data = this._data
	        ? this._data + '&' + data
	        : data;
	    } else {
	      this._data = (this._data || '') + data;
	    }
	  } else {
	    this._data = data;
	  }

	  if (!obj || isHost(data)) return this;
	  if (!type) this.type('json');
	  return this;
	};

	/**
	 * @deprecated
	 */
	Response.prototype.parse = function serialize(fn){
	  if (root.console) {
	    console.warn("Client-side parse() method has been renamed to serialize(). This method is not compatible with superagent v2.0");
	  }
	  this.serialize(fn);
	  return this;
	};

	Response.prototype.serialize = function serialize(fn){
	  this._parser = fn;
	  return this;
	};

	/**
	 * Invoke the callback with `err` and `res`
	 * and handle arity check.
	 *
	 * @param {Error} err
	 * @param {Response} res
	 * @api private
	 */

	Request.prototype.callback = function(err, res){
	  var fn = this._callback;
	  this.clearTimeout();
	  fn(err, res);
	};

	/**
	 * Invoke callback with x-domain error.
	 *
	 * @api private
	 */

	Request.prototype.crossDomainError = function(){
	  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
	  err.crossDomain = true;

	  err.status = this.status;
	  err.method = this.method;
	  err.url = this.url;

	  this.callback(err);
	};

	/**
	 * Invoke callback with timeout error.
	 *
	 * @api private
	 */

	Request.prototype.timeoutError = function(){
	  var timeout = this._timeout;
	  var err = new Error('timeout of ' + timeout + 'ms exceeded');
	  err.timeout = timeout;
	  this.callback(err);
	};

	/**
	 * Enable transmission of cookies with x-domain requests.
	 *
	 * Note that for this to work the origin must not be
	 * using "Access-Control-Allow-Origin" with a wildcard,
	 * and also must set "Access-Control-Allow-Credentials"
	 * to "true".
	 *
	 * @api public
	 */

	Request.prototype.withCredentials = function(){
	  this._withCredentials = true;
	  return this;
	};

	/**
	 * Initiate request, invoking callback `fn(res)`
	 * with an instanceof `Response`.
	 *
	 * @param {Function} fn
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.end = function(fn){
	  var self = this;
	  var xhr = this.xhr = request.getXHR();
	  var query = this._query.join('&');
	  var timeout = this._timeout;
	  var data = this._formData || this._data;

	  // store callback
	  this._callback = fn || noop;

	  // state change
	  xhr.onreadystatechange = function(){
	    if (4 != xhr.readyState) return;

	    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
	    // result in the error "Could not complete the operation due to error c00c023f"
	    var status;
	    try { status = xhr.status } catch(e) { status = 0; }

	    if (0 == status) {
	      if (self.timedout) return self.timeoutError();
	      if (self.aborted) return;
	      return self.crossDomainError();
	    }
	    self.emit('end');
	  };

	  // progress
	  var handleProgress = function(e){
	    if (e.total > 0) {
	      e.percent = e.loaded / e.total * 100;
	    }
	    e.direction = 'download';
	    self.emit('progress', e);
	  };
	  if (this.hasListeners('progress')) {
	    xhr.onprogress = handleProgress;
	  }
	  try {
	    if (xhr.upload && this.hasListeners('progress')) {
	      xhr.upload.onprogress = handleProgress;
	    }
	  } catch(e) {
	    // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
	    // Reported here:
	    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
	  }

	  // timeout
	  if (timeout && !this._timer) {
	    this._timer = setTimeout(function(){
	      self.timedout = true;
	      self.abort();
	    }, timeout);
	  }

	  // querystring
	  if (query) {
	    query = request.serializeObject(query);
	    this.url += ~this.url.indexOf('?')
	      ? '&' + query
	      : '?' + query;
	  }

	  // initiate request
	  if (this.username && this.password) {
	    xhr.open(this.method, this.url, true, this.username, this.password);
	  } else {
	    xhr.open(this.method, this.url, true);
	  }

	  // CORS
	  if (this._withCredentials) xhr.withCredentials = true;

	  // body
	  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {
	    // serialize stuff
	    var contentType = this._header['content-type'];
	    var serialize = this._parser || request.serialize[contentType ? contentType.split(';')[0] : ''];
	    if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];
	    if (serialize) data = serialize(data);
	  }

	  // set header fields
	  for (var field in this.header) {
	    if (null == this.header[field]) continue;
	    xhr.setRequestHeader(field, this.header[field]);
	  }

	  if (this._responseType) {
	    xhr.responseType = this._responseType;
	  }

	  // send stuff
	  this.emit('request', this);

	  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
	  // We need null here if data is undefined
	  xhr.send(typeof data !== 'undefined' ? data : null);
	  return this;
	};


	/**
	 * Expose `Request`.
	 */

	request.Request = Request;

	/**
	 * GET `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.get = function(url, data, fn){
	  var req = request('GET', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.query(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * HEAD `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.head = function(url, data, fn){
	  var req = request('HEAD', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * DELETE `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	function del(url, fn){
	  var req = request('DELETE', url);
	  if (fn) req.end(fn);
	  return req;
	};

	request['del'] = del;
	request['delete'] = del;

	/**
	 * PATCH `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} data
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.patch = function(url, data, fn){
	  var req = request('PATCH', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * POST `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} data
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.post = function(url, data, fn){
	  var req = request('POST', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * PUT `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.put = function(url, data, fn){
	  var req = request('PUT', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Expose `Emitter`.
	 */

	if (true) {
	  module.exports = Emitter;
	}

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks['$' + event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 231 */
/***/ function(module, exports) {

	
	/**
	 * Reduce `arr` with `fn`.
	 *
	 * @param {Array} arr
	 * @param {Function} fn
	 * @param {Mixed} initial
	 *
	 * TODO: combatible error handling?
	 */

	module.exports = function(arr, fn, initial){  
	  var idx = 0;
	  var len = arr.length;
	  var curr = arguments.length == 3
	    ? initial
	    : arr[idx++];

	  while (idx < len) {
	    curr = fn.call(null, curr, arr[idx], ++idx, arr);
	  }
	  
	  return curr;
	};

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module of mixed-in functions shared between node and client code
	 */
	var isObject = __webpack_require__(233);

	/**
	 * Clear previous timeout.
	 *
	 * @return {Request} for chaining
	 * @api public
	 */

	exports.clearTimeout = function _clearTimeout(){
	  this._timeout = 0;
	  clearTimeout(this._timer);
	  return this;
	};

	/**
	 * Force given parser
	 *
	 * Sets the body parser no matter type.
	 *
	 * @param {Function}
	 * @api public
	 */

	exports.parse = function parse(fn){
	  this._parser = fn;
	  return this;
	};

	/**
	 * Set timeout to `ms`.
	 *
	 * @param {Number} ms
	 * @return {Request} for chaining
	 * @api public
	 */

	exports.timeout = function timeout(ms){
	  this._timeout = ms;
	  return this;
	};

	/**
	 * Faux promise support
	 *
	 * @param {Function} fulfill
	 * @param {Function} reject
	 * @return {Request}
	 */

	exports.then = function then(fulfill, reject) {
	  return this.end(function(err, res) {
	    err ? reject(err) : fulfill(res);
	  });
	}

	/**
	 * Allow for extension
	 */

	exports.use = function use(fn) {
	  fn(this);
	  return this;
	}


	/**
	 * Get request header `field`.
	 * Case-insensitive.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */

	exports.get = function(field){
	  return this._header[field.toLowerCase()];
	};

	/**
	 * Get case-insensitive header `field` value.
	 * This is a deprecated internal API. Use `.get(field)` instead.
	 *
	 * (getHeader is no longer used internally by the superagent code base)
	 *
	 * @param {String} field
	 * @return {String}
	 * @api private
	 * @deprecated
	 */

	exports.getHeader = exports.get;

	/**
	 * Set header `field` to `val`, or multiple fields with one object.
	 * Case-insensitive.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .set('Accept', 'application/json')
	 *        .set('X-API-Key', 'foobar')
	 *        .end(callback);
	 *
	 *      req.get('/')
	 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
	 *        .end(callback);
	 *
	 * @param {String|Object} field
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */

	exports.set = function(field, val){
	  if (isObject(field)) {
	    for (var key in field) {
	      this.set(key, field[key]);
	    }
	    return this;
	  }
	  this._header[field.toLowerCase()] = val;
	  this.header[field] = val;
	  return this;
	};

	/**
	 * Remove header `field`.
	 * Case-insensitive.
	 *
	 * Example:
	 *
	 *      req.get('/')
	 *        .unset('User-Agent')
	 *        .end(callback);
	 *
	 * @param {String} field
	 */
	exports.unset = function(field){
	  delete this._header[field.toLowerCase()];
	  delete this.header[field];
	  return this;
	};

	/**
	 * Write the field `name` and `val` for "multipart/form-data"
	 * request bodies.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .field('foo', 'bar')
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} name
	 * @param {String|Blob|File|Buffer|fs.ReadStream} val
	 * @return {Request} for chaining
	 * @api public
	 */
	exports.field = function(name, val) {
	  this._getFormData().append(name, val);
	  return this;
	};


/***/ },
/* 233 */
/***/ function(module, exports) {

	/**
	 * Check if `obj` is an object.
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */

	function isObject(obj) {
	  return null != obj && 'object' == typeof obj;
	}

	module.exports = isObject;


/***/ },
/* 234 */
/***/ function(module, exports) {

	// The node and browser modules expose versions of this with the
	// appropriate constructor function bound as first argument
	/**
	 * Issue a request:
	 *
	 * Examples:
	 *
	 *    request('GET', '/users').end(callback)
	 *    request('/users').end(callback)
	 *    request('/users', callback)
	 *
	 * @param {String} method
	 * @param {String|Function} url or callback
	 * @return {Request}
	 * @api public
	 */

	function request(RequestConstructor, method, url) {
	  // callback
	  if ('function' == typeof url) {
	    return new RequestConstructor('GET', method).end(url);
	  }

	  // url first
	  if (2 == arguments.length) {
	    return new RequestConstructor('GET', method);
	  }

	  return new RequestConstructor(method, url);
	}

	module.exports = request;


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	var ie = __webpack_require__(236)

	function with_query_strings (request) {
	  var timestamp = Date.now().toString()
	  if (request._query !== undefined && request._query[0]) {
	    request._query[0] += '&' + timestamp
	  } else {
	    request._query = [timestamp]
	  }

	  return request
	}

	module.exports = function _superagentNoCache (request, mockIE) {
	  request.set('X-Requested-With', 'XMLHttpRequest')
	  request.set('Expires', '-1')
	  request.set('Cache-Control', 'no-cache,no-store,must-revalidate,max-age=-1,private')

	  if (ie || mockIE) {
	    with_query_strings(request)
	  }

	  return request
	}


/***/ },
/* 236 */
/***/ function(module, exports) {

	/**
	 * Export `ie`.
	 */

	module.exports = ie();

	/**
	 * Initialize `ie`
	 *
	 * @return {Number|undefined}
	 * @api public
	 */

	function ie() {
	  for( var v = 3,
	           el = document.createElement('b'),
	           // empty array as loop breaker (and exception-avoider) for non-IE and IE10+
	           all = el.all || [];
	       // i tag not well-formed since we know that IE5-IE9 won't mind
	       el.innerHTML = '<!--[if gt IE ' + (++v) + ']><i><![endif]-->',
	       all[0];
	     );
	  // return the documentMode for IE10+ compatibility
	  // non-IE will get undefined
	  return v > 4 ? v : document.documentMode;
	}


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by dmitri on 17/05/16.
	 */
	'use strict';

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var _constantsServerConstants = __webpack_require__(239);

	var _constantsServerConstants2 = _interopRequireDefault(_constantsServerConstants);

	var _actionsSocketActions = __webpack_require__(240);

	var _actionsSocketActions2 = _interopRequireDefault(_actionsSocketActions);

	var ServiceMethods = (function () {
	  function ServiceMethods() {
	    _classCallCheck(this, ServiceMethods);
	  }

	  _createClass(ServiceMethods, null, [{
	    key: 'createRegionOfInterest',
	    value: function createRegionOfInterest(image, area, perimeter, vertices) {
	      var name = arguments.length <= 4 || arguments[4] === undefined ? null : arguments[4];
	      var callback = arguments.length <= 5 || arguments[5] === undefined ? undefined : arguments[5];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.createRegionOfInterest,
	        image: image,
	        area: area,
	        perimeter: perimeter,
	        polygon: vertices,
	        name: name
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'createPointOfInterest',
	    value: function createPointOfInterest(parent, x, y) {
	      var name = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
	      var callback = arguments.length <= 4 || arguments[4] === undefined ? undefined : arguments[4];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.createPointOfInterest,
	        parent: parent,
	        x: x,
	        y: y,
	        name: name
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'createTrailOfInterest',
	    value: function createTrailOfInterest(parent, length, path) {
	      var name = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
	      var callback = arguments.length <= 4 || arguments[4] === undefined ? undefined : arguments[4];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.createTrailOfInterest,
	        parent: parent,
	        length: length,
	        path: path,
	        name: name
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'createAngleOfInterest',
	    value: function createAngleOfInterest(parent, measure, vertices) {
	      var name = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
	      var callback = arguments.length <= 4 || arguments[4] === undefined ? undefined : arguments[4];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.createAngleOfInterest,
	        parent: parent,
	        measure: measure,
	        vertices: vertices,
	        name: name
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'addMeasureStandard',
	    value: function addMeasureStandard(measurementId, value, unit, name) {
	      var callback = arguments.length <= 4 || arguments[4] === undefined ? undefined : arguments[4];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.addMeasureStandard,
	        measurement: measurementId,
	        value: value,
	        unit: unit,
	        name: name
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'createSet',
	    value: function createSet(name) {
	      var parent = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	      var callback = arguments.length <= 2 || arguments[2] === undefined ? undefined : arguments[2];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.createSet,
	        parent: parent,
	        name: name
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'deleteElementFromSet',
	    value: function deleteElementFromSet(linkId) {
	      var callback = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.deleteFromSet,
	        link: linkId
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'deleteElementFromView',
	    value: function deleteElementFromView(linkId) {
	      var callback = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.deleteFromView,
	        link: linkId
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'linkParentToChild',
	    value: function linkParentToChild(parent, child) {
	      var callback = arguments.length <= 2 || arguments[2] === undefined ? undefined : arguments[2];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.link,
	        target: child,
	        destination: parent
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'copy',
	    value: function copy(target, destination) {
	      var callback = arguments.length <= 2 || arguments[2] === undefined ? undefined : arguments[2];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.copy,
	        target: target,
	        destination: destination
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'cutPaste',
	    value: function cutPaste(linkId, destination) {
	      var callback = arguments.length <= 2 || arguments[2] === undefined ? undefined : arguments[2];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.cutPaste,
	        link: linkId,
	        destination: destination
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'importRecolnatSpecimen',
	    value: function importRecolnatSpecimen(setId, name, recolnatSpecimenUuid, images) {
	      var callback = arguments.length <= 4 || arguments[4] === undefined ? undefined : arguments[4];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.importRecolnatSpecimen,
	        set: setId,
	        name: name,
	        recolnatSpecimenUuid: recolnatSpecimenUuid,
	        images: images
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'importExternalImage',
	    value: function importExternalImage(setId, url, name) {
	      var callback = arguments.length <= 3 || arguments[3] === undefined ? undefined : arguments[3];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.importExternalImage,
	        set: setId,
	        url: url,
	        name: name
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'place',
	    value: function place(view, entity, x, y) {
	      var callback = arguments.length <= 4 || arguments[4] === undefined ? undefined : arguments[4];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.place,
	        view: view,
	        entity: entity,
	        x: x,
	        y: y
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'move',
	    value: function move(view, link, entity, x, y) {
	      var callback = arguments.length <= 5 || arguments[5] === undefined ? undefined : arguments[5];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.move,
	        view: view,
	        link: link,
	        entity: entity,
	        x: x,
	        y: y
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'resize',
	    value: function resize(view, link, entity, width, height) {
	      var callback = arguments.length <= 5 || arguments[5] === undefined ? undefined : arguments[5];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.resize,
	        view: view,
	        link: link,
	        entity: entity,
	        width: width,
	        height: height
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'remove',
	    value: function remove(id) {
	      var callback = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.remove,
	        id: id
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'addAnnotation',
	    value: function addAnnotation(entityId, text) {
	      var callback = arguments.length <= 2 || arguments[2] === undefined ? undefined : arguments[2];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.addAnnotation,
	        entity: entityId,
	        text: text
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'editProperties',
	    value: function editProperties(id, properties) {
	      var callback = arguments.length <= 2 || arguments[2] === undefined ? undefined : arguments[2];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.editProperties,
	        entity: id,
	        properties: properties
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'createTagDefinition',
	    value: function createTagDefinition(key, value) {
	      var callback = arguments.length <= 2 || arguments[2] === undefined ? undefined : arguments[2];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.createTagDefinition,
	        descriptorName: key,
	        descriptorValue: value
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'tagEntityWithTagId',
	    value: function tagEntityWithTagId(tagId, entityId) {
	      var callback = arguments.length <= 2 || arguments[2] === undefined ? undefined : arguments[2];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.UPDATE,
	        actionDetail: _confApplicationConfiguration2['default'].socket.tagEntity,
	        entity: entityId,
	        tag: tagId
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, callback), 10);
	    }
	  }, {
	    key: 'createAddTag',
	    value: function createAddTag(key, value, entityId) {
	      var callback = arguments.length <= 3 || arguments[3] === undefined ? undefined : arguments[3];

	      ServiceMethods.createTagDefinition(key, value, ServiceMethods.createAddTagPostDefine.bind(null, entityId, callback));
	    }
	  }, {
	    key: 'createAddTagPostDefine',
	    value: function createAddTagPostDefine(entityId, callback, msg) {
	      if (msg.clientProcessError) {
	        alert('Technical problem while saving data : ' + JSON.stringify(msg));
	      } else {
	        ServiceMethods.tagEntityWithTagId(msg.data.id, entityId, callback);
	      }
	    }
	  }, {
	    key: 'sendFeedback',
	    value: function sendFeedback(message) {
	      message.action = _constantsServerConstants2['default'].ActionTypes.Send.FEEDBACK;

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, undefined), 10);
	    }
	  }, {
	    key: 'prepareSetDownload',
	    value: function prepareSetDownload(setId) {
	      var callback = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];

	      var message = {
	        action: _constantsServerConstants2['default'].ActionTypes.Send.ORDER,
	        actionDetail: _confApplicationConfiguration2['default'].socket.prepareSetForDownload,
	        set: setId
	      };

	      window.setTimeout(_actionsSocketActions2['default'].send.bind(null, message, undefined), 10);
	    }
	  }]);

	  return ServiceMethods;
	})();

	exports['default'] = ServiceMethods;
	;
	module.exports = exports['default'];

/***/ },
/* 238 */
/***/ function(module, exports) {

	'use strict';

	// Each language must have a corresponding language file defined in src/data/i18n
	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	var Application = {
	  languages: [{ code: 'en', localized: 'English', flag: 'gb' }, { code: 'fr', localized: 'Français', flag: 'fr' }]
	};

	var Integration = {
	  recolnatMenuBarOrigin: 'https://www.recolnat.org',
	  recolnatMenuBarUrl: 'https://www.recolnat.org/menu',
	  casLoginUrl: 'https://cas.recolnat.org/login',
	  casSignupUrl: 'https://api.recolnat.org/erecolnat/signup/#/register'
	};

	var Services = {
	  laboratoryRESTService: 'https://wp5test.recolnat.org/services/test/rest',
	  laboratorySocketService: 'wss://wp5test.recolnat.org/services/test/websockets/colaboratory',
	  downloadsBaseURL: 'https://wp5test.recolnat.org/exports-test/'
	};

	var Endpoints = {
	  tagService: Services.laboratoryRESTService + '/tags',
	  downloadsService: Services.laboratoryRESTService + '/downloads'
	};

	var Actions = {
	  tags: {
	    queryKey: Endpoints.tagService + '/query/key',
	    queryTag: Endpoints.tagService + '/query/tag'
	  },
	  downloads: {
	    exports: Endpoints.downloadsService + '/exports'
	  }
	};

	var SocketActions = {
	  createRegionOfInterest: "create-roi",
	  createPointOfInterest: "create-poi",
	  createTrailOfInterest: "create-toi",
	  createAngleOfInterest: "create-aoi",
	  addMeasureStandard: "add-measure-standard",
	  createSet: "create-set",
	  deleteFromSet: "delete-element-from-set",
	  deleteFromView: "delete-element-from-view",
	  link: "link",
	  copy: "copy",
	  cutPaste: "cutpaste",
	  importRecolnatSpecimen: "import-recolnat-specimen",
	  importExternalImage: "import-external-image",
	  place: 'place',
	  move: 'move',
	  resize: 'resize',
	  createStudy: "create-study",
	  remove: 'remove',
	  addAnnotation: 'add-annotation',
	  editProperties: 'edit-properties',
	  createTagDefinition: 'create-tag-definition',
	  tagEntity: 'tag-entity',
	  listUserDownloads: 'list-user-downloads',
	  prepareSetForDownload: 'prepare-set-for-download'
	};

	exports['default'] = { app: Application, wss: Services.laboratorySocketService, services: Services, urls: Endpoints, actions: Actions, integration: Integration, socket: SocketActions };
	module.exports = exports['default'];

/***/ },
/* 239 */
/***/ function(module, exports) {

	/**
	 * WebSocket action ids. The values here must replicate exactly those expected by the WebSocket.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  ActionTypes: {
	    // Types received by the HMI from the WebSocket
	    Receive: {
	      // Message contains a resource
	      RESOURCE: 21,
	      // Action has been accepted by server. This may contain the original message sent by HMI to Socket. This may contain additional information provided by Socket (such as UIDs of newly-created elements)
	      DONE: 22,
	      // Action has been rejected by server.
	      DENIED: 23
	    },
	    // Types to be sent to the Socket
	    Send: {
	      // Not used, just here for comprehensiveness
	      CONNECT: 0,
	      // Subscribe to the resource designated by the provided UID
	      SUBSCRIBE: 10,
	      // Unsubscribe this client from resource designated by the provided UID.
	      UNSUBSCRIBE: 11,
	      // Any action which could lead to changes in the database (creation, modification, deletion)
	      UPDATE: 12,
	      // Subsrcibe to the logs (activity) of a specific resource (not used).
	      SUBSCRIBE_LOG: 13,
	      // Unsubscribe from the logs (activity) of a specific resource (not used).
	      UNSUBSCRIBE_LOG: 14,
	      // Retrieve specific information about a resource which is computed server-side (for example a list of all tags)
	      GET: 15,
	      // User sends a feedback message about the application. This would be better if recoded as a REST service.
	      FEEDBACK: 16,
	      // User orders for some action to be started on server. Expected response is a confirmation that the order has been received. No information is expected when the order finishes. Example : prepare Set for export.
	      ORDER: 17
	    }
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Actions which interact with the WebSocketConnector.
	 */
	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsSocketConstants = __webpack_require__(241);

	var _constantsSocketConstants2 = _interopRequireDefault(_constantsSocketConstants);

	exports['default'] = {
	  /**
	   * Add a listener for changes on a resource with provided UID. WebSocketConnector is expected to subscribe to the resource if data is not immediately available.
	   * @param id String UID of the resource to subscribe to
	   * @param callback Function to be called when data is available or changes
	   */
	  registerListener: function registerListener(id, callback) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsSocketConstants2['default'].ActionTypes.REGISTER_CALLBACK,
	      id: id,
	      callback: callback
	    });
	  },

	  /**
	   * Removes a listener for a specific resource. If this is the last listener, WebSocketConnector is expected to unsubscribe from this resource.
	   * @param id
	   * @param callback
	   */
	  removeListener: function removeListener(id, callback) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsSocketConstants2['default'].ActionTypes.REMOVE_CALLBACK,
	      id: id,
	      callback: callback
	    });
	  },

	  /**
	   * Send a message to the server expecting only a response to confirm the message has been received.
	   * @param message Object message to be sent
	   * @param callback Function optional callback to be called when reception confirmed.
	   */
	  send: function send(message, callback) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsSocketConstants2['default'].ActionTypes.SEND,
	      message: message,
	      callback: callback
	    });
	  },

	  /**
	   * Request one-time information from the server.
	   * @param message Object representing the request
	   * @param callback Function to be called when data is received.
	   */
	  request: function request(message, callback) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsSocketConstants2['default'].ActionTypes.GET,
	      message: message,
	      callback: callback
	    });
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 241 */
/***/ function(module, exports) {

	/**
	 * Type constants for actions communicating between stores and WebSocketConnector
	 *
	 * Created by dmitri on 26/08/16.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  ActionTypes: {
	    OPEN: 'SOCKET_OPEN',
	    CLOSE: 'SOCKET_CLOSE',
	    REGISTER_CALLBACK: 'SOCKET_REGISTER_CALLBACK',
	    REMOVE_CALLBACK: 'SOCKET_REMOVE_CALLBACK',
	    SEND: 'SOCKET_SEND',
	    GET: 'SOCKET_GET'
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by dmitri on 18/12/15.
	 */
	'use strict';

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _nodeUuid = __webpack_require__(201);

	var _nodeUuid2 = _interopRequireDefault(_nodeUuid);

	var _constantsModeConstants = __webpack_require__(243);

	var _constantsModeConstants2 = _interopRequireDefault(_constantsModeConstants);

	var _actionsModeActions = __webpack_require__(244);

	var _actionsModeActions2 = _interopRequireDefault(_actionsModeActions);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _actionsInspectorActions = __webpack_require__(251);

	var _actionsInspectorActions2 = _interopRequireDefault(_actionsInspectorActions);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var GlobalFunctions = (function () {
	  function GlobalFunctions() {
	    _classCallCheck(this, GlobalFunctions);
	  }

	  _createClass(GlobalFunctions, null, [{
	    key: 'getNextEdge',

	    /**
	     * Finds first edge starting "roughly" (i.e. delta-dependent in pixels) at (x,y) and remove it from edges. Returns the removed edge.
	     * @param x
	     * @param y
	     * @param edges list of edges, modified in place by removing the edge if found
	     * @param delta value (in pixels) used to match suitability of the coordinates
	     * @returns {{start: {x: *, y: *}, end: {x: *, y: *}}}
	     */
	    value: function getNextEdge(x, y, edges, delta) {
	      if (x == null || y == null || edges.length == 1) {
	        var edge = { start: { x: edges[0].start.x, y: edges[0].start.y }, end: { x: edges[0].end.x, y: edges[0].end.y } };
	        edges.splice(0, 1);
	        return edge;
	      }
	      for (var i = 0; i < edges.length; ++i) {
	        var edge = { start: { x: edges[i].start.x, y: edges[i].start.y }, end: { x: edges[i].end.x, y: edges[i].end.y } };
	        if (edge.start.x - delta < x && edge.start.x + delta > x && edge.start.y - delta < y && edge.start.y + delta > y) {
	          edges.splice(i, 1);
	          return edge;
	        }
	      }
	    }

	    /**
	     * Matches a vertex at coordinates (x,y) +- delta.
	     * Comparison must allow a +- 5 px interval for matching (can't expect the user to click on a precise pixel).
	     * @param x
	     * @param y
	     * @param edges
	     * @param delta
	     * @returns {x,y} object corresponding to the matched vertex if found, this a new object, not a reference to the existing array
	     */
	  }, {
	    key: 'matchVertex',
	    value: function matchVertex(x, y, edges, delta) {
	      for (var i = 0; i < edges.length; ++i) {
	        var edge = edges[i];
	        if (edge.start.x - delta < x && edge.start.x + delta > x && edge.start.y - delta < y && edge.start.y + delta > y) {
	          return { x: edge.start.x, y: edge.start.y };
	        }
	        if (edge.end.x - delta < x && edge.end.x + delta > x && edge.end.y - delta < y && edge.end.y + delta > y) {
	          return { x: edge.end.x, y: edge.end.y };
	        }
	      }
	      return null;
	    }

	    /**
	     * Counts the number of edges starting or ending with the given coordinates (+- delta)
	     * @param x
	     * @param y
	     * @param edges
	     * @param delta
	     * @returns {number}
	     */
	  }, {
	    key: 'countEdges',
	    value: function countEdges(x, y, edges, delta) {
	      var count = 0;
	      for (var i = 0; i < edges.length; ++i) {
	        var edge = edges[i];
	        if (edge.start.x - delta < x && edge.start.x + delta > x && edge.start.y - delta < y && edge.start.y + delta > y) {
	          count++;
	        } else if (edge.end.x - delta < x && edge.end.x + delta > x && edge.end.y - delta < y && edge.end.y + delta > y) {
	          count++;
	        }
	      }
	      return count;
	    }

	    /**
	     * Moves all edges starting and ending with the given old coordinates (+- delta) to the new coordinates. Operations are done in place, modifying input array.
	     * @param oldX
	     * @param oldY
	     * @param newX
	     * @param newY
	     * @param edges
	     * @param delta
	     */
	  }, {
	    key: 'updateEdgesPosition',
	    value: function updateEdgesPosition(oldX, oldY, newX, newY, edges, delta) {
	      for (var i = 0; i < edges.length; ++i) {
	        var edge = edges[i];
	        if (edge.start.x - delta < oldX && edge.start.x + delta > oldX && edge.start.y - delta < oldY && edge.start.y + delta > oldY) {
	          edge.start.x = newX;
	          edge.start.y = newY;
	        }
	        if (edge.end.x - delta < oldX && edge.end.x + delta > oldX && edge.end.y - delta < oldY && edge.end.y + delta > oldY) {
	          edge.end.x = newX;
	          edge.end.y = newY;
	        }
	      }
	    }

	    /**
	     * Returns number of mm per pixel
	     * @param imageMetadata data of an Image
	     * @returns {*}
	     */
	  }, {
	    key: 'getEXIFScalingData',
	    value: function getEXIFScalingData(imageMetadata) {
	      if (imageMetadata) {
	        if (imageMetadata.exif) {
	          if (imageMetadata.exif["X Resolution"]) {
	            var xResolution = imageMetadata.exif["X Resolution"].split(" ");
	            var dotsPerUnit = _.parseInt(xResolution[0]);
	            var mmPerPixel = null;
	            var unit = imageMetadata.exif["Resolution Units"];
	            if (!unit) {
	              console.error("EXIF has X Resolution but no Resolution Units");
	              return mmPerPixel;
	            }
	            if (unit.toUpperCase() == "INCH" || unit.toUpperCase() == "INCHES") {
	              mmPerPixel = 25.4 / dotsPerUnit;
	            } else if (unit.toUpperCase() == "CM") {
	              mmPerPixel = 10 / dotsPerUnit;
	            } else if (unit.toUpperCase() == "MM") {
	              mmPerPixel = 1 / dotsPerUnit;
	            } else {
	              console.error("Unprocessed unit " + unit);
	            }
	            return mmPerPixel;
	          }
	        }
	      }
	      return null;
	    }

	    /**
	     * These getters are mostly used for sorting by parameter in _ functions which require a callback.
	     */
	  }, {
	    key: 'getName',
	    value: function getName(entity) {
	      return entity.name;
	    }

	    /**
	     * Retrieves 'creationDate' or 'created' or 'date' in that order of precedence
	     * @param entity
	     * @returns {*}
	     */
	  }, {
	    key: 'getCreationDate',
	    value: function getCreationDate(entity) {
	      if (!entity) {
	        return 0;
	      }
	      if (entity.creationDate) {
	        return entity.creationDate;
	      }
	      if (entity.created) {
	        return entity.created;
	      }
	      if (entity.date) {
	        return entity.date;
	      }
	    }

	    // static setMode(mode) {
	    //   window.setTimeout(
	    //     ModeActions.changeMode.bind(null, mode), 10
	    //   );
	    //   window.setTimeout(
	    //     ToolActions.setTool.bind(null, null), 10
	    //   );
	    //   switch(mode) {
	    //     case ModeConstants.Modes.OBSERVATION:
	    //       window.setTimeout(
	    //         MetadataActions.updateLabBenchFrom, 10
	    //       );
	    //       break;
	    //     case ModeConstants.Modes.ORGANISATION:
	    //       window.setTimeout(
	    //         MetadataActions.updateLabBenchFrom, 10
	    //       );
	    //       break;
	    //     case ModeConstants.Modes.SET:
	    //       window.setTimeout(
	    //         ManagerActions.reloadDisplayedSets, 10
	    //       );
	    //       break;
	    //     case ModeConstants.Modes.TABULAR:
	    //       break;
	    //     default:
	    //       break;
	    //   }
	    // }

	  }, {
	    key: 'isCoordsInBoundingBox',
	    value: function isCoordsInBoundingBox(coordinates, box) {
	      return coordinates[0] >= box.left && coordinates[0] <= box.right && coordinates[1] >= box.top && coordinates[1] <= box.bottom;
	    }
	  }, {
	    key: 'preserveSetSelection',
	    value: function preserveSetSelection(newSet, oldSet) {
	      if (oldSet) {
	        if (oldSet.uid == newSet.uid) {
	          if (oldSet.selectedId) {
	            newSet.selectedId = oldSet.selectedId;
	          }
	        }
	      }
	    }
	  }, {
	    key: 'isElementInViewport',
	    value: function isElementInViewport(boundingClientRect) {
	      if (boundingClientRect.bottom <= 0 || boundingClientRect.top >= window.innerHeight || boundingClientRect.right <= 0 || boundingClientRect.left >= window.innerWidth) {
	        return false;
	      }
	      return true;
	      // return boundingClientRect.top >= 0 &&
	      // boundingClientRect.left >= 0 &&
	      // boundingClientRect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
	      // boundingClientRect.right <= (window.innerWidth || document.documentElement.clientWidth);
	    }
	  }, {
	    key: 'noActiveTool',
	    value: function noActiveTool() {
	      window.setTimeout(_actionsToolActions2['default'].setTool.bind(null, null), 10);
	    }
	  }, {
	    key: 'setSavedEntityInInspector',
	    value: function setSavedEntityInInspector(message) {
	      if (message.clientProcessError) {
	        console.error("Save failed.");
	        // alert("L'enregistrement a échoué. Veuillez retenter plus tard.");
	        return;
	      }
	      window.setTimeout(_actionsInspectorActions2['default'].setInspectorData.bind(null, [message.data.id]), 10);
	    }

	    /**
	     * Checks pos integer to be within min & max bounds; returns either pos, min or max. Used to check a vertex is not dragged outside its parent image.
	     * @param pos
	     * @param max
	     * @param min
	     * @returns {number}
	     */
	  }, {
	    key: 'getBoundedPosition',
	    value: function getBoundedPosition(pos, max, min) {
	      return Math.min(Math.max(pos, min), max);
	    }

	    /**
	     * Workaround for filling the autocomplete list of a browser. Normally a page must be reloaded in order for the list to be filled. However this is not possible in a single-page application. This method uses an invisible iframe, copies a form into it and reloads the iframe.
	     * @param formDOMNode
	     * @param formSubmitCallback
	     * @param e
	     */
	  }, {
	    key: 'saveAutofill',
	    value: function saveAutofill(formDOMNode, formSubmitCallback, e) {
	      e.preventDefault();
	      // e.stopPropagation();

	      var cloneForm = formDOMNode.cloneNode(true);
	      cloneForm.id = "form";
	      // let frame = document.getElementById("collaboratoryBlankHiddenTarget").cloneNode(true);
	      var frame = document.createElement('iframe');
	      frame.src = "";
	      frame.name = "temp_" + _nodeUuid2['default'].v4();
	      frame.style = "display:none";

	      document.body.appendChild(frame);
	      frame.contentWindow.document.body.appendChild(cloneForm);

	      var frameForm = frame.contentWindow.document.getElementById("form");
	      frameForm.target = "";
	      frameForm.action = "about:blank";
	      frameForm.submit();
	      window.setTimeout(function () {
	        return document.body.removeChild(frame);
	      }, 100);

	      formDOMNode.onSubmit = formSubmitCallback;
	    }

	    /**
	     * Generates a random color code (# + 6 hex)
	     */
	  }, {
	    key: 'getRandomColor',
	    value: function getRandomColor() {
	      var alphabet = '0123456789ABCDEF';
	      var color = '#';
	      for (var i = 0; i < 6; ++i) {
	        color += alphabet[Math.floor(Math.random() * 10)];
	      }
	      return color;
	    }

	    /**
	     * Get image of entity, or null. Recursive. The result is returned in the accumulator as an entity might eventually belong to multiple images (for example a reused tag)
	     */
	  }, {
	    key: 'getImagesOfEntity',
	    value: function getImagesOfEntity(entityId, metastore, acc) {
	      var metadata = metastore.getMetadataAbout(entityId);
	      if (metadata.type === 'Image') {
	        acc.push(entityId);
	        return;
	      }
	      if (metadata.parents) {
	        for (var i = 0; i < metadata.parents.length; ++i) {
	          GlobalFunctions.getImagesOfEntity(metadata.parents[i], metastore, acc);
	        }
	      }
	    }
	  }]);

	  return GlobalFunctions;
	})();

	exports['default'] = GlobalFunctions;
	module.exports = exports['default'];

/***/ },
/* 243 */
/***/ function(module, exports) {

	/**
	 * Actions types and constants for application mode.
	 *
	 * Created by dmitri on 20/04/16.
	 */

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  ActionTypes: {
	    CHANGE_MODE: 'MODE_CHANGE_MODE'
	  },
	  Modes: {
	    SET: 'MODE_SET',
	    OBSERVATION: 'MODE_OBSERVATION',
	    ORGANISATION: 'MODE_ORGANISATION',
	    TABULAR: 'MODE_TABULAR'
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Actions to regulate transitions between modes (Set, Observation, Organisation, Tabular)
	 *
	 * Created by dmitri on 20/04/16.
	 */
	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsModeConstants = __webpack_require__(243);

	var _constantsModeConstants2 = _interopRequireDefault(_constantsModeConstants);

	exports['default'] = {
	  /**
	   * Change the mode
	   * @param mode String id of the mode to switch to (see ModeConstants.Modes for valid values)
	   */
	  changeMode: function changeMode(mode) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsModeConstants2['default'].ActionTypes.CHANGE_MODE,
	      mode: mode
	    });
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Actions used in the SetManager component.
	 */
	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsManagerConstants = __webpack_require__(246);

	var _constantsManagerConstants2 = _interopRequireDefault(_constantsManagerConstants);

	exports['default'] = {
	  /**
	   * Set the (global) selected element in set manager
	   * @param id UID of the entity
	   * @param type Type of the entity, same as the type in database
	   * @param name Displayed name of the entity
	   * @param parentId UID of the parent entity
	   * @param linkToParentId UID of the edge linking parent to child
	   */
	  select: function select(id) {
	    var type = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	    var name = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
	    var parentId = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
	    var linkToParentId = arguments.length <= 4 || arguments[4] === undefined ? null : arguments[4];

	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsManagerConstants2['default'].ActionTypes.SET_SELECTED_NODE,
	      id: id,
	      type: type,
	      name: name,
	      linkToParent: linkToParentId,
	      parent: parentId
	    });
	  },

	  /**
	   * Set the (local to a specific Set) selected element in set manager by indexes
	   * @param setIdx Index of the Set in the ManagerStore list of displayed Sets.
	   * @param entityIdx Index of the entity to select in the Set.
	   */
	  selectEntityInSet: function selectEntityInSet(setIdx, entityIdx) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsManagerConstants2['default'].ActionTypes.SET_ACTIVE_ENTITY_IN_SET,
	      setIndex: setIdx,
	      entityIndex: entityIdx
	    });
	  },

	  /**
	   * Same as selectEntityInSet, using UIDs instead of indexes. Note, do not use this if you think the same entity is used multiple times in a Set.
	   * @param parentSetId
	   * @param entityId
	   */
	  selectEntityInSetById: function selectEntityInSetById(parentSetId, entityId) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsManagerConstants2['default'].ActionTypes.SET_ACTIVE_ENTITY_IN_SET,
	      parentSetId: parentSetId,
	      entityId: entityId
	    });
	  },

	  /**
	   * Select or unselect an item in the Explore basket.
	   * @param id UID of the element in the basket
	   * @param state true = element is selected; false = element is not selected
	   */
	  changeBasketSelectionState: function changeBasketSelectionState(id, state) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsManagerConstants2['default'].ActionTypes.BASKET_CHANGE_SELECTION,
	      id: id,
	      selected: state
	    });
	  },

	  /**
	   * Removes the item with the given ID from the Explore basket. Note, this element is removed both from the store and the global basket component.
	   * @param id UID of the basket item to remove
	   */
	  removeItemFromBasket: function removeItemFromBasket(id) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsManagerConstants2['default'].ActionTypes.BASKET_REMOVE_ITEM,
	      item: id
	    });
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 246 */
/***/ function(module, exports) {

	/**
	 * Constants for the SetManager.
	 *
	 * Created by dmitri on 15/01/16.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  ActionTypes: {
	    TOGGLE_SET_MANAGER_VISIBILITY: "MANAGER_TOGGLE_SEt_MANAGER_VISIBILITY",
	    SET_SELECTED_NODE: 'MANAGER_SET_SELECTED_NODE',
	    SET_ACTIVE_ENTITY_IN_SET: 'MANAGER_SET_ACTIVE_ENTITY_IN_SET'
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by dmitri on 05/04/16.
	 */
	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsMetadataConstants = __webpack_require__(248);

	var _constantsMetadataConstants2 = _interopRequireDefault(_constantsMetadataConstants);

	exports['default'] = {
	  /**
	   * Sets the id of a Set in the LabBenchStore. Does not start loading the Set yet.
	   * @param id
	   */
	  setLabBenchId: function setLabBenchId() {
	    var id = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];

	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsMetadataConstants2['default'].ActionTypes.SET_LAB_BENCH,
	      id: id
	    });
	  },

	  /**
	   * Sets and loads the id of a Set in the LabBenchStore.
	   * @param id
	   */
	  loadLabBench: function loadLabBench(id) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsMetadataConstants2['default'].ActionTypes.LOAD_LAB_BENCH,
	      id: id
	    });
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 248 */
/***/ function(module, exports) {

	/**
	 * Actions for general metadata and lab bench actions.
	 *
	 * Created by dmitri on 05/04/16.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  ActionTypes: {
	    SET_LAB_BENCH: 'METADATA_SET_LAB_BENCH',
	    LOAD_LAB_BENCH: 'METADATA_LOAD_LAB_BENCH'
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Actions which coocrdinate communication between tools in the Toolbox, their respective Popups, and the ToolStore.
	 * Created by dmitri on 08/10/15.
	 */
	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsToolConstants = __webpack_require__(250);

	var _constantsToolConstants2 = _interopRequireDefault(_constantsToolConstants);

	exports['default'] = {
	  /**
	   * Set the active tool. To deactivate a tool use the 'nothing' tool.
	   * @param toolName String name of the tool to activate (see conf/Tools-conf for complete list)
	   */
	  setTool: function setTool(toolName) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsToolConstants2['default'].ActionTypes.TOOL_SET_ACTIVE_TOOL,
	      tool: toolName
	    });
	  },

	  /**
	   * Registers a tool when application loads. An unregistered tool cannot be activated.
	   * @param name String see conf/Tools-conf for complete list
	   * @param onClickAction Function to be called when user clicks (deprecated)
	   * @param component Object reference to the component ('this' context).
	   */
	  registerTool: function registerTool(name, onClickAction, component) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsToolConstants2['default'].ActionTypes.TOOL_REGISTER,
	      name: name,
	      onClickCallback: onClickAction,
	      component: component
	    });
	  },

	  /**
	   * Runs the click action registered for the tool. Deprecated in favor of direct handling from component code.
	   * @param x Integer x-coordinate of the click in the D3 space coordinates
	   * @param y Integer y-coordinate of the click in the D3 space coordinates
	   * @param miscData Object data sent along with the click (such as objects at location or event data)
	   */
	  runTool: function runTool(x, y, miscData) {
	    //console.log("ToolActions executeTool");
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsToolConstants2['default'].ActionTypes.TOOL_RUN,
	      x: x,
	      y: y,
	      misc: miscData
	    });
	  },

	  /**
	   * Change the tooltip data with the given text.
	   * @param text String or JSXHTML Text to be set.
	   */
	  updateTooltipData: function updateTooltipData(text) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsToolConstants2['default'].ActionTypes.TOOL_UPDATE_DATA_DISPLAY,
	      content: text
	    });
	  },

	  /**
	   * Used to pass data between the tool and its popup component.
	   * @param data Object representing the data to be passed. Each component/popup has its own structure expectations.
	   */
	  updateToolData: function updateToolData(data) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsToolConstants2['default'].ActionTypes.TOOL_UPDATE_DATA,
	      data: data
	    });
	  },

	  /**
	   * Save the tool data on server. Some components do not use this action and save directly. This only produces results if the canSave function of the tool returns true.
	   */
	  save: function save() {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsToolConstants2['default'].ActionTypes.TOOL_SAVE
	    });
	  },

	  /**
	   * Resets data in the current tool, effectively sending it back to its initial state.
	   */
	  reset: function reset() {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsToolConstants2['default'].ActionTypes.TOOL_RESET
	    });
	  },

	  /**
	   * Displays the tool's popup.
	   * @param popup Object popup React component to be mounted in the popup container.
	   */
	  activeToolPopupUpdate: function activeToolPopupUpdate(popup) {
	    window.setTimeout(function () {
	      _dispatcherAppDispatcher2['default'].dispatch({
	        actionType: _constantsToolConstants2['default'].ActionTypes.TOOL_POPUP,
	        popup: popup
	      });
	    }, 50);
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 250 */
/***/ function(module, exports) {

	/**
	 * Constants for tool actions.
	 *
	 * Created by dmitri on 08/10/15.
	 */
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  ActionTypes: {
	    TOOL_SET_ACTIVE_TOOL: "TOOL_SET_ACTIVE_TOOL",
	    TOOL_CLEAR: "TOOL_CLEAR",
	    TOOL_REGISTER: "TOOL_REGISTER",
	    TOOL_RUN: "TOOL_RUN",
	    TOOL_UPDATE_DATA_DISPLAY: "TOOL_UPDATE_DATA_DISPLAY",
	    TOOL_UPDATE_DATA: "TOOL_UPDATE_DATA",
	    TOOL_RESET: "TOOL_RESET",
	    TOOL_POPUP: "TOOL_POPUP",
	    TOOL_SAVE: "TOOL_SAVE"
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by dmitri on 24/05/16.
	 *
	 * Constants for the Inspector & list of measures components.
	 */
	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsInspectorConstants = __webpack_require__(252);

	var _constantsInspectorConstants2 = _interopRequireDefault(_constantsInspectorConstants);

	exports['default'] = {
	  /**
	   * Set the entities to display in Inspector
	   * @param data List of entity ids (strings) to display in inspector
	   */
	  setInspectorData: function setInspectorData() {
	    var data = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];

	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsInspectorConstants2['default'].ActionTypes.SET_DATA,
	      data: data
	    });
	  },

	  /**
	   * Set the Image/Specimen whose measures/tags are to be displayed.
	   * @param id
	   */
	  setImageInAnnotationList: function setImageInAnnotationList(id) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsInspectorConstants2['default'].ActionTypes.SET_IMAGE,
	      id: id
	    });
	  },

	  /**
	   * Set the Set whose measures/tags are to be displayed.
	   * @param id
	   */
	  setSetInAnnotationList: function setSetInAnnotationList(id) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsInspectorConstants2['default'].ActionTypes.SET_SET,
	      id: id
	    });
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 252 */
/***/ function(module, exports) {

	/**
	 * Constants for the Inspector / Properties panel.
	 *
	 * Created by dmitri on 24/05/16.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  ActionTypes: {
	    SET_DATA: 'INSPECTOR_SET_DATA',
	    SET_IMAGE: 'INSPECTOR_SET_IMAGE',
	    SET_SET: 'INSPECTOR_SET_SET'
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Collection of static utility methods to manipulate the D3 image.
	 *
	 * Created by dmitri on 12/05/16.
	 */
	'use strict';

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _D3EventHandlers = __webpack_require__(254);

	var _D3EventHandlers2 = _interopRequireDefault(_D3EventHandlers);

	var _constantsCommonSVGClasses = __webpack_require__(224);

	var _constantsCommonSVGClasses2 = _interopRequireDefault(_constantsCommonSVGClasses);

	var _constantsViewConstants = __webpack_require__(197);

	var _constantsViewConstants2 = _interopRequireDefault(_constantsViewConstants);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _imagesPoiSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../images/poi.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesPoiSvg2 = _interopRequireDefault(_imagesPoiSvg);

	var _imagesResizeHandleSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../images/resize-handle.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesResizeHandleSvg2 = _interopRequireDefault(_imagesResizeHandleSvg);

	var D3ViewUtils = (function () {
	  function D3ViewUtils() {
	    _classCallCheck(this, D3ViewUtils);
	  }

	  _createClass(D3ViewUtils, null, [{
	    key: 'drawBenchData',

	    /**
	     * Draws or updates the drawing of the lab bench data. This is the main rendering method for the lab bench.
	     * Each new element to be drawn must follow the classic D3 enter-exit-update pattern (see D3 documentation) for performance and code readability reasons. Also to avoid bugs and headaches.
	     * @param data displayed data representation element generated by components/bench/D3FreeSpace::buildDisplayDataElement
	     * @param self reference to the D3FreeSpace element (only the stores are used here).
	     */
	    value: function drawBenchData(data, self) {
	      var root = _d32['default'].select('.' + _constantsCommonSVGClasses2['default'].OBJECTS_CONTAINER_CLASS);
	      var children = root.selectAll('.' + _constantsCommonSVGClasses2['default'].CHILD_GROUP_CLASS).data(data, function (d) {
	        return d.link;
	      });
	      var displays = self.viewstore.getDisplayedTypes();
	      var colors = self.viewstore.getColors();

	      // One group per entity displayed in lab bench (i.e. per View-Entity link).
	      children.enter().append('g').attr('class', _constantsCommonSVGClasses2['default'].CHILD_GROUP_CLASS).attr('id', function (d) {
	        return 'GROUP-' + d.link;
	      }).attr('transform', function (d) {
	        return d.x === null || d.y === null || d.displayHeight === null || d.height === null ? '' : 'translate(' + d.x + ',' + d.y + ')scale(' + d.displayHeight / d.height + ')';
	      });
	      children.exit().remove();
	      children.attr('transform', function (d) {
	        return d.x === null || d.y === null || d.displayHeight === null || d.height === null ? '' : 'translate(' + d.x + ',' + d.y + ')scale(' + d.displayHeight / d.height + ')';
	      });

	      // BEGIN under image update (borders, image title and actions such as drag and resize go here)
	      var under = children.selectAll('.' + _constantsCommonSVGClasses2['default'].UNDER_CHILD_CLASS).data(function (d) {
	        return [d];
	      }, function (d) {
	        return d.link;
	      });
	      under.enter().append('g').attr('class', function (d) {
	        return _constantsCommonSVGClasses2['default'].UNDER_CHILD_CLASS;
	      }).attr('id', function (d) {
	        return 'UNDER-' + d.link;
	      });
	      under.exit().remove();
	      under.attr('id', function (d) {
	        return 'UNDER-' + d.link;
	      });

	      if (displays.borders) {
	        var borderAreas = under.selectAll('.' + _constantsCommonSVGClasses2['default'].BORDER_CLASS).data(function (d) {
	          return [d];
	        }, function (d) {
	          return d.link;
	        });
	        borderAreas.enter().append('rect').attr('class', _constantsCommonSVGClasses2['default'].BORDER_CLASS).attr('id', function (d) {
	          return 'BORDER-' + d.link;
	        }).attr('x', function (d) {
	          return -5 / self.view.scale * d.height / d.displayHeight;
	        }).attr('y', function (d) {
	          return -20 / self.view.scale * d.height / d.displayHeight;
	        }).attr('width', function (d) {
	          return d.width + 10 / self.view.scale * d.height / d.displayHeight;
	        }).attr('height', function (d) {
	          return d.height + 30 / self.view.scale * d.height / d.displayHeight;
	        }).style('fill', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : '#AAAAAA';
	        });
	        borderAreas.exit().remove();
	        borderAreas.attr('x', function (d) {
	          return -5 / self.view.scale * d.height / d.displayHeight;
	        }).attr('y', function (d) {
	          return -20 / self.view.scale * d.height / d.displayHeight;
	        }).attr('width', function (d) {
	          return d.width + 10 / self.view.scale * d.height / d.displayHeight;
	        }).attr('height', function (d) {
	          return d.height + 30 / self.view.scale * d.height / d.displayHeight;
	        }).style('fill', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : '#AAAAAA';
	        });

	        var namePath = under.selectAll('.' + _constantsCommonSVGClasses2['default'].NAME_PATH_CLASS).data(function (d) {
	          return [d];
	        }, function (d) {
	          return d.link;
	        });
	        namePath.enter().append('path').attr('id', function (d) {
	          return 'NAME-PATH-' + d.link;
	        }).attr('class', _constantsCommonSVGClasses2['default'].NAME_PATH_CLASS).attr('d', function (d) {
	          return 'M 0 ' + -5 * d.height / d.displayHeight / self.view.scale + ' L ' + d.width + ' ' + -5 * d.height / d.displayHeight / self.view.scale;
	        }).style('pointer-events', 'none');
	        namePath.exit().remove();
	        namePath.attr('d', function (d) {
	          return 'M 0 ' + -5 * d.height / d.displayHeight / self.view.scale + ' L ' + d.width + ' ' + -5 * d.height / d.displayHeight / self.view.scale;
	        }).style('pointer-events', 'none');

	        var _name = under.selectAll('.' + _constantsCommonSVGClasses2['default'].NAME_CLASS).data(function (d) {
	          return [d];
	        }, function (d) {
	          return d.link;
	        });
	        _name.enter().append('text').attr('class', _constantsCommonSVGClasses2['default'].NAME_CLASS).attr('id', function (d) {
	          return 'NAME-' + d.link;
	        }).attr('x', 10).attr('font-family', 'Verdana').attr('font-size', function (d) {
	          return 14 / self.view.scale * d.height / d.displayHeight + 'px';
	        }).attr('fill', 'white').append('textPath').attr('xlink:href', function (d) {
	          return '#NAME-PATH-' + d.link;
	        }).style('pointer-events', 'none').text(function (d) {
	          return d.name;
	        });
	        _name.exit().remove();
	        _name.attr('font-size', function (d) {
	          return 14 / self.view.scale * d.height / d.displayHeight + 'px';
	        }).select('textPath').style('pointer-events', 'none').text(function (d) {
	          return d.name;
	        });

	        var resizer = under.selectAll('.' + _constantsCommonSVGClasses2['default'].RESIZE_CLASS).data(function (d) {
	          return [d];
	        }, function (d) {
	          return d.link;
	        });
	        resizer.enter().append('svg:image').attr('xlink:href', _imagesResizeHandleSvg2['default']).attr('class', _constantsCommonSVGClasses2['default'].RESIZE_CLASS).attr('id', function (d) {
	          return 'RESIZE-' + d.link;
	        }).attr('x', function (d) {
	          return d.width - 5 / self.view.scale * d.height / d.displayHeight;
	        }).attr('y', function (d) {
	          return d.height;
	        }).attr('width', function (d) {
	          return 10 / self.view.scale * d.height / d.displayHeight;
	        }).attr('height', function (d) {
	          return 10 / self.view.scale * d.height / d.displayHeight;
	        }).call(_D3EventHandlers2['default'].dragResize()).style('cursor', '-webkit-nwse-resize').style('cursor', 'nwse-resize');
	        resizer.exit().remove();
	        resizer.attr('x', function (d) {
	          return d.width - 5 / self.view.scale * d.height / d.displayHeight;
	        }).attr('y', function (d) {
	          return d.height;
	        }).attr('width', function (d) {
	          return 10 / self.view.scale * d.height / d.displayHeight;
	        }).attr('height', function (d) {
	          return 10 / self.view.scale * d.height / d.displayHeight;
	        });

	        if (self.modestore.isInObservationMode()) {
	          borderAreas.style('cursor', '-webkit-grab').style('cursor', 'grab').call(_D3EventHandlers2['default'].dragMove());
	        }
	      } else {
	        under.selectAll('.' + _constantsCommonSVGClasses2['default'].BORDER_CLASS).remove();
	        under.selectAll('.' + _constantsCommonSVGClasses2['default'].NAME_PATH_CLASS).remove();
	        under.selectAll('.' + _constantsCommonSVGClasses2['default'].NAME_CLASS).remove();
	        under.selectAll('.' + _constantsCommonSVGClasses2['default'].RESIZE_CLASS).remove();
	      }
	      // END under image update

	      // Create the image representation of the entity
	      var image = children.selectAll('.' + _constantsCommonSVGClasses2['default'].IMAGE_CLASS).data(function (d) {
	        return [d];
	      }, function (d) {
	        return d.link;
	      });
	      image.enter().append('svg:image').attr('class', _constantsCommonSVGClasses2['default'].IMAGE_CLASS).attr('id', function (d) {
	        return 'IMAGE-' + d.link;
	      }).attr("height", function (d) {
	        return d.height;
	      }).attr("width", function (d) {
	        return d.width;
	      }).attr("x", 0).attr("y", 0);
	      image.exit().remove();
	      image.attr("height", function (d) {
	        return d.height;
	      }).attr("width", function (d) {
	        return d.width;
	      });

	      // BEGIN over image update (anchors, tools, etc)
	      var over = children.selectAll('.' + _constantsCommonSVGClasses2['default'].OVER_CHILD_CLASS).data(function (d) {
	        return [d];
	      }, function (d) {
	        return d.link;
	      });
	      over.enter().append('g').attr('class', _constantsCommonSVGClasses2['default'].OVER_CHILD_CLASS).attr('id', function (d) {
	        return 'OVER-' + d.link;
	      });
	      over.exit().remove();

	      over = children.selectAll('.' + _constantsCommonSVGClasses2['default'].OVER_CHILD_CLASS);

	      var annotations = over.selectAll('.' + _constantsCommonSVGClasses2['default'].ANNOTATIONS_CONTAINER_CLASS).data(function (d) {
	        return [d];
	      }, function (d) {
	        return d.link;
	      });
	      annotations.enter().append('g').attr('class', _constantsCommonSVGClasses2['default'].ANNOTATIONS_CONTAINER_CLASS).attr('id', function (d) {
	        return 'ANNOTATIONS-' + d.link;
	      });
	      annotations.exit().remove();

	      annotations = over.selectAll('.' + _constantsCommonSVGClasses2['default'].ANNOTATIONS_CONTAINER_CLASS);

	      if (displays.angles) {
	        var angle = annotations.selectAll('.' + _constantsCommonSVGClasses2['default'].AOI_CLASS).data(function (d) {
	          return d.aois;
	        }, function (d) {
	          return d.uid;
	        });
	        angle.enter().append('polyline').attr('class', _constantsCommonSVGClasses2['default'].AOI_CLASS).attr('id', function (d) {
	          return 'AOI-' + d.uid;
	        }).attr('fill', 'none').attr('stroke', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : 'red';
	        }).attr('points', function (d) {
	          return d.polygonVertices.replace(/\]/g, '').replace(/\[/g, '').replace(/\,/g, ' ');
	        }).attr('stroke-width', 4).style('pointer-events', 'none').style('outline-style', function (d) {
	          return colors[d.uid] ? 'solid' : null;
	        }).style('outline-width', 2 / self.view.scale + 'px').style('outline-color', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : null;
	        });
	        angle.exit().remove();
	        angle.attr('points', function (d) {
	          return d.polygonVertices.replace(/\]/g, '').replace(/\[/g, '').replace(/\,/g, ' ');
	        }).attr('stroke', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : 'red';
	        }).style('outline-style', function (d) {
	          return colors[d.uid] ? 'solid' : null;
	        }).style('outline-width', 2 / self.view.scale + 'px').style('outline-color', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : null;
	        });
	      } else {
	        annotations.selectAll('.' + _constantsCommonSVGClasses2['default'].AOI_CLASS).remove();
	      }

	      if (displays.trails) {
	        var path = annotations.selectAll('.' + _constantsCommonSVGClasses2['default'].PATH_CLASS).data(function (d) {
	          return d.tois;
	        }, function (d) {
	          return d.uid;
	        });
	        path.enter().append('polyline').attr('class', _constantsCommonSVGClasses2['default'].PATH_CLASS).attr('id', function (d) {
	          return 'PATH-' + d.uid;
	        }).attr('fill', 'none').attr('stroke', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : 'red';
	        }).attr('points', function (d) {
	          return d.polygonVertices.replace(/\]/g, '').replace(/\[/g, '').replace(/\,/g, ' ');
	        }).attr('stroke-width', 4).style('pointer-events', 'none').style('outline-style', function (d) {
	          return colors[d.uid] ? 'solid' : null;
	        }).style('outline-width', 2 / self.view.scale + 'px').style('outline-color', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : null;
	        });
	        path.exit().remove();
	        path.attr('points', function (d) {
	          return d.polygonVertices.replace(/\]/g, '').replace(/\[/g, '').replace(/\,/g, ' ');
	        }).attr('stroke', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : 'red';
	        }).style('outline-style', function (d) {
	          return colors[d.uid] ? 'solid' : null;
	        }).style('outline-width', 2 / self.view.scale + 'px').style('outline-color', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : null;
	        });
	      } else {
	        annotations.selectAll('.' + _constantsCommonSVGClasses2['default'].PATH_CLASS).remove();
	      }

	      if (displays.points) {
	        var point = annotations.selectAll('.' + _constantsCommonSVGClasses2['default'].POI_CLASS).data(function (d) {
	          return d.pois;
	        }, function (d) {
	          return d.uid;
	        });
	        var poi = point.enter().append('g').attr('class', _constantsCommonSVGClasses2['default'].POI_CLASS).attr('id', function (d) {
	          return 'POI-' + d.uid;
	        }).attr('transform', function (d) {
	          return 'translate(' + d.x + ',' + d.y + ')';
	        }).style('outline-style', function (d) {
	          return colors[d.uid] ? 'solid' : null;
	        }).style('outline-width', 4 / self.view.scale + 'px').style('outline-color', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : null;
	        }).style('pointer-events', 'none');
	        poi.append('svg:image').attr('height', 100).attr('width', 60).attr('xlink:href', _imagesPoiSvg2['default']).attr("x", -30).attr("y", -100);
	        point.exit().remove();
	        point.attr('transform', function (d) {
	          return 'translate(' + d.x + ',' + d.y + ')';
	        }).style('outline-style', function (d) {
	          return colors[d.uid] ? 'solid' : null;
	        }).style('outline-width', 4 / self.view.scale + 'px').style('outline-color', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : null;
	        });
	      } else {
	        annotations.selectAll('.' + _constantsCommonSVGClasses2['default'].POI_CLASS).remove();
	      }

	      if (displays.regions) {
	        var region = annotations.selectAll('.' + _constantsCommonSVGClasses2['default'].ROI_CLASS).data(function (d) {
	          return d.rois;
	        }, function (d) {
	          return d.uid;
	        });
	        region.enter().append('polygon').attr('class', _constantsCommonSVGClasses2['default'].ROI_CLASS).attr('id', function (d) {
	          return 'ROI-' + d.uid;
	        }).attr('points', function (d) {
	          return d.polygonVertices.replace(/\]/g, '').replace(/\[/g, '').replace(/\,/g, ' ');
	        }).attr('fill', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : 'blue';
	        }).attr('fill-opacity', 0.3).style('pointer-events', 'none').style('outline-style', function (d) {
	          return colors[d.uid] ? 'solid' : null;
	        }).style('outline-width', 2 / self.view.scale + 'px').style('outline-color', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : null;
	        });
	        region.exit().remove();
	        region.attr('points', function (d) {
	          return d.polygonVertices.replace(/\]/g, '').replace(/\[/g, '').replace(/\,/g, ' ');
	        }).attr('fill', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : 'blue';
	        }).style('outline-style', function (d) {
	          return colors[d.uid] ? 'solid' : null;
	        }).style('outline-width', 2 / self.view.scale + 'px').style('outline-color', function (d) {
	          return colors[d.uid] ? colors[d.uid][0] : null;
	        });
	      } else {
	        annotations.selectAll('.' + _constantsCommonSVGClasses2['default'].ROI_CLASS).remove();
	      }
	      // END over image update
	    }

	    /**
	     * This is a callback to display an image after it has finished loading in the background.
	     * @param data data element of the entity.
	     * @param image Image after it has finished loading.
	     */
	  }, {
	    key: 'displayLoadedImage',
	    value: function displayLoadedImage(data, image) {
	      var group = _d32['default'].selectAll("." + _constantsCommonSVGClasses2['default'].CHILD_GROUP_CLASS);

	      group.select("#IMAGE-" + data.link).attr("xlink:href", image.src);
	    }

	    /**
	     * Provides the image URL corresponsing to the visible proportion of the image. Thresholds are :
	     * - under 20% visible area : thumbnail url
	     * - between 20% and 70% visible area : intermediary image url
	     * - over 70% visible area : full-size image url
	     * When a url is not provided the function moves to the highest size available.
	     * @param d Data of the displayed element, must contain displayHeight, displayWidth & various url properties
	     * @param view View data as contained in ViewStore component.
	     */
	  }, {
	    key: 'getImageUrlFromVisibleProportion',
	    value: function getImageUrlFromVisibleProportion(d, view) {
	      var proportion = d.displayHeight / (view.yMax - view.yMin);
	      if (proportion < 0.2) {
	        return D3ViewUtils.getImageUrlFromQuality(d, _constantsViewConstants2['default'].imageQuality.Low);
	      } else if (proportion < 0.7) {
	        return D3ViewUtils.getImageUrlFromQuality(d, _constantsViewConstants2['default'].imageQuality.High);
	      } else {
	        return D3ViewUtils.getImageUrlFromQuality(d, _constantsViewConstants2['default'].imageQuality.Original);
	      }
	    }

	    /**
	     * Retrieve image URL corresponding to given quality
	     * @param data Image data, must have at least a 'url' field and should also have a 'thumbnail' field. If the thumbnail field is provided, it is assumed to be a ReColNat image and the intermediary image is calculated from it.
	     * @param quality One of the values provided in ViewConstants.imageQuality
	     */
	  }, {
	    key: 'getImageUrlFromQuality',
	    value: function getImageUrlFromQuality(data, quality) {
	      switch (quality) {
	        case _constantsViewConstants2['default'].imageQuality.Low:
	          return data.thumbnail;
	        case _constantsViewConstants2['default'].imageQuality.High:
	          // ex http://imager.mnhn.fr/imager2/w400/2012/11/20/6/P00048663.jpg
	          return data.thumbnail.replace('v25', 'w400');
	        case _constantsViewConstants2['default'].imageQuality.Original:
	          return data.url;
	        default:
	          return data.thumbnail;
	      }
	    }

	    /**
	     * Animates the border of the entity selected by the provided id. This is used for example to outline anchors.
	     * @param id UUID of the entity
	     */
	  }, {
	    key: 'animateOutline',
	    value: function animateOutline(id) {
	      var d3Node = _d32['default'].select('#' + id);
	      d3Node.classed('outline', true).style('outline-style', 'solid').style('outline-width', '2px');

	      function repeat() {
	        d3Node.style('outline-color', 'black').transition().duration(500).ease('linear').style('outline-color', 'white').transition().duration(500).ease('linear').style('outline-color', 'black').each('end', repeat);
	      }
	      repeat();
	    }

	    /**
	     * Stops the animation started by animateOutline for the provided id.
	     */
	  }, {
	    key: 'stopOutlineAnimation',
	    value: function stopOutlineAnimation(id) {
	      _d32['default'].select('#' + id).classed('outline', false).interrupt().transition().style('outline-color', null).style('outline-width', null).style('outline-style', 'none');
	    }

	    /**
	     * Moves the view to the object described by the provided data.
	     * Internally, as the object may not be drawn in the DOM, this calculates the coordinates of the bounding box, creates the box, moves the view towards the box and removes the box. This is done to avoid the headache of trigonometry (due to axis transformation in D3).
	     * @param objectData data of the object to be zoomed on
	     * @param benchstore the LabBenchStore
	     * @param view current view data as contained in ViewStore
	     */
	  }, {
	    key: 'zoomToObject',
	    value: function zoomToObject(objectData, benchstore, view) {
	      var d3linkId = null;
	      var coords = null;
	      switch (objectData.type) {
	        case 'Image':
	          if (objectData.link) {
	            d3linkId = objectData.link;
	          } else {
	            var _displayData = benchstore.getDisplayData(objectData.uid);
	            d3linkId = _displayData.link;
	          }
	          D3ViewUtils.zoomToObjectInternal('#GROUP-' + d3linkId, view);
	          return;
	        case 'PointOfInterest':
	          coords = {
	            x: objectData.x - 30,
	            y: objectData.y - 100,
	            width: 60,
	            height: 100
	          };
	          break;
	        case 'RegionOfInterest':
	        case 'AngleOfInterest':
	        case 'TrailOfInterest':
	          var vertices = JSON.parse(objectData.polygonVertices);
	          coords = {
	            x: _.chain(vertices).map(function (v) {
	              return v[0];
	            }).reduce(function (m, n) {
	              return Math.min(m, n);
	            }).value(),
	            y: _.chain(vertices).map(function (v) {
	              return v[1];
	            }).reduce(function (m, n) {
	              return Math.min(m, n);
	            }).value()
	          };
	          coords.width = _.chain(vertices).map(function (v) {
	            return v[0];
	          }).reduce(function (m, n) {
	            return Math.max(m, n);
	          }).value() - coords.x;
	          coords.height = _.chain(vertices).map(function (v) {
	            return v[1];
	          }).reduce(function (m, n) {
	            return Math.max(m, n);
	          }).value() - coords.y;
	          break;
	        default:
	          console.error('No handler for type ' + objectData.type);
	          return;
	      }

	      var imageId = objectData.parents[0];
	      var displayData = benchstore.getDisplayData(imageId);
	      d3linkId = displayData.link;

	      // Draw useless item on this image and zoom on it, letting automatic draw-on-pan take over
	      _d32['default'].select('#ANNOTATIONS-' + d3linkId).append('rect').attr('id', 'ZOOMER').attr('x', coords.x).attr('y', coords.y).attr('height', coords.height).attr('width', coords.width);

	      D3ViewUtils.zoomToObjectBySelector('#ZOOMER', view);
	      _d32['default'].select('#ZOOMER').remove();
	    }

	    /**
	     * Center view upon an object using a d3 selector to find the object. Object must be in DOM for this method to work.
	     * @param d3selector String the selector (including any leading punctuation)
	     * @param view current view data as contained in ViewStore
	     */
	  }, {
	    key: 'zoomToObjectBySelector',
	    value: function zoomToObjectBySelector(d3selector, view) {
	      // Retrieve object coordinates and size in browser window
	      var object = _d32['default'].select(d3selector);
	      var winLoc = object.node().getBoundingClientRect();
	      var oldHeight = winLoc.height;
	      var oldWidth = winLoc.width;
	      var oldScale = view.scale;

	      // Calculate fitting area
	      var scale = 1.0;
	      if (oldHeight > oldWidth) {
	        scale = view.height * oldScale / oldHeight;
	      } else {
	        scale = view.width * oldScale / oldWidth;
	      }
	      scale = scale * 0.90;

	      // Leave half empty screen as margin to center the object in the viewport
	      var marginX = (view.width - oldWidth * scale / view.scale) / 2;
	      var marginY = (view.height - oldHeight * scale / view.scale) / 2;

	      // Dispatch action
	      window.setTimeout(_actionsViewActions2['default'].updateViewport.bind(null, (view.left - winLoc.left + view.leftFromWindow) * scale / view.scale + marginX, (view.top - winLoc.top + view.topFromWindow) * scale / view.scale + marginY, null, null, scale, true), 10);
	    }

	    /**
	     * Checks if the given element is currently in the visible area of a workbench.
	     * @param data data of the element
	     * @param view current view data as contained in ViewStore
	     */
	  }, {
	    key: 'isElementInView',
	    value: function isElementInView(data, view) {
	      return !(data.x + data.displayWidth < view.xMin || data.x > view.xMax || data.y + data.displayHeight < view.yMin || data.y > view.yMax);
	    }

	    /**
	     * Retrieves the selector of an element in D3 according to its 'type' property.
	     * @param data
	     */
	  }, {
	    key: 'findHilightD3Selector',
	    value: function findHilightD3Selector(data) {
	      switch (data.type) {
	        case 'Image':
	          return '#BORDER-' + data.uid;
	          break;
	        case 'PointOfInterest':
	          return '#POI-' + data.uid;
	          break;
	        case 'RegionOfInterest':
	          return '#ROI-' + data.uid;
	          break;
	        case 'TrailOfInterest':
	          return '#PATH-' + data.uid;
	          break;
	        case 'AngleOfInterest':
	          return '#AOI-' + data.uid;
	          break;
	        default:
	          console.warn('Element type not displayed in D3 : ' + data.type);
	      }
	    }
	  }]);

	  return D3ViewUtils;
	})();

	exports['default'] = D3ViewUtils;
	module.exports = exports['default'];

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Collection of static methods to use as D3 event handlers.
	 *
	 * Created by dmitri on 27/04/16.
	 */
	'use strict';

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _constantsCommonSVGClasses = __webpack_require__(224);

	var _constantsCommonSVGClasses2 = _interopRequireDefault(_constantsCommonSVGClasses);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var D3EventHandlers = (function () {
	  function D3EventHandlers() {
	    _classCallCheck(this, D3EventHandlers);
	  }

	  _createClass(D3EventHandlers, null, [{
	    key: 'dragResize',

	    /**
	     * Resize an image or other content on the bench.
	     * D3 behavior
	     */
	    value: function dragResize() {
	      return _d32['default'].behavior.drag().origin(function (d) {
	        return d;
	      }).on('dragstart', D3EventHandlers.startImageResize).on('drag', D3EventHandlers.resizeImageBorders).on('dragend', D3EventHandlers.fixImageSize);
	    }

	    /**
	     * Begins resizing the element denoted by data 'd'.
	     * d must contain properties 'height', 'width' and 'link' (the latter is the UID of the link between a View and an Entity displayed in the View).
	     * Creates an element in bench with id=RESIZE_WINDOW which is used as shadow to display the new size.
	     */
	  }, {
	    key: 'startImageResize',
	    value: function startImageResize(d) {
	      //console.log('resize start');
	      _d32['default'].event.sourceEvent.preventDefault();
	      _d32['default'].event.sourceEvent.stopPropagation();
	      d.newHeight = d.height;
	      d.newWidth = d.width;
	      //console.log(JSON.stringify(d));
	      _d32['default'].select('#OVER-' + d.link).append('rect').attr('id', 'RESIZE_WINDOW').attr('x', 0).attr('y', 0).attr('height', d.newHeight).attr('width', d.newWidth).style('stroke-width', 1).style('stroke', 'rgb(0,0,0)').style('fill', 'rgb(10,20,180)').style('fill-opacity', '0.4');
	    }

	    /**
	     * Changes the size of an entity's shadow (RESIZE_WINDOW) while user is dragging.
	     * Minimum height & width blocked to 100px, the shadow will not go below these values in order to avoid 'image reversal' bug.
	     */
	  }, {
	    key: 'resizeImageBorders',
	    value: function resizeImageBorders(d) {
	      var oldHeight = d.newHeight;
	      if (d.newHeight + _d32['default'].event.dy > 100) {
	        d.newHeight = d.newHeight + _d32['default'].event.dy;
	        d.newWidth = d.newWidth * d.newHeight / oldHeight;
	      }

	      _d32['default'].select('#RESIZE_WINDOW').attr('height', d.newHeight).attr('width', d.newWidth);
	    }

	    /**
	     * Finish resize, remove shadow and set new width & height for entity (sends message to server).
	     * Negative new height or width not allowed and results in alert (which cannot be easily localized, hence should never happen).
	     */
	  }, {
	    key: 'fixImageSize',
	    value: function fixImageSize(d) {
	      var link = d.link;
	      var view = d.view;
	      var entity = d.entity;
	      var height = d.newHeight * d.displayHeight / d.height;
	      var width = d.newWidth * d.displayHeight / d.height;

	      if (width <= 0 || height <= 0) {
	        alert('La hauteur et la largeur doivent être positives');
	        return;
	      }

	      _utilsServiceMethods2['default'].resize(view, link, entity, width, height);

	      _d32['default'].select('#RESIZE_WINDOW').remove();
	      d.newHeight = null;
	      d.newWidth = null;
	    }

	    /**
	     * Defines the D3 behavior used to drag entities around the lab bench.
	     */
	  }, {
	    key: 'dragMove',
	    value: function dragMove() {
	      return _d32['default'].behavior.drag().origin(function (d) {
	        return d;
	      }).on('dragstart', D3EventHandlers.startImageMove).on('drag', D3EventHandlers.moveImageGhost).on('dragend', D3EventHandlers.fixImagePosition);
	    }

	    /**
	     * Begins the drag-move by creating a new ghost image of the entity being dragged. The entity is not moved until drag finishes.
	     */
	  }, {
	    key: 'startImageMove',
	    value: function startImageMove(d) {
	      if (_d32['default'].event.sourceEvent.which == 1) {
	        _d32['default'].event.sourceEvent.preventDefault();
	        _d32['default'].event.sourceEvent.stopPropagation();
	        _d32['default'].select('#OVER-' + d.link).append('svg:image').attr('id', 'MOVE_OBJECT').attr('x', 0).attr('y', 0).attr('height', d.height).attr('width', d.width).attr('xlink:href', d.thumbnail).classed('dragging', true).style('opacity', 0.3);

	        _d32['default'].select('svg').style('cursor', '-webkit-grabbing').style('cursor', 'grabbing');
	        d.tx = 0;
	        d.ty = 0;
	      }
	    }

	    /**
	     * Moves the ghost image around while user is dragging it.
	     */
	  }, {
	    key: 'moveImageGhost',
	    value: function moveImageGhost(d) {
	      d.tx = d.tx + _d32['default'].event.dx;
	      d.ty = d.ty + _d32['default'].event.dy;

	      _d32['default'].select('#MOVE_OBJECT').attr('x', d.tx).attr('y', d.ty);
	    }

	    /**
	     * Removes ghost image and sends new image position to server.
	     */
	  }, {
	    key: 'fixImagePosition',
	    value: function fixImagePosition(d) {
	      if (_d32['default'].event.sourceEvent.which == 1) {
	        _utilsServiceMethods2['default'].move(d.view, d.link, d.entity, d.x + d.tx * d.displayHeight / d.height, d.y + d.ty * d.displayHeight / d.height);

	        _d32['default'].select('#MOVE_OBJECT').remove();

	        _d32['default'].select('svg').style('cursor', '-webkit-auto').style('cursor', 'auto');

	        d.tx = 0;
	        d.ty = 0;
	      }
	    }
	  }]);

	  return D3EventHandlers;
	})();

	exports['default'] = D3EventHandlers;
	module.exports = exports['default'];

/***/ },
/* 255 */,
/* 256 */,
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Global list of tool ids. Might be more appropriate to move it into ToolConstants file instead.
	 *
	 * Created by Dmitri Voitsekhovitch on 20/08/15.
	 */
	"use strict";

	var _interopRequireDefault = __webpack_require__(1)["default"];

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var ToolConfiguration = {
	  lineMeasure: {
	    id: "measure"
	  },
	  newRegionOfInterest: {
	    id: "newRoI"
	  },
	  newPointOfInterest: {
	    id: "newPoI"
	  },
	  newPath: {
	    id: "createPath"
	  },
	  newMeasureStandard: {
	    id: "newMeasureStandard"
	  },
	  annotation: {
	    id: "createAnnotation"
	  },
	  exportFragments: {
	    id: "exportFragments"
	  },
	  moveObject: {
	    id: 'moveObject'
	  },
	  moveView: {
	    id: 'moveView'
	  },
	  selectObject: {
	    id: 'selectObject'
	  },
	  newAngle: {
	    id: 'createNewAngleMeasure'
	  },
	  nothing: {
	    id: "null"
	  }
	};

	exports["default"] = ToolConfiguration;
	module.exports = exports["default"];

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Abstract component to be implemented by all tools.
	 *
	 * When extending React lifecycle functions (ex componentDidMount), don't forget to call super.function (ex super.componentDidMount).
	 */
	"use strict";

	var _get = __webpack_require__(3)["default"];

	var _inherits = __webpack_require__(19)["default"];

	var _createClass = __webpack_require__(28)["default"];

	var _classCallCheck = __webpack_require__(31)["default"];

	var _interopRequireDefault = __webpack_require__(1)["default"];

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _confToolsConf = __webpack_require__(257);

	var _confToolsConf2 = _interopRequireDefault(_confToolsConf);

	/**
	 * Abstract class providing the API for a tool which
	 */

	var AbstractTool = (function (_React$Component) {
	  _inherits(AbstractTool, _React$Component);

	  function AbstractTool(props) {
	    var _this = this;

	    _classCallCheck(this, AbstractTool);

	    _get(Object.getPrototypeOf(AbstractTool.prototype), "constructor", this).call(this, props);
	    this.buttonName = "Rien";

	    this.buttonStyle = {
	      padding: '5px 0px 10px 10px'
	    };

	    this._forceUpdate = function () {
	      var update = function update() {
	        return _this.setState({});
	      };
	      return update.apply(_this);
	    };

	    this.state = { active: false };
	  }

	  /**
	   * Optional. Specifies what happens when the user clicks somewhere.
	   * Tools which do not implement this method should manage SVG interaction in their begin(), reset(), finish() functions.
	   * @param self Object this component (deprecated, this is automatically bound in ToolStore)
	   * @param x Integer x-coordinate of the click
	   * @param y Integer y-coordinate of the click
	   * @param data Object any data the tool may need
	   */

	  _createClass(AbstractTool, [{
	    key: "click",
	    value: function click(self, x, y, data) {}

	    /**
	     * Optional. Specifies what happens when the user double-clicks somehwere and the double-click is transmitted through the ToolStore. By default does nothing.
	     * @param self
	     * @param x
	     * @param y
	     */
	  }, {
	    key: "doubleclick",
	    value: function doubleclick(self, x, y) {}

	    /**
	     * Return true if this component's implementation should support double-clicking from the ToolStore. Function doubleclick() must be implemented for this to produce results.
	     * @returns {boolean}
	     */
	  }, {
	    key: "canDoubleClick",
	    value: function canDoubleClick() {
	      return false;
	    }

	    /**
	     * Optional.
	     *
	     * Returns stuff to save. Content of the data returned depends on server expectations.
	     */
	  }, {
	    key: "save",
	    value: function save() {}

	    /**
	     * Return true if this component's implementation should support saving from the ToolStore. Function save() must be implemented.
	     * @returns {boolean}
	     */
	  }, {
	    key: "canSave",
	    value: function canSave() {
	      return false;
	    }

	    /**
	     * Mandatory.
	     *
	     * Called every time the tool is set as the active tool. Initialize your component, its popups, listeners, state and SVG operations.
	     */
	  }, {
	    key: "begin",
	    value: function begin() {
	      this.setState({ active: true });
	    }

	    /**
	     * Mandatory.
	     *
	     * Used to reset the tool to its initial state while keeping it as the active tool.
	     */
	  }, {
	    key: "reset",
	    value: function reset() {}

	    /**
	     * Mandatory.
	     *
	     * Called every time the tool is unselected. Perform display and state cleanup here.
	     */
	  }, {
	    key: "finish",
	    value: function finish() {
	      this.setState({ active: false });
	    }

	    /**
	     * Mandatory.
	     *
	     * It is strongly suggested for tools to also send tooltip data up the processing chain in this function.
	     */
	  }, {
	    key: "setMode",
	    value: function setMode() {
	      _actionsToolActions2["default"].setTool(_confToolsConf2["default"].nothing.uid);
	      // ToolActions.updateTooltipData(ToolConf.nothing.tooltip);
	    }

	    /**
	     * Don't forget to register your component with the ToolStore in this function's extension.
	     */
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.props.userstore.addLanguageChangeListener(this._forceUpdate);
	      $(this.refs.button.getDOMNode()).popup();
	    }
	  }, {
	    key: "componentWillUpdate",
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.active) {
	        this.buttonStyle.backgroundColor = 'rgba(200,200,200,1.0)';
	      } else {
	        this.buttonStyle.backgroundColor = null;
	      }
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps, prevState) {}
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.finish();
	      this.props.userstore.removeLanguageChangeListener(this._forceUpdate);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return _react2["default"].createElement(
	        "button",
	        { style: this.buttonStyle,
	          ref: "button",
	          className: "ui button compact",
	          onClick: this.setMode,
	          "data-content": this.props.userstore.getText('nothing') },
	        _react2["default"].createElement("i", { className: "ui large cancel icon" })
	      );
	    }
	  }]);

	  return AbstractTool;
	})(_react2["default"].Component);

	exports["default"] = AbstractTool;
	module.exports = exports["default"];

/***/ },
/* 259 */,
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Implementation of AbstractTool to create Points of Interest.
	 *
	 * Created by hector on 31/07/15.
	 */

	'use strict';

	var _get = __webpack_require__(3)["default"];

	var _inherits = __webpack_require__(19)["default"];

	var _createClass = __webpack_require__(28)["default"];

	var _classCallCheck = __webpack_require__(31)["default"];

	var _interopRequireDefault = __webpack_require__(1)["default"];

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _AbstractTool2 = __webpack_require__(258);

	var _AbstractTool3 = _interopRequireDefault(_AbstractTool2);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _constantsCommonSVGClasses = __webpack_require__(224);

	var _constantsCommonSVGClasses2 = _interopRequireDefault(_constantsCommonSVGClasses);

	var _popupsCreatePoIPopup = __webpack_require__(261);

	var _popupsCreatePoIPopup2 = _interopRequireDefault(_popupsCreatePoIPopup);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var _confToolsConf = __webpack_require__(257);

	var _confToolsConf2 = _interopRequireDefault(_confToolsConf);

	var _imagesPoiSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/poi.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesPoiSvg2 = _interopRequireDefault(_imagesPoiSvg);

	var CreatePoI = (function (_AbstractTool) {
	  _inherits(CreatePoI, _AbstractTool);

	  function CreatePoI(props) {
	    var _this = this;

	    _classCallCheck(this, CreatePoI);

	    _get(Object.getPrototypeOf(CreatePoI.prototype), "constructor", this).call(this, props);
	    this.vertexClass = "CREATE_POI_VERTEX";

	    this.state = this.initialState();

	    this._onViewPropertiesUpdate = function () {
	      var viewPropsUpdate = function viewPropsUpdate() {
	        return _d32["default"].select('.' + _this.vertexClass).attr('transform', 'translate(' + _this.state.x + ',' + _this.state.y + ')scale(' + _this.props.viewstore.getViewProperties().sizeOfTextAndObjects + ')');
	      };
	      return viewPropsUpdate.apply(_this);
	    };

	    this._onViewChange = function () {
	      var adaptPoIScale = function adaptPoIScale() {
	        return _this.drawPointInSVG();
	      };
	      return adaptPoIScale.apply(_this);
	    };
	  }

	  _createClass(CreatePoI, [{
	    key: "initialState",
	    value: function initialState() {
	      return {
	        imageUri: null,
	        imageLinkUri: null,
	        active: false,
	        x: null,
	        y: null,
	        displayX: null,
	        displayY: null,
	        name: ''
	      };
	    }

	    /**
	     * INHERITED API
	     */
	  }, {
	    key: "canSave",
	    value: function canSave() {
	      return true;
	    }
	  }, {
	    key: "setMode",
	    value: function setMode() {
	      _actionsToolActions2["default"].setTool(_confToolsConf2["default"].newPointOfInterest.id);
	    }
	  }, {
	    key: "save",
	    value: function save() {
	      if (!this.state.x || !this.state.y) {
	        alert(this.props.userstore.getInterpolatedText('invalidCoordinates', [this.state.x, this.state.y]));
	        return;
	      }

	      _utilsServiceMethods2["default"].createPointOfInterest(this.state.imageUri, this.state.x, this.state.y, this.state.name, _utilsGlobals2["default"].setSavedEntityInInspector);

	      window.setTimeout(_actionsToolActions2["default"].updateTooltipData.bind(null, this.props.userstore.getText('newPointOfInterestTooltip')), 10);

	      this.clearSVG();

	      this.setState({ x: null, y: null, displayX: null, displayY: null, imageUri: null, imageLinkUri: null });
	    }
	  }, {
	    key: "begin",
	    value: function begin() {
	      var popup = _react2["default"].createElement(_popupsCreatePoIPopup2["default"], { vertexClass: this.vertexClass,
	        userstore: this.props.userstore,
	        toolstore: this.props.toolstore,
	        setNameCallback: this.setName.bind(this)
	      });
	      window.setTimeout(_actionsToolActions2["default"].activeToolPopupUpdate.bind(null, popup), 10);

	      window.setTimeout(_actionsToolActions2["default"].updateTooltipData.bind(null, this.props.userstore.getText('newPointOfInterestTooltip')), 10);
	      window.setTimeout(_actionsViewActions2["default"].updateDisplayFilters.bind(null, { points: true }), 10);

	      var self = this;
	      _d32["default"].selectAll('.' + _constantsCommonSVGClasses2["default"].IMAGE_CLASS).on('click', function (d, i) {
	        if (_d32["default"].event.defaultPrevented) return;
	        if (_d32["default"].event.button == 0) {
	          _d32["default"].event.preventDefault();
	          _d32["default"].event.stopPropagation();
	          self.leftClick.call(this, self, d);
	        }
	      }).on('contextmenu', function (d, i) {
	        if (_d32["default"].event.defaultPrevented) return;
	        _d32["default"].event.preventDefault();
	        _d32["default"].event.stopPropagation();
	        self.rightClick.call(this, self, d);
	      }).style('cursor', 'crosshair');

	      this.props.viewstore.addViewportListener(this._onViewChange);

	      this.setState({ active: true });
	    }
	  }, {
	    key: "reset",
	    value: function reset() {
	      var popup = _react2["default"].createElement(_popupsCreatePoIPopup2["default"], { vertexClass: this.vertexClass,
	        userstore: this.props.userstore,
	        toolstore: this.props.toolstore,
	        setNameCallback: this.setName.bind(this)
	      });
	      window.setTimeout(_actionsToolActions2["default"].activeToolPopupUpdate.bind(null, popup), 10);

	      window.setTimeout(_actionsToolActions2["default"].updateTooltipData.bind(null, this.props.userstore.getText('newPointOfInterestTooltip')), 10);

	      this.clearSVG();
	      this.setState({ x: null, y: null, displayX: null, displayY: null, imageUri: null, imageLinkUri: null, name: '' });
	    }
	  }, {
	    key: "finish",
	    value: function finish() {
	      window.setTimeout(_actionsToolActions2["default"].activeToolPopupUpdate, 10);
	      window.setTimeout(_actionsToolActions2["default"].updateTooltipData.bind(null, ""), 10);
	      this.clearSVG();

	      this.props.viewstore.removeViewportListener(this._onViewChange);

	      _d32["default"].selectAll('.' + _constantsCommonSVGClasses2["default"].IMAGE_CLASS).on('click', null).on('contextmenu', null).style('cursor', 'default');

	      this.setState(this.initialState());
	    }

	    /**
	     * INTERNAL METHODS
	     */
	  }, {
	    key: "leftClick",
	    value: function leftClick(self, d) {
	      var coords = _d32["default"].mouse(this);
	      self.setState({ imageUri: d.entity, imageLinkUri: d.link });
	      self.setPointCoordinates.call(self, coords[0], coords[1], d);
	    }
	  }, {
	    key: "rightClick",
	    value: function rightClick(self, d) {}
	  }, {
	    key: "setPointCoordinates",
	    value: function setPointCoordinates(x, y, data) {
	      if (x >= 0 && y >= 0 && x <= data.width && y <= data.height) {
	        this.setState({ x: x, y: y });
	      } else {
	        window.setTimeout(_actionsToolActions2["default"].updateTooltipData.bind(null, this.props.userstore.getText('vertexOutsideImageError')), 50);
	      }
	    }
	  }, {
	    key: "drawPointInSVG",
	    value: function drawPointInSVG() {
	      _d32["default"].select("." + this.vertexClass).remove();
	      // if(vertex.empty()) {
	      var toolDisplayGroup = _d32["default"].select('#OVER-' + this.state.imageLinkUri);

	      var vertex = toolDisplayGroup.append('g').attr("class", this.vertexClass).style('pointer-events', 'none');

	      vertex.append("svg:title");

	      vertex.append('svg:image').attr("height", 100).attr("width", 60).attr('xlink:href', _imagesPoiSvg2["default"]);
	      // }

	      var view = this.props.viewstore.getView();
	      var viewProps = this.props.viewstore.getViewProperties();

	      vertex.attr('transform', 'translate(' + this.state.x + ',' + this.state.y + ')scale(' + viewProps.sizeOfTextAndObjects / view.scale + ')');

	      vertex.select('image').attr("x", -30).attr("y", -100);

	      vertex.select('title').text(this.state.name);
	    }
	  }, {
	    key: "setName",
	    value: function setName(name) {
	      //console.log("set data " + text + " " + letters);
	      this.setState({ name: name });
	    }
	  }, {
	    key: "clearSVG",
	    value: function clearSVG() {
	      _d32["default"].select("." + this.vertexClass).remove();
	    }

	    /**
	     * REACT API
	     */
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      _get(Object.getPrototypeOf(CreatePoI.prototype), "componentDidMount", this).call(this);
	      this.props.viewstore.addViewPropertiesUpdateListener(this._onViewPropertiesUpdate);
	      window.setTimeout(_actionsToolActions2["default"].registerTool.bind(null, _confToolsConf2["default"].newPointOfInterest.id, this.click, this), 10);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate() {
	      if (this.state.x) {
	        this.drawPointInSVG();
	        if (this.state.name) {
	          _d32["default"].select('.' + this.props.vertexClass).select('title').text(this.state.name);
	        }
	      } else {
	        this.clearSVG();
	      }
	    }
	  }, {
	    key: "componentWillUpdate",
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.active) {
	        this.buttonStyle.backgroundColor = 'rgba(200,200,200,1.0)';
	      } else {
	        this.buttonStyle.backgroundColor = null;
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      _get(Object.getPrototypeOf(CreatePoI.prototype), "componentWillUnmount", this).call(this);
	      this.props.viewstore.removeViewPropertiesUpdateListener(this._onViewPropertiesUpdate);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return _react2["default"].createElement(
	        "button",
	        { className: "ui button compact",
	          ref: "button",
	          onClick: this.setMode,
	          style: this.buttonStyle,
	          "data-content": this.props.userstore.getText('newPointOfInterestTooltip1') },
	        _react2["default"].createElement("i", { className: "ui large marker icon" })
	      );
	    }
	  }]);

	  return CreatePoI;
	})(_AbstractTool3["default"]);

	exports["default"] = CreatePoI;
	module.exports = exports["default"];

/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Popup for the CreatePoI tool.
	 *
	 * Created by hector on 31/07/15.
	 */
	"use strict";

	var _get = __webpack_require__(3)["default"];

	var _inherits = __webpack_require__(19)["default"];

	var _createClass = __webpack_require__(28)["default"];

	var _classCallCheck = __webpack_require__(31)["default"];

	var _interopRequireDefault = __webpack_require__(1)["default"];

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _componentsBenchActiveToolTooltip = __webpack_require__(226);

	var _componentsBenchActiveToolTooltip2 = _interopRequireDefault(_componentsBenchActiveToolTooltip);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var CreatePoIPopup = (function (_React$Component) {
	  _inherits(CreatePoIPopup, _React$Component);

	  function CreatePoIPopup(props) {
	    _classCallCheck(this, CreatePoIPopup);

	    _get(Object.getPrototypeOf(CreatePoIPopup.prototype), "constructor", this).call(this, props);

	    this.componentStyle = {
	      width: '200px',
	      display: "flex",
	      flexDirection: "column",
	      borderStyle: "solid",
	      borderWidth: "1px",
	      borderColor: "black",
	      padding: "5px",
	      color: 'black',
	      marginTop: '5px'
	    };

	    this.titleBarStyle = {
	      display: 'flex',
	      width: '198px',
	      flexDirection: 'row',
	      justifyContent: 'space-between',
	      backgroundColor: 'whitesmoke',
	      borderStyle: "solid",
	      borderWidth: "0 0 1px 0",
	      borderColor: "black",
	      padding: 0,
	      margin: 0,
	      position: 'relative',
	      top: '-5px',
	      left: '-5px'
	    };

	    this.titleStyle = {
	      marginLeft: '5px',
	      WebkitUserSelect: 'none',
	      MozUserSelect: 'none',
	      MsUserSelect: 'none',
	      userSelect: 'none',
	      cursor: 'default'
	    };

	    this.iconStyle = {
	      cursor: 'pointer'
	    };

	    this.buttonContainerStyle = {
	      display: "flex",
	      flexDirection: "row"
	    };

	    this.barContainerStyle = {
	      display: "flex",
	      flexDirection: "column"
	    };

	    this.horizontalContainerStyle = {
	      display: "flex",
	      flexDirection: "row",
	      maxWidth: '100%',
	      paddingBottom: '3px'
	    };

	    this.tagInputStyle = {
	      width: '130px'
	    };

	    this.state = {
	      name: ''
	    };

	    this.textStyle = {
	      fontFamily: 'Roboto Condensed',
	      fontWeight: '300'
	    };
	  }

	  _createClass(CreatePoIPopup, [{
	    key: "minimize",
	    value: function minimize() {
	      this.barContainerStyle.display = this.barContainerStyle.display === 'none' ? '' : 'none';
	      this.setState({});
	    }
	  }, {
	    key: "cancel",
	    value: function cancel() {
	      window.setTimeout(_actionsToolActions2["default"].reset, 100);
	      this.setState({ name: '' });
	    }
	  }, {
	    key: "save",
	    value: function save() {
	      _actionsToolActions2["default"].save();
	    }
	  }, {
	    key: "onNameChange",
	    value: function onNameChange(event) {
	      _d32["default"].select('.' + this.props.vertexClass).select('title').text(event.target.value);
	      this.setState({ name: event.target.value });
	    }
	  }, {
	    key: "update",
	    value: function update(name) {
	      this.setState({ name: name });
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      this.setState({ name: '' });
	    }
	  }, {
	    key: "componentWillUpdate",
	    value: function componentWillUpdate(nextProps, nextState) {
	      //console.log(JSON.stringify(nextProps));
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps, prevState) {
	      //console.log("save " + this.state.text+ " " + this.state.letters);
	      this.props.setNameCallback(this.state.name);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return _react2["default"].createElement(
	        "div",
	        { style: this.componentStyle, className: "ui segment" },
	        _react2["default"].createElement(
	          "div",
	          { className: "ui segment", style: this.titleBarStyle },
	          _react2["default"].createElement(
	            "div",
	            { style: this.titleStyle },
	            this.props.userstore.getText('newVertex')
	          ),
	          _react2["default"].createElement(
	            "div",
	            null,
	            _react2["default"].createElement("i", { className: "ui minus icon",
	              style: this.iconStyle,
	              onClick: this.minimize.bind(this) }),
	            _react2["default"].createElement("i", { className: "ui remove icon", style: this.iconStyle, onClick: _utilsGlobals2["default"].noActiveTool })
	          )
	        ),
	        _react2["default"].createElement(
	          "div",
	          { style: this.barContainerStyle },
	          _react2["default"].createElement(_componentsBenchActiveToolTooltip2["default"], { userstore: this.props.userstore,
	            toolstore: this.props.toolstore }),
	          _react2["default"].createElement(
	            "div",
	            { style: this.horizontalContainerStyle, className: "ui inverted field" },
	            _react2["default"].createElement("textarea", { placeholder: this.props.userstore.getText('name'),
	              onChange: this.onNameChange.bind(this),
	              value: this.state.name, autofocus: "true", wrap: "hard" })
	          ),
	          _react2["default"].createElement(
	            "div",
	            { style: this.buttonContainerStyle, className: "ui buttons" },
	            _react2["default"].createElement(
	              "button",
	              { className: "ui green button",
	                style: this.textStyle,
	                onClick: this.save.bind(this) },
	              this.props.userstore.getText('save')
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return CreatePoIPopup;
	})(_react2["default"].Component);

	exports["default"] = CreatePoIPopup;
	module.exports = exports["default"];

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Implementation of AbstractTool to move images placed on the bench. When this tool is selected it creates a transparent image over each image with onDrag callbacks for moving them.
	 *
	 * Created by dmitri on 28/10/15.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _AbstractTool2 = __webpack_require__(258);

	var _AbstractTool3 = _interopRequireDefault(_AbstractTool2);

	var _constantsCommonSVGClassesJs = __webpack_require__(224);

	var _constantsCommonSVGClassesJs2 = _interopRequireDefault(_constantsCommonSVGClassesJs);

	var _constantsTypeConstants = __webpack_require__(263);

	var _constantsTypeConstants2 = _interopRequireDefault(_constantsTypeConstants);

	var _constantsModeConstants = __webpack_require__(243);

	var _constantsModeConstants2 = _interopRequireDefault(_constantsModeConstants);

	var _actionsViewActionsJs = __webpack_require__(196);

	var _actionsViewActionsJs2 = _interopRequireDefault(_actionsViewActionsJs);

	var _actionsToolActionsJs = __webpack_require__(249);

	var _actionsToolActionsJs2 = _interopRequireDefault(_actionsToolActionsJs);

	var _actionsModeActionsJs = __webpack_require__(244);

	var _actionsModeActionsJs2 = _interopRequireDefault(_actionsModeActionsJs);

	var _componentsContextMenuOptionsOrbOptions = __webpack_require__(264);

	var _componentsContextMenuOptionsOrbOptions2 = _interopRequireDefault(_componentsContextMenuOptionsOrbOptions);

	var _confToolsConfJs = __webpack_require__(257);

	var _confToolsConfJs2 = _interopRequireDefault(_confToolsConfJs);

	var _utilsD3EventHandlers = __webpack_require__(254);

	var _utilsD3EventHandlers2 = _interopRequireDefault(_utilsD3EventHandlers);

	var _utilsD3ViewUtils = __webpack_require__(253);

	var _utilsD3ViewUtils2 = _interopRequireDefault(_utilsD3ViewUtils);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var MoveObject = (function (_AbstractTool) {
	  _inherits(MoveObject, _AbstractTool);

	  function MoveObject(props) {
	    _classCallCheck(this, MoveObject);

	    _get(Object.getPrototypeOf(MoveObject.prototype), 'constructor', this).call(this, props);

	    this.buttonName = "Déplacer";

	    this.className = "ObjectMover";
	  }

	  _createClass(MoveObject, [{
	    key: 'begin',
	    value: function begin() {
	      var self = this;
	      _d32['default'].selectAll('.' + _constantsCommonSVGClassesJs2['default'].CHILD_GROUP_CLASS).each(function (d, i) {
	        _d32['default'].select(this).append('rect').datum(d).attr("height", function (d) {
	          return d.height;
	        }).attr("width", function (d) {
	          return d.width;
	        }).attr("x", function (d) {
	          return 0;
	        }).attr("y", function (d) {
	          return 0;
	        })
	        // .attr("xlink:href", d => d.url)
	        .attr('class', self.className).style('cursor', '-webkit-grab').style('cursor', 'grab').style('opacity', 0.0);
	      });

	      _d32['default'].selectAll('.' + this.className).on('mouseup', this.select).on('dblclick', this.switchToSheetInObservationMode.bind(this)).call(_utilsD3EventHandlers2['default'].dragMove());
	      //     d3.select('svg').style('cursor', 'grab');
	      this.setState({ active: true });
	    }
	  }, {
	    key: 'reset',
	    value: function reset() {
	      // Reset what?
	      this.finish();
	      this.begin();
	    }
	  }, {
	    key: 'finish',
	    value: function finish() {
	      _d32['default'].selectAll('.' + this.className).on(".drag", null).remove();
	      _d32['default'].select('svg').style('cursor', 'default');
	      window.setTimeout(_actionsToolActionsJs2['default'].activeToolPopupUpdate, 10);
	      window.setTimeout(_actionsToolActionsJs2['default'].updateTooltipData.bind(null, ''), 10);

	      this.setState({ active: false });
	    }
	  }, {
	    key: 'click',
	    value: function click(self, x, y, data) {}
	  }, {
	    key: 'setMode',
	    value: function setMode() {
	      _actionsToolActionsJs2['default'].setTool(_confToolsConfJs2['default'].moveObject.id);
	    }
	  }, {
	    key: 'select',
	    value: function select(d, i) {
	      window.setTimeout((function (id) {
	        return function () {
	          _actionsViewActionsJs2['default'].changeSelection(id, null);
	        };
	      })(d.entity), 10);
	    }
	  }, {
	    key: 'switchToSheetInObservationMode',
	    value: function switchToSheetInObservationMode(d) {
	      _utilsD3ViewUtils2['default'].zoomToObjectBySelector("#GROUP-" + d.link, this.props.viewstore.getView());
	      window.setTimeout(_actionsModeActionsJs2['default'].changeMode.bind(null, _constantsModeConstants2['default'].Modes.OBSERVATION), 10);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _get(Object.getPrototypeOf(MoveObject.prototype), 'componentDidMount', this).call(this);
	      window.setTimeout(_actionsToolActionsJs2['default'].registerTool.bind(null, _confToolsConfJs2['default'].moveObject.id, this.click, this), 10);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.active) {
	        this.buttonStyle.backgroundColor = 'rgba(200,200,200,1.0)';
	      } else {
	        this.buttonStyle.backgroundColor = null;
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _get(Object.getPrototypeOf(MoveObject.prototype), 'componentWillUnmount', this).call(this);
	      window.setTimeout(_actionsToolActionsJs2['default'].activeToolPopupUpdate, 10);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'button',
	        { style: this.buttonStyle,
	          ref: 'button',
	          className: 'ui button compact',
	          onClick: this.setMode,
	          'data-content': 'Déplacer des images dans le bureau actif' },
	        _react2['default'].createElement('i', { className: 'ui large pointing up icon' })
	      );
	    }
	  }]);

	  return MoveObject;
	})(_AbstractTool3['default']);

	exports['default'] = MoveObject;
	module.exports = exports['default'];

/***/ },
/* 263 */
/***/ function(module, exports) {

	/**
	 * Some types inherited from the database model.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  point: 'PointOfInterest',
	  trail: 'TrailOfInterest',
	  region: 'RegionOfInterest',
	  image: 'Image'
	};
	module.exports = exports['default'];

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Various static callbacks for the context menu.
	 *
	 * Created by dmitri on 02/03/16.
	 */
	'use strict';

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _actionsModalActions = __webpack_require__(265);

	var _actionsModalActions2 = _interopRequireDefault(_actionsModalActions);

	var _constantsTypeConstants = __webpack_require__(263);

	var _constantsTypeConstants2 = _interopRequireDefault(_constantsTypeConstants);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var OrbOptions = (function () {
	  function OrbOptions() {
	    _classCallCheck(this, OrbOptions);
	  }

	  _createClass(OrbOptions, null, [{
	    key: 'remove',
	    value: function remove(data) {
	      var errorCallback = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	      var successCallback = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	      if (!confirm("Veuillez confirmer la suppression de l'entité")) {
	        return;
	      }

	      _utilsServiceMethods2['default'].remove(data.uid, successCallback);
	    }
	  }, {
	    key: 'unlinkFromSet',
	    value: function unlinkFromSet(data) {
	      var errorCallback = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	      var successCallback = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	      //console.log('Entering unlinkFromSet data=' + JSON.stringify(data));
	      _actionsModalActions2['default'].showModal(_constantsModalConstants2['default'].Modals.confirmDelete, data, successCallback, errorCallback);
	    }
	  }, {
	    key: 'unlinkFromView',
	    value: function unlinkFromView(data) {
	      var errorCallback = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	      var successCallback = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

	      _actionsModalActions2['default'].showModal(_constantsModalConstants2['default'].Modals.confirmDelete, data, successCallback, errorCallback);
	    }
	  }, {
	    key: 'edit',
	    value: function edit(data) {}
	  }, {
	    key: 'annotate',
	    value: function annotate(data) {}
	  }, {
	    key: 'notAvailable',
	    value: function notAvailable(userstore) {
	      alert(userstore.getText('operationNotAvailableInVersion'));
	    }
	  }, {
	    key: 'showMetadata',
	    value: function showMetadata(data) {
	      _actionsViewActions2['default'].displayMetadataAboutEntity(data.uid);
	    }
	  }, {
	    key: 'blink',
	    value: function blink(d3Node, startAttributeValue, endAttributeValue, attributeName) {
	      function repeat() {
	        d3Node.attr(attributeName, startAttributeValue).transition().duration(1000).ease('linear').attr(attributeName, endAttributeValue).transition().duration(1000).ease('linear').attr(attributeName, startAttributeValue).each('end', repeat);
	      }
	      repeat();
	    }
	  }, {
	    key: 'beginAnimation',
	    value: function beginAnimation(item) {
	      if (!_d32['default'].select('#POI-' + item).empty()) {
	        var bakRect = _d32['default'].select('#POI-' + item).select('rect');

	        window.setTimeout(function () {
	          OrbOptions.blink(bakRect, 'red', 'blue', 'fill');
	        }, 10);

	        return {
	          type: _constantsTypeConstants2['default'].point,
	          rect: bakRect,
	          rectColor: 'white'
	        };
	      } else if (!_d32['default'].select('#PATH-' + item).empty()) {
	        var comp = _d32['default'].select('#PATH-' + item);
	        var color = comp.attr('stroke');
	        var newColor = 'blue';
	        if (color == 'blue') {
	          newColor = 'red';
	        }
	        window.setTimeout(function () {
	          OrbOptions.blink(comp, color, newColor, 'stroke');
	        }, 10);

	        return {
	          type: _constantsTypeConstants2['default'].trail,
	          d3component: comp,
	          color: color
	        };
	      } else if (!_d32['default'].select('#ROI-' + item).empty()) {
	        var comp = _d32['default'].select('#ROI-' + item);
	        var color = comp.attr('fill');
	        var newColor = 'red';
	        if (color == 'red') {
	          newColor = 'blue';
	        }

	        window.setTimeout(function () {
	          OrbOptions.blink(comp, color, newColor, 'fill');
	        }, 10);

	        return {
	          type: _constantsTypeConstants2['default'].region,
	          d3component: comp,
	          color: color
	        };
	      } else if (!_d32['default'].select('#IMAGE-' + item).empty()) {
	        var comp = _d32['default'].select('#IMAGE-' + item);

	        window.setTimeout(function () {
	          OrbOptions.blink(comp, 1.0, 0.3, 'opacity');
	        }, 10);

	        return {
	          type: _constantsTypeConstants2['default'].image,
	          d3component: comp
	        };
	      } else {
	        console.warn('No animation for ' + item);
	        return null;
	      }
	    }
	  }, {
	    key: 'stopAnimation',
	    value: function stopAnimation(animationData) {
	      switch (animationData.type) {
	        case _constantsTypeConstants2['default'].point:
	          animationData.rect.interrupt().transition().attr('fill', animationData.rectColor);
	          break;
	        case _constantsTypeConstants2['default'].trail:
	          animationData.d3component.interrupt().transition().attr('stroke', animationData.color);
	          break;
	        case _constantsTypeConstants2['default'].region:
	          animationData.d3component.interrupt().transition().attr('fill', animationData.color);
	          break;
	        case _constantsTypeConstants2['default'].image:
	          animationData.d3component.interrupt().transition().attr('opacity', 1.0);
	          break;
	        default:
	          break;
	      }
	    }
	  }]);

	  return OrbOptions;
	})();

	exports['default'] = OrbOptions;
	module.exports = exports['default'];

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Actions to run over modals. All modals must be initially invisible in the DOM.
	 *
	 * Created by dmitri on 07/04/16.
	 */
	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	exports['default'] = {
	  /**
	   * Shows the modal denoted by id.
	   * @param modalId String id of the modal to show.
	   * @param targetData Object (optional) data to pass to the modal. Each modal has its own structure expectations.
	   * @param onSuccess Function (optional) callback to be called if modal action succeeds.
	   * @param onError Function (optional) callback to be called if modal action fails.
	   */
	  showModal: function showModal(modalId) {
	    var targetData = arguments.length <= 1 || arguments[1] === undefined ? undefined : arguments[1];
	    var onSuccess = arguments.length <= 2 || arguments[2] === undefined ? undefined : arguments[2];
	    var onError = arguments.length <= 3 || arguments[3] === undefined ? undefined : arguments[3];

	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsModalConstants2['default'].ActionTypes.SHOW_MODAL,
	      id: modalId,
	      target: targetData,
	      onSuccess: onSuccess,
	      onError: onError
	    });
	  },

	  /**
	   * Run the callback stored in case of modal success
	   */
	  runSuccess: function runSuccess() {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsModalConstants2['default'].ActionTypes.SUCCESS
	    });
	  },

	  /**
	   * Run the callback stored in case of modal error
	   */
	  runError: function runError() {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsModalConstants2['default'].ActionTypes.ERROR
	    });
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 266 */
/***/ function(module, exports) {

	/**
	 * Constants for modal actions and modal ids.
	 *
	 * Created by dmitri on 07/04/16.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  ActionTypes: {
	    SHOW_MODAL: 'MODAL_SHOW_MODAL',
	    SUCCESS: 'MODAL_SUCCESS',
	    ERROR: 'MODAL_ERROR'
	  },
	  Modals: {
	    createSet: 'MODAL_createSet',
	    organiseSet: 'MODAL_organiseSet',
	    addEntitiesToSet: 'MODAL_addEntitiesToSet',
	    addToSet: 'MODAL_addToSet',
	    createAndFillSet: 'MODAL_createAndFillSet',
	    login: 'MODAL_login',
	    confirmDelete: 'MODAL_confirmDelete',
	    addAnnotationToEntity: 'MODAL_addAnnotationToEntity',
	    testRunnerModal: 'MODAL_testRunnerModal',
	    feedback: 'MODAL_feedback',
	    downloadSet: 'MODAL_downloadSet'
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Implementation of AbstractTool to create Trails of Interest.
	 *
	 * Created by dmitri on 10/12/15.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _AbstractTool2 = __webpack_require__(258);

	var _AbstractTool3 = _interopRequireDefault(_AbstractTool2);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _constantsCommonSVGClasses = __webpack_require__(224);

	var _constantsCommonSVGClasses2 = _interopRequireDefault(_constantsCommonSVGClasses);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _popupsCreatePathPopup = __webpack_require__(268);

	var _popupsCreatePathPopup2 = _interopRequireDefault(_popupsCreatePathPopup);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var _confToolsConf = __webpack_require__(257);

	var _confToolsConf2 = _interopRequireDefault(_confToolsConf);

	var _imagesPolylinePng = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/polyline.png\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesPolylinePng2 = _interopRequireDefault(_imagesPolylinePng);

	var CreatePath = (function (_AbstractTool) {
	  _inherits(CreatePath, _AbstractTool);

	  function CreatePath(props) {
	    var _this = this;

	    _classCallCheck(this, CreatePath);

	    _get(Object.getPrototypeOf(CreatePath.prototype), 'constructor', this).call(this, props);

	    this.toolContainerSVGClass = "CREATE_PATH_TOOL_CLASS";
	    this.activeLineClass = "CREATE_PATH_TOOL_ACTIVE_LINE_CLASS";

	    var self = this;

	    this.drag = _d32['default'].behavior.drag().origin(function (d) {
	      return d;
	    }).on('dragstart', this.vertexDragStart).on("drag", this.vertexDragged).on("dragend", function (d, i) {
	      self.vertexDragEnded.call(this, d, self);
	    });

	    this._onViewChange = function () {
	      var adaptDisplayToZoom = function adaptDisplayToZoom() {
	        return _this.adaptElementSizeToZoom(_this.props.viewstore.getView().scale);
	      };
	      return adaptDisplayToZoom.apply(_this);
	    };

	    this.state = this.initialState();
	  }

	  _createClass(CreatePath, [{
	    key: 'initialState',
	    value: function initialState() {
	      return {
	        imageLinkId: null,
	        imageUri: null,
	        edges: [],
	        start: null,
	        interactionState: 0,
	        active: false,
	        name: ''
	      };
	    }

	    /**
	     * INHERITED API
	     */
	  }, {
	    key: 'addVertex',
	    value: function addVertex(x, y, data) {
	      if (this.state.interactionState == 0) {
	        // Two possibilities:
	        // a) We are not currently in the process of creating a new edge
	        // b) We are in the process of creating a new edge
	        // Consequently the following situations have to be taken into account:
	        // aa/ There is no vertex at this location. In this case this is a fully new ROI
	        // ab/ There is a vertex at this location. This vertex is part of only one edge, create a new edge starting there.
	        // ac/ There is a vertex at this location. The vertex is already part of two edges, no new line can be added. A vertex can only be in up to two edges.
	        // ba/ The target is not a vertex. Create a new vertex here and a new edge linking start to end. Continue with a new edge starting at this location.
	        // bb/ The target is a vertex. The target vertex is part of one edge. Creating a connecting new edge will
	        // close the current path. Close shape, end editing.
	        // bc/ The target is a vertex. The target vertex is part of two edges. The connection cannot be made. Do nothing.
	        var count = _utilsGlobals2['default'].countEdges(x, y, this.state.edges, 1);
	        if (this.state.start == null) {
	          // a
	          if (count == 0) {
	            // aa
	            this.setState({ edges: [], start: { x: x, y: y } });
	          } else if (count == 1) {
	            // ab
	            var vertex = _utilsGlobals2['default'].matchVertex(x, y, this.state.edges, 1);
	            this.setState({ start: { x: vertex.x, y: vertex.y } });
	          } else if (count == 2) {
	            // ac
	            window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newPathCannotStart')), 10);
	          } else {
	            console.error("Whoops. This vertex is in too many edges. How unexpectedly theoretically impossible!");
	          }
	        } else {
	          // b
	          if (count == 0) {
	            // ba
	            var edges = this.state.edges;
	            edges.push({
	              start: {
	                x: this.state.start.x,
	                y: this.state.start.y
	              },
	              end: {
	                x: x,
	                y: y
	              }
	            });
	            this.setState({ edges: edges, start: { x: x, y: y } });
	          } else if (count == 1) {
	            // bb
	            var vertex = _utilsGlobals2['default'].matchVertex(x, y, this.state.edges, 1);
	            var edges = this.state.edges;
	            edges.push({
	              start: {
	                x: this.state.start.x,
	                y: this.state.start.y
	              },
	              end: {
	                x: vertex.x,
	                y: vertex.y
	              }
	            });
	            this.setState({ interactionState: 1, start: null, edges: edges });
	          } else if (count == 2) {
	            // bc
	            window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newPathVertexError')), 10);
	          } else {
	            console.error("Whoops. This vertex is in too many edges. How unexpected.");
	          }
	        }
	      }
	    }
	  }, {
	    key: 'canSave',
	    value: function canSave() {
	      return true;
	    }
	  }, {
	    key: 'save',
	    value: function save() {
	      if (this.state.name.length < 1) {
	        alert(this.props.userstore.getText('nameMandatory'));
	        return null;
	      }
	      // Create polyline representation of this path.
	      var path = [];
	      var length = 0;
	      var name = this.state.name;
	      var x = null;
	      var y = null;
	      var edges = this.state.edges;
	      while (edges.length > 0) {
	        var edge = _utilsGlobals2['default'].getNextEdge(x, y, edges, 5);

	        // Check if this vertex is not already part of the previous edge
	        if (edge.start.x !== x && edge.start.y !== y) {
	          path.push([edge.start.x, edge.start.y]);
	        }
	        path.push([edge.end.x, edge.end.y]);

	        x = edge.end.x;
	        y = edge.end.y;

	        length += Math.sqrt(Math.pow(Math.abs(edge.end.y) - Math.abs(edge.start.y), 2) + Math.pow(Math.abs(edge.end.x) - Math.abs(edge.start.x), 2));
	      }

	      _utilsServiceMethods2['default'].createTrailOfInterest(this.state.imageUri, length, path, name, _utilsGlobals2['default'].setSavedEntityInInspector);

	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newPathTooltip')), 10);

	      this.setState({
	        interactionState: 0,
	        edges: [],
	        start: null,
	        end: null
	      });
	    }
	  }, {
	    key: 'begin',
	    value: function begin() {
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate.bind(null, null), 10);
	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newPathTooltip')), 10);
	      window.setTimeout(_actionsViewActions2['default'].updateDisplayFilters.bind(null, { trails: true }), 10);

	      var self = this;

	      // Mount listener for validation of path
	      _d32['default'].select('.' + _constantsCommonSVGClasses2['default'].ROOT_CLASS).on('mouseenter', this.activateEnter.bind(self)).on('mouseleave', this.deactivateEnter);

	      var popup = _react2['default'].createElement(_popupsCreatePathPopup2['default'], { userstore: this.props.userstore,
	        setDataCallback: this.setData.bind(this),
	        toolstore: this.props.toolstore });
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate.bind(null, popup), 10);

	      // Mount listeners on all image groups
	      _d32['default'].selectAll('.' + _constantsCommonSVGClasses2['default'].IMAGE_CLASS).style('cursor', 'crosshair').on('click', function (d, i) {
	        if (_d32['default'].event.defaultPrevented) return;
	        _d32['default'].event.preventDefault();
	        _d32['default'].event.stopPropagation();
	        if (_d32['default'].event.button == 0) {
	          self.leftClick.call(this, self, d);
	        }
	      }).on('contextmenu', function (d, i) {
	        if (_d32['default'].event.defaultPrevented) return;
	        _d32['default'].event.preventDefault();
	        _d32['default'].event.stopPropagation();
	        self.rightClick.call(this, self, d);
	      });

	      this.props.viewstore.addViewportListener(this._onViewChange);

	      this.setState({ active: true, name: '', imageLinkId: null });
	    }
	  }, {
	    key: 'reset',
	    value: function reset() {
	      this.clearSVG();
	      this.setState({
	        edges: [],
	        start: null,
	        imageLinkId: null,
	        interactionState: 0 });

	      var popup = _react2['default'].createElement(_popupsCreatePathPopup2['default'], { setDataCallback: this.setData.bind(this),
	        userstore: this.props.userstore,
	        toolstore: this.props.toolstore });
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate.bind(null, popup), 10);

	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newPathTooltip')), 10);
	    }
	  }, {
	    key: 'finish',
	    value: function finish() {
	      this.clearSVG();
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate.bind(null, null), 10);
	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, ""), 10);

	      _d32['default'].select('.' + _constantsCommonSVGClasses2['default'].ROOT_CLASS).on('mouseenter', null).on('mouseleave', null);

	      _d32['default'].selectAll('.' + _constantsCommonSVGClasses2['default'].IMAGE_CLASS).style('cursor', 'default').on('contextmenu', null).on('click', null);

	      this.props.viewstore.removeViewportListener(this._onViewChange);

	      this.setState(this.initialState());
	    }
	  }, {
	    key: 'setMode',
	    value: function setMode() {
	      _actionsToolActions2['default'].setTool(_confToolsConf2['default'].newPath.id);
	    }

	    /**
	     * INTERNAL METHODS
	     */

	  }, {
	    key: 'adaptElementSizeToZoom',
	    value: function adaptElementSizeToZoom(scale) {
	      var tool = _d32['default'].select('.' + this.toolContainerSVGClass);

	      tool.selectAll('.blackLine').attr('stroke-width', 4 / scale);
	      tool.selectAll('.whiteLine').attr('stroke-width', 4 / scale).attr('stroke-dasharray', 8 / scale + ',' + 8 / scale);
	      tool.selectAll('.currentLine').attr('stroke-width', 2 / scale);
	      tool.selectAll('circle').attr('stroke-width', 3 / scale).attr("r", 6 / scale);
	    }
	  }, {
	    key: 'leftClick',
	    value: function leftClick(self, d) {
	      // If no image set image and add vertex
	      if (!self.state.imageLinkId) {
	        var coords = _d32['default'].mouse(this);
	        self.setState({ imageLinkId: d.link, imageUri: d.entity });
	        self.addVertex.call(self, coords[0], coords[1], d);
	      }
	      if (self.state.imageLinkId == d.link) {
	        // If same image add vertex
	        var coords = _d32['default'].mouse(this);
	        self.addVertex.call(self, coords[0], coords[1], d);
	      } else {
	        // If different image display error and do nothing else
	        console.error('Attempt to apply a single image operation as cross-image');
	      }
	    }
	  }, {
	    key: 'rightClick',
	    value: function rightClick(self, d) {
	      if (self.state.interactionState == 0) {
	        self.setState({ interactionState: 1 });
	      }
	      // If creation mode, remove last vertex
	      // If confirm mode, confirm and save (if box full)
	    }
	  }, {
	    key: 'activateEnter',
	    value: function activateEnter() {
	      var self = this;
	      _d32['default'].select("body").on('keyup', function (d, i) {
	        if (_d32['default'].event.which == 13) {
	          // 'Enter' key
	          _d32['default'].event.stopPropagation();
	          _d32['default'].event.preventDefault();
	          self.nextInteractionState.call(this, self);
	        }
	      });
	    }
	  }, {
	    key: 'deactivateEnter',
	    value: function deactivateEnter() {
	      _d32['default'].select("body").on('keyup', null);
	    }
	  }, {
	    key: 'nextInteractionState',
	    value: function nextInteractionState(self) {
	      if (self.state.interactionState == 0) {
	        self.setState({ interactionState: 1 });
	      } else if (self.state.interactionState == 1) {
	        window.setTimeout(_actionsToolActions2['default'].save, 10);
	      }
	    }
	  }, {
	    key: 'dataToSVG',
	    value: function dataToSVG() {
	      if (!this.state.imageLinkId) {
	        return;
	      }

	      var view = this.props.viewstore.getView();

	      var overSheetGroup = _d32['default'].select('#OVER-' + this.state.imageLinkId);
	      var toolDisplayGroup = overSheetGroup.append('g').attr('class', this.toolContainerSVGClass).style('pointer-events', 'none');

	      var self = this;
	      for (var i = 0; i < this.state.edges.length; ++i) {
	        var edge = this.state.edges[i];
	        var bLine = toolDisplayGroup.append('line');
	        bLine.attr('class', 'blackLine').attr('x1', edge.start.x).attr('y1', edge.start.y).attr('x2', edge.end.x).attr('y2', edge.end.y).attr('stroke-width', 4 / view.scale).attr('stroke', 'black');

	        var wLine = toolDisplayGroup.append('line');
	        wLine.attr('class', 'whiteLine').attr('x1', edge.start.x).attr('y1', edge.start.y).attr('x2', edge.end.x).attr('y2', edge.end.y).attr('stroke-width', 4 / view.scale).attr('stroke-dasharray', 8 / view.scale + ',' + 8 / view.scale).attr('stroke', 'white');

	        //var edge = this.state.edges[i];
	        var circle = toolDisplayGroup.append('circle');
	        circle.attr("cx", edge.start.x).attr("cy", edge.start.y).attr("r", 6 / view.scale).attr('stroke-width', 3 / view.scale).attr('stroke', 'white').attr("fill", "black");

	        if (this.state.interactionState == 1) {
	          bLine.on('dblclick', (function (idx) {
	            return function () {
	              self.splitEdge(idx, self);
	            };
	          })(i));

	          wLine.on('dblclick', (function (idx) {
	            return function () {
	              self.splitEdge(idx, self);
	            };
	          })(i));

	          circle.datum({ x: edge.start.x, y: edge.start.y }).attr("x", function (d) {
	            return d.x;
	          }).attr("y", function (d) {
	            return d.y;
	          }).style('cursor', '-webkit-grab').style('cursor', 'grab').call(this.drag);
	        }
	      }

	      if (this.state.interactionState == 1) {
	        // Append the last circle, which marks the end of the trail
	        var edge = this.state.edges[this.state.edges.length - 1];
	        var circle = toolDisplayGroup.append('circle');
	        circle.datum({ x: edge.end.x, y: edge.end.y }).attr("cx", function (d) {
	          return d.x;
	        }).attr("cy", function (d) {
	          return d.y;
	        }).attr("r", 6 / view.scale).attr('stroke-width', 3 / view.scale).attr('stroke', 'white').attr("fill", "black").attr("x", function (d) {
	          return d.x;
	        }).attr("y", function (d) {
	          return d.y;
	        }).style('cursor', '-webkit-grab').style('cursor', 'grab').call(this.drag);
	      }

	      if (this.state.start && this.state.interactionState == 0) {
	        toolDisplayGroup.append('line').attr('class', 'currentLine').attr('x1', this.state.start.x).attr('y1', this.state.start.y).attr('x2', this.state.start.x).attr('y2', this.state.start.y).attr('class', this.activeLineClass).attr('stroke-width', 2 / view.scale).attr('stroke', 'black');

	        //console.log("mounting mouse move listener");
	        _d32['default'].select('#GROUP-' + this.state.imageLinkId).on('mousemove', function (d, i) {
	          self.setLineEndPosition.call(this, self);
	        });

	        toolDisplayGroup.append('circle').attr("cx", this.state.start.x).attr("cy", this.state.start.y).attr("r", 6 / view.scale).attr('stroke-width', 3 / view.scale).attr('stroke', 'white').attr("fill", "black");
	      }
	    }
	  }, {
	    key: 'clearSVG',
	    value: function clearSVG() {
	      _d32['default'].select('.' + this.toolContainerSVGClass).remove();
	      if (this.state.imageLinkId) {
	        _d32['default'].select('#GROUP-' + this.state.imageLinkId).on('mousemove', null);
	      }
	    }
	  }, {
	    key: 'splitEdge',
	    value: function splitEdge(i, self) {
	      _d32['default'].event.stopPropagation();
	      var edges = self.state.edges;
	      var edge = edges[i];
	      edges.splice(i, 1);
	      var xm = (edge.end.x + edge.start.x) / 2;
	      var ym = (edge.end.y + edge.start.y) / 2;
	      edges.push({ start: { x: edge.start.x, y: edge.start.y }, end: { x: xm, y: ym } });
	      edges.push({ start: { x: xm, y: ym }, end: { x: edge.end.x, y: edge.end.y } });
	      this.setState({ edges: edges });
	    }
	  }, {
	    key: 'deleteVertex',
	    value: function deleteVertex(x, y) {
	      //d3.event.stopPropagation();
	      // Find the two edges that have x and y as start or end
	      var startEdge = null;
	      var endEdge = null;
	      var edges = this.state.edges;
	      for (var i = 0; i < edges.length; ++i) {
	        var edge = edges[i];
	        if (edge.start.x - 5 < x && edge.start.x + 5 > y && edge.start.y - 5 < x && edge.start.y + 5 > y) {
	          startEdge = edge;
	        }
	        if (edge.end.x - 5 < x && edge.end.x + 5 > x && edge.end.y - 5 < y && edge.end.y + 5 > y) {
	          endEdge = edge;
	        }
	      }

	      // Merge both edges
	      edges.splice(edges.indexOf(startEdge), 1);
	      edges.splice(edges.indexOf(endEdge), 1);

	      edges.push({ start: { x: startEdge.end.x, y: startEdge.end.y }, end: { x: endEdge.start.x, y: endEdge.start.y } });

	      // Update display
	      this.setState({ edges: edges });
	    }
	  }, {
	    key: 'setLineEndPosition',
	    value: function setLineEndPosition(self) {
	      var coords = _d32['default'].mouse(this);
	      _d32['default'].select('.' + self.activeLineClass).attr("x2", coords[0]).attr("y2", coords[1]);
	    }
	  }, {
	    key: 'vertexDragStart',
	    value: function vertexDragStart() {
	      if (_d32['default'].event.sourceEvent.which == 1) {
	        _d32['default'].event.sourceEvent.preventDefault();
	        _d32['default'].event.sourceEvent.stopPropagation();

	        var circle = _d32['default'].select(this);
	        circle.classed('dragging', true).datum({ tx: 0, ty: 0, origX: circle.cx, origY: circle.cy }).attr('origX', function (d) {
	          return d.origX;
	        }).attr('origY', function (d) {
	          return d.origY;
	        }).attr('tx', function (d) {
	          return d.tx;
	        }).attr('ty', function (d) {
	          return d.ty;
	        });
	      }
	    }
	  }, {
	    key: 'vertexDragged',
	    value: function vertexDragged(d) {
	      if (_d32['default'].select(this).classed('dragging') == true) {
	        var vertex = _d32['default'].select(this);
	        vertex.attr('cx', d.cx = _d32['default'].event.x).attr('cy', d.cy = _d32['default'].event.y);
	      }
	    }
	  }, {
	    key: 'vertexDragEnded',
	    value: function vertexDragEnded(d, self) {
	      if (_d32['default'].event.sourceEvent.which == 1) {
	        var circle = _d32['default'].select(this);
	        circle.classed('dragging', false);
	        var edges = self.state.edges;
	        if (d.x && d.y && d.cx && d.cy) {
	          _utilsGlobals2['default'].updateEdgesPosition(d.x, d.y, d.cx, d.cy, edges, 0.1);
	        }
	        self.setState({ edges: edges });
	      }
	    }
	  }, {
	    key: 'setData',
	    value: function setData(name) {
	      //console.log("set data to " + name);
	      this.setState({ name: name });
	    }

	    /**
	     * REACT API
	     */
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _get(Object.getPrototypeOf(CreatePath.prototype), 'componentDidMount', this).call(this);
	      window.setTimeout(_actionsToolActions2['default'].registerTool.bind(null, _confToolsConf2['default'].newPath.id, this.click, this), 10);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.active) {
	        this.buttonStyle.backgroundColor = 'rgba(200,200,200,1.0)';
	      } else {
	        this.buttonStyle.backgroundColor = null;
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.active && this.state.imageLinkId) {
	        this.clearSVG();
	        this.dataToSVG();
	      }
	      if (this.state.interactionState == 1) {
	        _d32['default'].select('.' + this.toolContainerSVGClass).style('pointer-events', 'auto');

	        if (prevState.interactionState != 1) {
	          window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('createPathTooltip0')), 10);
	        }
	      } else if (this.state.interactionState == 0 && this.state.start && !prevState.start) {
	        window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('createPathTooltip1')), 50);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'button',
	        { ref: 'button',
	          style: this.buttonStyle,
	          className: 'ui button compact',
	          onClick: this.setMode,
	          'data-content': this.props.userstore.getText('createNewPath') },
	        _react2['default'].createElement('img', { src: _imagesPolylinePng2['default'], style: this.iconStyle, height: '20px', width: '20px' })
	      );
	    }
	  }]);

	  return CreatePath;
	})(_AbstractTool3['default']);

	exports['default'] = CreatePath;
	module.exports = exports['default'];

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Popup for the CreatePath tool.
	 *
	 * Created by hector on 31/07/15.
	 */
	"use strict";

	var _get = __webpack_require__(3)["default"];

	var _inherits = __webpack_require__(19)["default"];

	var _createClass = __webpack_require__(28)["default"];

	var _classCallCheck = __webpack_require__(31)["default"];

	var _interopRequireDefault = __webpack_require__(1)["default"];

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _componentsBenchActiveToolTooltip = __webpack_require__(226);

	var _componentsBenchActiveToolTooltip2 = _interopRequireDefault(_componentsBenchActiveToolTooltip);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var CreatePathPopup = (function (_React$Component) {
	  _inherits(CreatePathPopup, _React$Component);

	  function CreatePathPopup(props) {
	    _classCallCheck(this, CreatePathPopup);

	    _get(Object.getPrototypeOf(CreatePathPopup.prototype), "constructor", this).call(this, props);

	    this.componentStyle = {
	      width: '200px',
	      display: "flex",
	      flexDirection: "column",
	      borderStyle: "solid",
	      borderWidth: "1px",
	      borderColor: "black",
	      padding: "5px",
	      color: 'black',
	      marginTop: '5px'
	    };

	    this.titleBarStyle = {
	      display: 'flex',
	      width: '198px',
	      flexDirection: 'row',
	      backgroundColor: 'whitesmoke',
	      justifyContent: 'space-between',
	      borderStyle: "solid",
	      borderWidth: "0 0 1px 0",
	      borderColor: "black",
	      padding: 0,
	      margin: 0,
	      position: 'relative',
	      top: '-5px',
	      left: '-5px'
	    };

	    this.titleStyle = {
	      marginLeft: '5px',
	      WebkitUserSelect: 'none',
	      MozUserSelect: 'none',
	      MsUserSelect: 'none',
	      userSelect: 'none',
	      cursor: 'default'
	    };

	    this.iconStyle = {
	      cursor: 'pointer'
	    };

	    this.textAreaStyle = {
	      width: '100%'
	    };

	    this.buttonContainerStyle = {
	      display: "flex",
	      flexDirection: "row"
	    };

	    this.barContainerStyle = {
	      display: "flex",
	      flexDirection: "column"
	    };

	    this.horizontalContainerStyle = {
	      display: "flex",
	      flexDirection: "row",
	      maxWidth: '100%',
	      paddingBottom: '3px'
	    };

	    this.state = CreatePathPopup.initialState();

	    this.textStyle = {
	      fontFamily: 'Roboto Condensed',
	      fontWeight: '300'
	    };
	  }

	  _createClass(CreatePathPopup, [{
	    key: "clear",
	    value: function clear() {
	      window.setTimeout(_actionsToolActions2["default"].reset, 10);
	      this.setState({ name: '' });
	    }
	  }, {
	    key: "minimize",
	    value: function minimize() {
	      this.barContainerStyle.display = this.barContainerStyle.display === 'none' ? '' : 'none';
	      this.setState({});
	    }
	  }, {
	    key: "save",
	    value: function save() {
	      _actionsToolActions2["default"].save();
	    }
	  }, {
	    key: "onNameChange",
	    value: function onNameChange(event) {
	      this.setState({ name: event.target.value });
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      this.setState({ name: '' });
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps, prevState) {
	      this.props.setDataCallback(this.state.name);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return _react2["default"].createElement(
	        "div",
	        { style: this.componentStyle, className: "ui segment" },
	        _react2["default"].createElement(
	          "div",
	          { className: "ui segment", style: this.titleBarStyle },
	          _react2["default"].createElement(
	            "div",
	            { style: this.titleStyle },
	            this.props.userstore.getText('newTrail')
	          ),
	          _react2["default"].createElement(
	            "div",
	            null,
	            _react2["default"].createElement("i", { className: "ui minus icon",
	              style: this.iconStyle,
	              onClick: this.minimize.bind(this) }),
	            _react2["default"].createElement("i", { className: "ui remove icon", style: this.iconStyle, onClick: _utilsGlobals2["default"].noActiveTool })
	          )
	        ),
	        _react2["default"].createElement(
	          "div",
	          { style: this.barContainerStyle },
	          _react2["default"].createElement(_componentsBenchActiveToolTooltip2["default"], { userstore: this.props.userstore,
	            toolstore: this.props.toolstore }),
	          _react2["default"].createElement(
	            "div",
	            { style: this.horizontalContainerStyle, className: "ui inverted field" },
	            _react2["default"].createElement("textarea", { placeholder: this.props.userstore.getText('name'),
	              style: this.textAreaStyle,
	              onChange: this.onNameChange.bind(this),
	              value: this.state.name, autofocus: "true", wrap: "hard" })
	          ),
	          _react2["default"].createElement(
	            "div",
	            { style: this.buttonContainerStyle, className: "ui buttons" },
	            _react2["default"].createElement(
	              "button",
	              { className: "ui green button", style: this.textStyle, onClick: this.save.bind(this) },
	              this.props.userstore.getText('save')
	            )
	          )
	        )
	      );
	    }
	  }], [{
	    key: "initialState",
	    value: function initialState() {
	      return {
	        name: ''
	      };
	    }
	  }]);

	  return CreatePathPopup;
	})(_react2["default"].Component);

	exports["default"] = CreatePathPopup;
	module.exports = exports["default"];

/***/ },
/* 269 */,
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Implementation of AbstractTool to create Regions of Interest. As this is one of the oldest tools, legacy code may exist here and some algorithms used for other tools are better documented here.
	 *
	 * Created by dmitri on 17/12/15.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _dPolygonArea = __webpack_require__(271);

	var _dPolygonArea2 = _interopRequireDefault(_dPolygonArea);

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _AbstractTool2 = __webpack_require__(258);

	var _AbstractTool3 = _interopRequireDefault(_AbstractTool2);

	var _constantsCommonSVGClasses = __webpack_require__(224);

	var _constantsCommonSVGClasses2 = _interopRequireDefault(_constantsCommonSVGClasses);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _popupsCreateRoIPopup = __webpack_require__(272);

	var _popupsCreateRoIPopup2 = _interopRequireDefault(_popupsCreateRoIPopup);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var _confToolsConf = __webpack_require__(257);

	var _confToolsConf2 = _interopRequireDefault(_confToolsConf);

	var _imagesPerimeterSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/perimeter.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesPerimeterSvg2 = _interopRequireDefault(_imagesPerimeterSvg);

	/**
	 * Used to create polyline-like ROIs. However SVG polylines should not be used as each line must have its own onclick handler to split a line into two. Lines are grouped in a group in order to identify the ROI for an annotation. The shape does not need to be closed to be a valid annotation.
	 *
	 * NOTE: Remember when comparing vertex positions to allow some space (for example a 5-pixel-radius area) for floating-point comparisons
	 */

	var CreateRoI = (function (_AbstractTool) {
	  _inherits(CreateRoI, _AbstractTool);

	  function CreateRoI(props) {
	    var _this = this;

	    _classCallCheck(this, CreateRoI);

	    _get(Object.getPrototypeOf(CreateRoI.prototype), 'constructor', this).call(this, props);

	    var self = this;

	    this.drag = _d32['default'].behavior.drag().origin(function (d) {
	      return d;
	    }).on('dragstart', this.vertexDragStart).on("drag", this.vertexDragged).on("dragend", function (d, i) {
	      self.vertexDragEnded.call(this, d, self);
	    });

	    this.iconStyle = {
	      margin: '8px 10px 0px 0px'
	    };

	    this._onViewChange = function () {
	      var adaptScale = function adaptScale() {
	        return _this.adaptElementSizetoZoom(_this.props.viewstore.getView().scale);
	      };
	      return adaptScale.apply(_this);
	    };

	    this.state = this.initialState();
	  }

	  /**
	   * interactionState:
	   * 0: the tool is ready to draw, respond only to requests to add new vertices
	   * 1: the tool is done drawing a complete area, respond only to requests to move vertices (drag vertex), split edges (doubleclick edge), or remove vertices (doubleclick vertex - DOES NOT WORK with drag enabled...), or ENTER, which validates and saves the area on the server
	   */

	  _createClass(CreateRoI, [{
	    key: 'initialState',
	    value: function initialState() {
	      return {
	        imageUri: null,
	        imageLinkUri: null,
	        edges: [],
	        start: null,
	        interactionState: 0,
	        active: false
	      };
	    }
	  }, {
	    key: 'dataToSVG',
	    value: function dataToSVG() {
	      var view = this.props.viewstore.getView();
	      var overImageGroup = _d32['default'].select('#OVER-' + this.state.imageLinkUri);
	      var toolDisplayGroup = overImageGroup.append('g').attr('class', CreateRoI.classes().selfSvgClass).style('pointer-events', 'none');

	      var self = this;
	      for (var i = 0; i < this.state.edges.length; ++i) {
	        var edge = this.state.edges[i];
	        var bLine = toolDisplayGroup.append('line');
	        bLine.attr('class', 'blackLine').attr('x1', edge.start.x).attr('y1', edge.start.y).attr('x2', edge.end.x).attr('y2', edge.end.y).attr('stroke-width', 4 / view.scale).attr('stroke', 'black');

	        var wLine = toolDisplayGroup.append('line');
	        wLine.attr('class', 'whiteLine').attr('x1', edge.start.x).attr('y1', edge.start.y).attr('x2', edge.end.x).attr('y2', edge.end.y).attr('stroke-width', 4 / view.scale).attr('stroke-dasharray', 8 / view.scale + ',' + 8 / view.scale).attr('stroke', 'white');

	        if (this.state.interactionState == 1) {
	          bLine.on('dblclick', (function (idx) {
	            return function () {
	              self.splitEdge(idx, self);
	            };
	          })(i));

	          wLine.on('dblclick', (function (idx) {
	            return function () {
	              self.splitEdge(idx, self);
	            };
	          })(i));
	        }
	      }

	      for (var i = 0; i < this.state.edges.length; ++i) {
	        var edge = this.state.edges[i];
	        var circle = toolDisplayGroup.append('circle');
	        circle.attr('class', 'blackCircle').attr("cx", edge.start.x).attr("cy", edge.start.y).attr("r", 6 / view.scale).attr('stroke-width', 3 / view.scale).attr('stroke', 'white').attr("fill", "black");

	        if (this.state.interactionState == 1) {
	          circle.datum({ x: edge.start.x, y: edge.start.y }).attr("x", function (d) {
	            return d.x;
	          }).attr("y", function (d) {
	            return d.y;
	          }).style('cursor', '-webkit-grab').style('cursor', 'grab').call(this.drag);
	        }
	      }

	      if (this.state.start) {
	        toolDisplayGroup.append('line').attr('class', CreateRoI.classes().activeLineClass).attr('x1', this.state.start.x).attr('y1', this.state.start.y).attr('x2', this.state.start.x).attr('y2', this.state.start.y).attr('stroke-width', 2 / view.scale).attr('stroke', 'black');

	        _d32['default'].select('#GROUP-' + this.state.imageLinkUri).on('mousemove', function (d, i) {
	          self.setLineEndPosition.call(this, self);
	        });

	        toolDisplayGroup.append('circle').attr('class', 'blackCircle').attr("cx", this.state.start.x).attr("cy", this.state.start.y).attr("r", 6 / view.scale).attr('stroke-width', 3 / view.scale).attr('stroke', 'white').attr("fill", "black");
	      }
	    }
	  }, {
	    key: 'adaptElementSizetoZoom',
	    value: function adaptElementSizetoZoom(scale) {
	      //console.log('adaptElementSizetoZoom');
	      var tool = _d32['default'].select('.' + CreateRoI.classes().selfSvgClass);

	      tool.selectAll('.blackLine').attr('stroke-width', 4 / scale);
	      tool.selectAll('.whiteLine').attr('stroke-width', 4 / scale).attr('stroke-dasharray', 8 / scale + ',' + 8 / scale);
	      tool.selectAll('.' + CreateRoI.classes().activeLineClass).attr('stroke-width', 2 / scale);
	      tool.selectAll('circle').attr('stroke-width', 3 / scale).attr("r", 6 / scale);
	    }
	  }, {
	    key: 'clearSVG',
	    value: function clearSVG() {
	      _d32['default'].selectAll('.' + CreateRoI.classes().selfSvgClass).remove();
	    }
	  }, {
	    key: 'begin',
	    value: function begin() {
	      var popup = _react2['default'].createElement(_popupsCreateRoIPopup2['default'], { userstore: this.props.userstore,
	        setDataCallback: this.setData.bind(this),
	        toolstore: this.props.toolstore });
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate.bind(null, popup), 10);
	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newRegionOfInterestTooltip')), 10);
	      window.setTimeout(_actionsViewActions2['default'].updateDisplayFilters.bind(null, { regions: true }), 10);

	      var self = this;
	      _d32['default'].selectAll('.' + _constantsCommonSVGClasses2['default'].IMAGE_CLASS).style('cursor', 'crosshair').on('click', function (d, i) {
	        if (_d32['default'].event.defaultPrevented) return;
	        _d32['default'].event.preventDefault();
	        _d32['default'].event.stopPropagation();
	        if (_d32['default'].event.button == 0) {
	          self.leftClick.call(this, self, d);
	        }
	      }).on('contextmenu', function (d, i) {
	        if (_d32['default'].event.defaultPrevented) return;
	        _d32['default'].event.preventDefault();
	        _d32['default'].event.stopPropagation();
	        self.rightClick.call(this, self, d);
	      });

	      this.props.viewstore.addViewportListener(this._onViewChange);

	      this.setState({ active: true });
	    }
	  }, {
	    key: 'reset',
	    value: function reset() {
	      var popup = _react2['default'].createElement(_popupsCreateRoIPopup2['default'], { setDataCallback: this.setData.bind(this),
	        userstore: this.props.userstore,
	        toolstore: this.props.toolstore });
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate.bind(null, popup), 10);

	      this.clearSVG();
	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newRegionOfInterestTooltip')), 10);

	      this.setState({
	        imageUri: null,
	        imageLinkUri: null,
	        edges: [],
	        start: null,
	        interactionState: 0,
	        name: '' });
	    }
	  }, {
	    key: 'finish',
	    value: function finish() {
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate, 10);
	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, ""), 10);

	      _d32['default'].selectAll('.' + _constantsCommonSVGClasses2['default'].IMAGE_CLASS).style('cursor', 'default').on('contextmenu', null).on('click', null);

	      this.props.viewstore.removeViewportListener(this._onViewChange);

	      this.clearSVG();
	      this.setState(this.initialState());
	    }
	  }, {
	    key: 'canSave',
	    value: function canSave() {
	      return true;
	    }
	  }, {
	    key: 'save',
	    value: function save() {
	      //console.log("CreateROI: building save data");
	      if (this.state.interactionState != 1) {
	        alert(this.props.userstore.getText('polygonUnfinished'));
	        return null;
	      }
	      if (this.state.name.length < 1) {
	        alert(this.props.userstore.getText('nameMandatory'));
	        return null;
	      }
	      // Create polygon or polyline representation of this area..

	      var polygon = [];
	      var perimeter = 0;
	      var x = null;
	      var y = null;
	      var edges = this.state.edges;
	      while (edges.length > 0) {
	        var edge = CreateRoI.getNextEdge(edges, x, y);
	        x = edge.end.x;
	        y = edge.end.y;

	        polygon.push([edge.start.x, edge.start.y]);
	        perimeter += Math.sqrt(Math.pow(Math.abs(edge.end.y) - Math.abs(edge.start.y), 2) + Math.pow(Math.abs(edge.end.x) - Math.abs(edge.start.x), 2));
	      }
	      var area = Math.abs((0, _dPolygonArea2['default'])(polygon));

	      _utilsServiceMethods2['default'].createRegionOfInterest(this.state.imageUri, area, perimeter, polygon, this.state.name, _utilsGlobals2['default'].setSavedEntityInInspector);

	      this.reset();
	    }
	  }, {
	    key: 'addVertex',
	    value: function addVertex(x, y, data) {
	      if (this.state.interactionState == 0) {
	        // Two possibilities:
	        // a) We are not currently in the process of creating a new edge
	        // b) We are in the process of creating a new edge
	        // Consequently the following situations have to be taken into account:
	        // aa/ There is no vertex at this location. In this case this is a fully new ROI
	        // ab/ There is a vertex at this location. This vertex is part of only one edge, create a new edge starting there.
	        // ac/ There is a vertex at this location. The vertex is already part of two edges, no new line can be added. A vertex can only be in up to two edges.
	        // ba/ The target is not a vertex. Create a new vertex here and a new edge linking start to end. Continue with a new edge starting at this location.
	        // bb/ The target is a vertex. The target vertex is part of one edge. Creating a connecting new edge will close the current ROI. Close shape, end editing.
	        // bc/ The target is a vertex. The target vertex is part of two edges. The connection cannot be made. Do nothing.
	        var count = _utilsGlobals2['default'].countEdges(x, y, this.state.edges, 1);
	        if (this.state.start == null) {
	          // a
	          if (count == 0) {
	            // aa
	            window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newRegionOfInterestTooltip5')), 10);
	            this.setState({ edges: [], start: { x: x, y: y } });
	          } else if (count == 1) {
	            // ab
	            window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newRegionOfInterestTooltip5')), 10);
	            var vertex = _utilsGlobals2['default'].matchVertex(x, y, this.state.edges, 1);
	            this.setState({ start: { x: vertex.x, y: vertex.y } });
	          } else if (count == 2) {
	            // ac
	            window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newRegionOfInterestTooltip1')), 10);
	          } else {
	            console.error("Whoops. This vertex is in too many edges. How unexpected.");
	          }
	        } else {
	          // b
	          if (count == 0) {
	            // ba
	            window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newRegionOfInterestTooltip5')), 10);
	            var edges = this.state.edges;
	            edges.push({
	              start: {
	                x: this.state.start.x,
	                y: this.state.start.y
	              },
	              end: {
	                x: x,
	                y: y
	              }
	            });
	            this.setState({ edges: edges, start: { x: x, y: y } });
	          } else if (count == 1) {
	            // bb
	            if (this.state.edges.length < 2) {
	              window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newRegionOfInterestTooltip2')), 100);
	              return;
	            }
	            var vertex = _utilsGlobals2['default'].matchVertex(x, y, this.state.edges, 1);
	            var edges = this.state.edges;
	            edges.push({
	              start: {
	                x: this.state.start.x,
	                y: this.state.start.y
	              },
	              end: {
	                x: vertex.x,
	                y: vertex.y
	              }
	            });
	            this.setState({ edges: edges, start: null, interactionState: 1 });
	          } else if (count == 2) {
	            // bc
	            window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newRegionOfInterestTooltip3')), 100);
	          } else {
	            console.error("Whoops. This vertex is in too many edges. How unexpected.");
	          }
	        }
	      }
	    }
	  }, {
	    key: 'closePolygon',
	    value: function closePolygon() {
	      if (this.state.interactionState == 0) {
	        if (this.state.edges.length > 1) {
	          var edges = this.state.edges;
	          edges.push({
	            start: { x: this.state.start.x, y: this.state.start.y },
	            end: { x: edges[0].start.x, y: edges[0].start.y }
	          });
	          this.setState({
	            edges: edges,
	            start: null,
	            interactionState: 1
	          });
	        } else {
	          window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newRegionOfInterestTooltip2')), 100);
	        }
	      }
	    }

	    /**
	     * Comparison must allow a +- 5 px interval for matching (can't expect the user to click on a precise pixel).
	     * @param x
	     * @param y
	     * @returns {boolean}
	     */
	  }, {
	    key: 'matchVertex',
	    value: function matchVertex(x, y) {
	      for (var i = 0; i < this.state.edges.length; ++i) {
	        var edge = this.state.edges[i];
	        if (edge.start.x - 5 < x && edge.start.x + 5 > x && edge.start.y - 5 < y && edge.start.y + 5 > y) {
	          return edge.start;
	        }
	        if (edge.end.x - 5 < x && edge.end.x + 5 > x && edge.end.y - 5 < y && edge.end.y + 5 > y) {
	          return edge.end;
	        }
	      }
	      return null;
	    }
	  }, {
	    key: 'countEdges',
	    value: function countEdges(x, y) {
	      var count = 0;
	      for (var i = 0; i < this.state.edges.length; ++i) {
	        var edge = this.state.edges[i];
	        if (edge.start.x - 5 < x && edge.start.x + 5 > x && edge.start.y - 5 < y && edge.start.y + 5 > y) {
	          count++;
	        } else if (edge.end.x - 5 < x && edge.end.x + 5 > x && edge.end.y - 5 < y && edge.end.y + 5 > y) {
	          count++;
	        }
	      }
	      return count;
	    }
	  }, {
	    key: 'splitEdge',
	    value: function splitEdge(i, self) {
	      _d32['default'].event.stopPropagation();
	      var edges = self.state.edges;
	      var edge = edges[i];
	      edges.splice(i, 1);
	      var xm = (edge.end.x + edge.start.x) / 2;
	      var ym = (edge.end.y + edge.start.y) / 2;
	      edges.push({ start: { x: edge.start.x, y: edge.start.y }, end: { x: xm, y: ym } });
	      edges.push({ start: { x: xm, y: ym }, end: { x: edge.end.x, y: edge.end.y } });
	      self.setState({ edges: edges });
	    }
	  }, {
	    key: 'deleteVertex',
	    value: function deleteVertex(x, y) {
	      //d3.event.stopPropagation();
	      // Find the two edges that have x and y as start or end
	      var edges = this.state.edges;
	      var startEdge = null;
	      var endEdge = null;
	      for (var i = 0; i < edges.length; ++i) {
	        var edge = edges[i];
	        if (edge.start.x - 5 < x && edge.start.x + 5 > y && edge.start.y - 5 < x && edge.start.y + 5 > y) {
	          startEdge = edge;
	        }
	        if (edge.end.x - 5 < x && edge.end.x + 5 > x && edge.end.y - 5 < y && edge.end.y + 5 > y) {
	          endEdge = edge;
	        }
	      }

	      // Merge both edges
	      edges.splice(edges.indexOf(startEdge), 1);
	      edges.splice(edges.indexOf(endEdge), 1);

	      edges.push({ start: { x: startEdge.end.x, y: startEdge.end.y }, end: { x: endEdge.start.x, y: endEdge.start.y } });

	      // Update display
	      this.setState({ edges: edges });
	    }
	  }, {
	    key: 'setData',
	    value: function setData(name) {
	      this.setState({ name: name });
	    }
	  }, {
	    key: 'setLineEndPosition',
	    value: function setLineEndPosition() {
	      var coords = _d32['default'].mouse(this);
	      _d32['default'].select('.' + CreateRoI.classes().activeLineClass).attr("x2", coords[0]).attr("y2", coords[1]);
	    }
	  }, {
	    key: 'vertexDragStart',
	    value: function vertexDragStart() {
	      if (_d32['default'].event.sourceEvent.which == 1) {
	        _d32['default'].event.sourceEvent.preventDefault();
	        _d32['default'].event.sourceEvent.stopPropagation();

	        var circle = _d32['default'].select(this);
	        circle.classed('dragging', true).datum({ tx: 0, ty: 0, origX: circle.cx, origY: circle.cy }).attr('origX', function (d) {
	          return d.origX;
	        }).attr('origY', function (d) {
	          return d.origY;
	        }).attr('tx', function (d) {
	          return d.tx;
	        }).attr('ty', function (d) {
	          return d.ty;
	        });
	      }
	    }
	  }, {
	    key: 'vertexDragged',
	    value: function vertexDragged(d) {
	      if (_d32['default'].select(this).classed('dragging') == true) {
	        var vertex = _d32['default'].select(this);
	        vertex.attr('cx', d.cx = _d32['default'].event.x).attr('cy', d.cy = _d32['default'].event.y);
	      }
	    }
	  }, {
	    key: 'vertexDragEnded',
	    value: function vertexDragEnded(d, self) {
	      if (_d32['default'].event.sourceEvent.which == 1) {
	        var circle = _d32['default'].select(this);
	        circle.classed('dragging', false);
	        var edges = self.state.edges;
	        if (d.x && d.y && d.cx && d.cy) {
	          _utilsGlobals2['default'].updateEdgesPosition(d.x, d.y, d.cx, d.cy, edges, 0.1);
	        }
	        self.setState({ edges: edges });
	      }
	    }
	  }, {
	    key: 'leftClick',
	    value: function leftClick(self, d) {
	      // If no image set image and add vertex
	      if (!self.state.imageLinkUri) {
	        var coords = _d32['default'].mouse(this);
	        self.setState({ imageLinkUri: d.link, imageUri: d.entity });
	        self.addVertex.call(self, coords[0], coords[1], d);
	      }
	      if (self.state.imageLinkUri == d.link) {
	        // If same image add vertex
	        var coords = _d32['default'].mouse(this);
	        self.addVertex.call(self, coords[0], coords[1], d);
	      } else {
	        // If different image display error and do nothing else
	        console.error('Attempt to apply a single image operation as cross-image');
	      }
	    }
	  }, {
	    key: 'rightClick',
	    value: function rightClick(self, d) {
	      //console.log('right click');
	      _d32['default'].event.stopPropagation();
	      _d32['default'].event.preventDefault();
	      self.closePolygon.call(self);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _get(Object.getPrototypeOf(CreateRoI.prototype), 'componentDidMount', this).call(this);
	      window.setTimeout(_actionsToolActions2['default'].registerTool.bind(null, _confToolsConf2['default'].newRegionOfInterest.id, this.click, this), 10);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.active) {
	        this.buttonStyle.backgroundColor = 'rgba(200,200,200,1.0)';
	      } else {
	        this.buttonStyle.backgroundColor = null;
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.active) {
	        this.clearSVG();
	        this.dataToSVG();
	      }

	      if (!this.state.active && prevState.active) {
	        this.clearSVG();
	      }

	      if (this.state.interactionState == 1) {
	        _d32['default'].select('.' + _constantsCommonSVGClasses2['default'].ROOT_CLASS).on('mouseenter', CreateRoI.activateEnter).on('mouseleave', CreateRoI.deactivateEnter);

	        _d32['default'].select('.' + CreateRoI.classes().selfSvgClass).style('pointer-events', 'auto');

	        window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newRegionOfInterestTooltip4')), 50);
	      } else if (prevState.interactionState == 1 && this.state.interactionState != 1) {
	        _d32['default'].select('.' + _constantsCommonSVGClasses2['default'].ROOT_CLASS).on('mouseenter', null).on('mouseleave', null);
	      }
	    }
	  }, {
	    key: 'setMode',
	    value: function setMode() {
	      _actionsToolActions2['default'].setTool(_confToolsConf2['default'].newRegionOfInterest.id);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'button',
	        { ref: 'button',
	          style: this.buttonStyle,
	          className: 'ui button compact',
	          'data-content': this.props.userstore.getText('createNewRoI'),
	          onClick: this.setMode },
	        _react2['default'].createElement('img', { src: _imagesPerimeterSvg2['default'], style: this.iconStyle, height: '20px', width: '20px' })
	      );
	    }
	  }], [{
	    key: 'classes',
	    value: function classes() {
	      return {
	        selfSvgClass: "CREATE_ROI_TOOL_CLASS",
	        activeLineClass: "CREATE_ROI_TOOL_ACTIVE_LINE_CLASS"
	      };
	    }
	  }, {
	    key: 'getNextEdge',
	    value: function getNextEdge(edges, x, y) {
	      if (x == null || y == null || edges.length == 1) {
	        var edge = { start: { x: edges[0].start.x, y: edges[0].start.y }, end: { x: edges[0].end.x, y: edges[0].end.y } };
	        edges.splice(0, 1);
	        return edge;
	      }
	      for (var i = 0; i < edges.length; ++i) {
	        var edge = { start: { x: edges[i].start.x, y: edges[i].start.y }, end: { x: edges[i].end.x, y: edges[i].end.y } };
	        if (edge.start.x - 5 < x && edge.start.x + 5 > x && edge.start.y - 5 < y && edge.start.y + 5 > y) {
	          edges.splice(i, 1);
	          return edge;
	        }
	      }
	    }
	  }, {
	    key: 'updateEdgesPosition',
	    value: function updateEdgesPosition(oldX, oldY, newX, newY, edges) {
	      for (var i = 0; i < edges.length; ++i) {
	        var edge = edges[i];
	        if (edge.start.x - 5 < oldX && edge.start.x + 5 > oldX && edge.start.y - 5 < oldY && edge.start.y + 5 > oldY) {
	          edge.start.x = newX;
	          edge.start.y = newY;
	        }
	        if (edge.end.x - 5 < oldX && edge.end.x + 5 > oldX && edge.end.y - 5 < oldY && edge.end.y + 5 > oldY) {
	          edge.end.x = newX;
	          edge.end.y = newY;
	        }
	      }
	    }
	  }, {
	    key: 'activateEnter',
	    value: function activateEnter() {
	      _d32['default'].select("body").on('keyup', _actionsToolActions2['default'].save);
	    }
	  }, {
	    key: 'deactivateEnter',
	    value: function deactivateEnter() {
	      _d32['default'].select("body").on('keyup', null);
	    }
	  }]);

	  return CreateRoI;
	})(_AbstractTool3['default']);

	exports['default'] = CreateRoI;
	module.exports = exports['default'];

/***/ },
/* 271 */
/***/ function(module, exports) {

	module.exports = area;

	var e0 = [0, 0];
	var e1 = [0, 0];

	function area(a) {
	  var area = 0;
	  var first = a[0];

	  var l = a.length;
	  for (var i=2; i<l; i++) {
	    var p = a[i-1];
	    var c = a[i];
	    e0[0] = first[0] - c[0];
	    e0[1] = first[1] - c[1];
	    e1[0] = first[0] - p[0];
	    e1[1] = first[1] - p[1];

	    area += (e0[0] * e1[1]) - (e0[1] * e1[0]);
	  }
	  return area/2;
	}


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Popup for the CreateRoI tool.
	 *
	 * Created by hector on 31/07/15.
	 */
	"use strict";

	var _get = __webpack_require__(3)["default"];

	var _inherits = __webpack_require__(19)["default"];

	var _createClass = __webpack_require__(28)["default"];

	var _classCallCheck = __webpack_require__(31)["default"];

	var _interopRequireDefault = __webpack_require__(1)["default"];

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _componentsBenchActiveToolTooltip = __webpack_require__(226);

	var _componentsBenchActiveToolTooltip2 = _interopRequireDefault(_componentsBenchActiveToolTooltip);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var CreateRoIPopup = (function (_React$Component) {
	  _inherits(CreateRoIPopup, _React$Component);

	  function CreateRoIPopup(props) {
	    _classCallCheck(this, CreateRoIPopup);

	    _get(Object.getPrototypeOf(CreateRoIPopup.prototype), "constructor", this).call(this, props);

	    this.componentStyle = {
	      width: '200px',
	      display: "flex",
	      flexDirection: "column",
	      borderStyle: "solid",
	      borderWidth: "1px",
	      borderColor: "black",
	      padding: "5px",
	      color: 'black',
	      marginTop: '5px'
	    };

	    this.titleBarStyle = {
	      display: 'flex',
	      width: '198px',
	      flexDirection: 'row',
	      justifyContent: 'space-between',
	      backgroundColor: 'whitesmoke',
	      borderStyle: "solid",
	      borderWidth: "0 0 1px 0",
	      borderColor: "black",
	      padding: 0,
	      margin: 0,
	      position: 'relative',
	      top: '-5px',
	      left: '-5px'
	    };

	    this.titleStyle = {
	      marginLeft: '5px',
	      WebkitUserSelect: 'none',
	      MozUserSelect: 'none',
	      MsUserSelect: 'none',
	      userSelect: 'none',
	      cursor: 'default'
	    };

	    this.iconStyle = {
	      cursor: 'pointer'
	    };

	    this.buttonContainerStyle = {
	      display: "flex",
	      flexDirection: "row"
	    };

	    this.barContainerStyle = {
	      display: "flex",
	      flexDirection: "column"
	    };

	    this.horizontalContainerStyle = {
	      display: "flex",
	      flexDirection: "row",
	      maxWidth: '100%',
	      paddingBottom: '3px'
	    };

	    this.state = CreateRoIPopup.initialState();

	    this.textStyle = {
	      fontFamily: 'Roboto Condensed',
	      fontWeight: '300'
	    };
	  }

	  _createClass(CreateRoIPopup, [{
	    key: "minimize",
	    value: function minimize() {
	      this.barContainerStyle.display = this.barContainerStyle.display === 'none' ? '' : 'none';
	      this.setState({});
	    }
	  }, {
	    key: "cancel",
	    value: function cancel() {
	      window.setTimeout(_actionsToolActions2["default"].reset, 100);
	      this.setState({ name: '' });
	    }
	  }, {
	    key: "save",
	    value: function save() {
	      _actionsToolActions2["default"].save();
	    }
	  }, {
	    key: "onNameChange",
	    value: function onNameChange(event) {
	      this.setState({ name: event.target.value });
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      this.setState({ name: '' });
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps, prevState) {
	      this.props.setDataCallback(this.state.name);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return _react2["default"].createElement(
	        "div",
	        { style: this.componentStyle, className: "ui segment" },
	        _react2["default"].createElement(
	          "div",
	          { className: "ui segment", style: this.titleBarStyle },
	          _react2["default"].createElement(
	            "div",
	            { style: this.titleStyle },
	            this.props.userstore.getText('newRegion')
	          ),
	          _react2["default"].createElement(
	            "div",
	            null,
	            _react2["default"].createElement("i", { className: "ui minus icon",
	              style: this.iconStyle,
	              onClick: this.minimize.bind(this) }),
	            _react2["default"].createElement("i", { className: "ui remove icon", style: this.iconStyle, onClick: _utilsGlobals2["default"].noActiveTool })
	          )
	        ),
	        _react2["default"].createElement(
	          "div",
	          { style: this.barContainerStyle },
	          _react2["default"].createElement(_componentsBenchActiveToolTooltip2["default"], { userstore: this.props.userstore,
	            toolstore: this.props.toolstore }),
	          _react2["default"].createElement(
	            "div",
	            { style: this.horizontalContainerStyle, className: "ui inverted field" },
	            _react2["default"].createElement("textarea", { placeholder: this.props.userstore.getText('name'),
	              onChange: this.onNameChange.bind(this),
	              value: this.state.name, autofocus: "true", wrap: "hard" })
	          ),
	          _react2["default"].createElement(
	            "div",
	            { style: this.buttonContainerStyle, className: "ui buttons" },
	            _react2["default"].createElement(
	              "button",
	              { className: "ui green button",
	                style: this.textStyle,
	                onClick: this.save.bind(this) },
	              this.props.userstore.getText('save')
	            )
	          )
	        )
	      );
	    }
	  }], [{
	    key: "initialState",
	    value: function initialState() {
	      return {
	        name: ''
	      };
	    }
	  }]);

	  return CreateRoIPopup;
	})(_react2["default"].Component);

	exports["default"] = CreateRoIPopup;
	module.exports = exports["default"];

/***/ },
/* 273 */,
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Implementation of abstract tool to create angles.
	 *
	 * Created by dmitri on 08/07/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _AbstractTool2 = __webpack_require__(258);

	var _AbstractTool3 = _interopRequireDefault(_AbstractTool2);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _constantsCommonSVGClasses = __webpack_require__(224);

	var _constantsCommonSVGClasses2 = _interopRequireDefault(_constantsCommonSVGClasses);

	var _popupsCreateAnglePopup = __webpack_require__(275);

	var _popupsCreateAnglePopup2 = _interopRequireDefault(_popupsCreateAnglePopup);

	var _confToolsConf = __webpack_require__(257);

	var _confToolsConf2 = _interopRequireDefault(_confToolsConf);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var _imagesAngleSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/angle.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesAngleSvg2 = _interopRequireDefault(_imagesAngleSvg);

	var CreateAngle = (function (_AbstractTool) {
	  _inherits(CreateAngle, _AbstractTool);

	  function CreateAngle(props) {
	    var _this = this;

	    _classCallCheck(this, CreateAngle);

	    _get(Object.getPrototypeOf(CreateAngle.prototype), 'constructor', this).call(this, props);

	    this.state = CreateAngle.initialState();
	    var self = this;

	    this.dragCenter = _d32['default'].behavior.drag().origin(function (d) {
	      return d;
	    }).on('dragstart', this.vertexDragStart).on("drag", this.vertexDragged).on("dragend", function (d, i) {
	      //d3.select(this).classed('dragging', false);
	      self.setPosition.call(self, 'center', d, _d32['default'].mouse(_d32['default'].select('#IMAGE-' + d.link).node()));
	    });
	    this.dragVertex1 = _d32['default'].behavior.drag().origin(function (d) {
	      return d;
	    }).on('dragstart', this.vertexDragStart).on("drag", this.vertexDragged).on("dragend", function (d, i) {
	      //d3.select(this).classed('dragging', false);
	      self.setPosition.call(self, 'vertex1', d, _d32['default'].mouse(_d32['default'].select('#IMAGE-' + d.link).node()));
	    });
	    this.dragVertex2 = _d32['default'].behavior.drag().origin(function (d) {
	      return d;
	    }).on('dragstart', this.vertexDragStart).on("drag", this.vertexDragged).on("dragend", function (d, i) {
	      //d3.select(this).classed('dragging', false);
	      self.setPosition.call(self, 'vertex2', d, _d32['default'].mouse(_d32['default'].select('#IMAGE-' + d.link).node()));
	    });

	    this._onViewChange = function () {
	      var adaptZoom = function adaptZoom() {
	        return _this.adaptElementSizeToZoom(_this.props.viewstore.getView());
	      };
	      return adaptZoom.apply(_this);
	    };

	    this._forceUpdate = function () {
	      var update = function update() {
	        return _this.setState({});
	      };
	      return update.apply(_this);
	    };
	  }

	  _createClass(CreateAngle, [{
	    key: 'canSave',
	    value: function canSave() {
	      return this.state.interactionState === 3;
	    }
	  }, {
	    key: 'save',
	    value: function save() {
	      if (this.state.interactionState !== 3) {
	        alert(this.props.userstore.getText('angleNotFinished'));
	        return null;
	      }
	      if (this.state.name.length < 1) {
	        alert(this.props.userstore.getText('nameMandatory'));
	        return null;
	      }

	      var vertices = [[this.state.vertex1.x, this.state.vertex1.y], [this.state.center.x, this.state.center.y], [this.state.vertex2.x, this.state.vertex2.y]];
	      var measure = this.getAngleInDegrees();
	      var name = this.state.name;

	      _utilsServiceMethods2['default'].createAngleOfInterest(this.state.imageId, measure, vertices, name, _utilsGlobals2['default'].setSavedEntityInInspector);

	      this.reset();
	    }
	  }, {
	    key: 'begin',
	    value: function begin() {
	      var self = this;
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate.bind(null, null), 10);
	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, _react2['default'].createElement(
	        'p',
	        null,
	        this.props.userstore.getInterpolatedText('stageX', [1, 4]),
	        _react2['default'].createElement('br', null),
	        this.props.userstore.getText('newAngleTooltip')
	      )), 10);

	      _d32['default'].select('.' + _constantsCommonSVGClasses2['default'].ROOT_CLASS).on('mouseenter', this.activateEnter).on('mouseleave', this.deactivateEnter);

	      var popup = _react2['default'].createElement(_popupsCreateAnglePopup2['default'], { setDataCallback: this.setData.bind(this),
	        userstore: this.props.userstore,
	        toolstore: this.props.toolstore, key: 'CREATE-ANGLE-POPUP' });
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate.bind(null, popup), 10);
	      window.setTimeout(_actionsViewActions2['default'].updateDisplayFilters.bind(null, { angles: true }), 10);

	      _d32['default'].selectAll('.' + _constantsCommonSVGClasses2['default'].IMAGE_CLASS).style('cursor', 'crosshair').on('click', function (d, i) {
	        if (_d32['default'].event.defaultPrevented) return;
	        _d32['default'].event.preventDefault();
	        _d32['default'].event.stopPropagation();
	        if (_d32['default'].event.button == 0) {
	          self.leftClick.call(this, self, d);
	        }
	      }).on('contextmenu', function (d, i) {
	        if (_d32['default'].event.defaultPrevented) return;
	        _d32['default'].event.preventDefault();
	        _d32['default'].event.stopPropagation();
	        self.rightClick.call(this, self, d);
	      });

	      this.props.viewstore.addViewportListener(this._onViewChange);

	      this.setState({
	        active: true,
	        name: '',
	        center: null,
	        vertex1: null,
	        vertex2: null,
	        interactionState: 0,
	        imageLinkId: null,
	        imageId: null
	      });
	    }
	  }, {
	    key: 'reset',
	    value: function reset() {
	      this.clearSVG();

	      this.setState({
	        center: null,
	        vertex1: null,
	        vertex2: null,
	        name: '',
	        interactionState: 0,
	        imageLinkId: null,
	        imageId: null
	      });

	      var popup = _react2['default'].createElement(_popupsCreateAnglePopup2['default'], { setDataCallback: this.setData.bind(this),
	        userstore: this.props.userstore,
	        toolstore: this.props.toolstore, key: 'CREATE-ANGLE-POPUP' });
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate.bind(null, popup), 10);

	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, _react2['default'].createElement(
	        'p',
	        null,
	        this.props.userstore.getInterpolatedText('stageX', [1, 4]),
	        _react2['default'].createElement('br', null),
	        this.props.userstore.getText('newAngleTooltip')
	      )), 10);
	    }
	  }, {
	    key: 'finish',
	    value: function finish() {
	      this.clearSVG();
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate.bind(null, null), 10);
	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, ""), 10);

	      _d32['default'].select('.' + _constantsCommonSVGClasses2['default'].ROOT_CLASS).on('mouseenter', null).on('mouseleave', null);

	      _d32['default'].selectAll('.' + _constantsCommonSVGClasses2['default'].IMAGE_CLASS).style('cursor', 'default').on('contextmenu', null).on('click', null);

	      this.props.viewstore.removeViewportListener(this._onViewChange);

	      this.setState(CreateAngle.initialState());
	    }
	  }, {
	    key: 'setMode',
	    value: function setMode() {
	      _actionsToolActions2['default'].setTool(_confToolsConf2['default'].newAngle.id);
	    }
	  }, {
	    key: 'setData',
	    value: function setData(name) {
	      this.setState({ name: name });
	    }
	  }, {
	    key: 'adaptElementSizeToZoom',
	    value: function adaptElementSizeToZoom(view) {
	      var tool = _d32['default'].select('.' + CreateAngle.svgClasses().container);

	      tool.selectAll('.' + CreateAngle.svgClasses().vertex).attr('r', 6 / view.scale).attr('stroke-width', 3 / view.scale);

	      tool.selectAll('.' + CreateAngle.svgClasses().whiteDashedLine).attr('stroke-width', 4 / view.scale).attr('stroke-dasharray', 8 / view.scale + ',' + 8 / view.scale);

	      tool.selectAll('.' + CreateAngle.svgClasses().blackLine).attr('stroke-width', 4 / view.scale);
	    }
	  }, {
	    key: 'leftClick',
	    value: function leftClick(self, d) {
	      var coords = _d32['default'].mouse(this);
	      switch (self.state.interactionState) {
	        case 0:
	          self.setState({
	            imageLinkId: d.link,
	            imageId: d.uid,
	            interactionState: 1,
	            center: {
	              x: coords[0],
	              y: coords[1]
	            },
	            vertex1: {
	              x: coords[0],
	              y: coords[1]
	            }
	          });
	          break;
	        case 1:
	          self.setState({
	            interactionState: 2,
	            vertex1: {
	              x: coords[0],
	              y: coords[1]
	            },
	            vertex2: {
	              x: self.state.center.x,
	              y: self.state.center.y
	            }
	          });
	          break;
	        case 2:
	          self.setState({
	            interactionState: 3,
	            vertex2: {
	              x: coords[0],
	              y: coords[1]
	            }
	          });
	          break;
	      }
	    }
	  }, {
	    key: 'rightClick',
	    value: function rightClick(self, d) {}
	  }, {
	    key: 'activateEnter',
	    value: function activateEnter() {
	      _d32['default'].select("body").on('keyup', function (d, i) {
	        if (_d32['default'].event.which == 13) {
	          // 'Enter' key
	          _d32['default'].event.stopPropagation();
	          _d32['default'].event.preventDefault();
	          //self.nextInteractionState.call(this, self);
	        }
	      });
	    }
	  }, {
	    key: 'deactivateEnter',
	    value: function deactivateEnter() {
	      _d32['default'].select("body").on('keyup', null);
	      //d3.select("." + Classes.ROOT_CLASS).on('contextmenu', null);
	    }
	  }, {
	    key: 'clearSVG',
	    value: function clearSVG() {
	      _d32['default'].select('.' + CreateAngle.svgClasses().container).remove();
	      _d32['default'].select('#IMAGE-' + this.state.imageLinkId).on('mousemove', null);
	    }

	    // Must be called only on a cleared SVG display, otherwise duplicates will appear.
	  }, {
	    key: 'drawSVG',
	    value: function drawSVG() {
	      var view = this.props.viewstore.getView();
	      var overSheetGroup = _d32['default'].select('#OVER-' + this.state.imageLinkId);
	      var toolDisplayGroup = overSheetGroup.append('g').attr('class', CreateAngle.svgClasses().container);
	      if (this.state.interactionState > 0) {
	        toolDisplayGroup.append('line').attr('class', CreateAngle.svgClasses().blackLine).attr('x1', this.state.center.x).attr('y1', this.state.center.y).attr('x2', this.state.vertex1.x).attr('y2', this.state.vertex1.y).attr('stroke-width', 4 / view.scale).attr('stroke', 'black').style('pointer-events', 'none');

	        toolDisplayGroup.append('line').attr('class', CreateAngle.svgClasses().whiteDashedLine).attr('x1', this.state.center.x).attr('y1', this.state.center.y).attr('x2', this.state.vertex1.x).attr('y2', this.state.vertex1.y).attr('stroke-width', 4 / view.scale).attr('stroke-dasharray', 8 / view.scale + ',' + 8 / view.scale).attr('stroke', 'white').style('pointer-events', 'none');

	        toolDisplayGroup.append('circle').datum({ x: this.state.center.x, y: this.state.center.y, link: this.state.imageLinkId }).attr('class', CreateAngle.svgClasses().vertex).attr('cx', function (d) {
	          return d.x;
	        }).attr('cy', function (d) {
	          return d.y;
	        }).attr('r', 6 / view.scale).attr('stroke-width', 3 / view.scale).attr('stroke', 'white').attr('fill', 'black').attr("x", function (d) {
	          return d.x;
	        }).attr("y", function (d) {
	          return d.y;
	        }).style('cursor', '-webkit-grab').style('cursor', 'grab').call(this.dragCenter);
	      }
	      if (this.state.interactionState > 1) {
	        toolDisplayGroup.append('line').attr('class', CreateAngle.svgClasses().blackLine).attr('x1', this.state.center.x).attr('y1', this.state.center.y).attr('x2', this.state.vertex2.x).attr('y2', this.state.vertex2.y).attr('stroke-width', 4 / view.scale).attr('stroke', 'black').style('pointer-events', 'none');

	        toolDisplayGroup.append('line').attr('class', CreateAngle.svgClasses().whiteDashedLine).attr('x1', this.state.center.x).attr('y1', this.state.center.y).attr('x2', this.state.vertex2.x).attr('y2', this.state.vertex2.y).attr('stroke-width', 4 / view.scale).attr('stroke-dasharray', 8 / view.scale + ',' + 8 / view.scale).attr('stroke', 'white').style('pointer-events', 'none');

	        toolDisplayGroup.append('circle').datum({ x: this.state.vertex1.x, y: this.state.vertex1.y, link: this.state.imageLinkId }).attr('class', CreateAngle.svgClasses().vertex).attr('cx', function (d) {
	          return d.x;
	        }).attr('cy', function (d) {
	          return d.y;
	        }).attr('r', 6 / view.scale).attr('stroke-width', 3 / view.scale).attr('stroke', 'white').attr('fill', 'black').attr("x", function (d) {
	          return d.x;
	        }).attr("y", function (d) {
	          return d.y;
	        }).style('cursor', '-webkit-grab').style('cursor', 'grab').call(this.dragVertex1);
	      }
	      if (this.state.interactionState > 2) {
	        var vertex2 = toolDisplayGroup.append('circle').datum({ x: this.state.vertex2.x, y: this.state.vertex2.y, link: this.state.imageLinkId }).attr('class', CreateAngle.svgClasses().vertex).attr('cx', function (d) {
	          return d.x;
	        }).attr('cy', function (d) {
	          return d.y;
	        }).attr('r', 6 / view.scale).attr('stroke-width', 3 / view.scale).attr('stroke', 'white').attr('fill', 'black').attr("x", function (d) {
	          return d.x;
	        }).attr("y", function (d) {
	          return d.y;
	        }).style('cursor', '-webkit-grab').style('cursor', 'grab').call(this.dragVertex2);
	      }

	      var self = this;
	      // Append mouse move listeners for placing end positions
	      switch (this.state.interactionState) {
	        case 1:
	          _d32['default'].select('#IMAGE-' + this.state.imageLinkId).on('mousemove', function (d, i) {
	            self.setPosition.call(self, 'vertex1', d, _d32['default'].mouse(this));
	          });
	          break;
	        case 2:
	          _d32['default'].select('#IMAGE-' + this.state.imageLinkId).on('mousemove', function (d, i) {
	            self.setPosition.call(self, 'vertex2', d, _d32['default'].mouse(this));
	          });
	          break;
	        default:
	          break;
	      }
	    }
	  }, {
	    key: 'setPosition',
	    value: function setPosition(varName, d, coords) {
	      //console.log('setPosition(' + varName + ',' + JSON.stringify(d) + ',' + JSON.stringify(coords));
	      var image = _d32['default'].select('#IMAGE-' + d.link);
	      var imageData = image.datum();
	      var x = this.getBoundedPosition(coords[0], imageData.width, 0);
	      var y = this.getBoundedPosition(coords[1], imageData.height, 0);

	      this.state[varName].x = x;
	      this.state[varName].y = y;

	      this.setState(this.state);
	    }
	  }, {
	    key: 'vertexDragStart',
	    value: function vertexDragStart() {
	      if (_d32['default'].event.sourceEvent.which == 1) {
	        _d32['default'].event.sourceEvent.preventDefault();
	        _d32['default'].event.sourceEvent.stopPropagation();
	      }
	    }
	  }, {
	    key: 'getBoundedPosition',
	    value: function getBoundedPosition(pos, max, min) {
	      return Math.min(Math.max(pos, min), max);
	    }
	  }, {
	    key: 'vertexDragged',
	    value: function vertexDragged(d) {
	      //if(d3.select(this).classed('dragging') == true) {
	      var image = _d32['default'].select('#IMAGE-' + d.link);
	      var coords = _d32['default'].mouse(image.node());
	      var imageData = image.datum();
	      var x = this.getBoundedPosition(coords[0], imageData.width, 0);
	      var y = this.getBoundedPosition(coords[1], imageData.height, 0);
	      var vertex = _d32['default'].select(this);

	      vertex.attr('cx', x).attr('cy', y);
	      //}
	    }
	  }, {
	    key: 'getAngleInDegrees',
	    value: function getAngleInDegrees() {
	      var angleInRadians = this.getAngleInRadians(this.state.vertex1, this.state.center, this.state.vertex2);
	      //return (Math.atan2(this.state.vertex1.x - this.state.center.x, -this.state.vertex1.y + this.state.center.y) - Math.atan2(this.state.vertex2.x - this.state.center.x, -this.state.vertex2.y + this.state.center.y)) * 180 / Math.PI;
	      return angleInRadians * 180 / Math.PI;
	    }
	  }, {
	    key: 'getAngleInRadians',
	    value: function getAngleInRadians(v1, center, v2) {
	      var v1c = Math.sqrt(Math.pow(center.x - v1.x, 2) + Math.pow(center.y - v1.y, 2));
	      var cv2 = Math.sqrt(Math.pow(center.x - v2.x, 2) + Math.pow(center.y - v2.y, 2));
	      var v1v2 = Math.sqrt(Math.pow(v2.x - v1.x, 2) + Math.pow(v2.y - v1.y, 2));

	      return Math.acos((cv2 * cv2 + v1c * v1c - v1v2 * v1v2) / (2 * cv2 * v1c));
	    }
	  }, {
	    key: 'convertToDMS',
	    value: function convertToDMS(angle) {
	      return [0 | angle, '° ', 0 | (angle < 0 ? angle = -angle : angle) % 1 * 60, "' ", 0 | angle * 60 % 1 * 60, '"'].join('');
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _get(Object.getPrototypeOf(CreateAngle.prototype), 'componentDidMount', this).call(this);
	      window.setTimeout(_actionsToolActions2['default'].registerTool.bind(null, _confToolsConf2['default'].newAngle.id, this.click, this), 10);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.active) {
	        this.buttonStyle.backgroundColor = 'rgba(200,200,200,1.0)';
	      } else {
	        this.buttonStyle.backgroundColor = null;
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.active) {
	        if (this.state.interactionState > 0) {
	          this.clearSVG();
	          this.drawSVG();
	        }

	        switch (this.state.interactionState) {
	          case 0:
	            window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, _react2['default'].createElement(
	              'p',
	              null,
	              this.props.userstore.getInterpolatedText('stageX', [1, 4]),
	              _react2['default'].createElement('br', null),
	              this.props.userstore.getText('newAngleTooltip')
	            )), 10);
	            break;
	          case 1:
	            window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, _react2['default'].createElement(
	              'p',
	              null,
	              this.props.userstore.getInterpolatedText('stageX', [2, 4]),
	              _react2['default'].createElement('br', null),
	              this.props.userstore.getText('newAngleTooltip2')
	            )), 10);
	            break;
	          case 2:
	            window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, _react2['default'].createElement(
	              'p',
	              null,
	              this.props.userstore.getInterpolatedText('stageX', [3, 4]),
	              _react2['default'].createElement('br', null),
	              this.props.userstore.getText('newAngleTooltip3'),
	              _react2['default'].createElement('br', null),
	              this.props.userstore.getText('angle'),
	              ' : ',
	              this.convertToDMS(this.getAngleInDegrees())
	            )), 10);
	            break;
	          case 3:
	            window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, _react2['default'].createElement(
	              'p',
	              null,
	              this.props.userstore.getInterpolatedText('stageX', [4, 4]),
	              _react2['default'].createElement('br', null),
	              this.props.userstore.getText('newAngleTooltip4'),
	              _react2['default'].createElement('br', null),
	              this.props.userstore.getText('angle'),
	              ' : ',
	              this.convertToDMS(this.getAngleInDegrees())
	            )), 10);
	            break;
	          default:
	            break;
	        }
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'button',
	        { ref: 'button',
	          style: this.buttonStyle,
	          className: 'ui button compact',
	          onClick: this.setMode,
	          'data-content': this.props.userstore.getText('createNewAngle') },
	        _react2['default'].createElement('img', { src: _imagesAngleSvg2['default'], style: this.iconStyle, height: '20px', width: '40px' })
	      );
	    }
	  }], [{
	    key: 'svgClasses',
	    value: function svgClasses() {
	      return {
	        container: 'angleMeasureContainer',
	        vertex: 'angleMeasureVertex',
	        whiteDashedLine: 'angleMeasureWhiteDashedLine',
	        blackLine: 'angleMeasureBlackLine'
	      };
	    }
	  }, {
	    key: 'initialState',
	    value: function initialState() {
	      return {
	        active: false,
	        interactionState: 0,
	        name: '',
	        center: null,
	        vertex1: null,
	        vertex2: null,
	        imageLinkId: null,
	        imageId: null
	      };
	    }
	  }]);

	  return CreateAngle;
	})(_AbstractTool3['default']);

	exports['default'] = CreateAngle;
	module.exports = exports['default'];

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Popup for the CreateAngle tool. Provides a form to enter data and a button to save an angle.
	 *
	 * Created by dmitri on 13/07/16.
	 */
	"use strict";

	var _get = __webpack_require__(3)["default"];

	var _inherits = __webpack_require__(19)["default"];

	var _createClass = __webpack_require__(28)["default"];

	var _classCallCheck = __webpack_require__(31)["default"];

	var _interopRequireDefault = __webpack_require__(1)["default"];

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _componentsBenchActiveToolTooltip = __webpack_require__(226);

	var _componentsBenchActiveToolTooltip2 = _interopRequireDefault(_componentsBenchActiveToolTooltip);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var CreateAnglePopup = (function (_React$Component) {
	  _inherits(CreateAnglePopup, _React$Component);

	  function CreateAnglePopup(props) {
	    _classCallCheck(this, CreateAnglePopup);

	    _get(Object.getPrototypeOf(CreateAnglePopup.prototype), "constructor", this).call(this, props);

	    this.componentStyle = {
	      width: '200px',
	      display: "flex",
	      flexDirection: "column",
	      borderStyle: "solid",
	      borderWidth: "1px",
	      borderColor: "black",
	      padding: "5px",
	      color: 'black',
	      marginTop: '5px'
	    };

	    this.titleBarStyle = {
	      display: 'flex',
	      width: '198px',
	      flexDirection: 'row',
	      justifyContent: 'space-between',
	      backgroundColor: 'whitesmoke',
	      borderStyle: "solid",
	      borderWidth: "0 0 1px 0",
	      borderColor: "black",
	      padding: 0,
	      margin: 0,
	      position: 'relative',
	      top: '-5px',
	      left: '-5px'
	    };

	    this.titleStyle = {
	      marginLeft: '5px',
	      WebkitUserSelect: 'none',
	      MozUserSelect: 'none',
	      MsUserSelect: 'none',
	      userSelect: 'none',
	      cursor: 'default'
	    };

	    this.iconStyle = {
	      cursor: 'pointer'
	    };

	    this.textAreaStyle = {
	      width: '100%'
	    };

	    this.buttonContainerStyle = {
	      display: "flex",
	      flexDirection: "row"
	    };

	    this.barContainerStyle = {
	      display: "flex",
	      flexDirection: "column"
	    };

	    this.horizontalContainerStyle = {
	      display: "flex",
	      flexDirection: "row",
	      maxWidth: '100%',
	      paddingBottom: '3px'
	    };

	    this.state = CreateAnglePopup.initialState();

	    this.textStyle = {
	      fontFamily: 'Roboto Condensed',
	      fontWeight: '300'
	    };
	  }

	  _createClass(CreateAnglePopup, [{
	    key: "clear",
	    value: function clear() {
	      window.setTimeout(_actionsToolActions2["default"].reset, 10);
	      this.setState({ name: '' });
	    }
	  }, {
	    key: "save",
	    value: function save() {
	      _actionsToolActions2["default"].save();
	    }
	  }, {
	    key: "onNameChange",
	    value: function onNameChange(event) {
	      this.setState({ name: event.target.value });
	    }
	  }, {
	    key: "enableSave",
	    value: function enableSave() {
	      this.setState({ saveButtonActive: '' });
	    }
	  }, {
	    key: "disableSave",
	    value: function disableSave() {
	      this.setState({ saveButtonActive: 'disabled' });
	    }
	  }, {
	    key: "minimize",
	    value: function minimize() {
	      this.barContainerStyle.display = this.barContainerStyle.display === 'none' ? '' : 'none';
	      this.setState({});
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: "componentWillReceiveProps",
	    value: function componentWillReceiveProps(nextProps) {
	      this.setState({ name: '' });
	    }
	  }, {
	    key: "componentWillUpdate",
	    value: function componentWillUpdate(nextProps, nextState) {}
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps, prevState) {
	      this.props.setDataCallback(this.state.name);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return _react2["default"].createElement(
	        "div",
	        { style: this.componentStyle, className: "ui segment" },
	        _react2["default"].createElement(
	          "div",
	          { className: "ui segment", style: this.titleBarStyle },
	          _react2["default"].createElement(
	            "div",
	            { style: this.titleStyle },
	            this.props.userstore.getText('newAngle')
	          ),
	          _react2["default"].createElement(
	            "div",
	            { style: this.buttonsStyle },
	            _react2["default"].createElement("i", { className: "ui minus icon",
	              style: this.iconStyle,
	              onClick: this.minimize.bind(this) }),
	            _react2["default"].createElement("i", { className: "ui remove icon", style: this.iconStyle, onClick: _utilsGlobals2["default"].noActiveTool })
	          )
	        ),
	        _react2["default"].createElement(
	          "div",
	          { style: this.barContainerStyle },
	          _react2["default"].createElement(_componentsBenchActiveToolTooltip2["default"], { userstore: this.props.userstore,
	            toolstore: this.props.toolstore }),
	          _react2["default"].createElement(
	            "div",
	            { style: this.horizontalContainerStyle, className: "ui inverted field" },
	            _react2["default"].createElement("textarea", { placeholder: this.props.userstore.getText('name'),
	              style: this.textAreaStyle,
	              onChange: this.onNameChange.bind(this),
	              value: this.state.name, autofocus: "true", wrap: "hard" })
	          ),
	          _react2["default"].createElement(
	            "div",
	            { style: this.buttonContainerStyle, className: "ui buttons" },
	            _react2["default"].createElement(
	              "button",
	              { className: 'ui green button ' + this.state.saveButtonActive, style: this.textStyle, onClick: this.save.bind(this) },
	              this.props.userstore.getText('save')
	            )
	          )
	        )
	      );
	    }
	  }], [{
	    key: "initialState",
	    value: function initialState() {
	      return {
	        name: '',
	        saveButtonActive: ''
	      };
	    }
	  }]);

	  return CreateAnglePopup;
	})(_react2["default"].Component);

	exports["default"] = CreateAnglePopup;
	module.exports = exports["default"];

/***/ },
/* 276 */,
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Implementation of AbstractTool to create measure standards. A measure standard is a normal ToI which is associated to a MeasureStandard when saved. This tool does both in one action. No tool exists to turn an existing trail into a measure standard.
	 *
	 * Created by dmitri on 05/01/17.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _AbstractTool2 = __webpack_require__(258);

	var _AbstractTool3 = _interopRequireDefault(_AbstractTool2);

	var _popupsCreateMeasureStandardPopup = __webpack_require__(278);

	var _popupsCreateMeasureStandardPopup2 = _interopRequireDefault(_popupsCreateMeasureStandardPopup);

	var _constantsCommonSVGClasses = __webpack_require__(224);

	var _constantsCommonSVGClasses2 = _interopRequireDefault(_constantsCommonSVGClasses);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _confToolsConf = __webpack_require__(257);

	var _confToolsConf2 = _interopRequireDefault(_confToolsConf);

	var _imagesMeasureStandardSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/measure-standard.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesMeasureStandardSvg2 = _interopRequireDefault(_imagesMeasureStandardSvg);

	var CreateMeasureStandard = (function (_AbstractTool) {
	  _inherits(CreateMeasureStandard, _AbstractTool);

	  function CreateMeasureStandard(props) {
	    _classCallCheck(this, CreateMeasureStandard);

	    _get(Object.getPrototypeOf(CreateMeasureStandard.prototype), 'constructor', this).call(this, props);

	    var self = this;

	    this.dragStart = _d32['default'].behavior.drag().origin(function (d) {
	      return d;
	    }).on('dragstart', this.vertexDragStart).on('drag', this.vertexDragged).on('dragend', function (d, i) {
	      var coords = _d32['default'].mouse(_d32['default'].select('#IMAGE-' + d.link).node());
	      self.setState({ start: { x: coords[0], y: coords[1] } });
	    });
	    this.dragEnd = _d32['default'].behavior.drag().origin(function (d) {
	      return d;
	    }).on('dragstart', this.vertexDragStart).on('drag', this.vertexDragged).on('dragend', function (d, i) {
	      var coords = _d32['default'].mouse(_d32['default'].select('#IMAGE-' + d.link).node());
	      self.setState({ end: { x: coords[0], y: coords[1] } });
	    });

	    this.state = this.initialState();
	  }

	  _createClass(CreateMeasureStandard, [{
	    key: 'initialState',
	    value: function initialState() {
	      return {
	        active: false,
	        imageUri: null,
	        imageLinkUri: null,
	        start: null,
	        end: null,
	        inputValueInMm: null,
	        name: null
	      };
	    }
	  }, {
	    key: 'canSave',
	    value: function canSave() {
	      return true;
	    }
	  }, {
	    key: 'save',
	    value: function save() {
	      var length = Math.sqrt(Math.pow(this.state.end.x - this.state.start.x, 2) + Math.pow(this.state.end.y - this.state.start.y, 2));
	      // console.log('saving trail with length ' + length);
	      _utilsServiceMethods2['default'].createTrailOfInterest(this.state.imageUri, length, [[this.state.start.x, this.state.start.y], [this.state.end.x, this.state.end.y]], this.state.name, this.pathCreated.bind(this));
	    }
	  }, {
	    key: 'pathCreated',
	    value: function pathCreated(msg) {
	      if (msg.clientProcessError) {
	        alert(this.props.userstore.getText('newStandardFailed') + ' ' + this.props.userstore.getText('newStandardError1'));
	      } else {
	        _utilsServiceMethods2['default'].addMeasureStandard(msg.data.measurementId, this.state.inputValueInMm, 'mm', this.state.name, this.measureStandardCreated.bind(this));
	      }
	    }
	  }, {
	    key: 'measureStandardCreated',
	    value: function measureStandardCreated(msg) {
	      if (msg.clientProcessError) {
	        alert(this.props.userstore.getText('newStandardFailed') + ' ' + this.props.userstore.getText('newStandardError2'));
	      } else {}
	      window.setTimeout(_actionsToolActions2['default'].reset, 10);
	    }
	  }, {
	    key: 'setData',
	    value: function setData(name, value) {
	      this.setState({ name: name, inputValueInMm: value });
	    }
	  }, {
	    key: 'begin',
	    value: function begin() {
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate.bind(null, null), 10);

	      var popup = _react2['default'].createElement(_popupsCreateMeasureStandardPopup2['default'], { userstore: this.props.userstore,
	        setDataCallback: this.setData.bind(this),
	        toolstore: this.props.toolstore });
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate.bind(null, popup), 10);
	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newStandardTooltip1')), 10);
	      var self = this;
	      _d32['default'].selectAll('.' + _constantsCommonSVGClasses2['default'].IMAGE_CLASS).style('cursor', 'crosshair').on('click', function (d, i) {
	        if (_d32['default'].event.defaultPrevented) return;
	        _d32['default'].event.preventDefault();
	        _d32['default'].event.stopPropagation();
	        if (_d32['default'].event.button == 0) {
	          self.leftClick.call(this, self, d);
	        }
	      }).on('contextmenu', function (d, i) {
	        if (_d32['default'].event.defaultPrevented) return;
	        _d32['default'].event.preventDefault();
	        _d32['default'].event.stopPropagation();
	        self.rightClick.call(this, self, d);
	      });

	      this.props.viewstore.addViewportListener(this._forceUpdate);

	      this.setState({ active: true });
	    }
	  }, {
	    key: 'reset',
	    value: function reset() {
	      this.clearSVG();
	      window.setTimeout(_actionsToolActions2['default'].updateToolData.bind(null, null), 10);
	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, this.props.userstore.getText('newStandardTooltip1')), 10);

	      this.setState({
	        imageUri: null,
	        imageLinkUri: null,
	        start: null,
	        end: null,
	        inputValueInMm: null,
	        name: null
	      });
	    }
	  }, {
	    key: 'finish',
	    value: function finish() {
	      this.clearSVG();
	      _d32['default'].selectAll('.' + _constantsCommonSVGClasses2['default'].IMAGE_CLASS).style('cursor', 'default').on('click', null).on('contextmenu', null);

	      this.setState(this.initialState());
	      this.props.viewstore.removeViewportListener(this._forceUpdate);

	      window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, ''), 10);
	      window.setTimeout(_actionsToolActions2['default'].activeToolPopupUpdate.bind(null, null), 10);
	      window.setTimeout(_actionsToolActions2['default'].updateToolData.bind(null, null), 10);
	    }
	  }, {
	    key: 'click',
	    value: function click() {}
	  }, {
	    key: 'setMode',
	    value: function setMode() {
	      window.setTimeout(_actionsToolActions2['default'].setTool.bind(null, _confToolsConf2['default'].newMeasureStandard.id), 10);
	    }
	  }, {
	    key: 'leftClick',
	    value: function leftClick(self, d) {
	      var state = JSON.parse(JSON.stringify(self.state));

	      if (state.imageLinkUri != d.link) {
	        state.imageLinkUri = d.link;
	        state.imageUri = d.entity;
	        state.start = null;
	        state.end = null;
	      }

	      if (!self.state.start) {
	        var coords = _d32['default'].mouse(this);
	        state.start = { x: coords[0], y: coords[1] };
	        window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, self.props.userstore.getText('newStandardTooltip2')), 10);
	        self.setState(state);
	      } else if (!self.state.end) {
	        var coords = _d32['default'].mouse(this);
	        window.setTimeout(_actionsToolActions2['default'].updateTooltipData.bind(null, self.props.userstore.getText('newStandardTooltip3')), 10);
	        self.setState({ end: { x: coords[0], y: coords[1] } });
	      }
	    }
	  }, {
	    key: 'rightClick',
	    value: function rightClick(self, d) {}
	  }, {
	    key: 'drawSVG',
	    value: function drawSVG() {
	      var _this = this;

	      var msGroup = _d32['default'].select('#OVER-' + this.state.imageLinkUri).append('g').attr('class', CreateMeasureStandard.classes().main);

	      var view = this.props.viewstore.getView();

	      if (this.state.start && this.state.end) {
	        msGroup.append('line').attr('class', CreateMeasureStandard.classes().lineBack).attr('x1', this.state.start.x).attr('y1', this.state.start.y).attr('x2', this.state.end.x).attr('y2', this.state.end.y).attr('stroke-width', 2 / view.scale).attr('stroke', 'black').style('pointer-events', 'none');

	        msGroup.append('line').attr('class', CreateMeasureStandard.classes().line).attr('x1', this.state.start.x).attr('y1', this.state.start.y).attr('x2', this.state.end.x).attr('y2', this.state.end.y).attr('stroke-width', 2 / view.scale).attr('stroke-dasharray', 5 / view.scale + ',' + 5 / view.scale).attr('stroke', 'white').style('pointer-events', 'none');
	      } else if (this.state.start) {
	        (function () {
	          var line = msGroup.append('line').attr('class', CreateMeasureStandard.classes().lineBack).attr('x1', _this.state.start.x).attr('y1', _this.state.start.y).attr('x2', _this.state.start.x).attr('y2', _this.state.start.y).attr('stroke-width', 2 / view.scale).attr('stroke', 'black').style('pointer-events', 'none');

	          var lineBack = msGroup.append('line').attr('class', CreateMeasureStandard.classes().line).attr('x1', _this.state.start.x).attr('y1', _this.state.start.y).attr('x2', _this.state.start.x).attr('y2', _this.state.start.y).attr('stroke-width', 2 / view.scale).attr('stroke-dasharray', 5 / view.scale + ',' + 5 / view.scale).attr('stroke', 'white').style('pointer-events', 'none');

	          _d32['default'].select('#IMAGE-' + _this.state.imageLinkUri).on('mousemove', function (d, i) {
	            var coords = _d32['default'].mouse(this);
	            line.attr('x2', coords[0]);
	            line.attr('y2', coords[1]);
	            lineBack.attr('x2', coords[0]);
	            lineBack.attr('y2', coords[1]);
	          });
	        })();
	      }

	      if (this.state.start) {
	        msGroup.append('circle').datum({ x: this.state.start.x, y: this.state.start.y, link: this.state.imageLinkUri }).attr('class', CreateMeasureStandard.classes().vertex).attr('cx', this.state.start.x).attr('cy', this.state.start.y).attr('r', 6 / view.scale).attr('stroke-width', 3 / view.scale).attr('stroke', 'white').attr('fill', 'black').attr("x", function (d) {
	          return d.x;
	        }).attr("y", function (d) {
	          return d.y;
	        }).style('cursor', '-webkit-grab').style('cursor', 'grab').call(this.dragStart);
	      }

	      if (this.state.end) {
	        msGroup.append('circle').datum({ x: this.state.end.x, y: this.state.end.y, link: this.state.imageLinkUri }).attr('class', CreateMeasureStandard.classes().vertex).attr('cx', this.state.end.x).attr('cy', this.state.end.y).attr('r', 6 / view.scale).attr('stroke-width', 3 / view.scale).attr('stroke', 'white').attr('fill', 'black').attr("x", function (d) {
	          return d.x;
	        }).attr("y", function (d) {
	          return d.y;
	        }).style('cursor', '-webkit-grab').style('cursor', 'grab').call(this.dragEnd);
	      }
	    }
	  }, {
	    key: 'clearSVG',
	    value: function clearSVG() {
	      _d32['default'].select('.' + CreateMeasureStandard.classes().main).remove();
	    }
	  }, {
	    key: 'vertexDragStart',
	    value: function vertexDragStart() {
	      if (_d32['default'].event.sourceEvent.which == 1) {
	        _d32['default'].event.sourceEvent.preventDefault();
	        _d32['default'].event.sourceEvent.stopPropagation();
	      }
	    }
	  }, {
	    key: 'vertexDragged',
	    value: function vertexDragged(d) {
	      var image = _d32['default'].select('#IMAGE-' + d.link);
	      var coords = _d32['default'].mouse(image.node());
	      var imageData = image.datum();
	      var x = _utilsGlobals2['default'].getBoundedPosition(coords[0], imageData.width, 0);
	      var y = _utilsGlobals2['default'].getBoundedPosition(coords[1], imageData.height, 0);

	      var vertex = _d32['default'].select(this);
	      vertex.attr('cx', x).attr('cy', y);
	      d.x = x;
	      d.y = y;
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _get(Object.getPrototypeOf(CreateMeasureStandard.prototype), 'componentDidMount', this).call(this);
	      window.setTimeout(_actionsToolActions2['default'].registerTool.bind(null, _confToolsConf2['default'].newMeasureStandard.id, this.click, this), 10);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      _get(Object.getPrototypeOf(CreateMeasureStandard.prototype), 'componentWillUpdate', this).call(this, nextProps, nextState);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      _get(Object.getPrototypeOf(CreateMeasureStandard.prototype), 'componentDidUpdate', this).call(this, prevProps, prevState);
	      if (this.state.active) {
	        if (this.state.start && this.state.end) {
	          var _length = Math.sqrt(Math.pow(this.state.end.x - this.state.start.x, 2) + Math.pow(this.state.end.y - this.state.start.y, 2));
	          window.setTimeout(_actionsToolActions2['default'].updateToolData.bind(null, _length), 10);
	        }

	        this.clearSVG();
	        this.drawSVG();
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'button',
	        { className: 'ui button compact',
	          ref: 'button',
	          onClick: this.setMode,
	          style: this.buttonStyle,
	          'data-content': this.props.userstore.getText('newMeasureStandard') },
	        _react2['default'].createElement('img', { src: _imagesMeasureStandardSvg2['default'], style: this.iconStyle, height: '20px', width: '40px' })
	      );
	    }
	  }], [{
	    key: 'classes',
	    value: function classes() {
	      return {
	        main: 'NEW_MEASURE_STANDARD_CLASS',
	        vertex: 'NEW MEASURE_STANDARD_VERTEX_CLASS',
	        line: 'NEW_MEASURE_STANDARD_LINE_CLASS',
	        lineBack: 'NEW_MEASURE_STANDARD_LINE_BACK_CLASS'
	      };
	    }
	  }]);

	  return CreateMeasureStandard;
	})(_AbstractTool3['default']);

	exports['default'] = CreateMeasureStandard;
	module.exports = exports['default'];

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Popup for the CreateMeasureStandard tool.
	 *
	 * Created by dmitri on 06/01/17.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _componentsBenchActiveToolTooltip = __webpack_require__(226);

	var _componentsBenchActiveToolTooltip2 = _interopRequireDefault(_componentsBenchActiveToolTooltip);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var CreateMeasureStandardPopup = (function (_React$Component) {
	  _inherits(CreateMeasureStandardPopup, _React$Component);

	  function CreateMeasureStandardPopup(props) {
	    var _this = this;

	    _classCallCheck(this, CreateMeasureStandardPopup);

	    _get(Object.getPrototypeOf(CreateMeasureStandardPopup.prototype), 'constructor', this).call(this, props);

	    this.containerStyle = {
	      width: '200px',
	      display: "flex",
	      flexDirection: "column",
	      borderStyle: "solid",
	      borderWidth: "1px",
	      borderColor: "black",
	      padding: "5px",
	      color: 'black',
	      marginTop: '5px'
	    };

	    this.titleBarStyle = {
	      display: 'flex',
	      width: '198px',
	      flexDirection: 'row',
	      justifyContent: 'space-between',
	      backgroundColor: 'whitesmoke',
	      borderStyle: "solid",
	      borderWidth: "0 0 1px 0",
	      borderColor: "black",
	      padding: 0,
	      margin: 0,
	      position: 'relative',
	      top: '-5px',
	      left: '-5px'
	    };

	    this.titleStyle = {
	      marginLeft: '5px',
	      WebkitUserSelect: 'none',
	      MozUserSelect: 'none',
	      MsUserSelect: 'none',
	      userSelect: 'none',
	      cursor: 'default'
	    };

	    this.windowBodyStyle = {
	      display: ''
	    };

	    this.iconStyle = {
	      cursor: 'pointer'
	    };

	    this._toolDataChanged = function () {
	      var updatePath = function updatePath() {
	        return _this.pathDefinitionUpdate();
	      };
	      return updatePath.apply(_this);
	    };

	    this.state = {
	      name: null,
	      value: null,
	      mmPerPixel: 0,
	      lengthInPx: null
	    };
	  }

	  _createClass(CreateMeasureStandardPopup, [{
	    key: 'minimize',
	    value: function minimize() {
	      this.windowBodyStyle.display = this.windowBodyStyle.display == 'none' ? '' : 'none';
	      this.setState({});
	    }
	  }, {
	    key: 'onNameChange',
	    value: function onNameChange(e) {
	      this.setState({ name: e.target.value });
	    }
	  }, {
	    key: 'onValueChange',
	    value: function onValueChange(e) {
	      this.setState({ value: e.target.value });
	    }
	  }, {
	    key: 'pathDefinitionUpdate',
	    value: function pathDefinitionUpdate() {
	      var length = this.props.toolstore.getToolData();
	      this.setState({ lengthInPx: length });
	    }
	  }, {
	    key: 'save',
	    value: function save() {
	      _actionsToolActions2['default'].save();
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.toolstore.addToolDataChangeListener(this._toolDataChanged);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.value && nextState.lengthInPx) {
	        nextState.mmPerPixel = nextState.value / nextState.lengthInPx;
	      } else {
	        nextState.mmPerPixel = 0;
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (prevState.mmPerPixel != this.state.mmPerPixel) {
	        this.props.setDataCallback(this.state.name, this.state.value);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.toolstore.removeToolDataChangeListener(this._toolDataChanged);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { style: this.containerStyle, ref: 'container', className: 'ui segment' },
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui segment', style: this.titleBarStyle },
	          _react2['default'].createElement(
	            'div',
	            { style: this.titleStyle },
	            this.props.userstore.getText('measureStandard')
	          ),
	          _react2['default'].createElement(
	            'div',
	            null,
	            _react2['default'].createElement('i', { className: 'ui minus icon',
	              style: this.iconStyle,
	              onClick: this.minimize.bind(this) }),
	            _react2['default'].createElement('i', { className: 'ui remove icon',
	              style: this.iconStyle,
	              onClick: _utilsGlobals2['default'].noActiveTool })
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.windowBodyStyle },
	          _react2['default'].createElement(_componentsBenchActiveToolTooltip2['default'], { userstore: this.props.userstore,
	            toolstore: this.props.toolstore }),
	          _react2['default'].createElement(
	            'div',
	            { style: this.horizontalContainerStyle },
	            _react2['default'].createElement('input', { placeholder: this.props.userstore.getText('name'),
	              type: 'text',
	              autoComplete: 'on',
	              style: this.textAreaStyle,
	              onChange: this.onNameChange.bind(this),
	              value: this.state.name,
	              autofocus: 'true',
	              wrap: 'hard' })
	          ),
	          _react2['default'].createElement(
	            'div',
	            { style: this.horizontalContainerStyle },
	            _react2['default'].createElement('input', { placeholder: this.props.userstore.getText('lengthInMm'),
	              type: 'text',
	              autoComplete: 'on',
	              style: this.textAreaStyle,
	              onChange: this.onValueChange.bind(this),
	              value: this.state.value,
	              autofocus: 'true',
	              wrap: 'hard' })
	          ),
	          _react2['default'].createElement(
	            'div',
	            null,
	            'mm/pixel : ',
	            this.state.mmPerPixel ? this.state.mmPerPixel.toFixed(4) : this.props.userstore.getText('completeFormFieldsAbove')
	          ),
	          _react2['default'].createElement(
	            'div',
	            null,
	            _react2['default'].createElement(
	              'button',
	              { className: 'ui mini compact button', style: this.textStyle, onClick: _utilsGlobals2['default'].noActiveTool },
	              this.props.userstore.getText('cancel')
	            ),
	            _react2['default'].createElement(
	              'button',
	              { className: 'ui compact green button', style: this.textStyle, onClick: this.save.bind(this) },
	              this.props.userstore.getText('save')
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return CreateMeasureStandardPopup;
	})(_react2['default'].Component);

	exports['default'] = CreateMeasureStandardPopup;
	module.exports = exports['default'];

/***/ },
/* 279 */,
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Implementation of AbstractTool which is used to deselect all tools.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _AbstractTool2 = __webpack_require__(258);

	var _AbstractTool3 = _interopRequireDefault(_AbstractTool2);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _confToolsConf = __webpack_require__(257);

	var _confToolsConf2 = _interopRequireDefault(_confToolsConf);

	var _imagesPointerPng = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/pointer.png\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesPointerPng2 = _interopRequireDefault(_imagesPointerPng);

	var NoTool = (function (_AbstractTool) {
	  _inherits(NoTool, _AbstractTool);

	  function NoTool(props) {
	    _classCallCheck(this, NoTool);

	    _get(Object.getPrototypeOf(NoTool.prototype), 'constructor', this).call(this, props);

	    this.state = this.initialState();
	  }

	  _createClass(NoTool, [{
	    key: 'initialState',
	    value: function initialState() {
	      return {
	        active: false
	      };
	    }
	  }, {
	    key: 'setMode',
	    value: function setMode() {
	      _actionsToolActions2['default'].setTool(_confToolsConf2['default'].nothing.uid);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'button',
	        { ref: 'button',
	          style: this.buttonStyle,
	          className: 'ui button compact',
	          onClick: this.setMode,
	          'data-content': 'Aucun outil actif.' },
	        _react2['default'].createElement('img', { src: _imagesPointerPng2['default'], style: this.iconStyle, height: '20px', width: '20px' })
	      );
	    }
	  }]);

	  return NoTool;
	})(_AbstractTool3['default']);

	exports['default'] = NoTool;
	module.exports = exports['default'];

/***/ },
/* 281 */,
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Basic controls for the viewport (zoom, fit)
	 *
	 * Created by dmitri on 21/04/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _utilsD3ViewUtils = __webpack_require__(253);

	var _utilsD3ViewUtils2 = _interopRequireDefault(_utilsD3ViewUtils);

	var ViewController = (function (_React$Component) {
	  _inherits(ViewController, _React$Component);

	  function ViewController(props) {
	    var _this = this;

	    _classCallCheck(this, ViewController);

	    _get(Object.getPrototypeOf(ViewController.prototype), 'constructor', this).call(this, props);

	    this.compactSegmentStyle = {
	      padding: '5px 5px 5px 5px',
	      borderColor: '#2185d0!important'
	    };

	    this.labelContainerStyle = {
	      position: 'relative',
	      width: 0,
	      height: '10px'
	    };

	    this.labelStyle = {
	      position: 'relative',
	      top: '-15px',
	      left: '10px',
	      whiteSpace: 'nowrap'
	    };

	    this.buttonStyle = {
	      display: 'flex',
	      justifyContent: 'center',
	      fontFamily: 'Roboto Condensed',
	      fontWeight: '300'
	    };

	    this._onViewChange = function () {
	      var updateView = function updateView() {
	        return _this.updateViewData(_this.props.viewstore.getView());
	      };
	      return updateView.apply(_this);
	    };

	    this._forceUpdate = function () {
	      var update = function update() {
	        return _this.setState({});
	      };
	      return update.apply(_this);
	    };

	    this.state = {
	      zoom: 1.0
	    };

	    this.timeout = null;
	  }

	  _createClass(ViewController, [{
	    key: 'updateViewData',
	    value: function updateViewData(view) {
	      this.setState({ zoom: view.scale });
	    }
	  }, {
	    key: 'zoomIn',
	    value: function zoomIn() {
	      this.endZoom();
	      var view = this.props.viewstore.getView();
	      var self = this;
	      this.timeout = window.setInterval(function () {
	        _actionsViewActions2['default'].updateViewport((view.left - view.width * 2.5 / 100) * 1.05, (view.top - view.height * 2.5 / 100) * 1.05, null, null, self.state.zoom * 1.05, true);
	      }, 50);
	    }
	  }, {
	    key: 'zoomOut',
	    value: function zoomOut() {
	      this.endZoom();
	      var view = this.props.viewstore.getView();
	      var self = this;
	      this.timeout = window.setInterval(function () {
	        _actionsViewActions2['default'].updateViewport((view.left + view.width * 2.5 / 100) * 0.95, (view.top + view.height * 2.5 / 100) * 0.95, null, null, self.state.zoom * 0.95, true);
	      }, 50);
	    }
	  }, {
	    key: 'endZoom',
	    value: function endZoom() {
	      window.clearInterval(this.timeout);
	    }
	  }, {
	    key: 'resetZoom',
	    value: function resetZoom() {
	      var view = this.props.viewstore.getView();
	      if (view.scale < 1.0001 && view.scale > 0.9999) {
	        return;
	      }
	      //console.log(JSON.stringify(view));
	      if (view.scale < 1.0) {
	        _actionsViewActions2['default'].updateViewport((view.left - view.width / 2) / view.scale, (view.top - view.height / 2) / view.scale, null, null, 1.0, true);
	      } else {
	        _actionsViewActions2['default'].updateViewport(view.left / view.scale + view.width / 2, view.top / view.scale + view.height / 2, null, null, 1.0, true);
	      }
	    }
	  }, {
	    key: 'displayAllElementsInView',
	    value: function displayAllElementsInView() {
	      _actionsViewActions2['default'].fitView();
	    }
	  }, {
	    key: 'fitViewToImage',
	    value: function fitViewToImage() {
	      var linkId = this.props.toolstore.getSelectedImageId();
	      if (!linkId) {
	        return;
	      }

	      _utilsD3ViewUtils2['default'].zoomToObjectBySelector('#GROUP-' + linkId, this.props.viewstore.getView());
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.modestore.addModeChangeListener(this._forceUpdate);
	      this.props.viewstore.addViewportListener(this._onViewChange);
	      this.props.userstore.addLanguageChangeListener(this._forceUpdate);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {}
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.viewstore.removeViewportListener(this._onViewChange);
	      this.props.modestore.removeModeChangeListener(this._forceUpdate);
	      this.props.userstore.removeLanguageChangeListener(this._forceUpdate);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        {
	          style: this.compactSegmentStyle,
	          className: 'ui container segment',
	          ref: 'component' },
	        _react2['default'].createElement(
	          'div',
	          { style: this.labelContainerStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui blue tiny basic label',
	              style: this.labelStyle },
	            this.props.userstore.getText('labBench')
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui three fluid buttons' },
	          _react2['default'].createElement(
	            'button',
	            { className: 'ui button small compact',
	              onMouseDown: this.zoomOut.bind(this),
	              onMouseUp: this.endZoom.bind(this),
	              onMouseOut: this.endZoom.bind(this) },
	            _react2['default'].createElement('i', { className: 'ui large zoom out icon' })
	          ),
	          _react2['default'].createElement(
	            'button',
	            { style: this.buttonStyle,
	              className: 'ui button small compact',
	              disabled: 'disabled' },
	            (this.state.zoom * 100).toFixed(0),
	            '%'
	          ),
	          _react2['default'].createElement(
	            'button',
	            { className: 'ui button small compact',
	              onMouseDown: this.zoomIn.bind(this),
	              onMouseUp: this.endZoom.bind(this),
	              onMouseOut: this.endZoom.bind(this) },
	            _react2['default'].createElement('i', { className: 'ui large zoom icon' })
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui three fluid buttons' },
	          _react2['default'].createElement(
	            'button',
	            { style: this.buttonStyle,
	              className: 'ui button small compact',
	              onClick: this.displayAllElementsInView.bind(this),
	              'data-content': this.props.userstore.getText('showAllImages') },
	            this.props.userstore.getText('everything')
	          ),
	          _react2['default'].createElement(
	            'button',
	            { style: this.buttonStyle,
	              className: 'ui button small compact',
	              'data-content': this.props.userstore.getText('showWholeImage'),
	              onClick: this.fitViewToImage.bind(this) },
	            this.props.userstore.getText('sheet')
	          ),
	          _react2['default'].createElement(
	            'button',
	            { className: 'ui button small compact', 'data-content': this.props.userstore.getText('show1to1'),
	              style: this.buttonStyle,
	              onClick: this.resetZoom.bind(this) },
	            '1:1'
	          )
	        )
	      );
	    }
	  }]);

	  return ViewController;
	})(_react2['default'].Component);

	exports['default'] = ViewController;
	module.exports = exports['default'];

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This component is used to switch the application between its supported modes (Sets, Observation, Organisation, Tabular).
	 *
	 * Created by dmitri on 20/04/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsModeActions = __webpack_require__(244);

	var _actionsModeActions2 = _interopRequireDefault(_actionsModeActions);

	var _constantsModeConstants = __webpack_require__(243);

	var _constantsModeConstants2 = _interopRequireDefault(_constantsModeConstants);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var ModeSwitcher = (function (_React$Component) {
	  _inherits(ModeSwitcher, _React$Component);

	  function ModeSwitcher(props) {
	    var _this = this;

	    _classCallCheck(this, ModeSwitcher);

	    _get(Object.getPrototypeOf(ModeSwitcher.prototype), 'constructor', this).call(this, props);

	    this._onModeChange = function () {
	      var updateDisplay = function updateDisplay() {
	        return _this.hilightActiveMode();
	      };
	      return updateDisplay.apply(_this);
	    };

	    this.state = {
	      activeMode: _constantsModeConstants2['default'].Modes.SET
	    };
	  }

	  _createClass(ModeSwitcher, [{
	    key: 'hilightActiveMode',
	    value: function hilightActiveMode() {
	      this.setState({ activeMode: this.props.modestore.getMode() });
	    }
	  }, {
	    key: 'isActive',
	    value: function isActive(label) {
	      if (label == this.state.activeMode) {
	        return 'active';
	      }
	      return '';
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	      this.props.modestore.addModeChangeListener(this._onModeChange);
	      $('.blue.item', $(this.refs.component.getDOMNode())).popup({
	        position: 'bottom right'
	      });
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	      this.props.modestore.removeModeChangeListener(this._onModeChange);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui tiny icons menu', ref: 'component' },
	        _react2['default'].createElement(
	          'a',
	          { className: 'blue item ' + this.isActive(_constantsModeConstants2['default'].Modes.SET),
	            'data-content': this.props.userstore.getText('setManager'),
	            onClick: _actionsModeActions2['default'].changeMode.bind(null, _constantsModeConstants2['default'].Modes.SET) },
	          _react2['default'].createElement('i', { className: 'sitemap icon' })
	        ),
	        _react2['default'].createElement(
	          'a',
	          { className: 'blue item ' + this.isActive(_constantsModeConstants2['default'].Modes.OBSERVATION),
	            'data-content': this.props.userstore.getText('observation'),
	            onClick: _actionsModeActions2['default'].changeMode.bind(null, _constantsModeConstants2['default'].Modes.OBSERVATION) },
	          _react2['default'].createElement('i', { className: 'eye icon' })
	        ),
	        _react2['default'].createElement(
	          'a',
	          { className: 'blue item ' + this.isActive(_constantsModeConstants2['default'].Modes.ORGANISATION),
	            'data-content': this.props.userstore.getText('organisation'),
	            onClick: _actionsModeActions2['default'].changeMode.bind(null, _constantsModeConstants2['default'].Modes.ORGANISATION) },
	          _react2['default'].createElement('i', { className: 'cubes icon' })
	        ),
	        _react2['default'].createElement(
	          'a',
	          { className: 'blue item disabled ' + this.isActive(_constantsModeConstants2['default'].Modes.TABULAR),
	            'data-content': this.props.userstore.getText('tabular') + this.props.userstore.getText('unavailableInCurrentVersion') },
	          _react2['default'].createElement('i', { className: 'grid layout icon' })
	        )
	      );
	    }
	  }]);

	  return ModeSwitcher;
	})(_react2['default'].Component);

	exports['default'] = ModeSwitcher;
	module.exports = exports['default'];

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This component is used to get a list of images displayed in the lab bench and to select an entity. In the future it should be updated to operate on user-created groups.
	 *
	 * Created by dmitri on 22/04/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _Object$keys = __webpack_require__(285)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _actionsMinimapActions = __webpack_require__(190);

	var _actionsMinimapActions2 = _interopRequireDefault(_actionsMinimapActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var GroupSelector = (function (_React$Component) {
	  _inherits(GroupSelector, _React$Component);

	  function GroupSelector(props) {
	    var _this = this;

	    _classCallCheck(this, GroupSelector);

	    _get(Object.getPrototypeOf(GroupSelector.prototype), 'constructor', this).call(this, props);

	    this.compactSegmentStyle = {
	      padding: '5px 5px 5px 5px',
	      borderColor: '#2185d0!important'
	    };

	    this.labelContainerStyle = {
	      position: 'relative',
	      width: 0,
	      height: '10px'
	    };

	    this.labelStyle = {
	      position: 'relative',
	      top: '-15px',
	      left: '10px',
	      whiteSpace: 'nowrap'
	    };

	    this.buttonStyle = {
	      paddingLeft: '.1em',
	      paddingRight: '.4em'
	    };

	    this.openListStyle = {
	      //display: 'none',
	      maxHeight: '0px',
	      overflowY: 'scroll',
	      WebkitTransition: 'max-height 0.5s ease',
	      transition: 'max-height 0.5s ease'
	    };

	    this.selectedOptionStyle = {
	      color: 'blue'
	    };

	    this._onLabBenchLoaded = function () {
	      var getViewImages = function getViewImages() {
	        return _this.getViewImages();
	      };
	      return getViewImages.apply(_this);
	    };

	    this._onSelectionChange = function () {
	      var changeActiveImage = function changeActiveImage() {
	        return _this.changeActiveImage();
	      };
	      return changeActiveImage.apply(_this);
	    };

	    this._forceUpdate = function () {
	      var update = function update() {
	        return _this.setState({});
	      };
	      return update.apply(_this);
	    };

	    this.state = {
	      viewId: null,
	      listOfImages: [],
	      isListOpen: false,
	      selectedImageIdx: -1,
	      selectedImageName: this.props.userstore.getText('selectAnImage')
	    };
	  }

	  _createClass(GroupSelector, [{
	    key: 'getViewImages',
	    value: function getViewImages() {
	      var viewData = this.props.benchstore.getActiveViewData();
	      var images = [];
	      if (viewData) {
	        for (var i = 0; i < viewData.displays.length; ++i) {
	          var displayedEntity = JSON.parse(JSON.stringify(viewData.displays[i]));
	          var imageId = displayedEntity.entity;
	          var data = this.props.benchstore.getData(imageId);
	          if (!data) {
	            continue;
	          }
	          var keys = _Object$keys(data);
	          for (var j = 0; j < keys.length; ++j) {
	            var key = keys[j];
	            displayedEntity[key] = data[key];
	          }
	          images.push(displayedEntity);
	        }
	        images = _.sortBy(images, _utilsGlobals2['default'].getName);
	      }

	      if (this.props.benchstore.getActiveViewId() == this.state.viewId) {
	        this.setState({
	          listOfImages: images,
	          viewId: this.props.benchstore.getActiveViewId()
	        });
	      } else {
	        this.setState({
	          listOfImages: images,
	          selectedImageIdx: -1,
	          selectedImageName: this.props.userstore.getText('selectAnImage'),
	          viewId: this.props.benchstore.getActiveViewId()
	        });
	      }
	    }
	  }, {
	    key: 'changeActiveImage',
	    value: function changeActiveImage() {
	      var imageId = this.props.toolstore.getSelectedImageId();
	      if (!imageId) {
	        this.setState({ selectedImageIdx: -1, selectedImageName: this.props.userstore.getText('selectAnImage') });
	        return;
	      }

	      for (var i = 0; i < this.state.listOfImages.length; ++i) {
	        if (this.state.listOfImages[i].link == imageId) {
	          this.setState({ selectedImageIdx: i, selectedImageName: this.state.listOfImages[i].name });
	          return;
	        }
	      }
	    }
	  }, {
	    key: 'setActiveImage',
	    value: function setActiveImage(index) {
	      if (index == -1) {
	        _actionsViewActions2['default'].changeSelection(null, {});
	      } else {
	        _actionsViewActions2['default'].changeSelection(this.state.listOfImages[index].link, {});
	      }
	    }
	  }, {
	    key: 'previous',
	    value: function previous() {
	      if (this.state.selectedImageIdx == 0) {
	        _actionsViewActions2['default'].changeSelection(this.state.listOfImages[this.state.listOfImages.length - 1].link, {});
	      } else {
	        _actionsViewActions2['default'].changeSelection(this.state.listOfImages[this.state.selectedImageIdx - 1].link, {});
	      }
	    }
	  }, {
	    key: 'next',
	    value: function next() {
	      if (this.state.selectedImageIdx + 1 == this.state.listOfImages.length) {
	        _actionsViewActions2['default'].changeSelection(this.state.listOfImages[0].link, {});
	      } else {
	        _actionsViewActions2['default'].changeSelection(this.state.listOfImages[this.state.selectedImageIdx + 1].link, {});
	      }
	    }
	  }, {
	    key: 'displayList',
	    value: function displayList(display) {
	      this.setState({ isListOpen: display });
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.benchstore.addLabBenchLoadListener(this._onLabBenchLoaded);
	      this.props.toolstore.addSelectionChangeListener(this._onSelectionChange);
	      this.props.modestore.addModeChangeListener(this._forceUpdate);
	      this.props.userstore.addLanguageChangeListener(this._forceUpdate);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      // Update name display, send minimap init
	      if (nextState.selectedImageIdx != this.state.selectedImageIdx) {
	        if (nextState.selectedImageIdx < 0) {
	          nextState.selectedImageName = this.props.userstore.getText('selectAnImage');
	          window.setTimeout(_actionsMinimapActions2['default'].initMinimap.bind(null, null, null, null, null, null), 10);
	        } else {
	          var imageData = nextState.listOfImages[nextState.selectedImageIdx];
	          nextState.selectedImageName = imageData.name;
	          window.setTimeout(_actionsMinimapActions2['default'].initMinimap.bind(null, imageData.thumbnail, imageData.displayWidth, imageData.displayHeight, imageData.x, imageData.y), 10);
	        }
	      }

	      if (nextState.isListOpen && !this.state.isListOpen) {
	        this.openListStyle.maxHeight = '100px';
	      }
	      if (this.state.isListOpen && !nextState.isListOpen) {
	        this.openListStyle.maxHeight = '0px';
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.selectedImageIdx == -1 && this.state.listOfImages.length > 0) {
	        this.setActiveImage(Math.floor(this.state.listOfImages.length / 2));
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.benchstore.removeLabBenchLoadListener(this._onLabBenchLoaded);
	      this.props.toolstore.removeSelectionChangeListener(this._onSelectionChange);
	      this.props.modestore.removeModeChangeListener(this._forceUpdate);
	      this.props.userstore.removeLanguageChangeListener(this._forceUpdate);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var self = this;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui container segment', style: this.compactSegmentStyle },
	        _react2['default'].createElement(
	          'div',
	          { style: this.labelContainerStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui blue tiny basic label',
	              style: this.labelStyle },
	            this.props.userstore.getText('groupsAndImages')
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui tiny fluid buttons' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui icon button',
	              style: this.buttonStyle,
	              onClick: this.setActiveImage.bind(this, 0) },
	            _react2['default'].createElement('i', { className: 'angle double left icon' })
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui icon button',
	              style: this.buttonStyle,
	              onClick: this.previous.bind(this) },
	            _react2['default'].createElement('i', { className: 'angle left icon' })
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui button disabled' },
	            this.state.selectedImageIdx + 1,
	            '/',
	            this.state.listOfImages.length
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui icon button',
	              style: this.buttonStyle,
	              onClick: this.next.bind(this) },
	            _react2['default'].createElement('i', { className: 'angle right icon' })
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui icon button',
	              style: this.buttonStyle,
	              onClick: this.setActiveImage.bind(this, this.state.listOfImages.length - 1) },
	            _react2['default'].createElement('i', { className: 'angle double right icon' })
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          null,
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui fluid button',
	              onClick: this.displayList.bind(this, !this.state.isListOpen) },
	            this.state.selectedImageName
	          ),
	          _react2['default'].createElement(
	            'div',
	            { style: this.openListStyle, className: 'ui divided link list' },
	            this.state.listOfImages.map(function (image, index) {
	              var style = {};
	              if (index == self.state.selectedImageIdx) {
	                style = self.selectedOptionStyle;
	              }
	              return _react2['default'].createElement(
	                'a',
	                {
	                  key: index,
	                  style: style,
	                  className: 'item',
	                  'data-value': index,
	                  onClick: self.setActiveImage.bind(self, index) },
	                image.name
	              );
	            })
	          )
	        )
	      );
	    }
	  }]);

	  return GroupSelector;
	})(_react2['default'].Component);

	exports['default'] = GroupSelector;
	module.exports = exports['default'];

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(286), __esModule: true };

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(287);
	module.exports = __webpack_require__(15).Object.keys;

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(288);

	__webpack_require__(12)('keys', function($keys){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(11);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This component is currently used to select the root set of the user. In the future it should include favorited and most accessed sets as well for quick access.
	 *
	 * Created by dmitri on 13/01/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _lodash = __webpack_require__(290);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _actionsModalActions = __webpack_require__(265);

	var _actionsModalActions2 = _interopRequireDefault(_actionsModalActions);

	var _actionsModeActions = __webpack_require__(244);

	var _actionsModeActions2 = _interopRequireDefault(_actionsModeActions);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var _constantsModeConstants = __webpack_require__(243);

	var _constantsModeConstants2 = _interopRequireDefault(_constantsModeConstants);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var SetQuickAccess = (function (_React$Component) {
	  _inherits(SetQuickAccess, _React$Component);

	  function SetQuickAccess(props) {
	    var _this = this;

	    _classCallCheck(this, SetQuickAccess);

	    _get(Object.getPrototypeOf(SetQuickAccess.prototype), 'constructor', this).call(this, props);

	    this.mounted = false;

	    this.containerStyle = {
	      padding: '5px 5px 5px 5px',
	      height: '100%',
	      width: '100%'
	    };

	    this.labelContainerStyle = {
	      position: 'relative',
	      width: 0,
	      height: '10px'
	    };

	    this.labelStyle = {
	      position: 'relative',
	      top: '-15px',
	      left: '10px',
	      whiteSpace: 'nowrap'
	    };

	    this.titleStyle = {
	      height: '25px',
	      padding: '4px 0px'
	    };

	    this.listContainerStyle = {
	      height: '250px',
	      overflowY: 'auto',
	      overflowX: 'hidden',
	      margin: 0,
	      padding: 0
	    };

	    this.noMarginPaddingStyle = {
	      margin: 0,
	      padding: 0
	    };

	    this._forceUpdate = function () {
	      var update = function update() {
	        if (_this.mounted) _this.setState({});
	      };
	      return update.apply(_this);
	    };

	    this.textStyle = {
	      WebkitUserSelect: 'none',
	      MozUserSelect: 'none',
	      MsUserSelect: 'none',
	      userSelect: 'none'
	    };
	  }

	  _createClass(SetQuickAccess, [{
	    key: 'loadRootSet',
	    value: function loadRootSet() {
	      var user = this.props.userstore.getUserData();
	      if (user) {
	        var coreSetId = user.coreSet;
	        window.setTimeout(this.props.managerstore.requestGraphAround.bind(this.props.managerstore, coreSetId, 'Set', 0, true), 10);
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.mounted = true;
	      this.props.modestore.addModeChangeListener(this._forceUpdate);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {}
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.modestore.removeModeChangeListener(this._forceUpdate);
	      this.mounted = false;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { style: this.containerStyle, className: 'ui container segments' },
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui segment',
	            style: this.listContainerStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui selection list',
	              style: this.noMarginPaddingStyle },
	            _react2['default'].createElement(
	              'a',
	              { className: 'item ',
	                onClick: this.loadRootSet.bind(this)
	              },
	              _react2['default'].createElement(
	                'div',
	                null,
	                _react2['default'].createElement('i', { className: 'ui icon lab', style: this.textStyle }),
	                this.props.userstore.getText('mySets')
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return SetQuickAccess;
	})(_react2['default'].Component);

	exports['default'] = SetQuickAccess;
	module.exports = exports['default'];

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern -d -o ./index.js`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '3.10.1';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256;

	  /** Used as default options for `_.trunc`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect when a function becomes hot. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      weakMapTag = '[object WeakMap]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	  /**
	   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
	   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
	   */
	  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
	      reHasRegExpChars = RegExp(reRegExpChars.source);

	  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
	  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0[xX]/;

	  /** Used to detect host constructors (Safari > 5). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^\d+$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to match words to create compound words. */
	  var reWords = (function() {
	    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

	    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	  }());

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
	    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
	    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[stringTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[mapTag] = cloneableTags[setTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled regexes. */
	  var regexpEscapes = {
	    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
	    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
	    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
	    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
	    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Detect free variable `exports`. */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

	  /** Detect free variable `self`. */
	  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

	  /** Detect free variable `window`. */
	  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `compareAscending` which compares values and
	   * sorts them in ascending order without guaranteeing a stable sort.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function baseCompareAscending(value, other) {
	    if (value !== other) {
	      var valIsNull = value === null,
	          valIsUndef = value === undefined,
	          valIsReflexive = value === value;

	      var othIsNull = other === null,
	          othIsUndef = other === undefined,
	          othIsReflexive = other === other;

	      if ((value > other && !othIsNull) || !valIsReflexive ||
	          (valIsNull && !othIsUndef && othIsReflexive) ||
	          (valIsUndef && othIsReflexive)) {
	        return 1;
	      }
	      if ((value < other && !valIsNull) || !othIsReflexive ||
	          (othIsNull && !valIsUndef && valIsReflexive) ||
	          (othIsUndef && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without support for binary searches.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isFunction` without support for environments
	   * with incorrect `typeof` results.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	   */
	  function baseIsFunction(value) {
	    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	    return typeof value == 'function' || false;
	  }

	  /**
	   * Converts `value` to a string if it's not one. An empty string is returned
	   * for `null` or `undefined` values.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    return value == null ? '' : (value + '');
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the first character not found in `chars`.
	   */
	  function charsLeftIndex(string, chars) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the last character not found in `chars`.
	   */
	  function charsRightIndex(string, chars) {
	    var index = string.length;

	    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.sortBy` to compare transformed elements of a collection and stable
	   * sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareAscending(object, other) {
	    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	  }

	  /**
	   * Used by `_.sortByOrder` to compare multiple properties of a value to another
	   * and stable sort them.
	   *
	   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
	   * a value is sorted in ascending order if its corresponding order is "asc", and
	   * descending if "desc".
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {boolean[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        var order = orders[index];
	        return result * ((order === 'asc' || order === true) ? 1 : -1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @param {string} leadingChar The capture group for a leading character.
	   * @param {string} whitespaceChar The capture group for a whitespace character.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
	    if (leadingChar) {
	      chr = regexpEscapes[chr];
	    } else if (whitespaceChar) {
	      chr = stringEscapes[chr];
	    }
	    return '\\' + chr;
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is object-like.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   */
	  function isObjectLike(value) {
	    return !!value && typeof value == 'object';
	  }

	  /**
	   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	   * character code is whitespace.
	   *
	   * @private
	   * @param {number} charCode The character code to inspect.
	   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	   */
	  function isSpace(charCode) {
	    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      if (array[index] === placeholder) {
	        array[index] = PLACEHOLDER;
	        result[++resIndex] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * An implementation of `_.uniq` optimized for sorted arrays without support
	   * for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} [iteratee] The function invoked per iteration.
	   * @returns {Array} Returns the new duplicate-value-free array.
	   */
	  function sortedUniq(array, iteratee) {
	    var seen,
	        index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      var value = array[index],
	          computed = iteratee ? iteratee(value, index, array) : value;

	      if (!index || seen !== computed) {
	        seen = computed;
	        result[++resIndex] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the first non-whitespace character.
	   */
	  function trimmedLeftIndex(string) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedRightIndex(string) {
	    var index = string.length;

	    while (index-- && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the given `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utility
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // using `context` to mock `Date#getTime` use in `_.now`
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // or creating a suped-up `defer` in Node.js
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See https://es5.github.io/#x11.1.5 for more details.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

	    /** Native constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for native method references. */
	    var arrayProto = Array.prototype,
	        objectProto = Object.prototype,
	        stringProto = String.prototype;

	    /** Used to resolve the decompiled source of functions. */
	    var fnToString = Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /**
	     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Native method references. */
	    var ArrayBuffer = context.ArrayBuffer,
	        clearTimeout = context.clearTimeout,
	        parseFloat = context.parseFloat,
	        pow = Math.pow,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        Set = getNative(context, 'Set'),
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice,
	        Uint8Array = context.Uint8Array,
	        WeakMap = getNative(context, 'WeakMap');

	    /* Native method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeCreate = getNative(Object, 'create'),
	        nativeFloor = Math.floor,
	        nativeIsArray = getNative(Array, 'isArray'),
	        nativeIsFinite = context.isFinite,
	        nativeKeys = getNative(Object, 'keys'),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = getNative(Date, 'now'),
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;

	    /** Used as references for `-Infinity` and `Infinity`. */
	    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
	        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

	    /** Used as references for the maximum length and index of an array. */
	    var MAX_ARRAY_LENGTH = 4294967295,
	        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	    /**
	     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	     * of an array-like value.
	     */
	    var MAX_SAFE_INTEGER = 9007199254740991;

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	     * Methods that operate on and return arrays, collections, and functions can
	     * be chained together. Methods that retrieve a single value or may return a
	     * primitive value will automatically end the chain returning the unwrapped
	     * value. Explicit chaining may be enabled using `_.chain`. The execution of
	     * chained methods is lazy, that is, execution is deferred until `_#value`
	     * is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization strategy which merge iteratee calls; this can help
	     * to avoid the creation of intermediate data structures and greatly reduce the
	     * number of iteratee executions.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
	     * `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
	     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
	     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
	     * and `where`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
	     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
	     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
	     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
	     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
	     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
	     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
	     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
	     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
	     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
	     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
	     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
	     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
	     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
	     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
	     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
	     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
	     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
	     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
	     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
	     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
	     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
	     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
	     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
	     * `unescape`, `uniqueId`, `value`, and `words`
	     *
	     * The wrapper method `sample` will return a wrapped value when `n` is provided,
	     * otherwise an unwrapped value is returned.
	     *
	     * @name _
	     * @constructor
	     * @category Chain
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(total, n) {
	     *   return total + n;
	     * });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(n) {
	     *   return n * n;
	     * });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype all chaining wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	     */
	    function LodashWrapper(value, chainAll, actions) {
	      this.__wrapped__ = value;
	      this.__actions__ = actions || [];
	      this.__chain__ = !!chainAll;
	    }

	    /**
	     * An object environment feature flags.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = POSITIVE_INFINITY;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = arrayCopy(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = arrayCopy(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = arrayCopy(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
	        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a cache object to store key/value pairs.
	     *
	     * @private
	     * @static
	     * @name Cache
	     * @memberOf _.memoize
	     */
	    function MapCache() {
	      this.__data__ = {};
	    }

	    /**
	     * Removes `key` and its value from the cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	     */
	    function mapDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }

	    /**
	     * Gets the cached value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the cached value.
	     */
	    function mapGet(key) {
	      return key == '__proto__' ? undefined : this.__data__[key];
	    }

	    /**
	     * Checks if a cached value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	    }

	    /**
	     * Sets `value` to `key` of the cache.
	     *
	     * @private
	     * @name set
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to cache.
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache object.
	     */
	    function mapSet(key, value) {
	      if (key != '__proto__') {
	        this.__data__[key] = value;
	      }
	      return this;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a cache object to store unique values.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var length = values ? values.length : 0;

	      this.data = { 'hash': nativeCreate(null), 'set': new Set };
	      while (length--) {
	        this.push(values[length]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache` mimicking the return signature of
	     * `_.indexOf` by returning `0` if the value is found, else `-1`.
	     *
	     * @private
	     * @param {Object} cache The cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `0` if `value` is found, else `-1`.
	     */
	    function cacheIndexOf(cache, value) {
	      var data = cache.data,
	          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	      return result ? 0 : -1;
	    }

	    /**
	     * Adds `value` to the cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var data = this.data;
	      if (typeof value == 'string' || isObject(value)) {
	        data.set.add(value);
	      } else {
	        data.hash[value] = true;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a new array joining `array` with `other`.
	     *
	     * @private
	     * @param {Array} array The array to join.
	     * @param {Array} other The other array to join.
	     * @returns {Array} Returns the new concatenated array.
	     */
	    function arrayConcat(array, other) {
	      var index = -1,
	          length = array.length,
	          othIndex = -1,
	          othLength = other.length,
	          result = Array(length + othLength);

	      while (++index < length) {
	        result[index] = array[index];
	      }
	      while (++othIndex < othLength) {
	        result[index++] = other[othIndex];
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayCopy(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEach` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEach(array, iteratee) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (iteratee(array[index], index, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEachRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEachRight(array, iteratee) {
	      var length = array.length;

	      while (length--) {
	        if (iteratee(array[length], length, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.every` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     */
	    function arrayEvery(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (!predicate(array[index], index, array)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
	     * with one argument: (value).
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function arrayExtremum(array, iteratee, comparator, exValue) {
	      var index = -1,
	          length = array.length,
	          computed = exValue,
	          result = computed;

	      while (++index < length) {
	        var value = array[index],
	            current = +iteratee(value);

	        if (comparator(current, computed)) {
	          computed = current;
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.filter` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function arrayFilter(array, predicate) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.map` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function arrayMap(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = iteratee(array[index], index, array);
	      }
	      return result;
	    }

	    /**
	     * Appends the elements of `values` to `array`.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to append.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayPush(array, values) {
	      var index = -1,
	          length = values.length,
	          offset = array.length;

	      while (++index < length) {
	        array[offset + index] = values[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.reduce` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the first element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduce(array, iteratee, accumulator, initFromArray) {
	      var index = -1,
	          length = array.length;

	      if (initFromArray && length) {
	        accumulator = array[++index];
	      }
	      while (++index < length) {
	        accumulator = iteratee(accumulator, array[index], index, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.reduceRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the last element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	      var length = array.length;
	      if (initFromArray && length) {
	        accumulator = array[--length];
	      }
	      while (length--) {
	        accumulator = iteratee(accumulator, array[length], length, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.some` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function arraySome(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return true;
	        }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `_.sum` for arrays without support for callback
	     * shorthands and `this` binding..
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function arraySum(array, iteratee) {
	      var length = array.length,
	          result = 0;

	      while (length--) {
	        result += +iteratee(array[length]) || 0;
	      }
	      return result;
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assign` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : objectValue;
	    }

	    /**
	     * Used by `_.template` to customize its `_.assign` use.
	     *
	     * **Note:** This function is like `assignDefaults` except that it ignores
	     * inherited property values when checking if a property is `undefined`.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @param {string} key The key associated with the object and source values.
	     * @param {Object} object The destination object.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignOwnDefaults(objectValue, sourceValue, key, object) {
	      return (objectValue === undefined || !hasOwnProperty.call(object, key))
	        ? sourceValue
	        : objectValue;
	    }

	    /**
	     * A specialized version of `_.assign` for customizing assigned values without
	     * support for argument juggling, multiple sources, and `this` binding `customizer`
	     * functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     */
	    function assignWith(object, source, customizer) {
	      var index = -1,
	          props = keys(source),
	          length = props.length;

	      while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);

	        if ((result === result ? (result !== value) : (value === value)) ||
	            (value === undefined && !(key in object))) {
	          object[key] = result;
	        }
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.assign` without support for argument juggling,
	     * multiple sources, and `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return source == null
	        ? object
	        : baseCopy(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.at` without support for string collections
	     * and individual key arguments.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {number[]|string[]} props The property names or indexes of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(collection, props) {
	      var index = -1,
	          isNil = collection == null,
	          isArr = !isNil && isArrayLike(collection),
	          length = isArr ? collection.length : 0,
	          propsLength = props.length,
	          result = Array(propsLength);

	      while(++index < propsLength) {
	        var key = props[index];
	        if (isArr) {
	          result[index] = isIndex(key, length) ? collection[key] : undefined;
	        } else {
	          result[index] = isNil ? undefined : collection[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property names to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @returns {Object} Returns `object`.
	     */
	    function baseCopy(source, props, object) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];
	        object[key] = source[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.callback` which supports specifying the
	     * number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function baseCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (type == 'function') {
	        return thisArg === undefined
	          ? func
	          : bindCallback(func, thisArg, argCount);
	      }
	      if (func == null) {
	        return identity;
	      }
	      if (type == 'object') {
	        return baseMatches(func);
	      }
	      return thisArg === undefined
	        ? property(func)
	        : baseMatchesProperty(func, thisArg);
	    }

	    /**
	     * The base implementation of `_.clone` without support for argument juggling
	     * and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The object `value` belongs to.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return arrayCopy(value, result);
	        }
	      } else {
	        var tag = objToString.call(value),
	            isFunc = tag == funcTag;

	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return baseAssign(result, value);
	          }
	        } else {
	          return cloneableTags[tag]
	            ? initCloneByTag(value, tag, isDeep)
	            : (object ? value : {});
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == value) {
	          return stackB[length];
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate it with its clone.
	      stackA.push(value);
	      stackB.push(result);

	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          object.prototype = prototype;
	          var result = new object;
	          object.prototype = undefined;
	        }
	        return result || {};
	      };
	    }());

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an index
	     * of where to slice the arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of `_.difference` which accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var length = array ? array.length : 0,
	          result = [];

	      if (!length) {
	        return result;
	      }
	      var index = -1,
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
	          valuesLength = values.length;

	      if (cache) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	        values = cache;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index];

	        if (isCommon && value === value) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === value) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (indexOf(values, value, 0) < 0) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * Gets the extremum value of `collection` invoking `iteratee` for each value
	     * in `collection` to generate the criterion by which the value is ranked.
	     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(collection, iteratee, comparator, exValue) {
	      var computed = exValue,
	          result = computed;

	      baseEach(collection, function(value, index, collection) {
	        var current = +iteratee(value, index, collection);
	        if (comparator(current, computed) || (current === exValue && current === result)) {
	          computed = current;
	          result = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : (end >>> 0);
	      start >>>= 0;

	      while (start < length) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	     * without support for callback shorthands and `this` binding, which iterates
	     * over `collection` using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @param {boolean} [retKey] Specify returning the key of the found element
	     *  instead of the element itself.
	     * @returns {*} Returns the found element or its key, else `undefined`.
	     */
	    function baseFind(collection, predicate, eachFunc, retKey) {
	      var result;
	      eachFunc(collection, function(value, key, collection) {
	        if (predicate(value, key, collection)) {
	          result = retKey ? key : value;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with added support for restricting
	     * flattening and specifying the start index.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, isDeep, isStrict, result) {
	      result || (result = []);

	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index];
	        if (isObjectLike(value) && isArrayLike(value) &&
	            (isStrict || isArray(value) || isArguments(value))) {
	          if (isDeep) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, isDeep, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iteratee functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forIn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * The base implementation of `_.forOwn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from those provided.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      var index = -1,
	          length = props.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var key = props[index];
	        if (isFunction(object[key])) {
	          result[++resIndex] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `get` without support for string paths
	     * and default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path of the property to get.
	     * @param {string} [pathKey] The key representation of path.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path, pathKey) {
	      if (object == null) {
	        return;
	      }
	      if (pathKey !== undefined && pathKey in toObject(object)) {
	        path = [pathKey];
	      }
	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[path[index++]];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `_.isEqual` without support for `this` binding
	     * `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = objToString.call(object);
	        if (objTag == argsTag) {
	          objTag = objectTag;
	        } else if (objTag != objectTag) {
	          objIsArr = isTypedArray(object);
	        }
	      }
	      if (!othIsArr) {
	        othTag = objToString.call(other);
	        if (othTag == argsTag) {
	          othTag = objectTag;
	        } else if (othTag != objectTag) {
	          othIsArr = isTypedArray(other);
	        }
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && !(objIsArr || objIsObj)) {
	        return equalByTag(object, other, objTag);
	      }
	      if (!isLoose) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      // For more information on detecting circular references see https://es5.github.io/#JO.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == object) {
	          return stackB[length] == other;
	        }
	      }
	      // Add `object` and `other` to the stack of traversed objects.
	      stackA.push(object);
	      stackB.push(other);

	      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	      stackA.pop();
	      stackB.pop();

	      return result;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} matchData The propery names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = toObject(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.map` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which does not clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        var key = matchData[0][0],
	            value = matchData[0][1];

	        return function(object) {
	          if (object == null) {
	            return false;
	          }
	          return object[key] === value && (value !== undefined || (key in toObject(object)));
	        };
	      }
	      return function(object) {
	        return baseIsMatch(object, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to compare.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      var isArr = isArray(path),
	          isCommon = isKey(path) && isStrictComparable(srcValue),
	          pathKey = (path + '');

	      path = toPath(path);
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        var key = pathKey;
	        object = toObject(object);
	        if ((isArr || !isCommon) && !(key in object)) {
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          if (object == null) {
	            return false;
	          }
	          key = last(path);
	          object = toObject(object);
	        }
	        return object[key] === srcValue
	          ? (srcValue !== undefined || (key in object))
	          : baseIsEqual(srcValue, object[key], undefined, true);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {Object} Returns `object`.
	     */
	    function baseMerge(object, source, customizer, stackA, stackB) {
	      if (!isObject(object)) {
	        return object;
	      }
	      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	          props = isSrcArr ? undefined : keys(source);

	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObjectLike(srcValue)) {
	          stackA || (stackA = []);
	          stackB || (stackB = []);
	          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	        }
	        else {
	          var value = object[key],
	              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	              isCommon = result === undefined;

	          if (isCommon) {
	            result = srcValue;
	          }
	          if ((result !== undefined || (isSrcArr && !(key in object))) &&
	              (isCommon || (result === result ? (result !== value) : (value === value)))) {
	            object[key] = result;
	          }
	        }
	      });
	      return object;
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	      var length = stackA.length,
	          srcValue = source[key];

	      while (length--) {
	        if (stackA[length] == srcValue) {
	          object[key] = stackB[length];
	          return;
	        }
	      }
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	          result = isArray(value)
	            ? value
	            : (isArrayLike(value) ? arrayCopy(value) : []);
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          result = isArguments(value)
	            ? toPlainObject(value)
	            : (isPlainObject(value) ? value : {});
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate
	      // it with its merged value.
	      stackA.push(srcValue);
	      stackB.push(result);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	      } else if (result === result ? (result !== value) : (value === value)) {
	        object[key] = result;
	      }
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      var pathKey = (path + '');
	      path = toPath(path);
	      return function(object) {
	        return baseGet(object, path, pathKey);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * index arguments and capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0;
	      while (length--) {
	        var index = indexes[length];
	        if (index != previous && isIndex(index)) {
	          var previous = index;
	          splice.call(array, index, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for argument juggling
	     * and returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(min, max) {
	      return min + nativeFloor(nativeRandom() * (max - min + 1));
	    }

	    /**
	     * The base implementation of `_.reduce` and `_.reduceRight` without support
	     * for callback shorthands and `this` binding, which iterates over `collection`
	     * using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} accumulator The initial value.
	     * @param {boolean} initFromCollection Specify using the first or last element
	     *  of `collection` as the initial value.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @returns {*} Returns the accumulated value.
	     */
	    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	      eachFunc(collection, function(value, index, collection) {
	        accumulator = initFromCollection
	          ? (initFromCollection = false, value)
	          : iteratee(accumulator, value, index, collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortBy` which uses `comparer` to define
	     * the sort order of `array` and replaces criteria objects with their
	     * corresponding values.
	     *
	     * @private
	     * @param {Array} array The array to sort.
	     * @param {Function} comparer The function to define sort order.
	     * @returns {Array} Returns `array`.
	     */
	    function baseSortBy(array, comparer) {
	      var length = array.length;

	      array.sort(comparer);
	      while (length--) {
	        array[length] = array[length].value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.sortByOrder` without param guards.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseSortByOrder(collection, iteratees, orders) {
	      var callback = getCallback(),
	          index = -1;

	      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

	      var result = baseMap(collection, function(value) {
	        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.sum` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function baseSum(collection, iteratee) {
	      var result = 0;
	      baseEach(collection, function(value, index, collection) {
	        result += +iteratee(value, index, collection) || 0;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The function invoked per iteration.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     */
	    function baseUniq(array, iteratee) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array.length,
	          isCommon = indexOf == baseIndexOf,
	          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
	          seen = isLarge ? createCache() : null,
	          result = [];

	      if (seen) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	      } else {
	        isLarge = false;
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value, index, array) : value;

	        if (isCommon && value === value) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (indexOf(seen, computed, 0) < 0) {
	          if (iteratee || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.values` and `_.valuesIn` which creates an
	     * array of `object` property values corresponding to the property names
	     * of `props`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} props The property names to get values for.
	     * @returns {Object} Returns the array of property values.
	     */
	    function baseValues(object, props) {
	      var index = -1,
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
	     * and `_.takeWhile` without support for callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to peform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      var index = -1,
	          length = actions.length;

	      while (++index < length) {
	        var action = actions[index];
	        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }
	      return result;
	    }

	    /**
	     * Performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return binaryIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * This function is like `binaryIndex` except that it invokes `iteratee` for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsUndef = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isDef = computed !== undefined,
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsNull) {
	          setLow = isReflexive && isDef && (retHighest || computed != null);
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || isDef);
	        } else if (computed == null) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * A specialized version of `baseCallback` which only supports `this` binding
	     * and specifying the number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function bindCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      if (thisArg === undefined) {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	        case 5: return function(value, other, key, object, source) {
	          return func.call(thisArg, value, other, key, object, source);
	        };
	      }
	      return function() {
	        return func.apply(thisArg, arguments);
	      };
	    }

	    /**
	     * Creates a clone of the given array buffer.
	     *
	     * @private
	     * @param {ArrayBuffer} buffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function bufferClone(buffer) {
	      var result = new ArrayBuffer(buffer.byteLength),
	          view = new Uint8Array(result);

	      view.set(new Uint8Array(buffer));
	      return result;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders) {
	      var holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          leftIndex = -1,
	          leftLength = partials.length,
	          result = Array(leftLength + argsLength);

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        result[holders[argsIndex]] = args[argsIndex];
	      }
	      while (argsLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders) {
	      var holdersIndex = -1,
	          holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          rightIndex = -1,
	          rightLength = partials.length,
	          result = Array(argsLength + rightLength);

	      while (++argsIndex < argsLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        result[offset + holders[holdersIndex]] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
	     *
	     * @private
	     * @param {Function} setter The function to set keys and values of the accumulator object.
	     * @param {Function} [initializer] The function to initialize the accumulator object.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee, thisArg) {
	        var result = initializer ? initializer() : {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;

	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, iteratee(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, iteratee(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return restParam(function(object, sources) {
	        var index = -1,
	            length = object == null ? 0 : sources.length,
	            customizer = length > 2 ? sources[length - 2] : undefined,
	            guard = length > 2 ? sources[2] : undefined,
	            thisArg = length > 1 ? sources[length - 1] : undefined;

	        if (typeof customizer == 'function') {
	          customizer = bindCallback(customizer, thisArg, 5);
	          length -= 2;
	        } else {
	          customizer = typeof thisArg == 'function' ? thisArg : undefined;
	          length -= (customizer ? 1 : 0);
	        }
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        var length = collection ? getLength(collection) : 0;
	        if (!isLength(length)) {
	          return eachFunc(collection, iteratee);
	        }
	        var index = fromRight ? length : -1,
	            iterable = toObject(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var iterable = toObject(object),
	            props = keysFunc(object),
	            length = props.length,
	            index = fromRight ? length : -1;

	        while ((fromRight ? index-- : ++index < length)) {
	          var key = props[index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createBindWrapper(func, thisArg) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(thisArg, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `Set` cache object to optimize linear searches of large arrays.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	     */
	    function createCache(values) {
	      return (nativeCreate && Set) ? new SetCache(values) : null;
	    }

	    /**
	     * Creates a function that produces compound words out of the words in a
	     * given string.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        var index = -1,
	            array = words(deburr(string)),
	            length = array.length,
	            result = '';

	        while (++index < length) {
	          result = callback(result, array[index], index);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors.
	        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a `_.curry` or `_.curryRight` function.
	     *
	     * @private
	     * @param {boolean} flag The curry bit flag.
	     * @returns {Function} Returns the new curry function.
	     */
	    function createCurry(flag) {
	      function curryFunc(func, arity, guard) {
	        if (guard && isIterateeCall(func, arity, guard)) {
	          arity = undefined;
	        }
	        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
	        result.placeholder = curryFunc.placeholder;
	        return result;
	      }
	      return curryFunc;
	    }

	    /**
	     * Creates a `_.defaults` or `_.defaultsDeep` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Function} Returns the new defaults function.
	     */
	    function createDefaults(assigner, customizer) {
	      return restParam(function(args) {
	        var object = args[0];
	        if (object == null) {
	          return object;
	        }
	        args.push(customizer);
	        return assigner.apply(undefined, args);
	      });
	    }

	    /**
	     * Creates a `_.max` or `_.min` function.
	     *
	     * @private
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {Function} Returns the new extremum function.
	     */
	    function createExtremum(comparator, exValue) {
	      return function(collection, iteratee, thisArg) {
	        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	          iteratee = undefined;
	        }
	        iteratee = getCallback(iteratee, thisArg, 3);
	        if (iteratee.length == 1) {
	          collection = isArray(collection) ? collection : toIterable(collection);
	          var result = arrayExtremum(collection, iteratee, comparator, exValue);
	          if (!(collection.length && result === exValue)) {
	            return result;
	          }
	        }
	        return baseExtremum(collection, iteratee, comparator, exValue);
	      };
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(eachFunc, fromRight) {
	      return function(collection, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        if (isArray(collection)) {
	          var index = baseFindIndex(collection, predicate, fromRight);
	          return index > -1 ? collection[index] : undefined;
	        }
	        return baseFind(collection, predicate, eachFunc);
	      };
	    }

	    /**
	     * Creates a `_.findIndex` or `_.findLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindIndex(fromRight) {
	      return function(array, predicate, thisArg) {
	        if (!(array && array.length)) {
	          return -1;
	        }
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFindIndex(array, predicate, fromRight);
	      };
	    }

	    /**
	     * Creates a `_.findKey` or `_.findLastKey` function.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindKey(objectFunc) {
	      return function(object, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFind(object, predicate, objectFunc, true);
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return function() {
	        var wrapper,
	            length = arguments.length,
	            index = fromRight ? length : -1,
	            leftIndex = 0,
	            funcs = Array(length);

	        while ((fromRight ? index-- : ++index < length)) {
	          var func = funcs[leftIndex++] = arguments[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
	            wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? -1 : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      };
	    }

	    /**
	     * Creates a function for `_.forEach` or `_.forEachRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForEach(arrayFunc, eachFunc) {
	      return function(collection, iteratee, thisArg) {
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee)
	          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	      };
	    }

	    /**
	     * Creates a function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForIn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee, keysIn);
	      };
	    }

	    /**
	     * Creates a function for `_.forOwn` or `_.forOwnRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForOwn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee);
	      };
	    }

	    /**
	     * Creates a function for `_.mapKeys` or `_.mapValues`.
	     *
	     * @private
	     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
	     * @returns {Function} Returns the new map function.
	     */
	    function createObjectMapper(isMapKeys) {
	      return function(object, iteratee, thisArg) {
	        var result = {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        baseForOwn(object, function(value, key, object) {
	          var mapped = iteratee(value, key, object);
	          key = isMapKeys ? mapped : key;
	          value = isMapKeys ? value : mapped;
	          result[key] = value;
	        });
	        return result;
	      };
	    }

	    /**
	     * Creates a function for `_.padLeft` or `_.padRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify padding from the right.
	     * @returns {Function} Returns the new pad function.
	     */
	    function createPadDir(fromRight) {
	      return function(string, length, chars) {
	        string = baseToString(string);
	        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
	      };
	    }

	    /**
	     * Creates a `_.partial` or `_.partialRight` function.
	     *
	     * @private
	     * @param {boolean} flag The partial bit flag.
	     * @returns {Function} Returns the new partial function.
	     */
	    function createPartial(flag) {
	      var partialFunc = restParam(function(func, partials) {
	        var holders = replaceHolders(partials, partialFunc.placeholder);
	        return createWrapper(func, flag, undefined, partials, holders);
	      });
	      return partialFunc;
	    }

	    /**
	     * Creates a function for `_.reduce` or `_.reduceRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createReduce(arrayFunc, eachFunc) {
	      return function(collection, iteratee, accumulator, thisArg) {
	        var initFromArray = arguments.length < 3;
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
	          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with optional `this`
	     * binding of, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurry = bitmask & CURRY_FLAG,
	          isCurryBound = bitmask & CURRY_BOUND_FLAG,
	          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it to other functions.
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight);
	        }
	        if (isCurry || isCurryRight) {
	          var placeholder = wrapper.placeholder,
	              argsHolders = replaceHolders(args, placeholder);

	          length -= argsHolders.length;
	          if (length < arity) {
	            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
	                newArity = nativeMax(arity - length, 0),
	                newsHolders = isCurry ? argsHolders : undefined,
	                newHoldersRight = isCurry ? undefined : argsHolders,
	                newPartials = isCurry ? args : undefined,
	                newPartialsRight = isCurry ? undefined : args;

	            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	            if (!isCurryBound) {
	              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	            }
	            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
	                result = createHybridWrapper.apply(undefined, newData);

	            if (isLaziable(func)) {
	              setData(result, newData);
	            }
	            result.placeholder = placeholder;
	            return result;
	          }
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        if (argPos) {
	          args = reorder(args, argPos);
	        }
	        if (isAry && ary < args.length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(func);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates the padding required for `string` based on the given `length`.
	     * The `chars` string is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the pad for `string`.
	     */
	    function createPadding(string, length, chars) {
	      var strLength = string.length;
	      length = +length;

	      if (strLength >= length || !nativeIsFinite(length)) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars == null ? ' ' : (chars + '');
	      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it `func`.
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength);

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        precision = precision === undefined ? 0 : (+precision || 0);
	        if (precision) {
	          precision = pow(10, precision);
	          return func(number * precision) / precision;
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {Function} Returns the new index function.
	     */
	    function createSortedIndex(retHighest) {
	      return function(array, value, iteratee, thisArg) {
	        var callback = getCallback(iteratee);
	        return (iteratee == null && callback === baseCallback)
	          ? binaryIndex(array, value, retHighest)
	          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      length -= (holders ? holders.length : 0);
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func),
	          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

	      if (data) {
	        mergeData(newData, data);
	        bitmask = newData[1];
	        arity = newData[9];
	      }
	      newData[9] = arity == null
	        ? (isBindKey ? 0 : func.length)
	        : (nativeMax(arity - length, 0) || 0);

	      if (bitmask == BIND_FLAG) {
	        var result = createBindWrapper(newData[0], newData[2]);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	        result = createPartialWrapper.apply(undefined, newData);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing arrays.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var index = -1,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	        return false;
	      }
	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index],
	            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	        if (result !== undefined) {
	          if (result) {
	            continue;
	          }
	          return false;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (isLoose) {
	          if (!arraySome(other, function(othValue) {
	                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	              })) {
	            return false;
	          }
	        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag) {
	      switch (tag) {
	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object)
	            ? other != +other
	            : object == +other;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isLoose) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      var skipCtor = isLoose;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key],
	            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	          return false;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (!skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Gets the appropriate "callback" function. If the `_.callback` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseCallback` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getCallback(func, thisArg, argCount) {
	      var result = lodash.callback || callback;
	      result = result === callback ? baseCallback : result;
	      return argCount ? result(func, thisArg, argCount) : result;
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = func.name,
	          array = realNames[result],
	          length = array ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseIndexOf` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function|number} Returns the chosen function or its result.
	     */
	    function getIndexOf(collection, target, fromIndex) {
	      var result = lodash.indexOf || indexOf;
	      result = result === indexOf ? baseIndexOf : result;
	      return collection ? result(collection, target, fromIndex) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	     * that affects Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Gets the propery names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = pairs(object),
	          length = result.length;

	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object == null ? undefined : object[key];
	      return isNative(value) ? value : undefined;
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add array properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      var Ctor = object.constructor;
	      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	        Ctor = Object;
	      }
	      return new Ctor;
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return bufferClone(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          var buffer = object.buffer;
	          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          var result = new Ctor(object.source, reFlags.exec(object));
	          result.lastIndex = object.lastIndex;
	      }
	      return result;
	    }

	    /**
	     * Invokes the method at `path` on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function invokePath(object, path, args) {
	      if (object != null && !isKey(path, object)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : func.apply(object, args);
	    }

	    /**
	     * Checks if `value` is array-like.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value));
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return value > -1 && value % 1 == 0 && value < length;
	    }

	    /**
	     * Checks if the provided arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	          ? (isArrayLike(object) && isIndex(index, object.length))
	          : (type == 'string' && index in object)) {
	        var other = object[index];
	        return value === value ? (value === other) : (other !== other);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	        return true;
	      }
	      if (isArray(value)) {
	        return false;
	      }
	      var result = !reIsDeepProp.test(value);
	      return result || (object != null && value in toObject(object));
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func);
	      if (!(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      var other = lodash[funcName];
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     */
	    function isLength(value) {
	      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers required to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * augment function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * common case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < ARY_FLAG;

	      var isCombo =
	        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
	        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
	        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = arrayCopy(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function mergeDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties specified
	     * by `props`.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByArray(object, props) {
	      object = toObject(object);

	      var index = -1,
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index];
	        if (key in object) {
	          result[key] = object[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties `predicate`
	     * returns truthy for.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByCallback(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key, object) {
	        if (predicate(value, key, object)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = arrayCopy(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * A fallback implementation of `Object.keys` which creates an array of the
	     * own enumerable property names of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function shimKeys(object) {
	      var props = keysIn(object),
	          propsLength = props.length,
	          length = propsLength && object.length;

	      var allowIndexes = !!length && isLength(length) &&
	        (isArray(object) || isArguments(object));

	      var index = -1,
	          result = [];

	      while (++index < propsLength) {
	        var key = props[index];
	        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to an array-like object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array|Object} Returns the array-like object.
	     */
	    function toIterable(value) {
	      if (value == null) {
	        return [];
	      }
	      if (!isArrayLike(value)) {
	        return values(value);
	      }
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to an object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Object} Returns the object.
	     */
	    function toObject(value) {
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to property path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array} Returns the property path array.
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return value;
	      }
	      var result = [];
	      baseToString(value).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      return wrapper instanceof LazyWrapper
	        ? wrapper.clone()
	        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `collection` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if (guard ? isIterateeCall(array, size, guard) : size == null) {
	        size = 1;
	      } else {
	        size = nativeMax(nativeFloor(size) || 1, 1);
	      }
	      var index = 0,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[++resIndex] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of unique `array` values not included in the other
	     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3], [4, 2]);
	     * // => [1, 3]
	     */
	    var difference = restParam(function(array, values) {
	      return (isObjectLike(array) && isArrayLike(array))
	        ? baseDifference(array, baseFlatten(values, false, true))
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that match the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [1]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active', false), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8], '*', 1, 2);
	     * // => [4, '*', 8]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(chr) {
	     *   return chr.user == 'barney';
	     * });
	     * // => 0
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findIndex(users, 'active', false);
	     * // => 0
	     *
	     * // using the `_.property` callback shorthand
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    var findIndex = createFindIndex();

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(chr) {
	     *   return chr.user == 'pebbles';
	     * });
	     * // => 2
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastIndex(users, 'active', false);
	     * // => 2
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    var findLastIndex = createFindIndex(true);

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([]);
	     * // => undefined
	     */
	    function first(array) {
	      return array ? array[0] : undefined;
	    }

	    /**
	     * Flattens a nested array. If `isDeep` is `true` the array is recursively
	     * flattened, otherwise it is only flattened a single level.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, [4]]
	     *
	     * // using `isDeep`
	     * _.flatten([1, [2, 3, [4]]], true);
	     * // => [1, 2, 3, 4]
	     */
	    function flatten(array, isDeep, guard) {
	      var length = array ? array.length : 0;
	      if (guard && isIterateeCall(array, isDeep, guard)) {
	        isDeep = false;
	      }
	      return length ? baseFlatten(array, isDeep) : [];
	    }

	    /**
	     * Recursively flattens a nested array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to recursively flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, 4]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, true) : [];
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
	     * performs a faster binary search.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // using `fromIndex`
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     *
	     * // performing a binary search
	     * _.indexOf([1, 1, 2, 2], 2, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
	      } else if (fromIndex) {
	        var index = binaryIndex(array, value);
	        if (index < length &&
	            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
	          return index;
	        }
	        return -1;
	      }
	      return baseIndexOf(array, value, fromIndex || 0);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values that are included in all of the provided
	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of shared values.
	     * @example
	     * _.intersection([1, 2], [4, 2], [2, 1]);
	     * // => [2]
	     */
	    var intersection = restParam(function(arrays) {
	      var othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(length),
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          result = [];

	      while (othIndex--) {
	        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
	        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
	      }
	      var array = arrays[0],
	          index = -1,
	          length = array ? array.length : 0,
	          seen = caches[0];

	      outer:
	      while (++index < length) {
	        value = array[index];
	        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
	          var othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(value);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    });

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	     *  or `true` to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // using `fromIndex`
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     *
	     * // performing a binary search
	     * _.lastIndexOf([1, 1, 2, 2], 2, true);
	     * // => 3
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	      } else if (fromIndex) {
	        index = binaryIndex(array, value, true) - 1;
	        var other = array[index];
	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all provided values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull() {
	      var args = arguments,
	          array = args[0];

	      if (!(array && array.length)) {
	        return array;
	      }
	      var index = 0,
	          indexOf = getIndexOf(),
	          length = args.length;

	      while (++index < length) {
	        var fromIndex = 0,
	            value = args[index];

	        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * Removes elements from `array` corresponding to the given indexes and returns
	     * an array of the removed elements. Indexes may be specified as an array of
	     * indexes or as individual arguments.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = restParam(function(array, indexes) {
	      indexes = baseFlatten(indexes);

	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(baseCompareAscending));
	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate, thisArg) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias tail
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function rest(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of `Array#slice` to support node
	     * lists in IE < 9 and to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order. If an iteratee
	     * function is provided it is invoked for `value` and each element of `array`
	     * to compute their sort ranking. The iteratee is bound to `thisArg` and
	     * invoked with one argument; (value).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 4, 5, 5], 5);
	     * // => 2
	     *
	     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	     *
	     * // using an iteratee function
	     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
	     * // => 1
	     *
	     * // using the `_.property` callback shorthand
	     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 1
	     */
	    var sortedIndex = createSortedIndex();

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 4, 5, 5], 5);
	     * // => 4
	     */
	    var sortedLastIndex = createSortedIndex(true);

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	     * and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [2, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [1, 2]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active', false), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all of the provided arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([1, 2], [4, 2], [2, 1]);
	     * // => [1, 2, 4]
	     */
	    var union = restParam(function(arrays) {
	      return baseUniq(baseFlatten(arrays, false, true));
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurence of each element
	     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	     * for sorted arrays. If an iteratee function is provided it is invoked for
	     * each element in the array to generate the criterion by which uniqueness
	     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, array).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {boolean} [isSorted] Specify the array is sorted.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     *
	     * // using `isSorted`
	     * _.uniq([1, 1, 2], true);
	     * // => [1, 2]
	     *
	     * // using an iteratee function
	     * _.uniq([1, 2.5, 1.5, 2], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => [1, 2.5]
	     *
	     * // using the `_.property` callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (isSorted != null && typeof isSorted != 'boolean') {
	        thisArg = iteratee;
	        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
	        isSorted = false;
	      }
	      var callback = getCallback();
	      if (!(iteratee == null && callback === baseCallback)) {
	        iteratee = callback(iteratee, thisArg, 3);
	      }
	      return (isSorted && getIndexOf() == baseIndexOf)
	        ? sortedUniq(array, iteratee)
	        : baseUniq(array, iteratee);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var index = -1,
	          length = 0;

	      array = arrayFilter(array, function(group) {
	        if (isArrayLike(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = arrayMap(array, baseProperty(index));
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts an iteratee to specify
	     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee] The function to combine regrouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      iteratee = bindCallback(iteratee, thisArg, 4);
	      return arrayMap(result, function(group) {
	        return arrayReduce(group, iteratee, undefined, true);
	      });
	    }

	    /**
	     * Creates an array excluding all provided values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = restParam(function(array, values) {
	      return isArrayLike(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the provided arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([1, 2], [4, 2]);
	     * // => [1, 4]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;

	      while (++index < length) {
	        var array = arguments[index];
	        if (isArrayLike(array)) {
	          var result = result
	            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
	            : array;
	        }
	      }
	      return result ? baseUniq(result) : [];
	    }

	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = restParam(unzip);

	    /**
	     * The inverse of `_.pairs`; this method returns an object composed from arrays
	     * of property names and values. Provide either a single two dimensional array,
	     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
	     * and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Array
	     * @param {Array} props The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(props, values) {
	      var index = -1,
	          length = props ? props.length : 0,
	          result = {};

	      if (length && !values && !isArray(props[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = props[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an iteratee to specify
	     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee] The function to combine grouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
	     * // => [111, 222]
	     */
	    var zipWith = restParam(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 2 ? arrays[length - 2] : undefined,
	          thisArg = length > 1 ? arrays[length - 1] : undefined;

	      if (length > 2 && typeof iteratee == 'function') {
	        length -= 2;
	      } else {
	        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
	        thisArg = undefined;
	      }
	      arrays.length = length;
	      return unzipWith(arrays, iteratee, thisArg);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method
	     * chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(users)
	     *   .sortBy('age')
	     *   .map(function(chr) {
	     *     return chr.user + ' is ' + chr.age;
	     *   })
	     *   .first()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor is
	     * bound to `thisArg` and invoked with one argument; (value). The purpose of
	     * this method is to "tap into" a method chain in order to perform operations
	     * on intermediate results within the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor, thisArg) {
	      interceptor.call(thisArg, value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor, thisArg) {
	      return interceptor.call(thisArg, value);
	    }

	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(users).first();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(users).chain()
	     *   .first()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Creates a new array joining a wrapped array with any additional arrays
	     * and/or values.
	     *
	     * @name concat
	     * @memberOf _
	     * @category Chain
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var wrapped = _(array).concat(2, [3], [[4]]);
	     *
	     * console.log(wrapped.value());
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    var wrapperConcat = restParam(function(values) {
	      values = baseFlatten(values);
	      return this.thru(function(array) {
	        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
	      });
	    });

	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).map(function(value) {
	     *   return Math.pow(value, 2);
	     * });
	     *
	     * var other = [3, 4];
	     * var otherWrapped = wrapped.plant(other);
	     *
	     * otherWrapped.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * Reverses the wrapped array so the first element becomes the last, the
	     * second element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;

	      var interceptor = function(value) {
	        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
	      };
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(interceptor);
	    }

	    /**
	     * Produces the result of coercing the unwrapped value to a string.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chain
	     * @returns {string} Returns the coerced string value.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return (this.value() + '');
	    }

	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias run, toJSON, valueOf
	     * @category Chain
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements corresponding to the given keys, or indexes,
	     * of `collection`. Keys may be specified as individual arguments or as arrays
	     * of keys.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [props] The property names
	     *  or indexes of elements to pick, specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * _.at(['a', 'b', 'c'], [0, 2]);
	     * // => ['a', 'c']
	     *
	     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
	     * // => ['barney', 'pebbles']
	     */
	    var at = restParam(function(collection, props) {
	      return baseAt(collection, baseFlatten(props));
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * The predicate is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': false },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.every(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.filter([4, 5, 6], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 6]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.filter(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.filter(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function filter(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.result(_.find(users, function(chr) {
	     *   return chr.age < 40;
	     * }), 'user');
	     * // => 'barney'
	     *
	     * // using the `_.matches` callback shorthand
	     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.result(_.find(users, 'active', false), 'user');
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.result(_.find(users, 'active'), 'user');
	     * // => 'barney'
	     */
	    var find = createFind(baseEach);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(baseEachRight, true);

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning the first element that has equivalent property
	     * values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
	     * // => 'barney'
	     *
	     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
	     * // => 'fred'
	     */
	    function findWhere(collection, source) {
	      return find(collection, baseMatches(source));
	    }

	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection). Iteratee functions may exit iteration early
	     * by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length" property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from left to right and returns the array
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	     *   console.log(n, key);
	     * });
	     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	     */
	    var forEach = createForEach(arrayEach, baseEach);

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEachRight(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from right to left and returns the array
	     */
	    var forEachRight = createForEach(arrayEachRight, baseEachRight);

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using the `_.property` callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @alias contains, include
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} target The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, target, fromIndex, guard) {
	      var length = collection ? getLength(collection) : 0;
	      if (!isLength(length)) {
	        collection = values(collection);
	        length = collection.length;
	      }
	      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	        fromIndex = 0;
	      } else {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      }
	      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
	        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keyData = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keyData, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return String.fromCharCode(object.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return this.fromCharCode(object.code);
	     * }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function it is
	     * invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invoke = restParam(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
	     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
	     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
	     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
	     * `sum`, `uniq`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function timesThree(n) {
	     *   return n * 3;
	     * }
	     *
	     * _.map([1, 2], timesThree);
	     * // => [3, 6]
	     *
	     * _.map({ 'a': 1, 'b': 2 }, timesThree);
	     * // => [3, 6] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee, thisArg) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return func(collection, iteratee);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, while the second of which
	     * contains elements `predicate` returns falsey for. The predicate is bound
	     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * _.partition([1, 2, 3], function(n) {
	     *   return n % 2;
	     * });
	     * // => [[1, 3], [2]]
	     *
	     * _.partition([1.2, 2.3, 3.4], function(n) {
	     *   return this.floor(n) % 2;
	     * }, Math);
	     * // => [[1.2, 3.4], [2.3]]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * var mapper = function(array) {
	     *   return _.pluck(array, 'user');
	     * };
	     *
	     * // using the `_.matches` callback shorthand
	     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
	     * // => [['pebbles'], ['barney', 'fred']]
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.map(_.partition(users, 'active', false), mapper);
	     * // => [['barney', 'pebbles'], ['fred']]
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(_.partition(users, 'active'), mapper);
	     * // => [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Gets the property value of `path` from all elements in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|string} path The path of the property to pluck.
	     * @returns {Array} Returns the property values.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(users, 'user');
	     * // => ['barney', 'fred']
	     *
	     * var userIndex = _.indexBy(users, 'user');
	     * _.pluck(userIndex, 'age');
	     * // => [36, 40] (iteration order is not guaranteed)
	     */
	    function pluck(collection, path) {
	      return map(collection, property(path));
	    }

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not provided the first element of `collection` is used as the initial
	     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
	     * and `sortByOrder`
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(total, n) {
	     *   return total + n;
	     * });
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
	     */
	    var reduce = createReduce(arrayReduce, baseEach);

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.reject([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [1, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.reject(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.reject(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function reject(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {*} Returns the random sample(s).
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	        collection = toIterable(collection);
	        var length = collection.length;
	        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	      }
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;

	      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];

	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sample(collection, POSITIVE_INFINITY);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the size of `collection`.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? getLength(collection) : 0;
	      return isLength(length) ? length : keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * The function returns as soon as it finds a passing value and does not iterate
	     * over the entire collection. The predicate is bound to `thisArg` and invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.some(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through `iteratee`. This method performs
	     * a stable sort, that is, it preserves the original sort order of equal elements.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return Math.sin(n);
	     * });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return this.sin(n);
	     * }, Math);
	     * // => [3, 1, 2]
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.sortBy(users, 'user'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function sortBy(collection, iteratee, thisArg) {
	      if (collection == null) {
	        return [];
	      }
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      var index = -1;
	      iteratee = getCallback(iteratee, thisArg, 3);

	      var result = baseMap(collection, function(value, key, collection) {
	        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	      });
	      return baseSortBy(result, compareAscending);
	    }

	    /**
	     * This method is like `_.sortBy` except that it can sort by multiple iteratees
	     * or property names.
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
	     *  The iteratees to sort by, specified as individual values or arrays of values.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
	     *
	     * _.map(_.sortByAll(users, 'user', function(chr) {
	     *   return Math.floor(chr.age / 10);
	     * }), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    var sortByAll = restParam(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var guard = iteratees[2];
	      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
	        iteratees.length = 1;
	      }
	      return baseSortByOrder(collection, baseFlatten(iteratees), []);
	    });

	    /**
	     * This method is like `_.sortByAll` except that it allows specifying the
	     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
	     * values are sorted in ascending order. Otherwise, a value is sorted in
	     * ascending order if its corresponding order is "asc", and descending if "desc".
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // sort by `user` in ascending order and by `age` in descending order
	     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    function sortByOrder(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (guard && isIterateeCall(iteratees, orders, guard)) {
	        orders = undefined;
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseSortByOrder(collection, iteratees, orders);
	    }

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
	     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	     * // => ['fred']
	     */
	    function where(collection, source) {
	      return filter(collection, baseMatches(source));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Date
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = nativeNow || function() {
	      return new Date().getTime();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it is called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      n = nativeIsFinite(n = +n) ? n : 0;
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that accepts up to `n` arguments ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      if (guard && isIterateeCall(func, n, guard)) {
	        n = undefined;
	      }
	      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it is called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery('#add').on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method does not set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // using placeholders
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = restParam(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bind.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all enumerable function
	     * properties, own and inherited, of `object` are bound.
	     *
	     * **Note:** This method does not set the "length" property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} [methodNames] The object method names to bind,
	     *  specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs' when the element is clicked
	     */
	    var bindAll = restParam(function(object, methodNames) {
	      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

	      var index = -1,
	          length = methodNames.length;

	      while (++index < length) {
	        var key = methodNames[index];
	        object[key] = createWrapper(object[key], BIND_FLAG, object);
	      }
	      return object;
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // using placeholders
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = restParam(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bindKey.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts one or more arguments of `func` that when
	     * called either invokes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` may be specified
	     * if `func.length` is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    var curry = createCurry(CURRY_FLAG);

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    var curryRight = createCurry(CURRY_RIGHT_FLAG);

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed invocations. Provide an options object to indicate that `func`
	     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	     * Subsequent calls to the debounced function return the result of the last
	     * `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it is invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // ensure `batchLog` is invoked once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
	     *
	     * // cancel a debounced call
	     * var todoChanges = _.debounce(batchLog, 1000);
	     * Object.observe(models.todo, todoChanges);
	     *
	     * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
	     *
	     * // ...at some point `models.todo` is changed
	     * models.todo.completed = true;
	     *
	     * // ...before 1 second has passed `models.todo` is deleted
	     * // which cancels the debounced `todoChanges` call
	     * delete models.todo;
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = wait < 0 ? 0 : (+wait || 0);
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = !!options.leading;
	        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        lastCalled = 0;
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	      }

	      function complete(isCalled, id) {
	        if (id) {
	          clearTimeout(id);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (isCalled) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = undefined;
	          }
	        }
	      }

	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          complete(trailingCall, maxTimeoutId);
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }

	      function maxDelayed() {
	        complete(trailing, timeoutId);
	      }

	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);

	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0 || remaining > maxWait;

	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = undefined;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    var defer = restParam(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    var delay = restParam(function(func, wait, args) {
	      return baseDelay(func, wait, args);
	    });

	    /**
	     * Creates a function that returns the result of invoking the provided
	     * functions with the `this` binding of the created function, where each
	     * successive invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the provided functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias backflow, compose
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is coerced to a string and used as the
	     * cache key. The `func` is invoked with the `this` binding of the memoized
	     * function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
	     *
	     * upperCase('fred');
	     * // => 'FRED'
	     *
	     * // modifying the result cache
	     * upperCase.cache.set('fred', 'BARNEY');
	     * upperCase('fred');
	     * // => 'BARNEY'
	     *
	     * // replacing `_.memoize.Cache`
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'barney' };
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'fred' }
	     *
	     * _.memoize.Cache = WeakMap;
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'barney' }
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }

	    /**
	     * Creates a function that runs each argument through a corresponding
	     * transform function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms] The functions to transform
	     * arguments, specified as individual functions or arrays of functions.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var modded = _.modArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * modded(1, 2);
	     * // => [1, 4]
	     *
	     * modded(5, 10);
	     * // => [25, 20]
	     */
	    var modArgs = restParam(function(func, transforms) {
	      transforms = baseFlatten(transforms);
	      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = transforms.length;
	      return restParam(function(args) {
	        var index = nativeMin(args.length, length);
	        while (index--) {
	          args[index] = transforms[index](args[index]);
	        }
	        return func.apply(this, args);
	      });
	    });

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first call. The `func` is invoked
	     * with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // using placeholders
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = createPartial(PARTIAL_FLAG);

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // using placeholders
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     *
	     * var map = _.rearg(_.map, [1, 0]);
	     * map(function(n) {
	     *   return n * 3;
	     * }, [1, 2, 3]);
	     * // => [3, 6, 9]
	     */
	    var rearg = restParam(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as an array.
	     *
	     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.restParam(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function restParam(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            rest = Array(length);

	        while (++index < length) {
	          rest[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, rest);
	          case 1: return func.call(this, args[0], rest);
	          case 2: return func.call(this, args[0], args[1], rest);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = rest;
	        return func.apply(this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the created
	     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	     *
	     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * // with a Promise
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function(array) {
	        return func.apply(this, array);
	      };
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed invocations. Provide an options object to indicate
	     * that `func` should be invoked on the leading and/or trailing edge of the
	     * `wait` timeout. Subsequent calls to the throttled function return the
	     * result of the last `func` call.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
	     *
	     * // cancel a trailing throttled call
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	     * otherwise they are assigned by reference. If `customizer` is provided it is
	     * invoked to produce the cloned values. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is bound to
	     * `thisArg` and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var shallow = _.clone(users);
	     * shallow[0] === users[0];
	     * // => true
	     *
	     * var deep = _.clone(users, true);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.clone(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, customizer, thisArg) {
	      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	        isDeep = false;
	      }
	      else if (typeof isDeep == 'function') {
	        thisArg = customizer;
	        customizer = isDeep;
	        isDeep = false;
	      }
	      return typeof customizer == 'function'
	        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, isDeep);
	    }

	    /**
	     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	     * to produce the cloned values. If `customizer` returns `undefined` cloning
	     * is handled by the method instead. The `customizer` is bound to `thisArg`
	     * and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var deep = _.cloneDeep(users);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.cloneDeep(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 20
	     */
	    function cloneDeep(value, customizer, thisArg) {
	      return typeof customizer == 'function'
	        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, true);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    function gt(value, other) {
	      return value > other;
	    }

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    function gte(value, other) {
	      return value >= other;
	    }

	    /**
	     * Checks if `value` is classified as an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      return isObjectLike(value) && isArrayLike(value) &&
	        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(function() { return arguments; }());
	     * // => false
	     */
	    var isArray = nativeIsArray || function(value) {
	      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	    };

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is empty. A value is considered empty unless it is an
	     * `arguments` object, array, string, or jQuery-like collection with a length
	     * greater than `0` or an object with own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
	          (isObjectLike(value) && isFunction(value.splice)))) {
	        return !value.length;
	      }
	      return !keys(value).length;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent. If `customizer` is provided it is invoked to compare values.
	     * If `customizer` returns `undefined` comparisons are handled by the method
	     * instead. The `customizer` is bound to `thisArg` and invoked with three
	     * arguments: (value, other [, index|key]).
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. Functions and DOM nodes
	     * are **not** supported. Provide a customizer function to extend support
	     * for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @alias eq
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * object == other;
	     * // => false
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * // using a customizer callback
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqual(array, other, function(value, other) {
	     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	     *     return true;
	     *   }
	     * });
	     * // => true
	     */
	    function isEqual(value, other, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(10);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => false
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite(Object(10));
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in older versions of Chrome and Safari which return 'function' for regexes
	      // and Safari 8 equivalents which return 'object' for typed array constructors.
	      return isObject(value) && objToString.call(value) == funcTag;
	    }

	    /**
	     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // Avoid a V8 JIT bug in Chrome 19-20.
	      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }

	    /**
	     * Performs a deep comparison between `object` and `source` to determine if
	     * `object` contains equivalent property values. If `customizer` is provided
	     * it is invoked to compare values. If `customizer` returns `undefined`
	     * comparisons are handled by the method instead. The `customizer` is bound
	     * to `thisArg` and invoked with three arguments: (value, other, index|key).
	     *
	     * **Note:** This method supports comparing properties of arrays, booleans,
	     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	     * and DOM nodes are **not** supported. Provide a customizer function to extend
	     * support for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     *
	     * // using a customizer callback
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isMatch(object, source, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      return baseIsMatch(object, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
	     * which returns `true` for `undefined` and other non-numeric values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (isFunction(value)) {
	        return reIsNative.test(fnToString.call(value));
	      }
	      return isObjectLike(value) && reIsHostCtor.test(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4);
	     * // => true
	     *
	     * _.isNumber(NaN);
	     * // => true
	     *
	     * _.isNumber('8.4');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * **Note:** This method assumes objects created by the `Object` constructor
	     * have no inherited enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      var Ctor;

	      // Exit early for non `Object` objects.
	      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
	          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      var result;
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      baseForIn(value, function(subValue, key) {
	        result = key;
	      });
	      return result === undefined || hasOwnProperty.call(value, result);
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objToString.call(value) == regexpTag;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    function lt(value, other) {
	      return value < other;
	    }

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    function lte(value, other) {
	      return value <= other;
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * (function() {
	     *   return _.toArray(arguments).slice(1);
	     * }(1, 2, 3));
	     * // => [2, 3]
	     */
	    function toArray(value) {
	      var length = value ? getLength(value) : 0;
	      if (!isLength(length)) {
	        return values(value);
	      }
	      if (!length) {
	        return [];
	      }
	      return arrayCopy(value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return baseCopy(value, keysIn(value));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * overwrite property assignments of previous sources. If `customizer` is
	     * provided it is invoked to produce the merged values of the destination and
	     * source properties. If `customizer` returns `undefined` merging is handled
	     * by the method instead. The `customizer` is bound to `thisArg` and invoked
	     * with five arguments: (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     *
	     * // using a customizer callback
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(object, other, function(a, b) {
	     *   if (_.isArray(a)) {
	     *     return a.concat(b);
	     *   }
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var merge = createAssigner(baseMerge);

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources overwrite property assignments of previous sources.
	     * If `customizer` is provided it is invoked to produce the assigned values.
	     * The `customizer` is bound to `thisArg` and invoked with five arguments:
	     * (objectValue, sourceValue, key, object, source).
	     *
	     * **Note:** This method mutates `object` and is based on
	     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using a customizer callback
	     * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return _.isUndefined(value) ? other : value;
	     * });
	     *
	     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var assign = createAssigner(function(object, source, customizer) {
	      return customizer
	        ? assignWith(object, source, customizer)
	        : baseAssign(object, source);
	    });

	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties, guard) {
	      var result = baseCreate(prototype);
	      if (guard && isIterateeCall(prototype, properties, guard)) {
	        properties = undefined;
	      }
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = createDefaults(assign, assignDefaults);

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = createDefaults(merge, mergeDefaults);

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    var findKey = createFindKey(baseForOwn);

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => returns `pebbles` assuming `_.findKey` returns `barney`
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    var findLastKey = createFindKey(baseForOwnRight);

	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	     */
	    var forIn = createForIn(baseFor);

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	     */
	    var forInRight = createForIn(baseForRight);

	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The `iteratee` is bound to `thisArg` and invoked with
	     * three arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' and 'b' (iteration order is not guaranteed)
	     */
	    var forOwn = createForOwn(baseForOwn);

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
	     */
	    var forOwnRight = createForOwn(baseForOwnRight);

	    /**
	     * Creates an array of function property names from all enumerable properties,
	     * own and inherited, of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['after', 'ary', 'assign', ...]
	     */
	    function functions(object) {
	      return baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the property value at `path` of `object`. If the resolved value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': { 'c': 3 } } };
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b.c');
	     * // => true
	     *
	     * _.has(object, ['a', 'b', 'c']);
	     * // => true
	     */
	    function has(object, path) {
	      if (object == null) {
	        return false;
	      }
	      var result = hasOwnProperty.call(object, path);
	      if (!result && !isKey(path)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        if (object == null) {
	          return false;
	        }
	        path = last(path);
	        result = hasOwnProperty.call(object, path);
	      }
	      return result || (isLength(object.length) && isIndex(path, object.length) &&
	        (isArray(object) || isArguments(object)));
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values unless `multiValue` is `true`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {boolean} [multiValue] Allow multiple values per key.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     *
	     * // with `multiValue`
	     * _.invert(object, true);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function invert(object, multiValue, guard) {
	      if (guard && isIterateeCall(object, multiValue, guard)) {
	        multiValue = undefined;
	      }
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (multiValue) {
	          if (hasOwnProperty.call(result, value)) {
	            result[value].push(key);
	          } else {
	            result[value] = [key];
	          }
	        }
	        else {
	          result[value] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      var Ctor = object == null ? undefined : object.constructor;
	      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	          (typeof object != 'function' && isArrayLike(object))) {
	        return shimKeys(object);
	      }
	      return isObject(object) ? nativeKeys(object) : [];
	    };

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      if (object == null) {
	        return [];
	      }
	      if (!isObject(object)) {
	        object = Object(object);
	      }
	      var length = object.length;
	      length = (length && isLength(length) &&
	        (isArray(object) || isArguments(object)) && length) || 0;

	      var Ctor = object.constructor,
	          index = -1,
	          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	          result = Array(length),
	          skipIndexes = length > 0;

	      while (++index < length) {
	        result[index] = (index + '');
	      }
	      for (var key in object) {
	        if (!(skipIndexes && isIndex(key, length)) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * property of `object` through `iteratee`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    var mapKeys = createObjectMapper(true);

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, key, object).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	     *   return n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using the `_.property` callback shorthand
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    var mapValues = createObjectMapper();

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to omit, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.omit(object, 'age');
	     * // => { 'user': 'fred' }
	     *
	     * _.omit(object, _.isNumber);
	     * // => { 'user': 'fred' }
	     */
	    var omit = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      if (typeof props[0] != 'function') {
	        var props = arrayMap(baseFlatten(props), String);
	        return pickByArray(object, baseDifference(keysIn(object), props));
	      }
	      var predicate = bindCallback(props[0], props[1], 3);
	      return pickByCallback(object, function(value, key, object) {
	        return !predicate(value, key, object);
	      });
	    });

	    /**
	     * Creates a two dimensional array of the key-value pairs for `object`,
	     * e.g. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	     */
	    function pairs(object) {
	      object = toObject(object);

	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of the picked `object` properties. Property
	     * names may be specified as individual arguments or as arrays of property
	     * names. If `predicate` is provided it is invoked for each property of `object`
	     * picking the properties `predicate` returns truthy for. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.pick(object, 'user');
	     * // => { 'user': 'fred' }
	     *
	     * _.pick(object, _.isString);
	     * // => { 'user': 'fred' }
	     */
	    var pick = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      return typeof props[0] == 'function'
	        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	        : pickByArray(object, baseFlatten(props));
	    });

	    /**
	     * This method is like `_.get` except that if the resolved value is a function
	     * it is invoked with the `this` binding of its parent object and its result
	     * is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a.b.c', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a.b.c', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      var result = object == null ? undefined : object[path];
	      if (result === undefined) {
	        if (object != null && !isKey(path, object)) {
	          path = toPath(path);
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          result = object == null ? undefined : object[last(path)];
	        }
	        result = result === undefined ? defaultValue : result;
	      }
	      return isFunction(result) ? result.call(object) : result;
	    }

	    /**
	     * Sets the property value of `path` on `object`. If a portion of `path`
	     * does not exist it is created.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to augment.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, 'x[0].y.z', 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      if (object == null) {
	        return object;
	      }
	      var pathKey = (path + '');
	      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          if (index == lastIndex) {
	            nested[key] = value;
	          } else if (nested[key] == null) {
	            nested[key] = isIndex(path[index + 1]) ? [] : {};
	          }
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     */
	    function transform(object, iteratee, accumulator, thisArg) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getCallback(iteratee, thisArg, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property values
	     * of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it is set to `start` with `start` then set to `0`.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} n The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     */
	    function inRange(value, start, end) {
	      start = +start || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      return value >= nativeMin(start, end) && value < nativeMax(start, end);
	    }

	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number is returned.
	     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
	     * number is returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      if (floating && isIterateeCall(min, max, floating)) {
	        max = floating = undefined;
	      }
	      var noMin = min == null,
	          noMax = max == null;

	      if (floating == null) {
	        if (noMax && typeof min == 'boolean') {
	          floating = min;
	          min = 1;
	        }
	        else if (typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	        noMax = false;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	    });

	    /**
	     * Capitalizes the first character of `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('fred');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      string = baseToString(string);
	      return string && (string.charAt(0).toUpperCase() + string.slice(1));
	    }

	    /**
	     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = baseToString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = baseToString(string);
	      target = (target + '');

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : nativeMin(position < 0 ? 0 : (+position || 0), length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional characters
	     * use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in Internet Explorer < 9, they can break out
	     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
	     * for more details.
	     *
	     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
	     * to reduce XSS vectors.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	      string = baseToString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	     */
	    function escapeRegExp(string) {
	      string = baseToString(string);
	      return (string && reHasRegExpChars.test(string))
	        ? string.replace(reRegExpChars, escapeRegExpChar)
	        : (string || '(?:)');
	    }

	    /**
	     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = baseToString(string);
	      length = +length;

	      var strLength = string.length;
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = nativeFloor(mid),
	          rightLength = nativeCeil(mid);

	      chars = createPadding('', rightLength, chars);
	      return chars.slice(0, leftLength) + string + chars;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padLeft('abc', 6);
	     * // => '   abc'
	     *
	     * _.padLeft('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padLeft('abc', 3);
	     * // => 'abc'
	     */
	    var padLeft = createPadDir();

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padRight('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padRight('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padRight('abc', 3);
	     * // => 'abc'
	     */
	    var padRight = createPadDir(true);

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
	     * of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = trim(string);
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      var result = '';
	      string = baseToString(string);
	      n = +n;
	      if (n < 1 || !string || !nativeIsFinite(n)) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        string += string;
	      } while (n);

	      return result;
	    }

	    /**
	     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = baseToString(string);
	      position = position == null
	        ? 0
	        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is provided it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // using the HTML "escape" delimiter to escape data property values
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // using custom template delimiters
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using backslashes to treat delimiters as plain text
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // using the `imports` option to import `jQuery` as `jq`
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, otherOptions) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	        options = otherOptions = undefined;
	      }
	      string = baseToString(string);
	      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

	      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products requires returning the `match`
	        // string in order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	      }
	      chars = (chars + '');
	      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimLeft('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimLeft('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimLeft(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string));
	      }
	      return string.slice(charsLeftIndex(string, (chars + '')));
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimRight('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimRight('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimRight(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(0, trimmedRightIndex(string) + 1);
	      }
	      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object|number} [options] The options object or maximum string length.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.trunc('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', 24);
	     * // => 'hi-diddly-ho there, n...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function trunc(string, options, guard) {
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (options != null) {
	        if (isObject(options)) {
	          var separator = 'separator' in options ? options.separator : separator;
	          length = 'length' in options ? (+options.length || 0) : length;
	          omission = 'omission' in options ? baseToString(options.omission) : omission;
	        } else {
	          length = +options || 0;
	        }
	      }
	      string = baseToString(string);
	      if (length >= string.length) {
	        return string;
	      }
	      var end = length - omission.length;
	      if (end < 1) {
	        return omission;
	      }
	      var result = string.slice(0, end);
	      if (separator == null) {
	        return result + omission;
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              newEnd,
	              substring = string.slice(0, end);

	          if (!separator.global) {
	            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            newEnd = match.index;
	          }
	          result = result.slice(0, newEnd == null ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = baseToString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      if (guard && isIterateeCall(string, pattern, guard)) {
	        pattern = undefined;
	      }
	      string = baseToString(string);
	      return string.match(pattern || reWords) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // avoid throwing errors for invalid selectors
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = restParam(function(func, args) {
	      try {
	        return func.apply(undefined, args);
	      } catch(e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and arguments of the created function. If `func` is a property name the
	     * created callback returns the property value for a given element. If `func`
	     * is an object the created callback returns `true` for elements that contain
	     * the equivalent object properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias iteratee
	     * @category Utility
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt'
	     *       ? object[match[1]] > match[3]
	     *       : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(users, 'age__gt36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function callback(func, thisArg, guard) {
	      if (guard && isIterateeCall(func, thisArg, guard)) {
	        thisArg = undefined;
	      }
	      return isObjectLike(func)
	        ? matches(func)
	        : baseCallback(func, thisArg);
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that performs a deep comparison between a given object
	     * and `source`, returning `true` if the given object has equivalent property
	     * values, else `false`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function that compares the property value of `path` on a given
	     * object to `value`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }

	    /**
	     * Creates a function that invokes the method at `path` on a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': _.constant(2) } } },
	     *   { 'a': { 'b': { 'c': _.constant(1) } } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    var method = restParam(function(path, args) {
	      return function(object) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path on `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = restParam(function(object, args) {
	      return function(path) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      if (options == null) {
	        var isObj = isObject(source),
	            props = isObj ? keys(source) : undefined,
	            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

	        if (!(methodNames ? methodNames.length : isObj)) {
	          methodNames = false;
	          options = source;
	          source = object;
	          object = this;
	        }
	      }
	      if (!methodNames) {
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = true,
	          index = -1,
	          isFunc = isFunction(object),
	          length = methodNames.length;

	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      while (++index < length) {
	        var methodName = methodNames[index],
	            func = source[methodName];

	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = (function(func) {
	            return function() {
	              var chainAll = this.__chain__;
	              if (chain || chainAll) {
	                var result = object(this.__wrapped__),
	                    actions = result.__actions__ = arrayCopy(this.__actions__);

	                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	                result.__chain__ = chainAll;
	                return result;
	              }
	              return func.apply(object, arrayPush([this.value()], arguments));
	            };
	          }(func));
	        }
	      }
	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      root._ = oldDash;
	      return this;
	    }

	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that returns the property value at `path` on a
	     * given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': 2 } } },
	     *   { 'a': { 'b': { 'c': 1 } } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the property value at a given path on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return baseGet(object, toPath(path), path + '');
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. If `end` is not specified it is
	     * set to `start` with `start` then set to `0`. If `end` is less than `start`
	     * a zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      if (step && isIterateeCall(start, end, step)) {
	        end = step = undefined;
	      }
	      start = +start || 0;
	      step = step == null ? 1 : (+step || 0);

	      if (end == null) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * Invokes the iteratee function `n` times, returning an array of the results
	     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	     * one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) {
	     *   mage.castSpell(n);
	     * });
	     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
	     *
	     * _.times(3, function(n) {
	     *   this.cast(n);
	     * }, mage);
	     * // => also invokes `mage.castSpell(n)` three times
	     */
	    function times(n, iteratee, thisArg) {
	      n = nativeFloor(n);

	      // Exit early to avoid a JSC JIT bug in Safari 8
	      // where `Array(0)` is treated as `Array(1)`.
	      if (n < 1 || !nativeIsFinite(n)) {
	        return [];
	      }
	      var index = -1,
	          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

	      iteratee = bindCallback(iteratee, thisArg, 1);
	      while (++index < n) {
	        if (index < MAX_ARRAY_LENGTH) {
	          result[index] = iteratee(index);
	        } else {
	          iteratee(index);
	        }
	      }
	      return result;
	    }

	    /**
	     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return baseToString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} augend The first number to add.
	     * @param {number} addend The second number to add.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    function add(augend, addend) {
	      return (+augend || 0) + (+addend || 0);
	    }

	    /**
	     * Calculates `n` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Calculates `n` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Gets the maximum value of `collection`. If `collection` is empty or falsey
	     * `-Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => -Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.max(users, 'age');
	     * // => { 'user': 'fred', 'age': 40 }
	     */
	    var max = createExtremum(gt, NEGATIVE_INFINITY);

	    /**
	     * Gets the minimum value of `collection`. If `collection` is empty or falsey
	     * `Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.min(users, 'age');
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var min = createExtremum(lt, POSITIVE_INFINITY);

	    /**
	     * Calculates `n` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Gets the sum of the values in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 6]);
	     * // => 10
	     *
	     * _.sum({ 'a': 4, 'b': 6 });
	     * // => 10
	     *
	     * var objects = [
	     *   { 'n': 4 },
	     *   { 'n': 6 }
	     * ];
	     *
	     * _.sum(objects, function(object) {
	     *   return object.n;
	     * });
	     * // => 10
	     *
	     * // using the `_.property` callback shorthand
	     * _.sum(objects, 'n');
	     * // => 10
	     */
	    function sum(collection, iteratee, thisArg) {
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return iteratee.length == 1
	        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
	        : baseSum(collection, iteratee);
	    }

	    /*------------------------------------------------------------------------*/

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    // Add functions to the `Map` cache.
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    // Add functions to the `Set` cache.
	    SetCache.prototype.push = cachePush;

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.callback = callback;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.modArgs = modArgs;
	    lodash.negate = negate;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.restParam = restParam;
	    lodash.set = set;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortByAll = sortByAll;
	    lodash.sortByOrder = sortByOrder;
	    lodash.spread = spread;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.backflow = flowRight;
	    lodash.collect = map;
	    lodash.compose = flowRight;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.iteratee = callback;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;

	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add functions that return unwrapped values when chaining.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.findWhere = findWhere;
	    lodash.first = first;
	    lodash.floor = floor;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isMatch = isMatch;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.min = min;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padLeft = padLeft;
	    lodash.padRight = padRight;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.sum = sum;
	    lodash.template = template;
	    lodash.trim = trim;
	    lodash.trimLeft = trimLeft;
	    lodash.trimRight = trimRight;
	    lodash.trunc = trunc;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.words = words;

	    // Add aliases.
	    lodash.all = every;
	    lodash.any = some;
	    lodash.contains = includes;
	    lodash.eq = isEqual;
	    lodash.detect = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.head = first;
	    lodash.include = includes;
	    lodash.inject = reduce;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), false);

	    /*------------------------------------------------------------------------*/

	    // Add functions capable of returning wrapped and unwrapped values when chaining.
	    lodash.sample = sample;

	    lodash.prototype.sample = function(n) {
	      if (!this.__chain__ && n == null) {
	        return sample(this.value());
	      }
	      return this.thru(function(value) {
	        return sample(value, n);
	      });
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(result.__takeCount__, n);
	        } else {
	          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type != LAZY_MAP_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
	        var result = this.clone();
	        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.first` and `_.last`.
	    arrayEach(['first', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
	    arrayEach(['initial', 'rest'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
	    arrayEach(['pluck', 'where'], function(methodName, index) {
	      var operationName = index ? 'filter' : 'map',
	          createCallback = index ? baseMatches : property;

	      LazyWrapper.prototype[methodName] = function(value) {
	        return this[operationName](createCallback(value));
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.reject = function(predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 1);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = start == null ? 0 : (+start || 0);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = (+end || 0);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
	      return this.reverse().takeWhile(predicate, thisArg).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(POSITIVE_INFINITY);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
	          retUnwrapped = /^(?:first|last)$/.test(methodName),
	          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var args = retUnwrapped ? [1] : arguments,
	            chainAll = this.__chain__,
	            value = this.__wrapped__,
	            isHybrid = !!this.__actions__.length,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var interceptor = function(value) {
	          return (retUnwrapped && chainAll)
	            ? lodashFunc(value, 1)[0]
	            : lodashFunc.apply(undefined, arrayPush([value], args));
	        };

	        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
	            onlyLazy = isLazy && !isHybrid;

	        if (retUnwrapped && !chainAll) {
	          if (onlyLazy) {
	            value = value.clone();
	            value.__actions__.push(action);
	            return func.call(value);
	          }
	          return lodashFunc.call(undefined, this.value())[0];
	        }
	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push(action);
	          return new LodashWrapper(result, chainAll);
	        }
	        return this.thru(interceptor);
	      };
	    });

	    // Add `Array` and `String` methods to `lodash.prototype`.
	    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
	      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });

	    // Map minified function names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name,
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chaining functions to the `lodash` wrapper.
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.concat = wrapperConcat;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add function aliases to the `lodash` wrapper.
	    lodash.prototype.collect = lodash.prototype.map;
	    lodash.prototype.head = lodash.prototype.first;
	    lodash.prototype.select = lodash.prototype.filter;
	    lodash.prototype.tail = lodash.prototype.rest;

	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose lodash to the global object when an AMD loader is present to avoid
	    // errors in cases where lodash is loaded by a script tag and not intended
	    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
	    // more details.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js or RingoJS.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for Rhino with CommonJS support.
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // Export for a browser or Rhino.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(291)(module), (function() { return this; }())))

/***/ },
/* 291 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This component provides the SetManager with buttons to operate on selection (Create, Open, Split)
	 *
	 * Created by dmitri on 23/06/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsModalActions = __webpack_require__(265);

	var _actionsModalActions2 = _interopRequireDefault(_actionsModalActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _actionsModeActions = __webpack_require__(244);

	var _actionsModeActions2 = _interopRequireDefault(_actionsModeActions);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var _constantsModeConstants = __webpack_require__(243);

	var _constantsModeConstants2 = _interopRequireDefault(_constantsModeConstants);

	var SetManagerMainButtons = (function (_React$Component) {
	  _inherits(SetManagerMainButtons, _React$Component);

	  function SetManagerMainButtons(props) {
	    var _this = this;

	    _classCallCheck(this, SetManagerMainButtons);

	    _get(Object.getPrototypeOf(SetManagerMainButtons.prototype), 'constructor', this).call(this, props);

	    this.mounted = false;

	    this.containerStyle = {
	      padding: '5px 5px 5px 5px',
	      borderColor: '#2185d0!important'
	    };

	    this.labelContainerStyle = {
	      position: 'relative',
	      width: 0,
	      height: '10px'
	    };

	    this.labelStyle = {
	      position: 'relative',
	      top: '-15px',
	      left: '10px',
	      whiteSpace: 'nowrap'
	    };

	    this.buttonColumnStyle = {
	      display: 'flex',
	      flexDirection: 'column'
	    };

	    this.buttonSubTextStyle = {
	      fontSize: '10px'
	    };

	    this._onSetSelectionChange = function () {
	      var setIsSelected = function setIsSelected() {
	        return _this.enableOrDisableActions();
	      };
	      return setIsSelected.apply(_this);
	    };

	    this._forceUpdate = function () {
	      var update = function update() {
	        if (!_this.mounted) return;_this.setState({});
	      };
	      return update.apply(_this);
	    };

	    this.state = {
	      openButton: 'disabled'
	    };
	  }

	  _createClass(SetManagerMainButtons, [{
	    key: 'enableOrDisableActions',
	    value: function enableOrDisableActions() {
	      if (this.props.managerstore.getSelected().type == 'Set') {
	        this.setState({ openButton: '' });
	      } else {
	        this.setState({ openButton: 'disabled' });
	      }
	    }
	  }, {
	    key: 'showModal',
	    value: function showModal() {
	      //var setId = this.props.managerstore.getSelected().id;
	      window.setTimeout(_actionsModalActions2['default'].showModal.bind(null, _constantsModalConstants2['default'].Modals.addToSet, { parent: null }), 10);
	    }
	  }, {
	    key: 'loadActiveSet',
	    value: function loadActiveSet() {
	      var setId = this.props.managerstore.getSelected().id;
	      if (!setId) {
	        alert("Internal error: no set selected");
	        return;
	      }
	      //console.log('request view to set active set ' + setId);
	      window.setTimeout(_actionsMetadataActions2['default'].setLabBenchId.bind(null, setId), 10);
	      window.setTimeout(_actionsViewActions2['default'].setActiveSet.bind(null, setId), 10);
	      window.setTimeout(_actionsModeActions2['default'].changeMode.bind(null, _constantsModeConstants2['default'].Modes.OBSERVATION), 30);
	    }
	  }, {
	    key: 'splitSet',
	    value: function splitSet() {
	      var setId = this.props.managerstore.getSelected().id;
	      if (!setId) {
	        alert("Internal error: no set selected");
	        return;
	      }
	      window.setTimeout(_actionsModalActions2['default'].showModal.bind(null, _constantsModalConstants2['default'].Modals.organiseSet, { id: setId }), 10);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.mounted = true;
	      this.props.userstore.addLanguageChangeListener(this._forceUpdate);
	      this.props.modestore.addModeChangeListener(this._forceUpdate);
	      this.props.managerstore.addSelectionChangeListener(this._onSetSelectionChange);
	      this.enableOrDisableActions();
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {}
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.mounted = false;
	      this.props.userstore.removeLanguageChangeListener(this._forceUpdate);
	      this.props.modestore.removeModeChangeListener(this._forceUpdate);
	      this.props.managerstore.removeSelectionChangeListener(this._onSetSelectionChange);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui container segment', style: this.containerStyle },
	        _react2['default'].createElement(
	          'div',
	          { style: this.labelContainerStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui blue tiny basic label',
	              style: this.labelStyle },
	            this.props.userstore.getText('actions')
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui fluid buttons',
	            style: this.buttonColumnStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui green compact button', onClick: this.showModal.bind(this) },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui text' },
	              this.props.userstore.getText('newSet')
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui text', style: this.buttonSubTextStyle },
	              this.props.userstore.getText('fromBasketSubtitle')
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui compact button ' + this.state.openButton, onClick: this.loadActiveSet.bind(this) },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui text' },
	              this.props.userstore.getText('open')
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui text', style: this.buttonSubTextStyle },
	              this.props.userstore.getText('selectedSet')
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui compact button ' + this.state.openButton, onClick: this.splitSet.bind(this) },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui text' },
	              this.props.userstore.getText('organise')
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui text', style: this.buttonSubTextStyle },
	              this.props.userstore.getText('selectedSetContent')
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return SetManagerMainButtons;
	})(_react2['default'].Component);

	exports['default'] = SetManagerMainButtons;
	module.exports = exports['default'];

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Central pane of the application.
	 *
	 * Created by dmitri on 17/05/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _SetManager = __webpack_require__(294);

	var _SetManager2 = _interopRequireDefault(_SetManager);

	var _VirtualBenchLab = __webpack_require__(300);

	var _VirtualBenchLab2 = _interopRequireDefault(_VirtualBenchLab);

	var _benchActiveToolTooltip = __webpack_require__(226);

	var _benchActiveToolTooltip2 = _interopRequireDefault(_benchActiveToolTooltip);

	var _constantsModeConstants = __webpack_require__(243);

	var _constantsModeConstants2 = _interopRequireDefault(_constantsModeConstants);

	var CenterPane = (function (_React$Component) {
	  _inherits(CenterPane, _React$Component);

	  function CenterPane(props) {
	    var _this = this;

	    _classCallCheck(this, CenterPane);

	    _get(Object.getPrototypeOf(CenterPane.prototype), 'constructor', this).call(this, props);

	    this.componentContainerStyle = {
	      display: 'block',
	      height: '100%',
	      width: '100%'
	    };

	    this.dimmerStyle = {
	      opacity: '0.5 !important'
	    };

	    this.state = {
	      loader: null,
	      loading: ''
	    };

	    this._onLoaderUpdate = function () {
	      var updateLoader = function updateLoader() {
	        return _this.setState({ loader: _this.props.viewstore.getLoader().text });
	      };
	      return updateLoader.apply(_this);
	    };
	  }

	  _createClass(CenterPane, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.viewstore.addLoaderListener(this._onLoaderUpdate);
	      this.props.modestore.addModeChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.loader) {
	        nextState.loading = 'active';
	      } else {
	        nextState.loading = '';
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.viewstore.removeLoaderListener(this._onLoaderUpdate);
	      this.props.modestore.removeModeChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (this.props.modestore.isInSetMode()) {
	        return _react2['default'].createElement(
	          'div',
	          { style: this.componentContainerStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: "ui " + this.state.loading + " dimmer", style: this.dimmerStyle },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui large text loader' },
	              this.state.loader
	            )
	          ),
	          _react2['default'].createElement(_SetManager2['default'], {
	            key: 'StudyManager',
	            userstore: this.props.userstore,
	            toolstore: this.props.toolstore,
	            modestore: this.props.modestore,
	            metastore: this.props.metastore,
	            dragstore: this.props.dragstore,
	            managerstore: this.props.managerstore })
	        );
	      } else if (this.props.modestore.isInObservationMode() || this.props.modestore.isInOrganisationMode()) {
	        return _react2['default'].createElement(
	          'div',
	          { style: this.componentContainerStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: "ui " + this.state.loading + " dimmer", style: this.dimmerStyle },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui large text loader' },
	              this.state.loader
	            )
	          ),
	          _react2['default'].createElement(_VirtualBenchLab2['default'], {
	            key: 'VirtualBenchLab',
	            imagestore: this.props.imagestore,
	            userstore: this.props.userstore,
	            viewstore: this.props.viewstore,
	            toolstore: this.props.toolstore,
	            menustore: this.props.menustore,
	            metastore: this.props.metastore,
	            modalstore: this.props.modalstore,
	            modestore: this.props.modestore,
	            ministore: this.props.ministore,
	            benchstore: this.props.benchstore,
	            managerstore: this.props.managerstore,
	            dragstore: this.props.dragstore
	          })
	        );
	      } else {
	        console.error('No rendering handler for center pane in mode ' + this.props.modestore.getMode());
	        return null;
	      }
	    }
	  }]);

	  return CenterPane;
	})(_react2['default'].Component);

	exports['default'] = CenterPane;
	module.exports = exports['default'];

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Set Manager component providing the column-based display of Sets and their content.
	 *
	 * Created by dmitri on 13/01/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _managerSetDisplay = __webpack_require__(295);

	var _managerSetDisplay2 = _interopRequireDefault(_managerSetDisplay);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var SetManager = (function (_React$Component) {
	  _inherits(SetManager, _React$Component);

	  function SetManager(props) {
	    var _this = this;

	    _classCallCheck(this, SetManager);

	    _get(Object.getPrototypeOf(SetManager.prototype), 'constructor', this).call(this, props);

	    this.mounted = false;

	    this.containerStyle = {
	      display: 'flex',
	      flexDirection: 'column',
	      minHeight: '100%',
	      maxHeight: '100%',
	      height: '100%',
	      backgroundColor: 'white'
	    };

	    this.optionBarStyle = {
	      display: 'flex',
	      flexDirection: 'row'
	    };

	    this.workbenchExplorerStyle = {
	      display: 'flex',
	      flexDirection: 'row',
	      minHeight: '100%',
	      maxHeight: '100%',
	      height: '100%',
	      overflowX: 'auto',
	      overflowY: 'hidden'
	    };

	    this.helpIconStyle = {
	      position: 'absolute',
	      top: '5px',
	      right: '5px',
	      zIndex: 101
	    };

	    this.helpTextStyle = {
	      display: 'none',
	      position: 'absolute',
	      top: '10px',
	      right: '0px',
	      zIndex: 100,
	      width: '250px'
	    };

	    this._onUserLogIn = function () {
	      var userLogIn = function userLogIn() {
	        return _this.setState({ userLoggedIn: true });
	      };
	      return userLogIn.apply(_this);
	    };

	    this._onUserLogOut = function () {
	      var userLogOut = function userLogOut() {
	        return _this.setState({ userLoggedIn: false });
	      };
	      return userLogOut.apply(_this);
	    };

	    this._onSetUpdate = function () {
	      var updateDisplay = function updateDisplay() {
	        return _this.setState({
	          displayedSets: _this.props.managerstore.getSets(),
	          coreSet: _this.props.managerstore.getCoreSet() });
	      };
	      return updateDisplay.apply(_this);
	    };

	    this._forceUpdate = function () {
	      var update = function update() {
	        if (_this.mounted) _this.setState({});
	      };
	      return update.apply(_this);
	    };

	    this.state = {
	      userLoggedIn: false,
	      coreSet: this.props.managerstore.getCoreSet(),
	      displayedSets: this.props.managerstore.getSets()
	    };

	    this.listeneningToMetadataForIds = {};
	  }

	  _createClass(SetManager, [{
	    key: 'showHelp',
	    value: function showHelp() {
	      this.helpTextStyle.display = '';
	      this.setState({});
	    }
	  }, {
	    key: 'hideHelp',
	    value: function hideHelp() {
	      this.helpTextStyle.display = 'none';
	      this.setState({});
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.mounted = true;
	      this.props.userstore.addUserLogInListener(this._onUserLogIn);
	      this.props.userstore.addUserLogOutListener(this._onUserLogOut);
	      this.props.managerstore.addManagerUpdateListener(this._onSetUpdate);
	      this.props.userstore.addLanguageChangeListener(this._forceUpdate);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {}
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var _this2 = this;

	      if (this.state.displayedSets.length != prevState.displayedSets.length) {
	        (function () {
	          // Smooth scrolling towards the right
	          var node = _this2.refs.sets.getDOMNode();
	          var scrollAnimate = window.setInterval(function () {
	            //console.log('left=' + node.scrollLeft + ' scollwidth=' + node.scrollWidth + ' clientwidth=' + node.clientWidth);
	            if (node.scrollLeft < node.scrollWidth - node.clientWidth - 2) {
	              node.scrollLeft = node.scrollLeft + 2;
	            } else {
	              window.clearTimeout(scrollAnimate);
	            }
	          }, 1);
	        })();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.userstore.removeUserLogInListener(this._onUserLogIn);
	      this.props.userstore.removeUserLogOutListener(this._onUserLogOut);
	      this.props.managerstore.removeManagerUpdateListener(this._onSetUpdate);
	      this.props.userstore.removeLanguageChangeListener(this._forceUpdate);
	      this.mounted = false;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var self = this;
	      return _react2['default'].createElement(
	        'div',
	        { style: this.containerStyle },
	        _react2['default'].createElement('i', { className: 'ui big blue help circle icon',
	          ref: 'helpIcon',
	          style: this.helpIconStyle,
	          onMouseEnter: this.showHelp.bind(this),
	          onMouseLeave: this.hideHelp.bind(this) }),
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui text segment container', style: this.helpTextStyle },
	          _react2['default'].createElement(
	            'div',
	            null,
	            this.props.userstore.getText('managerHelp0')
	          ),
	          _react2['default'].createElement(
	            'div',
	            null,
	            _react2['default'].createElement('i', { className: 'ui icon folder' }),
	            ' ',
	            this.props.userstore.getText('managerHelp1')
	          ),
	          _react2['default'].createElement(
	            'div',
	            null,
	            _react2['default'].createElement('i', { className: 'ui icon folder' }),
	            ' ',
	            this.props.userstore.getText('managerHelp2')
	          ),
	          _react2['default'].createElement(
	            'div',
	            null,
	            _react2['default'].createElement('i', { className: 'ui icon folder' }),
	            ' ',
	            this.props.userstore.getText('managerHelp3')
	          ),
	          _react2['default'].createElement(
	            'div',
	            null,
	            _react2['default'].createElement('i', { className: 'ui blue icon folder' }),
	            this.props.userstore.getText('managerHelp4')
	          )
	        ),
	        _react2['default'].createElement('div', { style: this.optionBarStyle }),
	        _react2['default'].createElement(
	          'div',
	          { style: this.workbenchExplorerStyle, ref: 'sets' },
	          this.state.displayedSets.map(function (s, idx) {
	            return _react2['default'].createElement(_managerSetDisplay2['default'], { key: 'SET-NODE-' + idx,
	              set: s,
	              index: idx,
	              managerstore: self.props.managerstore,
	              userstore: self.props.userstore,
	              dragstore: self.props.dragstore,
	              metastore: self.props.metastore
	            });
	          })
	        )
	      );
	    }
	  }]);

	  return SetManager;
	})(_react2['default'].Component);

	exports['default'] = SetManager;
	module.exports = exports['default'];

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Column displaying the children of a Set.
	 *
	 * Created by dmitri on 13/01/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _actionsModalActions = __webpack_require__(265);

	var _actionsModalActions2 = _interopRequireDefault(_actionsModalActions);

	var _actionsModeActions = __webpack_require__(244);

	var _actionsModeActions2 = _interopRequireDefault(_actionsModeActions);

	var _actionsInspectorActions = __webpack_require__(251);

	var _actionsInspectorActions2 = _interopRequireDefault(_actionsInspectorActions);

	var _actionsMenuActions = __webpack_require__(296);

	var _actionsMenuActions2 = _interopRequireDefault(_actionsMenuActions);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var _constantsModeConstants = __webpack_require__(243);

	var _constantsModeConstants2 = _interopRequireDefault(_constantsModeConstants);

	var _SetDisplayItem = __webpack_require__(298);

	var _SetDisplayItem2 = _interopRequireDefault(_SetDisplayItem);

	var _SetDisplaySubSet = __webpack_require__(299);

	var _SetDisplaySubSet2 = _interopRequireDefault(_SetDisplaySubSet);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var SetDisplay = (function (_React$Component) {
	  _inherits(SetDisplay, _React$Component);

	  function SetDisplay(props) {
	    var _this = this;

	    _classCallCheck(this, SetDisplay);

	    _get(Object.getPrototypeOf(SetDisplay.prototype), 'constructor', this).call(this, props);

	    this.containerStyle = {
	      margin: 0,
	      padding: 0,
	      height: '100%',
	      maxWidth: '150px',
	      minWidth: '150px'
	    };

	    // Override automatic position:absolute
	    this.labelStyle = {
	      position: 'fixed',
	      top: 0,
	      left: 0,
	      margin: 0
	    };

	    this.topBarStyle = {
	      display: 'flex',
	      flexDirection: 'row',
	      height: '30px',
	      padding: '4px 0px',
	      width: '100%'
	    };

	    this.titleStyle = {
	      height: '100%',
	      padding: 0,
	      width: '120px',
	      whiteSpace: 'nowrap',
	      overflow: 'hidden',
	      textOverflow: 'ellipsis'
	    };

	    this.addItemStyle = {
	      height: '100%',
	      padding: 0,
	      width: '30px',
	      cursor: 'pointer'
	    };

	    this.listContainerStyle = {
	      height: '90%',
	      overflowY: 'auto',
	      overflowX: 'hidden',
	      margin: 0,
	      padding: 0
	    };

	    this.noMarginPaddingStyle = {
	      margin: 0,
	      padding: 0
	    };

	    this.textStyle = {
	      WebkitUserSelect: 'none',
	      MozUserSelect: 'none',
	      MsUserSelect: 'none',
	      userSelect: 'none'
	    };

	    this.dragDropSegmentStyle = {
	      height: '5px'
	    };

	    this._onItemOrSubsetUpdate = function () {
	      var update = function update() {
	        return _this.itemOrSubSetUpdated();
	      };
	      return update.apply(_this);
	    };

	    var subSets = [];
	    var items = [];
	    if (this.props.set.subsets) {
	      subSets = JSON.parse(JSON.stringify(this.props.set.subsets));
	    }
	    if (this.props.set.items) {
	      items = JSON.parse(JSON.stringify(this.props.set.items));
	    }

	    this.state = {
	      displayName: this.props.index === 0 ? this.props.userstore.getText('mySets') : this.props.set.name,
	      subSets: subSets,
	      items: items,
	      validEntityDraggedOverSelf: false,
	      offset: 0,
	      limit: window.innerHeight / 30
	    };
	  }

	  _createClass(SetDisplay, [{
	    key: 'itemOrSubSetUpdated',
	    value: function itemOrSubSetUpdated() {
	      var subSets = [];
	      var items = [];

	      if (this.props.set.subsets) {
	        for (var i = 0; i < this.props.set.subsets.length; ++i) {
	          var metadata = this.props.metastore.getMetadataAbout(this.props.set.subsets[i].uid);
	          if (metadata) {
	            //console.log('pushing subset ' +metadata.uid);
	            metadata.link = this.props.set.subsets[i].link;
	            subSets.push(metadata);
	          } else {
	            subSets.push({
	              uid: this.props.set.subsets[i].uid,
	              link: this.props.set.subsets[i].link,
	              name: this.props.set.subsets[i].uid
	            });
	          }
	        }
	        subSets = _.sortBy(subSets, _utilsGlobals2['default'].getName);
	      }

	      if (this.props.set.items) {
	        for (var i = 0; i < this.props.set.items.length; ++i) {
	          var metadata = this.props.metastore.getMetadataAbout(this.props.set.items[i].uid);

	          if (metadata) {
	            metadata.link = this.props.set.items[i].link;
	            //console.log('pushing item ' +metadata.uid);
	            items.push(metadata);
	          } else {
	            items.push({
	              uid: this.props.set.items[i].uid,
	              link: this.props.set.items[i].link,
	              name: this.props.set.items[i].uid
	            });
	          }
	        }
	        items = _.sortBy(items, _utilsGlobals2['default'].getName);
	      }

	      //console.log('call from ' + this.props.set.uid);
	      //console.log('call from ' + this.state.displayName);
	      this.setState({ items: items, subSets: subSets });
	    }
	  }, {
	    key: 'preventDefault',
	    value: function preventDefault(event) {
	      if (this.state.validEntityDraggedOverSelf) {
	        event.preventDefault();
	      }
	    }
	  }, {
	    key: 'displayDraggedEntity',
	    value: function displayDraggedEntity(event) {
	      // console.log('entering drop area');
	      switch (this.props.dragstore.getType()) {
	        case 'managerDragSet':
	          var data = this.props.dragstore.getData();
	          for (var i = 0; i < this.props.set.subsets.length; ++i) {
	            if (this.props.set.subsets[i].link == data.link) {
	              return;
	            }
	          }
	        // No break here, fallthrough is voluntary
	        case 'managerDragItem':
	          data = this.props.dragstore.getData();
	          console.log(JSON.stringify(data));
	          for (var i = 0; i < this.props.set.items.length; ++i) {
	            if (this.props.set.items[i].link == data.link) {
	              return;
	            }
	          }
	          this.setState({ validEntityDraggedOverSelf: true });
	          event.preventDefault();
	          break;
	        default:
	          this.setState({ validEntityDraggedOverSelf: false });
	          break;
	      }
	    }
	  }, {
	    key: 'removeDraggedEntity',
	    value: function removeDraggedEntity(event) {
	      this.setState({ validEntityDraggedOverSelf: false });
	    }
	  }, {
	    key: 'addDraggedEntity',
	    value: function addDraggedEntity(event) {
	      if (this.state.validEntityDraggedOverSelf) {
	        var data = this.props.dragstore.getData();
	        console.log(JSON.stringify(data));
	        _utilsServiceMethods2['default'].cutPaste(data.link, this.props.set.uid, undefined);
	      }
	      this.setState({ validEntityDraggedOverSelf: false });
	    }
	  }, {
	    key: 'clearDrag',
	    value: function clearDrag() {
	      this.props.dragstore.setAction(null, null);
	    }
	  }, {
	    key: 'showAddToSetModal',
	    value: function showAddToSetModal() {
	      window.setTimeout(_actionsModalActions2['default'].showModal.bind(null, _constantsModalConstants2['default'].Modals.addToSet, {
	        parent: this.props.set.uid,
	        index: this.props.index
	      }), 10);
	    }
	  }, {
	    key: 'scrolled',
	    value: function scrolled(e) {
	      var node = _react2['default'].findDOMNode(this.refs.scroller);
	      if (node.offsetHeight + node.scrollTop >= node.scrollHeight - 20) {
	        this.setState({ limit: Math.min(this.state.items.length + this.state.subSets.length, this.state.limit + 10) });
	      }
	    }
	  }, {
	    key: 'addMetadataUpdateListeners',
	    value: function addMetadataUpdateListeners(s) {
	      if (s.subsets) {
	        for (var i = 0; i < s.subsets.length; ++i) {
	          this.props.metastore.addMetadataUpdateListener(s.subsets[i].uid, this._onItemOrSubsetUpdate);
	        }
	      }

	      if (s.items) {
	        for (var i = 0; i < s.items.length; ++i) {
	          this.props.metastore.addMetadataUpdateListener(s.items[i].uid, this._onItemOrSubsetUpdate);
	        }
	      }
	    }
	  }, {
	    key: 'removeMetadataUpdateListeners',
	    value: function removeMetadataUpdateListeners(s) {
	      if (s.subsets) {
	        for (var i = 0; i < s.subsets.length; ++i) {
	          this.props.metastore.removeMetadataUpdateListener(s.subsets[i].uid, this._onItemOrSubsetUpdate);
	        }
	      }

	      if (s.items) {
	        for (var i = 0; i < s.items.length; ++i) {
	          this.props.metastore.removeMetadataUpdateListener(s.items[i].uid, this._onItemOrSubsetUpdate);
	        }
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      //this.props.managerstore.addSelectionChangeListener(this._onSelectionChange);
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	      this.itemOrSubSetUpdated();
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.validEntityDraggedOverSelf) {
	        this.containerStyle.backgroundColor = 'rgba(20,20,20,0.6)';
	        this.noMarginPaddingStyle.pointerEvents = 'none';
	        this.textStyle.pointerEvents = 'none';
	      } else {
	        this.containerStyle.backgroundColor = null;
	        this.noMarginPaddingStyle.pointerEvents = null;
	        this.textStyle.pointerEvents = null;
	      }

	      if (nextProps.set.loading) {
	        nextState.displayName = this.props.userstore.getText('loading');
	      }

	      if (nextProps.index === 0) {
	        nextState.displayName = this.props.userstore.getText('mySets');
	      } else {
	        nextState.displayName = nextProps.set.name;
	      }

	      if (nextProps.set.hash != this.props.set.hash) {
	        nextState.subSets = nextProps.set.subsets;
	        nextState.items = nextProps.set.items;
	        nextState.offset = 0;
	        nextState.limit = window.innerHeight / 30;
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (prevProps.set.hash != this.props.set.hash) {
	        this.removeMetadataUpdateListeners(prevProps.set);
	        this.addMetadataUpdateListeners(this.props.set);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.removeMetadataUpdateListeners(this.props.set);
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var self = this;
	      // No content yet, show a loader
	      if (this.props.set.loading) {
	        return _react2['default'].createElement(
	          'div',
	          { className: 'ui segment', style: this.containerStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui active inverted dimmer' },
	            _react2['default'].createElement('div', { className: 'ui text loader' })
	          )
	        );
	      }

	      // Content received but set is empty at the moment.
	      if (this.props.set.subsets.length == 0 && this.props.set.items.length == 0) {
	        return _react2['default'].createElement(
	          'div',
	          { className: 'ui segments', style: this.containerStyle,
	            onDragEnter: this.displayDraggedEntity.bind(this),
	            onDragOver: this.preventDefault.bind(this),
	            onDragLeave: this.removeDraggedEntity.bind(this),
	            onDrop: this.addDraggedEntity.bind(this) },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui tertiary center aligned segment',
	              style: this.topBarStyle },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui center aligned container',
	                style: this.titleStyle },
	              this.state.displayName
	            ),
	            _react2['default'].createElement('i', { className: 'large add circle green icon',
	              style: this.addItemStyle,
	              onClick: this.showAddToSetModal.bind(this) })
	          )
	        );
	      }

	      // Display children. List has attached style to prevent that stupid label from padding
	      return _react2['default'].createElement(
	        'div',
	        { style: this.containerStyle,
	          className: 'ui segments' },
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui tertiary center aligned segment', style: this.topBarStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui center aligned container', style: this.titleStyle },
	            this.state.displayName
	          ),
	          _react2['default'].createElement('i', { className: 'large add circle green icon', style: this.addItemStyle,
	            onClick: this.showAddToSetModal.bind(this)
	          })
	        ),
	        _react2['default'].createElement(
	          'div',
	          {
	            className: 'ui segment',
	            onDragEnter: this.displayDraggedEntity.bind(this),
	            onDragOver: this.preventDefault.bind(this),
	            onDragLeave: this.removeDraggedEntity.bind(this),
	            onDrop: this.addDraggedEntity.bind(this),
	            onScroll: this.scrolled.bind(this),
	            ref: 'scroller',
	            style: this.listContainerStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui selection list', style: this.noMarginPaddingStyle },
	            this.state.subSets.slice(this.state.offset, this.state.limit).map(function (subSet, idx) {
	              return _react2['default'].createElement(_SetDisplaySubSet2['default'], { key: 'S-' + subSet.link,
	                managerstore: self.props.managerstore,
	                metastore: self.props.metastore,
	                dragstore: self.props.dragstore,
	                index: self.props.index,
	                userstore: self.props.userstore,
	                parentSetId: self.props.set.uid,
	                set: subSet
	              });
	            }),
	            this.state.items.slice(this.state.offset, this.state.limit - this.state.subSets.length).map(function (item, idx) {
	              return _react2['default'].createElement(_SetDisplayItem2['default'], {
	                key: 'K-' + item.link,
	                managerstore: self.props.managerstore,
	                metastore: self.props.metastore,
	                dragstore: self.props.dragstore,
	                index: self.props.index,
	                userstore: self.props.userstore,
	                parentSetId: self.props.set.uid,
	                item: item });
	            })
	          ),
	          _react2['default'].createElement('div', { style: this.noMarginPaddingStyle, className: 'ui center aligned basic segment' })
	        )
	      );
	    }
	  }]);

	  return SetDisplay;
	})(_react2['default'].Component);

	exports['default'] = SetDisplay;
	module.exports = exports['default'];

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by dmitri on 04/01/16.
	 *
	 * Actions for the context menu (radial)
	 */
	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsMenuConstants = __webpack_require__(297);

	var _constantsMenuConstants2 = _interopRequireDefault(_constantsMenuConstants);

	exports['default'] = {
	  /**
	   * Indicates the menu should be displayed at location x,y using context for the  entities provided
	   * @param x
	   * @param y
	   * @param elements Object containing the following keys : 'images', 'aois', 'rois', 'tois', 'pois'. Each key corresponds to an array of Objects where each object contains the properties of the entities.
	   */
	  displayContextMenu: function displayContextMenu(x, y, elements) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsMenuConstants2['default'].ActionTypes.EDITOR_CONTEXT_MENU,
	      x: x,
	      y: y,
	      items: elements
	    });
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 297 */
/***/ function(module, exports) {

	/**
	 * Constants for the context menu and Properties panel.
	 *
	 * Created by dmitri on 04/01/16.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  ActionTypes: {
	    EDITOR_CONTEXT_MENU: "EDITOR_CONTEXT_MENU",
	    INSPECT_ELEMENTS: 'EDITOR_INSPECT_ELEMENTS'
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Entry in a SetDisplay which displays an Item (final leaf) in a Set.
	 *
	 * Created by dmitri on 31/08/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsMenuActions = __webpack_require__(296);

	var _actionsMenuActions2 = _interopRequireDefault(_actionsMenuActions);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _actionsInspectorActions = __webpack_require__(251);

	var _actionsInspectorActions2 = _interopRequireDefault(_actionsInspectorActions);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var SetDisplayItem = (function (_React$Component) {
	  _inherits(SetDisplayItem, _React$Component);

	  function SetDisplayItem(props) {
	    var _this = this;

	    _classCallCheck(this, SetDisplayItem);

	    _get(Object.getPrototypeOf(SetDisplayItem.prototype), 'constructor', this).call(this, props);

	    this.linkStyle = {
	      margin: 0
	    };

	    this.textStyle = {
	      WebkitUserSelect: 'none',
	      MozUserSelect: 'none',
	      MsUserSelect: 'none',
	      userSelect: 'none'
	    };

	    this._onSelectionChange = function () {
	      var changeSelected = function changeSelected() {
	        return _this.setState({
	          isActive: _this.props.managerstore.getActiveId(_this.props.index) === _this.props.item.uid,
	          isSelected: _this.props.managerstore.getSelected().id === _this.props.item.uid
	        });
	      };
	      return changeSelected.apply(_this);
	    };

	    this.state = {
	      item: null,
	      disablePointerEvents: false,
	      icon: 'ui icon wait',
	      isActive: false,
	      isSelected: false
	    };

	    if (props.item) {
	      if (props.item.name) {
	        this.state.item = props.item;
	        switch (props.item.type) {
	          case 'Specimen':
	            this.state.icon = 'ui icon barcode';
	            break;
	          case 'Image':
	            this.state.icon = 'ui icon file image outline';
	            break;
	        }
	      }
	    }
	  }

	  _createClass(SetDisplayItem, [{
	    key: 'callContextMenu',
	    value: function callContextMenu(event) {
	      event.preventDefault();
	      var entity = JSON.parse(JSON.stringify(this.state.item));
	      var index = this.props.index;
	      var objectsAtEvent = {
	        sets: [],
	        specimens: [],
	        images: []
	      };
	      switch (entity.type) {
	        case 'Specimen':
	          objectsAtEvent.specimens.push({
	            parent: this.props.parentSetId,
	            link: entity.link,
	            data: entity
	          });
	          break;
	        case 'Image':
	          objectsAtEvent.images.push({
	            parent: this.props.parentSetId,
	            link: entity.link,
	            data: entity
	          });
	          break;
	        default:
	          console.error('No processor for ' + entity.type);
	      }
	      _actionsMenuActions2['default'].displayContextMenu(event.clientX, event.clientY, objectsAtEvent);
	    }
	  }, {
	    key: 'startDragItem',
	    value: function startDragItem(event) {
	      this.props.dragstore.setAction('managerDragItem', JSON.parse(JSON.stringify(this.state.item)));
	      event.dataTransfer.setData('text/plain', this.state.item.uid);
	      event.dataTransfer.dropEffect = 'move';
	    }
	  }, {
	    key: 'clearDrag',
	    value: function clearDrag() {
	      this.props.dragstore.setAction(null, null);
	    }
	  }, {
	    key: 'setActive',
	    value: function setActive() {
	      var node = this.state.item;
	      //console.log(JSON.stringify(this.props.set));
	      window.setTimeout(_actionsManagerActions2['default'].select.bind(null, node.uid, node.type, node.name, this.props.parentSetId, this.props.item.link), 10);
	      window.setTimeout(_actionsManagerActions2['default'].selectEntityInSetById.bind(null, this.props.parentSetId, node.uid), 10);
	      window.setTimeout(_actionsInspectorActions2['default'].setInspectorData.bind(null, [node.uid]), 10);
	      if (node.type === 'Set') {
	        window.setTimeout(_actionsMetadataActions2['default'].setLabBenchId.bind(null, node.uid), 10);
	      }
	      window.setTimeout(_actionsInspectorActions2['default'].setImageInAnnotationList.bind(null, node.uid), 10);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.managerstore.addSelectionChangeListener(this._onSelectionChange);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(props) {
	      if (props.item.name) {
	        this.setState({ item: props.item });
	        switch (props.item.type) {
	          case 'Specimen':
	            this.setState({ icon: 'ui icon barcode' });
	            break;
	          case 'Image':
	            this.setState({ icon: 'ui icon file image outline' });
	            break;
	          default:
	        }
	      }
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.disablePointerEvents) {
	        this.linkStyle.pointerEvents = 'none';
	      }

	      if (nextState.isActive) {
	        this.linkStyle.backgroundColor = 'rgba(0,0,0,0.1)';
	      } else {
	        this.linkStyle.backgroundColor = null;
	      }
	      if (nextState.isSelected) {
	        this.linkStyle.color = 'blue';
	      } else {
	        this.linkStyle.color = null;
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      //console.log('unmount ' + this.state.item.name);
	      //this.props.metastore.removeMetadataUpdateListener(this.props.item.uid, this.itemMetadataUpdated.bind(this));
	      this.props.managerstore.removeSelectionChangeListener(this._onSelectionChange);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (!this.state.item) {
	        return _react2['default'].createElement(
	          'a',
	          { className: 'item ',
	            style: this.linkStyle,
	            key: 'SET-OPTION-' + this.props.item.uid
	          },
	          _react2['default'].createElement(
	            'div',
	            null,
	            _react2['default'].createElement('i', { className: this.state.icon, style: this.textStyle }),
	            this.props.item.uid
	          )
	        );
	      }
	      return _react2['default'].createElement(
	        'a',
	        { className: 'item ',
	          style: this.linkStyle,
	          key: 'SET-OPTION-' + this.props.item.uid,
	          onContextMenu: this.callContextMenu.bind(this),
	          draggable: true,
	          onDragStart: this.startDragItem.bind(this),
	          onDragEnd: this.clearDrag.bind(this),
	          onClick: this.setActive.bind(this) },
	        _react2['default'].createElement(
	          'div',
	          null,
	          _react2['default'].createElement('i', { className: this.state.icon, style: this.textStyle }),
	          this.state.item.name
	        )
	      );
	    }
	  }]);

	  return SetDisplayItem;
	})(_react2['default'].Component);

	exports['default'] = SetDisplayItem;
	module.exports = exports['default'];

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Entry in a SetDisplay which displays a sub-Set of a Set.
	 *
	 * Created by dmitri on 31/08/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsMenuActions = __webpack_require__(296);

	var _actionsMenuActions2 = _interopRequireDefault(_actionsMenuActions);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _actionsInspectorActions = __webpack_require__(251);

	var _actionsInspectorActions2 = _interopRequireDefault(_actionsInspectorActions);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _actionsModeActions = __webpack_require__(244);

	var _actionsModeActions2 = _interopRequireDefault(_actionsModeActions);

	var _constantsModeConstants = __webpack_require__(243);

	var _constantsModeConstants2 = _interopRequireDefault(_constantsModeConstants);

	var SetDisplaySubSet = (function (_React$Component) {
	  _inherits(SetDisplaySubSet, _React$Component);

	  function SetDisplaySubSet(props) {
	    var _this = this;

	    _classCallCheck(this, SetDisplaySubSet);

	    _get(Object.getPrototypeOf(SetDisplaySubSet.prototype), 'constructor', this).call(this, props);

	    this.linkStyle = {
	      margin: 0
	    };

	    this.textStyle = {
	      WebkitUserSelect: 'none',
	      MozUserSelect: 'none',
	      MsUserSelect: 'none',
	      userSelect: 'none'
	    };

	    this._onSelectionChange = function () {
	      var changeSelected = function changeSelected() {
	        return _this.setState({
	          isActive: _this.props.managerstore.getActiveId(_this.props.index) === _this.props.set.uid,
	          isSelected: _this.props.managerstore.getSelected().id === _this.props.set.uid
	        });
	      };
	      return changeSelected.apply(_this);
	    };

	    this.state = {
	      set: null,
	      disablePointerEvents: false,
	      icon: 'ui icon wait',
	      isActive: this.props.managerstore.getActiveId(this.props.index) === this.props.set.uid,
	      isSelected: this.props.managerstore.getSelected().id === this.props.set.uid
	    };

	    if (props.set.name) {
	      this.state.set = props.set;
	      this.state.icon = 'ui icon folder';
	    }
	  }

	  _createClass(SetDisplaySubSet, [{
	    key: 'callContextMenu',
	    value: function callContextMenu(event) {
	      event.preventDefault();
	      var entity = JSON.parse(JSON.stringify(this.state.set));
	      var index = this.props.index;
	      var objectsAtEvent = {
	        sets: [],
	        specimens: [],
	        images: []
	      };

	      objectsAtEvent.sets.push({
	        parent: this.props.parentSetId,
	        link: entity.link,
	        data: entity
	      });

	      _actionsMenuActions2['default'].displayContextMenu(event.clientX, event.clientY, objectsAtEvent);
	    }
	  }, {
	    key: 'startDragSet',
	    value: function startDragSet(event) {
	      this.props.dragstore.setAction('managerDragSet', JSON.parse(JSON.stringify(this.state.set)));
	      event.dataTransfer.setData('text/plain', this.state.set.uid);
	      event.dataTransfer.dropEffect = 'move';
	    }
	  }, {
	    key: 'clearDrag',
	    value: function clearDrag() {
	      this.props.dragstore.setAction(null, null);
	    }
	  }, {
	    key: 'setActive',
	    value: function setActive() {
	      var node = this.state.set;
	      //console.log(JSON.stringify(this.props.set));
	      window.setTimeout(_actionsManagerActions2['default'].select.bind(null, node.uid, node.type, node.name, this.props.parentSetId, this.props.set.link), 10);
	      window.setTimeout(_actionsManagerActions2['default'].selectEntityInSetById.bind(null, this.props.parentSetId, node.uid), 10);
	      window.setTimeout(_actionsInspectorActions2['default'].setInspectorData.bind(null, [node.uid]), 10);
	      if (node.type === 'Set') {
	        window.setTimeout(_actionsMetadataActions2['default'].setLabBenchId.bind(null, node.uid), 10);
	      }

	      window.setTimeout(_actionsInspectorActions2['default'].setSetInAnnotationList.bind(null, node.uid), 10);
	    }
	  }, {
	    key: 'selectAndLoadSet',
	    value: function selectAndLoadSet() {
	      window.setTimeout(_actionsMetadataActions2['default'].setLabBenchId.bind(null, this.state.set.uid), 10);
	      window.setTimeout(_actionsManagerActions2['default'].selectEntityInSetById.bind(null, this.props.parentSetId, this.state.set.uid), 10);
	      window.setTimeout(_actionsModeActions2['default'].changeMode.bind(null, _constantsModeConstants2['default'].Modes.OBSERVATION), 30);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      //this.props.metastore.addMetadataUpdateListener(this.props.set.uid, this.itemMetadataUpdated.bind(this));
	      this.props.managerstore.addSelectionChangeListener(this._onSelectionChange);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(props) {
	      if (props.set.name) {
	        this.setState({ set: props.set, icon: 'ui icon folder' });
	      }
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.disablePointerEvents) {
	        this.linkStyle.pointerEvents = 'none';
	      }

	      if (nextState.isActive) {
	        this.linkStyle.backgroundColor = 'rgba(0,0,0,0.1)';
	      } else {
	        this.linkStyle.backgroundColor = null;
	      }
	      if (nextState.isSelected) {
	        this.linkStyle.color = 'blue';
	      } else {
	        this.linkStyle.color = null;
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      //this.props.metastore.removeMetadataUpdateListener(this.props.set.uid, this.itemMetadataUpdated.bind(this));
	      this.props.managerstore.removeSelectionChangeListener(this._onSelectionChange);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (!this.state.set) {
	        return _react2['default'].createElement(
	          'a',
	          { className: 'item ',
	            style: this.linkStyle,
	            key: 'SET-OPTION-' + this.props.set.uid
	          },
	          _react2['default'].createElement(
	            'div',
	            null,
	            _react2['default'].createElement('i', { className: this.state.icon, style: this.textStyle }),
	            this.props.set.uid
	          )
	        );
	      }
	      return _react2['default'].createElement(
	        'a',
	        { className: 'item ',
	          style: this.linkStyle,
	          key: 'SET-OPTION-' + this.props.set.uid,
	          onContextMenu: this.callContextMenu.bind(this),
	          draggable: true,
	          onDragStart: this.startDragSet.bind(this),
	          onDragEnd: this.clearDrag.bind(this),
	          onClick: this.setActive.bind(this),
	          onDoubleClick: this.selectAndLoadSet.bind(this) },
	        _react2['default'].createElement(
	          'div',
	          null,
	          _react2['default'].createElement('i', { className: this.state.icon, style: this.textStyle }),
	          this.state.set.name
	        )
	      );
	    }
	  }]);

	  return SetDisplaySubSet;
	})(_react2['default'].Component);

	exports['default'] = SetDisplaySubSet;
	module.exports = exports['default'];

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Component containing the lab bench which displays the 2D-space enabling the user to do most of their annotation work.
	 *
	 * Created by dmitri on 30/03/15.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _benchFreeSpace = __webpack_require__(301);

	var _benchFreeSpace2 = _interopRequireDefault(_benchFreeSpace);

	var _contextMenuOrbalContextMenu = __webpack_require__(307);

	var _contextMenuOrbalContextMenu2 = _interopRequireDefault(_contextMenuOrbalContextMenu);

	var _benchInbox = __webpack_require__(309);

	var _benchInbox2 = _interopRequireDefault(_benchInbox);

	var _benchBenchLabBorders = __webpack_require__(310);

	var _benchBenchLabBorders2 = _interopRequireDefault(_benchBenchLabBorders);

	var _benchActiveSetNameDisplay = __webpack_require__(311);

	var _benchActiveSetNameDisplay2 = _interopRequireDefault(_benchActiveSetNameDisplay);

	var _commonImagesLoadingStatus = __webpack_require__(312);

	var _commonImagesLoadingStatus2 = _interopRequireDefault(_commonImagesLoadingStatus);

	var _benchEntityFilters = __webpack_require__(313);

	var _benchEntityFilters2 = _interopRequireDefault(_benchEntityFilters);

	var _storesDragNDropStore = __webpack_require__(316);

	var _storesDragNDropStore2 = _interopRequireDefault(_storesDragNDropStore);

	var _benchPopupToolComponent = __webpack_require__(317);

	var _benchPopupToolComponent2 = _interopRequireDefault(_benchPopupToolComponent);

	var _actionsModalActions = __webpack_require__(265);

	var _actionsModalActions2 = _interopRequireDefault(_actionsModalActions);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var drag = new _storesDragNDropStore2['default']();

	var VirtualBenchLab = (function (_React$Component) {
	  _inherits(VirtualBenchLab, _React$Component);

	  function VirtualBenchLab(props) {
	    var _this = this;

	    _classCallCheck(this, VirtualBenchLab);

	    _get(Object.getPrototypeOf(VirtualBenchLab.prototype), 'constructor', this).call(this, props);

	    this.componentContainerStyle = {
	      display: 'block',
	      height: '100%',
	      width: '100%'
	    };

	    this.dimmerStyle = {
	      display: 'none',
	      opacity: '0.5 !important'
	    };

	    this.importSheetButtonStyle = {
	      position: 'absolute',
	      right: '100px',
	      bottom: '5px',
	      width: '15px'
	    };

	    this.importSheetButtonIconStyle = {
	      margin: 0,
	      padding: '10px'
	    };

	    this.state = {
	      isVisibleInCurrentMode: this.isComponentVisibleInCurrentMode(),
	      loader: null,
	      loading: ''
	    };

	    this._onModeChange = function () {
	      var setModeVisibility = function setModeVisibility() {
	        return _this.setState({
	          isVisibleInCurrentMode: _this.isComponentVisibleInCurrentMode()
	        });
	      };
	      return setModeVisibility.apply(_this);
	    };
	  }

	  _createClass(VirtualBenchLab, [{
	    key: 'isComponentVisibleInCurrentMode',
	    value: function isComponentVisibleInCurrentMode() {
	      return this.props.modestore.isInOrganisationMode() || this.props.modestore.isInObservationMode();
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.modestore.addModeChangeListener(this._onModeChange);
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	      $(this.refs['import'].getDOMNode()).popup({
	        position: 'top center'
	      });
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.loader) {
	        nextState.loading = 'active';
	      } else {
	        nextState.loading = '';
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {}
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.modestore.removeModeChangeListener(this._onModeChange);
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { style: this.componentContainerStyle },
	        _react2['default'].createElement(_benchActiveSetNameDisplay2['default'], {
	          userstore: this.props.userstore,
	          managerstore: this.props.managerstore }),
	        _react2['default'].createElement(_benchInbox2['default'], {
	          benchstore: this.props.benchstore,
	          metastore: this.props.metastore,
	          viewstore: this.props.viewstore,
	          userstore: this.props.userstore,
	          drag: drag
	        }),
	        _react2['default'].createElement(_commonImagesLoadingStatus2['default'], { imagestore: this.props.imagestore,
	          userstore: this.props.userstore }),
	        _react2['default'].createElement(_benchPopupToolComponent2['default'], { userstore: this.props.userstore,
	          toolstore: this.props.toolstore }),
	        _react2['default'].createElement(
	          'div',
	          { style: this.importSheetButtonStyle,
	            'data-content': this.props.userstore.getText('importImages'),
	            ref: 'import',
	            className: 'ui container' },
	          _react2['default'].createElement(
	            'a',
	            { style: this.importSheetButtonIconStyle, onClick: _actionsModalActions2['default'].showModal.bind(null, _constantsModalConstants2['default'].Modals.addToSet, { parent: this.props.benchstore.getActiveSetId() }),
	              className: 'ui green button' },
	            _react2['default'].createElement(
	              'i',
	              { className: 'ui large icons' },
	              _react2['default'].createElement('i', { className: 'folder icon' }),
	              _react2['default'].createElement('i', { className: 'corner big black add icon' })
	            )
	          )
	        ),
	        _react2['default'].createElement(_contextMenuOrbalContextMenu2['default'], {
	          menustore: this.props.menustore,
	          ministore: this.props.ministore,
	          metastore: this.props.metastore,
	          userstore: this.props.userstore,
	          benchstore: this.props.benchstore,
	          viewstore: this.props.viewstore,
	          toolstore: this.props.toolstore
	        }),
	        _react2['default'].createElement(_benchBenchLabBorders2['default'], {
	          userstore: this.props.userstore,
	          viewstore: this.props.viewstore
	        }),
	        _react2['default'].createElement(_benchEntityFilters2['default'], {
	          userstore: this.props.userstore,
	          viewstore: this.props.viewstore,
	          benchstore: this.props.benchstore
	        }),
	        _react2['default'].createElement(_benchFreeSpace2['default'], {
	          width: '100%',
	          height: '100%',
	          viewstore: this.props.viewstore,
	          metastore: this.props.metastore,
	          modestore: this.props.modestore,
	          userstore: this.props.userstore,
	          benchstore: this.props.benchstore,
	          managerstore: this.props.managerstore,
	          drag: drag
	        })
	      );
	    }
	  }]);

	  return VirtualBenchLab;
	})(_react2['default'].Component);

	exports['default'] = VirtualBenchLab;
	module.exports = exports['default'];

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Container for the D3FreeSpace and coordinates communication between stores and SVG display.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _lodash = __webpack_require__(290);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _D3FreeSpace = __webpack_require__(302);

	var _D3FreeSpace2 = _interopRequireDefault(_D3FreeSpace);

	var _actionsMinimapActions = __webpack_require__(190);

	var _actionsMinimapActions2 = _interopRequireDefault(_actionsMinimapActions);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _constantsModeConstants = __webpack_require__(243);

	var _constantsModeConstants2 = _interopRequireDefault(_constantsModeConstants);

	var _confToolsConf = __webpack_require__(257);

	var _confToolsConf2 = _interopRequireDefault(_confToolsConf);

	var d3Component = new _D3FreeSpace2['default']();

	var FreeSpace = (function (_React$Component) {
	  _inherits(FreeSpace, _React$Component);

	  function FreeSpace(props) {
	    var _this = this;

	    _classCallCheck(this, FreeSpace);

	    _get(Object.getPrototypeOf(FreeSpace.prototype), 'constructor', this).call(this, props);

	    this.style = {
	      width: this.props.width,
	      height: this.props.height
	    };

	    this._onChangeSetId = function () {
	      var requestLoad = function requestLoad() {
	        return _this.clearLabBench();
	      };
	      return requestLoad.apply(_this);
	    };

	    this._onActiveViewChange = function () {
	      var displayLabBench = function displayLabBench() {
	        return _this.displayLabBench();
	      };
	      return displayLabBench.apply(_this);
	    };

	    this._onBenchLoaded = function () {
	      var displayLabBench = function displayLabBench() {
	        return _this.displayLabBench();
	      };
	      return displayLabBench.apply(_this);
	    };

	    this._onFitView = function () {
	      var fitView = function fitView() {
	        return _this.fitView();
	      };
	      return fitView.apply(_this);
	    };

	    this._onViewportUpdate = function () {
	      var viewportUpdate = function viewportUpdate() {
	        return _this.viewportUpdate(_this.props.viewstore.getView());
	      };
	      return viewportUpdate.apply(_this);
	    };

	    this._onViewPropertiesUpdate = function () {
	      var viewPropertiesUpdate = function viewPropertiesUpdate() {
	        return _this.viewPropertiesUpdate(_this.props.viewstore.getViewProperties());
	      };
	      return viewPropertiesUpdate.apply(_this);
	    };

	    this.state = {
	      pinchLength: null
	    };
	  }

	  _createClass(FreeSpace, [{
	    key: 'clearLabBench',
	    value: function clearLabBench() {
	      d3Component.clearDisplay();
	      d3Component.newLabBench();
	      // var id = this.props.managerstore.getSelected().id;
	      var sets = this.props.managerstore.getSets();
	      var id = sets[sets.length - 1].uid;
	      window.setTimeout(_actionsMetadataActions2['default'].loadLabBench.bind(null, null), 10);
	      window.setTimeout(_actionsMinimapActions2['default'].unsetMinimap, 10);
	    }
	  }, {
	    key: 'displayLabBench',
	    value: function displayLabBench() {
	      if (this.props.benchstore.getActiveViewId()) {
	        d3Component.loadView(this.props.benchstore.getActiveViewId());

	        if (this.props.modestore.isInOrganisationMode()) {
	          window.setTimeout(_actionsToolActions2['default'].setTool.bind(null, _confToolsConf2['default'].moveObject.id), 500);
	        }
	      }
	    }
	  }, {
	    key: 'redrawLabBench',
	    value: function redrawLabBench() {
	      d3Component.redrawChildEntities();
	    }
	  }, {
	    key: 'displayDragged',
	    value: function displayDragged(event) {
	      if (this.props.drag.getType() == 'inboxMove') {
	        event.preventDefault();
	        d3Component.displayShadow(this.props.drag.getData());
	      }
	    }
	  }, {
	    key: 'fitView',
	    value: function fitView() {
	      d3Component.fitViewportToData();
	    }
	  }, {
	    key: 'viewportUpdate',
	    value: function viewportUpdate(view) {
	      d3Component.updateViewport(view.left, view.top, view.scale, view.animate);
	    }
	  }, {
	    key: 'viewPropertiesUpdate',
	    value: function viewPropertiesUpdate(viewProps) {
	      d3Component.updateViewWithProperties(viewProps);
	    }
	  }, {
	    key: 'pinchZoom',
	    value: function pinchZoom(event) {
	      if (event.touches.length == 2) {
	        var _length = Math.pow(event.touches[0].screenX - event.touches[1].screenX, 2) + Math.pow(event.touches[0].screenY - event.touches[1].screenY, 2);
	        if (this.state.pinchLength) {
	          var view = this.props.viewstore.getView();
	          if (this.state.pinchLength < _length) {
	            // User zooming out
	            window.setTimeout(_actionsViewActions2['default'].updateViewport.bind(null, null, null, null, null, view.scale * 0.99), 10);
	          } else {
	            // User zooming in
	            window.setTimeout(_actionsViewActions2['default'].updateViewport.bind(null, null, null, null, null, view.scale * 1.01), 10);
	          }
	        }
	        this.setState({ pinchLength: _length });
	      }
	    }
	  }, {
	    key: 'clearTouch',
	    value: function clearTouch(event) {
	      this.setState({ pinchLength: null });
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var el = _react2['default'].findDOMNode(this);
	      d3Component.create(el, {
	        width: '100%',
	        height: '100%'
	      });
	      d3Component.setMetadataStore(this.props.metastore);
	      d3Component.setLabBenchStore(this.props.benchstore);
	      d3Component.setViewStore(this.props.viewstore);
	      d3Component.setModeStore(this.props.modestore);
	      this.props.viewstore.addFitViewListener(this._onFitView);
	      this.props.viewstore.addViewportListener(this._onViewportUpdate);
	      this.props.viewstore.addViewPropertiesUpdateListener(this._onViewPropertiesUpdate);
	      this.props.viewstore.addFilterUpdateListener(this.redrawLabBench);
	      this.props.benchstore.addActiveSetChangeListener(this._onChangeSetId);
	      this.props.benchstore.addLabBenchLoadListener(this._onBenchLoaded);

	      this._onViewportUpdate();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      d3Component.unload();
	      this.props.viewstore.removeFitViewListener(this._onFitView);
	      this.props.viewstore.removeViewportListener(this._onViewportUpdate);
	      this.props.viewstore.removeViewPropertiesUpdateListener(this._onViewPropertiesUpdate);
	      this.props.viewstore.removeFilterUpdateListener(this.redrawLabBench);
	      this.props.benchstore.removeActiveSetChangeListener(this._onChangeSetId);
	      this.props.benchstore.removeLabBenchLoadListener(this._onBenchLoaded);
	    }

	    // Will be called only once when mounting this component, afterwards all rerenders will be delegated to D3.
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement('div', { className: 'freespace',
	        onTouchMove: this.pinchZoom.bind(this),
	        onTouchEnd: this.clearTouch.bind(this),
	        onDragEnter: this.displayDragged.bind(this),
	        style: this.style });
	    }
	  }]);

	  return FreeSpace;
	})(_react2['default'].Component);

	exports['default'] = FreeSpace;
	module.exports = exports['default'];

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Main D3 display component
	 */
	'use strict';

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _Number$isFinite = __webpack_require__(303)['default'];

	var _Object$keys = __webpack_require__(285)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _events = __webpack_require__(306);

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _actionsViewActionsJs = __webpack_require__(196);

	var _actionsViewActionsJs2 = _interopRequireDefault(_actionsViewActionsJs);

	var _actionsMinimapActionsJs = __webpack_require__(190);

	var _actionsMinimapActionsJs2 = _interopRequireDefault(_actionsMinimapActionsJs);

	var _actionsMenuActions = __webpack_require__(296);

	var _actionsMenuActions2 = _interopRequireDefault(_actionsMenuActions);

	var _actionsInspectorActions = __webpack_require__(251);

	var _actionsInspectorActions2 = _interopRequireDefault(_actionsInspectorActions);

	var _constantsCommonSVGClasses = __webpack_require__(224);

	var _constantsCommonSVGClasses2 = _interopRequireDefault(_constantsCommonSVGClasses);

	var _constantsTypeConstants = __webpack_require__(263);

	var _constantsTypeConstants2 = _interopRequireDefault(_constantsTypeConstants);

	var _utilsD3ViewUtils = __webpack_require__(253);

	var _utilsD3ViewUtils2 = _interopRequireDefault(_utilsD3ViewUtils);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var D3FreeSpace = (function () {
	  function D3FreeSpace() {
	    var _this = this;

	    _classCallCheck(this, D3FreeSpace);

	    this.zoom = _d32['default'].behavior.zoom()
	    //.scaleExtent([0.1, 100])
	    .on('zoom', function () {
	      if (_d32['default'].event.defaultPrevented) return;
	      _actionsViewActionsJs2['default'].updateViewport(_d32['default'].event.translate[0], _d32['default'].event.translate[1], _d32['default'].select('svg').node().parentNode.offsetWidth, _d32['default'].select('svg').node().parentNode.offsetHeight, _d32['default'].event.scale);
	    });

	    this.viewId = null;

	    // Not always the same as ViewStore : may be in transition
	    this.view = {};
	    this.view.x = 0;
	    this.view.y = 0;
	    this.view.scale = 0.01;
	    this.metadatastore = null;
	    this.benchstore = null;
	    this.viewstore = null;
	    this.modestore = null;
	    this.visibleImages = [];

	    this._onEndDragFromInbox = function () {
	      var addFromInbox = function addFromInbox() {
	        return _this.fixShadow();
	      };
	      return addFromInbox.apply(_this);
	    };

	    this.displayData = {
	      xMin: Number.POSITIVE_INFINITY,
	      xMax: Number.NEGATIVE_INFINITY,
	      yMin: Number.POSITIVE_INFINITY,
	      yMax: Number.NEGATIVE_INFINITY
	    };
	  }

	  /**
	   * Creates the root SVG container node with given properties.
	   * @param el Reference to the DOM node under which the root SVG will be created.
	   * @param props Object Height and width of the root.
	   */

	  _createClass(D3FreeSpace, [{
	    key: 'create',
	    value: function create(el, props) {
	      this.el = el;

	      var self = this;
	      var svg = _d32['default'].select(el).append('svg').attr('width', props.width).attr('height', props.height).on('contextmenu', function (d, i) {
	        self.contextMenu.call(this, self);
	      }).on('click', function (d, i) {
	        if (_d32['default'].event.button == 0 && !_d32['default'].event.defaultPrevented) {
	          _d32['default'].event.preventDefault();
	          self.leftClick.call(this, self);
	        }
	      }).on('dragover', function (d, i) {
	        _d32['default'].event.preventDefault();
	      }).call(this.zoom).style('cursor', 'default');

	      var defs = svg.append('defs');
	      var dropShadowFilter = defs.append('filter').attr('id', 'drop-shadow').attr('height', '130%');
	      dropShadowFilter.append("feGaussianBlur").attr("in", "SourceAlpha").attr("stdDeviation", 5).attr("result", "blur");
	      dropShadowFilter.append("feOffset").attr("in", "blur").attr("dx", 5).attr("dy", 5).attr("result", "offsetBlur");
	      var feMerge = dropShadowFilter.append("feMerge");
	      feMerge.append("feMergeNode").attr("in", "offsetBlur");
	      feMerge.append("feMergeNode").attr("in", "SourceGraphic");

	      var root = svg.append('g').attr('class', _constantsCommonSVGClasses2['default'].ROOT_CLASS);
	      root.attr('transform', 'translate(' + this.view.x + "," + this.view.y + ")scale(" + this.view.scale + ')');
	      root.append('g').attr('class', _constantsCommonSVGClasses2['default'].OBJECTS_CONTAINER_CLASS);
	      root.append('g').attr('class', _constantsCommonSVGClasses2['default'].ACTIVE_TOOL_DISPLAY_CLASS);
	    }

	    // External methods (i.e. to be called by other components)
	    /**
	     * Clears the display. Removes all nodes except the root.
	     */
	  }, {
	    key: 'unload',
	    value: function unload() {
	      this.clearDisplay();
	      this.visibleImages = [];
	    }

	    /**
	     * Same as unload() but does not remove internal references to visible images.
	     */
	  }, {
	    key: 'clearDisplay',
	    value: function clearDisplay() {
	      _d32['default'].select("." + _constantsCommonSVGClasses2['default'].OBJECTS_CONTAINER_CLASS).selectAll("*").remove();
	      _d32['default'].select("." + _constantsCommonSVGClasses2['default'].ACTIVE_TOOL_DISPLAY_CLASS).selectAll("*").remove();
	    }

	    /**
	     * Set this.metadatastore
	     * @param store MetadataStore
	     */
	  }, {
	    key: 'setMetadataStore',
	    value: function setMetadataStore(store) {
	      this.metadatastore = store;
	    }

	    /**
	     * Sets the benchstore
	     * @param store LabBenchStore
	     */
	  }, {
	    key: 'setLabBenchStore',
	    value: function setLabBenchStore(store) {
	      this.benchstore = store;
	    }

	    /**
	     * Sets the viewstore
	     * @param store ViewStore
	     */
	  }, {
	    key: 'setViewStore',
	    value: function setViewStore(store) {
	      this.viewstore = store;
	    }

	    /**
	     * Sets the modestore
	     * @param store ModeStore
	     */
	  }, {
	    key: 'setModeStore',
	    value: function setModeStore(store) {
	      this.modestore = store;
	    }

	    /**
	     * Resets lab bench coordinate data
	     */
	  }, {
	    key: 'newLabBench',
	    value: function newLabBench() {
	      this.displayData.xMin = Number.POSITIVE_INFINITY;
	      this.displayData.xMax = Number.NEGATIVE_INFINITY;
	      this.displayData.yMin = Number.POSITIVE_INFINITY;
	      this.displayData.yMax = Number.NEGATIVE_INFINITY;
	    }

	    /**
	     * Loads the default View of the current Set
	     * @param viewId (not used)
	     */
	  }, {
	    key: 'loadView',
	    value: function loadView(viewId) {
	      //this.setView = viewId;
	      this.drawChildEntities();
	    }

	    /**
	     * Changes viewport to fit all images in it.
	     */
	  }, {
	    key: 'fitViewportToData',
	    value: function fitViewportToData() {
	      var view = this.viewstore.getView();

	      _utilsD3ViewUtils2['default'].zoomToObjectBySelector('.' + _constantsCommonSVGClasses2['default'].ROOT_CLASS, view);
	    }

	    /**
	     * Updates viewport to the given parameters (x,y coordinates and zoom-factor scale). Animates transition if requested.
	     * @param x
	     * @param y
	     * @param scale
	     * @param animate
	     */
	  }, {
	    key: 'updateViewport',
	    value: function updateViewport(x, y, scale, animate) {
	      if (x && _Number$isFinite(x)) {
	        this.view.x = x;
	      }
	      if (y && _Number$isFinite(y)) {
	        this.view.y = y;
	      }
	      if (scale && _Number$isFinite(scale)) {
	        this.view.scale = scale;
	      }

	      this.viewportTransition(animate);
	    }

	    /**
	     * Displays a ghost image corresponding to the provided data (for example when dragging image from Inbox to View)
	     * @param data
	     */
	  }, {
	    key: 'displayShadow',
	    value: function displayShadow(data) {
	      if (_d32['default'].select('#SHADOW').empty()) {
	        _d32['default'].select('svg').attr('pointer-events', 'all').on('dragover', function () {
	          D3FreeSpace.updateShadowPosition();
	        });

	        window.addEventListener('dragend', this._onEndDragFromInbox);

	        _d32['default'].select('.' + _constantsCommonSVGClasses2['default'].OBJECTS_CONTAINER_CLASS).append('g').attr('id', 'SHADOW').datum(data).append('svg:image').attr("x", 0).attr("y", 0).attr("height", function (d) {
	          return d.displayHeight;
	        }).attr("width", function (d) {
	          return d.displayWidth;
	        })
	        //.attr("xlink:href", d => d.thumbnail)
	        .style('opacity', 0.3);

	        var appendShadowCallback = function appendShadowCallback(image) {
	          _d32['default'].select('#SHADOW').select('image').attr("xlink:href", image.src);
	        };

	        window.setTimeout(_actionsViewActionsJs2['default'].loadImage(data.thumbnail, appendShadowCallback.bind(this)), 10);
	      }
	    }

	    /**
	     * Removes the ghost image created by displayShadow()
	     */
	  }, {
	    key: 'hideShadow',
	    value: function hideShadow() {
	      _d32['default'].select('#SHADOW').remove();
	      window.removeEventListener('dragend', this._onEndDragFromInbox);
	      _d32['default'].select('svg').on('dragover', null).on('dragend', null);
	    }

	    /**
	     * Removes the ghost image created by displayShadow() and places the actual image in the View at the location of the ghost image
	     */
	  }, {
	    key: 'fixShadow',
	    value: function fixShadow() {
	      var shadow = _d32['default'].select('#SHADOW');
	      var data = shadow.datum();
	      var image = shadow.select('image');
	      var x = parseInt(image.attr('x')) + 50;
	      var y = parseInt(image.attr('y')) + 100;
	      //console.log('setting shadow to location (' + x + ',' + y + ')');
	      _utilsServiceMethods2['default'].place(this.benchstore.getActiveViewId(), data.uid, x, y);
	      this.hideShadow();
	    }

	    //
	    // Internal methods. These are usually not called from outside this component
	    //

	    /**
	     * Updates position of the shadow created by displayShadow() to the current mouse coordinates.
	     */
	  }, {
	    key: 'updateVisibleImages',

	    /**
	     * Redraws SVG element with its visible images and elements (which is recalculated when this function is called).
	     */
	    value: function updateVisibleImages() {
	      // console.log("updateVisibleImages");
	      var storeview = this.viewstore.getView();
	      var view = {
	        xMin: -storeview.left / storeview.scale,
	        xMax: (-storeview.left + window.innerWidth) / storeview.scale,
	        yMin: -storeview.top / storeview.scale,
	        yMax: (-storeview.top + window.innerHeight) / storeview.scale
	      };

	      var viewData = this.buildDisplayDataElement(view);
	      if (!viewData) {
	        return;
	      } else {
	        _utilsD3ViewUtils2['default'].drawBenchData(viewData.displays, this);
	      }
	      // Calculate visible images and load if necessary
	      // console.log('before=' + JSON.stringify(this.visibleImages));
	      var visibleImagesAfter = [];
	      var self = this;

	      _d32['default'].selectAll('.' + _constantsCommonSVGClasses2['default'].CHILD_GROUP_CLASS).each(function (d) {
	        if (_utilsD3ViewUtils2['default'].isElementInView(d, view)) {
	          var url = _utilsD3ViewUtils2['default'].getImageUrlFromVisibleProportion(d, view);
	          visibleImagesAfter.push(url);
	          if (!_.contains(self.visibleImages, url)) {
	            //console.log('loading image ' + url);
	            window.setTimeout(_actionsViewActionsJs2['default'].loadImage.bind(null, url, _utilsD3ViewUtils2['default'].displayLoadedImage.bind(null, d)), 10);
	          }
	        }
	      });

	      this.visibleImages = visibleImagesAfter;
	    }

	    /**
	     * Transition to the new viewport, animating the transition if necessary
	     * @param animate Boolean
	     */
	  }, {
	    key: 'viewportTransition',
	    value: function viewportTransition(animate) {
	      this.updateVisibleImages();

	      this.zoom.translate([this.view.x, this.view.y]);
	      this.zoom.scale(this.view.scale);

	      if (animate) {
	        _d32['default'].select('.' + _constantsCommonSVGClasses2['default'].ROOT_CLASS).transition().duration(1000).ease('linear').attr('transform', 'translate(' + this.view.x + "," + this.view.y + ")scale(" + this.view.scale + ')');
	      } else {
	        _d32['default'].select('.' + _constantsCommonSVGClasses2['default'].ROOT_CLASS).attr('transform', 'translate(' + this.view.x + "," + this.view.y + ")scale(" + this.view.scale + ')');
	      }
	    }

	    /**
	     * Draw child entities on the lab bench and fit viewport to all drawn entities. Called when initial load finishes.
	     */
	  }, {
	    key: 'drawChildEntities',
	    value: function drawChildEntities() {
	      var viewData = this.redrawChildEntities();

	      if (this.viewId != this.benchstore.getActiveViewId()) {
	        this.viewId = this.benchstore.getActiveViewId();
	        this.fitViewportToData();
	      }
	    }

	    /**
	     * Redraw all child entities without changing the viewport.
	     * @returns Object containing all drawn entities
	     */
	  }, {
	    key: 'redrawChildEntities',
	    value: function redrawChildEntities() {
	      var viewData = this.buildDisplayDataElement();
	      if (!viewData) {
	        return null;
	      }
	      _utilsD3ViewUtils2['default'].drawBenchData(viewData.displays, this);

	      return viewData;
	    }

	    /**
	     * Builds an object which contains all entities visible in provided viewport (and all their displayable sub-entities such as spatial anchors)
	     * @param d3FreeSpaceViewport Object (optional) containing the size of the viewport (xMin, xMax, yMin, yMax). If no data provided, will use the current viewport data
	     * @returns Object containing all entities displayed in View (excluding those outside the current viewport)
	     */
	  }, {
	    key: 'buildDisplayDataElement',
	    value: function buildDisplayDataElement(d3FreeSpaceViewport) {
	      var _this2 = this;

	      var viewData = this.benchstore.getActiveViewData();

	      var view = d3FreeSpaceViewport;
	      if (!d3FreeSpaceViewport) {
	        var storeview = this.viewstore.getView();
	        view = {
	          xMin: -storeview.left / storeview.scale,
	          xMax: (-storeview.left + storeview.width) / storeview.scale,
	          yMin: -storeview.top / storeview.scale,
	          yMax: (-storeview.top + storeview.height) / storeview.scale
	        };
	      }
	      //console.log(JSON.stringify(viewData));
	      if (viewData) {
	        var _loop = function (j) {
	          var posEntity = viewData.displays[j];
	          //console.log('posEntity =' +JSON.stringify(posEntity));
	          if (posEntity.x != null && posEntity.y != null) {
	            _this2.displayData.xMin = Math.min(_this2.displayData.xMin, posEntity.x - 60);
	            _this2.displayData.yMin = Math.min(_this2.displayData.yMin, posEntity.y - 60);

	            _this2.displayData.xMax = Math.max(posEntity.displayWidth + posEntity.x + 20, _this2.displayData.xMax);
	            _this2.displayData.yMax = Math.max(posEntity.displayHeight + posEntity.y + 20, _this2.displayData.yMax);
	          }
	          var entityMetadata = _this2.benchstore.getData(posEntity.entity);
	          //console.log('entityMetadata =' +JSON.stringify(entityMetadata));
	          if (entityMetadata) {
	            _Object$keys(entityMetadata).forEach(function (key) {
	              // viewData.displays[j][key] = entityMetadata[key];
	              posEntity[key] = entityMetadata[key];
	            });

	            if (_utilsD3ViewUtils2['default'].isElementInView(posEntity, view) && posEntity.displayHeight / (view.yMax - view.yMin) > 0.4) {
	              // console.log("Entity is visible: " + posEntity.uid);
	              for (var i = posEntity.tois.length; i > -1; --i) {
	                if (_this2.benchstore.getData(posEntity.tois[i])) {
	                  posEntity.tois[i] = _this2.benchstore.getData(posEntity.tois[i]);
	                } else {
	                  posEntity.tois.splice(i, 1);
	                }
	              }

	              for (var i = posEntity.pois.length; i > -1; --i) {
	                if (_this2.benchstore.getData(posEntity.pois[i])) {
	                  posEntity.pois[i] = _this2.benchstore.getData(posEntity.pois[i]);
	                } else {
	                  posEntity.pois.splice(i, 1);
	                }
	              }

	              for (var i = posEntity.rois.length; i > -1; --i) {
	                if (_this2.benchstore.getData(posEntity.rois[i])) {
	                  posEntity.rois[i] = _this2.benchstore.getData(posEntity.rois[i]);
	                } else {
	                  posEntity.rois.splice(i, 1);
	                }
	              }
	              for (var i = posEntity.aois.length; i > -1; --i) {
	                if (_this2.benchstore.getData(posEntity.aois[i])) {
	                  posEntity.aois[i] = _this2.benchstore.getData(posEntity.aois[i]);
	                } else {
	                  posEntity.aois.splice(i, 1);
	                }
	              }
	            } else {
	              // console.log("Entity is not visible: " + posEntity.uid);
	              posEntity.tois = [];
	              posEntity.rois = [];
	              posEntity.aois = [];
	              posEntity.pois = [];
	            }
	          } else {
	            // No image data available for this, might mean the image was deleted from set but not from view
	            viewData.displays.splice(j, 1);
	          }
	        };

	        for (var j = viewData.displays.length - 1; j >= 0; --j) {
	          _loop(j);
	        }
	        //console.log(JSON.stringify(viewData));
	        return viewData;
	      }

	      return null;
	    }

	    /**
	     * Stop displaying the "loading..." text. Will not stop the actual background loading.
	     */
	  }, {
	    key: 'loadImage',

	    /**
	     * Load an image in the background and display it when done loading.
	     * @param elt Object data element corresponding to the image to load
	     */
	    value: function loadImage(elt) {
	      var storeview = this.viewstore.getView();
	      var view = {
	        xMin: -storeview.left / storeview.scale,
	        xMax: (-storeview.left + storeview.width) / storeview.scale,
	        yMin: -storeview.top / storeview.scale,
	        yMax: (-storeview.top + storeview.height) / storeview.scale
	      };
	      // let source = D3ViewUtils.getImageUrlFromQuality(elt, ViewConstants.imageQuality.Low);
	      var source = _utilsD3ViewUtils2['default'].getImageUrlFromVisibleProportion(elt, view);

	      window.setTimeout(_actionsViewActionsJs2['default'].loadImage.bind(null, source, _utilsD3ViewUtils2['default'].displayLoadedImage.bind(null, elt)), 10);
	    }

	    /**
	     * Returns all objects at the current click location
	     * @param coordinatesFromD3Origin Array [x,y] coordinates of the click location in D3 coordinate space
	     * @returns {{images: Array, aois: Array, pois: Array, rois: Array, tois: Array}}
	     */
	  }, {
	    key: 'findObjectsAtCoords',
	    value: function findObjectsAtCoords(coordinatesFromD3Origin) {
	      var objects = {
	        images: [],
	        aois: [],
	        pois: [],
	        rois: [],
	        tois: []
	      };
	      if (!this.benchstore) {
	        // Component not even mounted yet
	        console.error("Visualisation component not mounted");
	        return objects;
	      }
	      var benchstore = this.benchstore;
	      var coordinatesFromWindow = [coordinatesFromD3Origin[0] + this.viewstore.getView().leftFromWindow, coordinatesFromD3Origin[1] + this.viewstore.getView().topFromWindow];

	      // Find images, use images to narrow search
	      var groups = _d32['default'].selectAll('.' + _constantsCommonSVGClasses2['default'].CHILD_GROUP_CLASS);
	      groups.each(function (d, i) {
	        var group = _d32['default'].select(this);
	        var box = group.node().getBoundingClientRect();

	        if (_utilsGlobals2['default'].isCoordsInBoundingBox(coordinatesFromWindow, box)) {
	          objects.images.push(d);
	          // Process objects in sheet
	          group.selectAll('.' + _constantsCommonSVGClasses2['default'].ROI_CLASS).each(function (d) {
	            var roi = _d32['default'].select(this).node().getBoundingClientRect();
	            if (_utilsGlobals2['default'].isCoordsInBoundingBox(coordinatesFromWindow, roi)) {
	              objects.rois.push(d);
	            }
	          });

	          group.selectAll('.' + _constantsCommonSVGClasses2['default'].PATH_CLASS).each(function (d) {
	            var path = _d32['default'].select(this).node().getBoundingClientRect();
	            if (_utilsGlobals2['default'].isCoordsInBoundingBox(coordinatesFromWindow, path)) {
	              objects.tois.push(d);
	            }
	          });

	          group.selectAll('.' + _constantsCommonSVGClasses2['default'].POI_CLASS).each(function (d) {
	            var poi = _d32['default'].select(this).node().getBoundingClientRect();
	            if (_utilsGlobals2['default'].isCoordsInBoundingBox(coordinatesFromWindow, poi)) {
	              objects.pois.push(d);
	            }
	          });

	          group.selectAll('.' + _constantsCommonSVGClasses2['default'].AOI_CLASS).each(function (d) {
	            var aoi = _d32['default'].select(this).node().getBoundingClientRect();
	            if (_utilsGlobals2['default'].isCoordsInBoundingBox(coordinatesFromWindow, aoi)) {
	              objects.aois.push(d);
	            }
	          });
	        }
	      });
	      return objects;
	    }

	    /**
	     * Callback to be used when the user performs a left click in the lab bench. Computes all objects at click location and sends this data to the metadata display, annotation list, tag cloud, and properties pane. Also changes minimap if necessary.
	     * @param self D3FreeSpace context ('this' context is taken by click event data)
	     */
	  }, {
	    key: 'leftClick',
	    value: function leftClick(self) {
	      var coords = _d32['default'].mouse(this);
	      var objectsAtEvent = self.findObjectsAtCoords.call(self, coords);
	      //console.log(JSON.stringify(objectsAtEvent));
	      var inspectorObjects = [];
	      var getIds = function getIds(data) {
	        return data.uid;
	      };
	      Array.prototype.push.apply(inspectorObjects, objectsAtEvent.pois.map(getIds));
	      Array.prototype.push.apply(inspectorObjects, objectsAtEvent.aois.map(getIds));
	      Array.prototype.push.apply(inspectorObjects, objectsAtEvent.tois.map(getIds));
	      Array.prototype.push.apply(inspectorObjects, objectsAtEvent.rois.map(getIds));
	      if (inspectorObjects.length == 0) {
	        Array.prototype.push.apply(inspectorObjects, objectsAtEvent.images.map(getIds));
	      }
	      if (inspectorObjects.length == 0 && this.benchstore) {
	        inspectorObjects.push(this.benchstore.getActiveSetId());
	      }

	      //console.log('inspectorObjects=' + JSON.stringify(inspectorObjects));

	      window.setTimeout(_actionsInspectorActions2['default'].setInspectorData.bind(null, inspectorObjects), 10);

	      if (objectsAtEvent.images.length > 0) {
	        window.setTimeout(_actionsViewActionsJs2['default'].changeSelection.bind(null, objectsAtEvent.images[objectsAtEvent.images.length - 1].link, { type: _constantsTypeConstants2['default'].image }), 10);
	      }

	      window.setTimeout(_actionsInspectorActions2['default'].setSetInAnnotationList.bind(null, self.benchstore.getActiveSetId()), 10);
	      if (objectsAtEvent.images.length > 0) {
	        window.setTimeout(_actionsInspectorActions2['default'].setImageInAnnotationList.bind(null, objectsAtEvent.images[0].uid), 10);
	      }

	      _d32['default'].event.preventDefault();
	    }

	    /**
	     * Callback to open the context menu at this click location. Computes objects at click for context menu.
	     * @param self D3FreeSpace
	     */
	  }, {
	    key: 'contextMenu',
	    value: function contextMenu(self) {
	      if (_d32['default'].event.defaultPrevented) {
	        return;
	      }
	      _d32['default'].event.preventDefault();
	      var coords = _d32['default'].mouse(this);
	      var objectsAtEvent = self.findObjectsAtCoords(coords);
	      var contextMenuObjects = {
	        images: [],
	        aois: [],
	        rois: [],
	        tois: [],
	        pois: []
	      };
	      var buildContextMenuElement = function buildContextMenuElement(elt) {
	        return {
	          parent: self.viewId,
	          link: elt.link,
	          data: {
	            uid: elt.uid
	          }
	        };
	      };
	      Array.prototype.push.apply(contextMenuObjects.images, objectsAtEvent.images.map(buildContextMenuElement));
	      Array.prototype.push.apply(contextMenuObjects.pois, objectsAtEvent.pois.map(buildContextMenuElement));
	      Array.prototype.push.apply(contextMenuObjects.rois, objectsAtEvent.rois.map(buildContextMenuElement));
	      Array.prototype.push.apply(contextMenuObjects.aois, objectsAtEvent.aois.map(buildContextMenuElement));
	      Array.prototype.push.apply(contextMenuObjects.tois, objectsAtEvent.tois.map(buildContextMenuElement));
	      //console.log(JSON.stringify(objectsAtEvent));
	      window.setTimeout(_actionsMenuActions2['default'].displayContextMenu.bind(null, _d32['default'].event.clientX, _d32['default'].event.clientY, contextMenuObjects), 10);
	    }
	  }], [{
	    key: 'updateShadowPosition',
	    value: function updateShadowPosition() {
	      var container = _d32['default'].select('.' + _constantsCommonSVGClasses2['default'].OBJECTS_CONTAINER_CLASS);
	      var coords = _d32['default'].mouse(container.node());
	      //console.log('new shadow coords=' + JSON.stringify(coords));
	      _d32['default'].select('#SHADOW').select('image').attr('x', coords[0] - 50).attr('y', coords[1] - 100);
	    }

	    /**
	     * Initialize minimap to the given image UID. If image is not loaded yet, wait 500ms and try again.
	     * @param id
	     */
	  }, {
	    key: 'sendToMinimap',
	    value: function sendToMinimap(id) {
	      var image = _d32['default'].select('#IMAGE-' + id);
	      if (!image.empty()) {
	        var url = image.attr("xlink:href");
	        var width = image.datum().displayWidth;
	        var height = image.datum().displayHeight;
	        var x = image.datum().x;
	        var y = image.datum().y;
	        if (url && width != null && height != null && x != null && y != null) {
	          _actionsMinimapActionsJs2['default'].initMinimap(url, width, height, x, y);
	          return;
	        }
	      }
	      window.setTimeout((function (id) {
	        return function () {
	          D3FreeSpace.sendToMinimap(id);
	        };
	      })(id), 500);
	    }
	  }, {
	    key: 'endLoad',
	    value: function endLoad() {
	      window.setTimeout(function () {
	        _actionsViewActionsJs2['default'].changeLoaderState(null);
	      }, 20);
	    }
	  }]);

	  return D3FreeSpace;
	})();

	exports['default'] = D3FreeSpace;
	module.exports = exports['default'];

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(304), __esModule: true };

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(305);
	module.exports = __webpack_require__(15).Number.isFinite;

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	// 20.1.2.2 Number.isFinite(number)
	var $export   = __webpack_require__(13)
	  , _isFinite = __webpack_require__(14).isFinite;

	$export($export.S, 'Number', {
	  isFinite: function isFinite(it){
	    return typeof it == 'number' && _isFinite(it);
	  }
	});

/***/ },
/* 306 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Context menu in the form of an orb.
	 *
	 * Created by dmitri on 26/02/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _optionsOrbOptions = __webpack_require__(264);

	var _optionsOrbOptions2 = _interopRequireDefault(_optionsOrbOptions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _actionsMenuActions = __webpack_require__(296);

	var _actionsMenuActions2 = _interopRequireDefault(_actionsMenuActions);

	var _constantsTypeConstants = __webpack_require__(263);

	var _constantsTypeConstants2 = _interopRequireDefault(_constantsTypeConstants);

	var _constantsViewConstants = __webpack_require__(197);

	var _constantsViewConstants2 = _interopRequireDefault(_constantsViewConstants);

	var _toolsEditorsEditPoI = __webpack_require__(308);

	var _toolsEditorsEditPoI2 = _interopRequireDefault(_toolsEditorsEditPoI);

	var _utilsD3ViewUtils = __webpack_require__(253);

	var _utilsD3ViewUtils2 = _interopRequireDefault(_utilsD3ViewUtils);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var OrbalContextMenu = (function (_React$Component) {
	  _inherits(OrbalContextMenu, _React$Component);

	  function OrbalContextMenu(props) {
	    var _this = this;

	    _classCallCheck(this, OrbalContextMenu);

	    _get(Object.getPrototypeOf(OrbalContextMenu.prototype), 'constructor', this).call(this, props);

	    this.menuSize = 120;
	    this.orbSize = 30;
	    this.long = (this.menuSize - this.orbSize) / 2;
	    this.short = this.long * (1 - 1 / Math.sqrt(2));
	    this.animDuration = '0.2s';

	    this.orbCurve = this.orbSize / 2;

	    this.menuContainerStyle = {
	      zIndex: _constantsViewConstants2['default'].zIndices.contextMenu,
	      position: 'fixed',
	      display: 'block',
	      visibility: 'hidden',
	      height: this.menuSize + 'px',
	      width: this.menuSize + 'px',
	      borderRadius: this.menuSize / 2 + 'px',
	      backgroundColor: 'rgba(127,127,127,0.3)'
	    };

	    this.resetOrbs();

	    this.displayText = '';

	    this.state = OrbalContextMenu.getInitialState();

	    this._onContextMenuChange = function () {
	      var fetchData = function fetchData() {
	        return _this.setContextMenuData(_this.props.menustore.getElements());
	      };
	      return fetchData.apply(_this);
	    };

	    this._onActiveItemMetadataUpdated = function () {
	      var activateMenu = function activateMenu() {
	        return _this.setState({ active: true });
	      };
	      return activateMenu.apply(_this);
	    };

	    this.closeDelay = null;
	  }

	  _createClass(OrbalContextMenu, [{
	    key: 'resetOrbs',
	    value: function resetOrbs() {
	      this.orbNWStyle = {
	        position: 'absolute',
	        top: this.long,
	        left: this.long,
	        height: this.orbSize + 'px',
	        width: this.orbSize + 'px',
	        //margin: '0px 25px 25px 0px',
	        display: 'flex',
	        justifyContent: 'center',
	        alignItems: 'center',
	        alignContent: 'center',
	        borderRadius: this.orbCurve + 'px',
	        WebkitTransition: 'top ' + this.animDuration + ' linear 0s, left ' + this.animDuration + ' linear 0s',
	        transition: 'top ' + this.animDuration + ' linear 0s, left ' + this.animDuration + ' linear 0s',
	        backgroundColor: '#C3FF68'
	        //background: 'radial-gradient(circle at 20px 20px, #00FF22, #000)'
	      };
	      this.orbNStyle = {
	        position: 'absolute',
	        top: this.long,
	        left: this.long,
	        height: this.orbSize + 'px',
	        width: this.orbSize + 'px',
	        //margin: '0px 25px 25px 25px',
	        display: 'flex',
	        justifyContent: 'center',
	        alignItems: 'center',
	        alignContent: 'center',
	        borderRadius: this.orbCurve + 'px',
	        WebkitTransition: 'top ' + this.animDuration + ' linear 0s, left ' + this.animDuration + ' linear 0s',
	        transition: 'top ' + this.animDuration + ' linear 0s, left ' + this.animDuration + ' linear 0s',
	        backgroundColor: 'grey'
	        //background: 'radial-gradient(circle at 20px 20px, #FAEBD7, #000)'
	      };
	      this.orbNEStyle = {
	        position: 'absolute',
	        top: this.long,
	        right: this.long,
	        height: this.orbSize + 'px',
	        width: this.orbSize + 'px',
	        //margin: '0px 0px 25px 25px',
	        display: 'flex',
	        justifyContent: 'center',
	        alignItems: 'center',
	        alignContent: 'center',
	        borderRadius: this.orbCurve + 'px',
	        WebkitTransition: 'top ' + this.animDuration + ' linear 0s, right ' + this.animDuration + ' linear 0s',
	        transition: 'top ' + this.animDuration + ' linear 0s, right ' + this.animDuration + ' linear 0s',
	        backgroundColor: '#FF9999'
	        //background: 'radial-gradient(circle at 20px 20px, #DEB887, #000)'
	      };

	      this.orbWStyle = {
	        position: 'absolute',
	        top: this.long,
	        left: this.long,
	        height: this.orbSize + 'px',
	        width: this.orbSize + 'px',
	        //margin: '25px 25px 25px 0px',
	        display: 'flex',
	        justifyContent: 'center',
	        alignItems: 'center',
	        alignContent: 'center',
	        borderRadius: this.orbCurve + 'px',
	        WebkitTransition: 'top ' + this.animDuration + ' linear 0s, left ' + this.animDuration + ' linear 0s',
	        transition: 'top ' + this.animDuration + ' linear 0s, left ' + this.animDuration + ' linear 0s',
	        backgroundColor: '#A0D4A4'
	        //background: 'radial-gradient(circle at 20px 20px, #6495ED, #000)'
	      };
	      this.orbCStyle = {
	        position: 'absolute',
	        top: -30,
	        left: -20,
	        //height: this.orbSize + 'px',
	        maxHeight: '20px',
	        width: this.menuSize + 40,
	        maxWidth: this.menuSize + 40,
	        //width: this.orbSize + 'px',
	        //margin: '25px 25px 25px 25px',
	        display: 'flex',
	        justifyContent: 'center',
	        alignItems: 'center',
	        alignContent: 'center',
	        //borderRadius: this.orbCurve + 'px',
	        //WebkitTransition: 'top 1s linear 0s, left 1s linear 0s',
	        //transition: 'top 1s linear 0s, left 1s linear 0s',
	        backgroundColor: 'rgba(100,100,100, 0.7)',
	        color: 'white'
	      };
	      this.orbEStyle = {
	        position: 'absolute',
	        top: this.long,
	        right: this.long,
	        height: this.orbSize + 'px',
	        width: this.orbSize + 'px',
	        //margin: '25px 0px 25px 25px',
	        display: 'flex',
	        justifyContent: 'center',
	        alignItems: 'center',
	        alignContent: 'center',
	        borderRadius: this.orbCurve + 'px',
	        WebkitTransition: 'top ' + this.animDuration + ' linear 0s, right ' + this.animDuration + ' linear 0s',
	        transition: 'top ' + this.animDuration + ' linear 0s, right ' + this.animDuration + ' linear 0s',
	        backgroundColor: '#A0D4A4'
	        //background: 'radial-gradient(circle at 20px 20px, #FFD700, #000)'
	      };

	      this.orbSWStyle = {
	        position: 'absolute',
	        bottom: this.long,
	        left: this.long,
	        height: this.orbSize + 'px',
	        width: this.orbSize + 'px',
	        //margin: '25px 25px 0px 0px',
	        display: 'flex',
	        justifyContent: 'center',
	        alignItems: 'center',
	        alignContent: 'center',
	        borderRadius: this.orbCurve + 'px',
	        WebkitTransition: 'bottom ' + this.animDuration + ' linear 0s, left ' + this.animDuration + ' linear 0s',
	        transition: 'bottom ' + this.animDuration + ' linear 0s, left ' + this.animDuration + ' linear 0s',
	        backgroundColor: '#C0ADDB'
	        //background: 'radial-gradient(circle at 20px 20px, #FFA500, #000)'
	      };
	      this.orbSStyle = {
	        position: 'absolute',
	        bottom: this.long,
	        left: this.long,
	        height: this.orbSize + 'px',
	        width: this.orbSize + 'px',
	        //margin: '25px 25px 0px 25px',
	        display: 'flex',
	        justifyContent: 'center',
	        alignItems: 'center',
	        alignContent: 'center',
	        borderRadius: this.orbCurve + 'px',
	        WebkitTransition: 'bottom ' + this.animDuration + ' linear 0s, left ' + this.animDuration + ' linear 0s',
	        transition: 'bottom ' + this.animDuration + ' linear 0s, left ' + this.animDuration + ' linear 0s',
	        backgroundColor: '#F14D4C'
	        //background: 'radial-gradient(circle at 20px 20px, #8B0000, #000)'
	      };
	      this.orbSEStyle = {
	        position: 'absolute',
	        bottom: this.long,
	        right: this.long,
	        height: this.orbSize + 'px',
	        width: this.orbSize + 'px',
	        //margin: '25px 0px 0px 25px',
	        display: 'flex',
	        justifyContent: 'center',
	        alignItems: 'center',
	        alignContent: 'center',
	        borderRadius: this.orbCurve + 'px',
	        WebkitTransition: 'bottom ' + this.animDuration + ' linear 0s, right ' + this.animDuration + ' linear 0s',
	        transition: 'bottom ' + this.animDuration + ' linear 0s, right ' + this.animDuration + ' linear 0s',
	        backgroundColor: '#A1BEE6'
	        //background: 'radial-gradient(circle at 20px 20px, #EE82EE, #000)'
	      };

	      this.northWestAction = null;
	      this.northAction = null;
	      this.northEastAction = null;
	      this.southWestAction = null;
	      this.southAction = null;
	      this.southEastAction = null;

	      this.northWestIcon = '';
	      this.northIcon = '';
	      this.northEastIcon = '';
	      this.southWestIcon = '';
	      this.southIcon = '';
	      this.southEastIcon = '';
	    }
	  }, {
	    key: 'setContextMenuData',
	    value: function setContextMenuData(elements) {
	      // console.log(JSON.stringify(elements));
	      //elements.unshift({type: 'workbench', id: this.props.entitystore.getSetId()});
	      var arrElements = [];
	      if (elements.images) {
	        for (var i = 0; i < elements.images.length; ++i) {
	          arrElements.push(elements.images[i]);
	        }
	      }
	      //arrElements.push(elements.images);
	      if (elements.pois) {
	        for (i = 0; i < elements.pois.length; ++i) {
	          arrElements.push(elements.pois[i]);
	        }
	      }
	      if (elements.tois) {
	        for (i = 0; i < elements.tois.length; ++i) {
	          arrElements.push(elements.tois[i]);
	        }
	      }
	      if (elements.rois) {
	        for (i = 0; i < elements.rois.length; ++i) {
	          arrElements.push(elements.rois[i]);
	        }
	      }
	      if (elements.sets) {
	        for (i = 0; i < elements.sets.length; ++i) {
	          arrElements.push(elements.sets[i]);
	        }
	      }
	      if (elements.specimens) {
	        for (i = 0; i < elements.specimens.length; ++i) {
	          arrElements.push(elements.specimens[i]);
	        }
	      }
	      //console.log(JSON.stringify(arrElements));
	      if (arrElements.length > 0) {
	        this.setState({ itemsAtCursor: arrElements });
	        this.setActiveItem(arrElements.length - 1, arrElements, false);
	      } else {
	        this.setState(OrbalContextMenu.getInitialState());
	      }
	    }
	  }, {
	    key: 'closeMenu',
	    value: function closeMenu(delay, event) {
	      //console.log('closeMenu(' + delay + ')');
	      // if(event.isPropagationStopped()) {
	      //   return;
	      // }
	      if (delay) {
	        // console.log('closeMenu with delay');
	        this.closeDelay = window.setTimeout(_actionsMenuActions2['default'].displayContextMenu.bind(null, -50, -50, []), delay);
	      } else {
	        this.setState(OrbalContextMenu.getInitialState());
	      }
	    }
	  }, {
	    key: 'cancelCloseMenu',
	    value: function cancelCloseMenu() {
	      //console.log('cancelCloseMenu');
	      if (this.closeDelay) {
	        window.clearTimeout(this.closeDelay);
	        this.closeDelay = null;
	      }
	    }
	  }, {
	    key: 'setActiveItem',
	    value: function setActiveItem(index, itemIds) {
	      var keepActive = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

	      var entity = itemIds[index];
	      var id = entity.data.uid;
	      var link = entity.link;
	      this.props.metastore.addMetadataUpdateListener(id, this._onActiveItemMetadataUpdated);

	      this.setState({ active: this.state.active && keepActive, activeItemId: id, activeItemLinkId: link, activeItemIndex: index });

	      //window.setTimeout(this._onActiveItemMetadataUpdated, 50);
	    }
	  }, {
	    key: 'previousItem',
	    value: function previousItem(event) {
	      event.stopPropagation();
	      if (this.state.activeItemIndex == 0) {
	        this.setActiveItem(this.state.itemsAtCursor.length - 1, this.state.itemsAtCursor);
	      } else {
	        this.setActiveItem(this.state.activeItemIndex - 1, this.state.itemsAtCursor);
	      }
	    }
	  }, {
	    key: 'nextItem',
	    value: function nextItem(event) {
	      event.stopPropagation();
	      if (this.state.activeItemIndex == this.state.itemsAtCursor.length - 1) {
	        this.setActiveItem(0, this.state.itemsAtCursor);
	      } else {
	        this.setActiveItem(this.state.activeItemIndex + 1, this.state.itemsAtCursor);
	      }
	    }
	  }, {
	    key: 'menuIsActivated',
	    value: function menuIsActivated() {
	      var x = this.props.menustore.getClickLocation().x;
	      var y = this.props.menustore.getClickLocation().y;
	      this.menuContainerStyle.top = y - this.menuSize / 2;
	      this.menuContainerStyle.left = x - this.menuSize / 2;
	      this.menuContainerStyle.visibility = 'visible';

	      this.orbNWStyle.top = this.short;
	      this.orbNWStyle.left = this.short;

	      this.orbNStyle.top = 0;
	      this.orbNStyle.left = this.long;

	      this.orbNEStyle.top = this.short;
	      this.orbNEStyle.right = this.short;

	      this.orbWStyle.top = this.long;
	      this.orbWStyle.left = 0;

	      this.orbEStyle.top = this.long;
	      this.orbEStyle.right = 0;

	      this.orbSWStyle.bottom = this.short;
	      this.orbSWStyle.left = this.short;

	      this.orbSStyle.bottom = 0;
	      this.orbSStyle.left = this.long;

	      this.orbSEStyle.bottom = this.short;
	      this.orbSEStyle.right = this.short;
	    }
	  }, {
	    key: 'menuIsDeactivated',
	    value: function menuIsDeactivated() {
	      //console.log('menuIsDeactivated');
	      this.menuContainerStyle.visibility = 'hidden';
	      this.menuContainerStyle.top = '-50px';
	      this.menuContainerStyle.left = '-50px';
	      this.resetOrbs();
	    }
	  }, {
	    key: 'setMenuDataByContext',
	    value: function setMenuDataByContext() {
	      if (!this.state.activeItemId) {
	        console.error('No active item in menu');
	        return;
	      }
	      var metadata = this.props.metastore.getMetadataAbout(this.state.activeItemId);
	      this.displayText = metadata.name;
	      if (!this.displayText) {
	        this.displayText = this.props.userstore.getText('namelessEntity');
	      }
	      switch (metadata.type) {
	        case _constantsTypeConstants2['default'].point:
	          this.displayText = '(PoI) ' + this.displayText;
	          this.northWestAction = _toolsEditorsEditPoI2['default'].startEdit.bind(null, metadata);
	          this.northAction = _utilsD3ViewUtils2['default'].zoomToObject.bind(null, metadata, this.props.benchstore, this.props.viewstore.getView());
	          this.northEastAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          this.southWestAction = _optionsOrbOptions2['default'].showMetadata.bind(null, metadata);
	          if (metadata.deletable) {
	            this.southAction = _optionsOrbOptions2['default'].remove.bind(null, metadata, function (err) {
	              console.error(err);
	            }, function (res) {
	              //MetadataActions.updateLabBenchFrom();
	            });

	            this.southEastAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          }

	          this.northWestIcon = 'edit';
	          this.northIcon = 'eye';
	          this.northEastIcon = 'users';
	          this.southWestIcon = 'info';
	          this.orbNEStyle.visibility = 'hidden';
	          this.orbSWStyle.visibility = 'hidden';
	          this.orbSEStyle.visibility = 'hidden';
	          if (metadata.deletable) {
	            this.southIcon = 'trash';
	            this.southEastIcon = 'setting';
	          } else {
	            this.orbSStyle.visibility = 'hidden';
	          }

	          break;
	        case _constantsTypeConstants2['default'].trail:
	          this.displayText = '(ToI) ' + this.displayText;
	          this.northWestAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          this.northAction = _utilsD3ViewUtils2['default'].zoomToObject.bind(null, metadata, this.props.benchstore, this.props.viewstore.getView());
	          this.northEastAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          this.southWestAction = _optionsOrbOptions2['default'].showMetadata.bind(null, metadata);
	          if (metadata.deletable) {
	            this.southAction = _optionsOrbOptions2['default'].remove.bind(null, metadata, function (err) {
	              console.error(err);
	            }, function (res) {
	              //MetadataActions.updateLabBenchFrom();
	            });
	            this.southEastAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          }

	          this.northWestIcon = 'edit';
	          this.northIcon = 'eye';
	          this.northEastIcon = 'users';
	          this.southWestIcon = 'info';
	          this.orbNEStyle.visibility = 'hidden';
	          this.orbSWStyle.visibility = 'hidden';
	          this.orbSEStyle.visibility = 'hidden';
	          if (metadata.deletable) {
	            this.southIcon = 'trash';
	            this.southEastIcon = 'setting';
	          } else {
	            this.orbSStyle.visibility = 'hidden';
	          }
	          break;
	        case _constantsTypeConstants2['default'].region:
	          this.displayText = '(RoI) ' + this.displayText;
	          this.northWestAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          this.northAction = _utilsD3ViewUtils2['default'].zoomToObject.bind(null, metadata, this.props.benchstore, this.props.viewstore.getView());
	          this.northEastAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          this.southWestAction = _optionsOrbOptions2['default'].showMetadata.bind(null, metadata);
	          if (metadata.deletable) {
	            this.southAction = _optionsOrbOptions2['default'].remove.bind(null, metadata, function (err) {
	              console.error(err);
	            }, function (res) {
	              //MetadataActions.updateLabBenchFrom();
	            });

	            this.southEastAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          }

	          this.northWestIcon = 'edit';
	          this.northIcon = 'eye';
	          this.northEastIcon = 'users';
	          this.southWestIcon = 'info';
	          this.orbNEStyle.visibility = 'hidden';
	          this.orbSWStyle.visibility = 'hidden';
	          this.orbSEStyle.visibility = 'hidden';
	          if (metadata.deletable) {
	            this.southIcon = 'trash';
	            this.southEastIcon = 'setting';
	          } else {
	            this.orbSStyle.visibility = 'hidden';
	          }
	          break;
	        case _constantsTypeConstants2['default'].image:
	          this.displayText = '(Image) ' + this.displayText;
	          this.northWestAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          this.northAction = _utilsD3ViewUtils2['default'].zoomToObjectBySelector.bind(null, '#GROUP-' + this.state.activeItemLinkId, this.props.viewstore.getView());
	          this.northEastAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          this.southWestAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          if (metadata.deletable) {
	            this.southAction = _optionsOrbOptions2['default'].unlinkFromView.bind(null, { link: this.state.activeItemLinkId,
	              actionType: 'unlink-from-view' }, function (err) {
	              console.error(err);
	            }, function (res) {
	              //MetadataActions.updateLabBenchFrom();
	            });

	            this.southEastAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          }

	          this.northWestIcon = 'edit';
	          this.northIcon = 'eye';
	          this.northEastIcon = 'users';
	          this.orbNEStyle.visibility = 'hidden';
	          this.orbNWStyle.visibility = 'hidden';
	          this.orbSWStyle.visibility = 'hidden';
	          this.orbSEStyle.visibility = 'hidden';
	          //this.southWestIcon = 'info';
	          if (metadata.deletable) {
	            this.southIcon = 'trash';
	            this.southEastIcon = 'setting';
	          } else {
	            this.orbSStyle.visibility = 'hidden';
	          }

	          this.orbSWStyle.visibility = 'hidden';
	          break;
	        case 'Set':
	          this.northWestAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          this.northAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          this.northEastAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          this.southWestAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          if (metadata.deletable) {
	            this.southAction = _optionsOrbOptions2['default'].unlinkFromSet.bind(null, {
	              link: this.state.activeItemLinkId,
	              actionType: 'unlink-from-set'
	            }, function (err) {
	              console.error(err);
	            }, function (res) {
	              //MetadataActions.updateLabBenchFrom(metadata.uid);
	              //ManagerActions.reloadDisplayedSets();
	            });

	            this.southEastAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          }

	          this.northWestIcon = 'edit';
	          this.northIcon = 'eye';
	          this.northEastIcon = 'users';
	          this.southWestIcon = 'info';
	          this.southIcon = 'unlinkify';
	          this.southEastIcon = 'setting';

	          this.orbNWStyle.visibility = 'hidden';
	          this.orbNStyle.visibility = 'hidden';
	          this.orbNEStyle.visibility = 'hidden';
	          this.orbSWStyle.visibility = 'hidden';
	          if (metadata.deletable) {
	            this.orbSStyle.visibility = '';
	          } else {
	            this.orbSStyle.visibility = 'hidden';
	          }
	          this.orbSEStyle.visibility = 'hidden';
	          break;
	        case 'Specimen':
	          this.northWestAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          this.northAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          this.northEastAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          this.southWestAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          if (metadata.deletable) {
	            this.southAction = _optionsOrbOptions2['default'].unlinkFromSet.bind(null, {
	              link: this.state.activeItemLinkId,
	              actionType: 'unlink-from-set'
	            }, function (err) {
	              console.error(err);
	            }, function (res) {
	              //MetadataActions.updateLabBenchFrom(metadata.uid);
	              //ManagerActions.reloadDisplayedSets();
	            });

	            this.southEastAction = _optionsOrbOptions2['default'].notAvailable.bind(null, this.props.userstore);
	          }

	          this.northWestIcon = 'edit';
	          this.northIcon = 'eye';
	          this.northEastIcon = 'users';
	          this.southWestIcon = 'info';
	          this.southIcon = 'unlinkify';
	          this.southEastIcon = 'setting';

	          this.orbNWStyle.visibility = 'hidden';
	          this.orbNStyle.visibility = 'hidden';
	          this.orbNEStyle.visibility = 'hidden';
	          this.orbSWStyle.visibility = 'hidden';
	          if (metadata.deletable) {
	            this.orbSStyle.visibility = '';
	          } else {
	            this.orbSStyle.visibility = 'hidden';
	          }
	          this.orbSEStyle.visibility = 'hidden';
	          break;
	        //case 'workbench':
	        //  this.orbNWStyle.visibility = 'hidden';
	        //  this.orbNEStyle.visibility = 'hidden';
	        //  this.orbSWStyle.visibility = 'hidden';
	        //  this.orbSStyle.visibility = 'hidden';
	        //  this.orbSEStyle.visibility = 'hidden';
	        //
	        //  this.northIcon = 'eye';
	        //
	        //  this.northAction = ViewActions.fitView.bind(null);"
	        //
	        //  break;
	        default:
	          console.warn('No specific orbal context menu for type ' + metadata.type);
	          break;
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.menustore.addContextMenuListener(this._onContextMenuChange);
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      this.orbNWStyle.visibility = '';
	      this.orbNStyle.visibility = '';
	      this.orbNEStyle.visibility = '';
	      this.orbWStyle.visibility = '';
	      this.orbEStyle.visibility = '';
	      this.orbSWStyle.visibility = '';
	      this.orbSStyle.visibility = '';
	      this.orbSEStyle.visibility = '';

	      // console.log('this state active='+this.state.active);
	      // console.log('next state active='+nextState.active);
	      if (nextState.active && !this.state.active) {
	        // Transition from closed to open
	        this.menuIsActivated();
	        this.closeDelay = null;
	      } else if (!nextState.active && this.state.active) {
	        // Transition from open to closed
	        this.menuIsDeactivated();
	        this.closeDelay = null;
	      }

	      if (this.state.animationData) {
	        _optionsOrbOptions2['default'].stopAnimation(this.state.animationData);
	        nextState.animationData = null;
	      }

	      if (nextState.active) {
	        if (nextState.itemsAtCursor.length == 1) {
	          this.orbEStyle.visibility = 'hidden';
	          this.orbWStyle.visibility = 'hidden';
	        }

	        if (nextState.itemsAtCursor.length > 0) {
	          // Set actions according to object type
	          //var item = nextState.itemsAtCursor[nextState.activeItemIndex];
	          this.setMenuDataByContext();
	          if (nextState.activeItemLinkId) {
	            nextState.animationData = _optionsOrbOptions2['default'].beginAnimation(this.state.activeItemLinkId);
	          } else {
	            nextState.animationData = _optionsOrbOptions2['default'].beginAnimation(this.state.activeItemId);
	          }
	          //console.log(JSON.stringify(item));
	          //this.displayText = item.name;
	        } else {
	            // Right-click is on the workbench background
	            this.orbEStyle.visibility = 'hidden';
	            this.orbWStyle.visibility = 'hidden';
	          }
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (prevState.activeItemId != this.state.activeItemId && prevState.activeItemId) {
	        this.props.metastore.removeMetadataUpdateListener(prevState.activeItemId, this._onActiveItemMetadataUpdated);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.menustore.removeContextMenuListener(this._onContextMenuChange);
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { style: this.menuContainerStyle,
	          onMouseEnter: this.cancelCloseMenu.bind(this),
	          onMouseLeave: this.closeMenu.bind(this, 500),
	          onClick: this.closeMenu.bind(this, 10) },
	        _react2['default'].createElement(
	          'div',
	          { style: this.orbCStyle, className: 'ui segment' },
	          this.displayText.slice(0, 30)
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.orbNWStyle,
	            onClick: this.northWestAction },
	          _react2['default'].createElement('i', { className: 'ui ' + this.northWestIcon + '  icon' })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.orbNStyle,
	            onClick: this.northAction },
	          _react2['default'].createElement('i', { className: 'ui ' + this.northIcon + '  icon' })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.orbNEStyle,
	            onClick: this.northEastAction },
	          _react2['default'].createElement('i', { className: 'ui ' + this.northEastIcon + '  icon' })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.orbWStyle,
	            onClick: this.previousItem.bind(this) },
	          _react2['default'].createElement('i', { className: 'ui arrow left  icon' })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.orbEStyle,
	            onClick: this.nextItem.bind(this) },
	          _react2['default'].createElement('i', { className: 'ui arrow right  icon' })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.orbSWStyle,
	            onClick: this.southWestAction },
	          _react2['default'].createElement('i', { className: 'ui ' + this.southWestIcon + '  icon' })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.orbSStyle,
	            onClick: this.southAction },
	          _react2['default'].createElement('i', { className: 'ui ' + this.southIcon + '  icon' })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.orbSEStyle,
	            onClick: this.southEastAction },
	          _react2['default'].createElement('i', { className: 'ui ' + this.southEastIcon + '  icon' })
	        )
	      );
	    }
	  }], [{
	    key: 'getInitialState',
	    value: function getInitialState() {
	      return {
	        itemsAtCursor: [],
	        activeItemIndex: -1,
	        activeItemId: null,
	        activeItemLinkId: null,
	        active: false
	      };
	    }
	  }]);

	  return OrbalContextMenu;
	})(_react2['default'].Component);

	exports['default'] = OrbalContextMenu;
	module.exports = exports['default'];

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Tool for editing an existing PoI. Called from the contextual menu of the item.
	 *
	 * Created by dmitri on 13/06/16.
	 */
	'use strict';

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _constantsCommonSVGClasses = __webpack_require__(224);

	var _constantsCommonSVGClasses2 = _interopRequireDefault(_constantsCommonSVGClasses);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var EditPoI = (function () {
	  function EditPoI() {
	    _classCallCheck(this, EditPoI);
	  }

	  _createClass(EditPoI, null, [{
	    key: 'drag',
	    value: function drag() {
	      return _d32['default'].behavior.drag().origin(function (d) {
	        return d;
	      }).on('dragstart', EditPoI.startDrag).on('drag', EditPoI.moveLocal).on('dragend', EditPoI.fixPosition);
	    }
	  }, {
	    key: 'startEdit',
	    value: function startEdit(data) {
	      _d32['default'].select('#POI-' + data.uid).append('rect').datum(data).attr('id', 'POI-EDIT-' + data.uid).attr('height', 60).attr('width', 60).attr("x", -30).attr("y", -60).style('fill', 'rgba(255,255,255,0.2').style('stroke', 'rgb(255,255,255)').style('stroke-width', '1px').style('cursor', '-webkit-grab').style('cursor', 'grab').call(EditPoI.drag());

	      _d32['default'].select('.' + _constantsCommonSVGClasses2['default'].ROOT_CLASS).on('contextmenu', EditPoI.endEdit.bind(null, data));
	    }
	  }, {
	    key: 'endEdit',
	    value: function endEdit(data) {
	      _d32['default'].event.stopPropagation();
	      _d32['default'].event.preventDefault();

	      _d32['default'].select('#POI-EDIT-' + data.uid).remove();
	      _d32['default'].select('.' + _constantsCommonSVGClasses2['default'].ROOT_CLASS).on('contextmenu', null);
	    }
	  }, {
	    key: 'startDrag',
	    value: function startDrag(d) {
	      _d32['default'].event.sourceEvent.stopPropagation();
	      _d32['default'].event.sourceEvent.preventDefault();
	      _d32['default'].select('svg').style('cursor', '-webkit-grabbing').style('cursor', 'grabbing');
	    }
	  }, {
	    key: 'moveLocal',
	    value: function moveLocal(d) {
	      _d32['default'].event.sourceEvent.stopPropagation();
	      _d32['default'].event.sourceEvent.preventDefault();

	      // Get coordinates of point in image
	      var coords = _d32['default'].mouse(this.parentNode.parentNode);

	      _d32['default'].select('#POI-' + d.uid).attr('transform', 'translate(' + coords[0] + ',' + coords[1] + ')');
	    }
	  }, {
	    key: 'fixPosition',
	    value: function fixPosition(d) {
	      _d32['default'].event.sourceEvent.stopPropagation();
	      _d32['default'].event.sourceEvent.preventDefault();
	      _d32['default'].select('svg').style('cursor', '-webkit-auto').style('cursor', 'auto');

	      var coords = _d32['default'].mouse(this.parentNode.parentNode);

	      var properties = [{ key: 'x', value: coords[0] }, { key: 'y', value: coords[1] }];

	      _utilsServiceMethods2['default'].editProperties(d.uid, properties);

	      _d32['default'].select('#POI-EDIT-' + data.uid).remove();
	      _d32['default'].select('.' + _constantsCommonSVGClasses2['default'].ROOT_CLASS).on('contextmenu', null);
	    }
	  }, {
	    key: 'moveAbortedByServer',
	    value: function moveAbortedByServer() {
	      //window.setTimeout(MetadataActions.updateLabBenchFrom, 10);
	    }
	  }]);

	  return EditPoI;
	})();

	exports['default'] = EditPoI;
	module.exports = exports['default'];

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Intermediary storage for entities in a Set which are not displayed in the current active View.
	 *
	 * Created by dmitri on 03/02/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _Object$keys = __webpack_require__(285)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var Inbox = (function (_React$Component) {
	  _inherits(Inbox, _React$Component);

	  function Inbox(props) {
	    var _this = this;

	    _classCallCheck(this, Inbox);

	    _get(Object.getPrototypeOf(Inbox.prototype), 'constructor', this).call(this, props);

	    this.componentStyle = {
	      position: 'absolute',
	      left: '50px',
	      bottom: '5px',
	      maxHeight: '300px',
	      maxWidth: '160px'
	    };

	    this._onLabBenchLoaded = function () {
	      var subscribeToView = function subscribeToView() {
	        return _this.subscribeToView();
	      };
	      return subscribeToView.apply(_this);
	    };

	    this._onViewUpdated = function () {
	      var calculateUnplacedEntities = function calculateUnplacedEntities() {
	        return _this.calculateUnplacedEntities();
	      };
	      return calculateUnplacedEntities.apply(_this);
	    };

	    this._onUnplacedEntityMetadataUpdate = function (id) {
	      var addEntityMetadata = function addEntityMetadata(id) {
	        return _this.addEntityMetadata(id);
	      };
	      return addEntityMetadata.apply(_this, [id]);
	    };

	    this.state = {
	      viewId: null,
	      entityIds: [],
	      open: false,
	      active: false,
	      selected: 0,
	      content: []
	    };
	  }

	  _createClass(Inbox, [{
	    key: 'removeListeners',
	    value: function removeListeners(removeViewListener, removeEntityListeners) {
	      if (this.state.viewId && removeViewListener) {
	        this.props.metastore.removeMetadataUpdateListener(this.state.viewId, this._onLabBenchLoaded);
	      }

	      if (removeEntityListeners) {
	        for (var i = 0; i < this.state.entityIds.length; ++i) {
	          this.props.metastore.removeMetadataUpdateListener(this.state.entityIds[i], this._onUnplacedEntityMetadataUpdate);
	        }
	      }
	    }
	  }, {
	    key: 'subscribeToView',
	    value: function subscribeToView() {
	      var viewId = this.props.benchstore.getActiveViewId();
	      if (!viewId) {
	        this.removeListeners(true, true);
	        this.setState({ viewId: null, entityIds: [], open: false, active: false, content: [] });
	        return;
	      }
	      if (viewId === this.state.viewId) {
	        return;
	      }
	      this.props.metastore.addMetadataUpdateListener(viewId, this._onViewUpdated);

	      this.setState({ viewId: viewId, entityIds: [], open: false, active: false, content: [] });
	    }
	  }, {
	    key: 'calculateUnplacedEntities',
	    value: function calculateUnplacedEntities() {
	      var labBench = this.props.benchstore.getLabBench();
	      var viewData = this.props.metastore.getMetadataAbout(this.state.viewId);
	      if (!this.state.viewId) {
	        return;
	      }
	      if (!labBench.images) {
	        return;
	      }
	      if (!viewData) {
	        return;
	      }
	      this.removeListeners(false, true);

	      var imageIds = _Object$keys(labBench.images);
	      var displayedImageIds = viewData.displays.map(function (display) {
	        return display.entity;
	      });
	      var undisplayedImageIds = _.difference(imageIds, displayedImageIds);

	      this.setState({ active: false, open: false, content: [], entityIds: undisplayedImageIds });

	      // Download metadata for unplaced entities
	      for (var i = 0; i < undisplayedImageIds.length; ++i) {
	        this.props.metastore.addMetadataUpdateListener(undisplayedImageIds[i], this._onUnplacedEntityMetadataUpdate);
	        //window.setTimeout(this._onUnplacedEntityMetadataUpdate.bind(this, undisplayedImageIds[i]), 10);
	      }
	    }
	  }, {
	    key: 'addEntityMetadata',
	    value: function addEntityMetadata(id) {
	      var metadata = this.props.metastore.getMetadataAbout(id);
	      var content = JSON.parse(JSON.stringify(this.state.content));
	      content.push(metadata);
	      this.setState({ content: content });
	    }
	  }, {
	    key: 'open',
	    value: function open() {
	      this.setState({ open: true });
	    }
	  }, {
	    key: 'next',
	    value: function next() {
	      if (this.state.selected < this.state.content.length - 1) {
	        this.setState({ selected: this.state.selected + 1 });
	      } else {
	        this.setState({ selected: 0 });
	      }
	    }
	  }, {
	    key: 'previous',
	    value: function previous() {
	      if (this.state.selected > 0) {
	        this.setState({ selected: this.state.selected - 1 });
	      } else {
	        this.setState({ selected: this.state.content.length - 1 });
	      }
	    }
	  }, {
	    key: 'startDragImage',
	    value: function startDragImage(event) {
	      this.props.drag.setAction('inboxMove', this.state.content[this.state.selected]);
	    }
	  }, {
	    key: 'placeAllImagesInLine',
	    value: function placeAllImagesInLine() {
	      window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, this.props.userstore.getText('placing')), 10);

	      var view = this.props.viewstore.getView();

	      var x = (-view.left + view.width / 2) / view.scale;
	      var y = (-view.top + view.height / 2) / view.scale;
	      var viewId = this.state.viewId;
	      this.imagesToPlace = this.state.content.length;
	      this.imagesPlaced = 0;
	      for (var i = 0; i < this.state.content.length; ++i) {
	        _utilsServiceMethods2['default'].place(viewId, this.state.content[i].uid, x, y, this.imagePlaced.bind(this, viewId));

	        x = x + this.state.content[i].width + 100;
	      }
	    }
	  }, {
	    key: 'placeAllImagesInColumn',
	    value: function placeAllImagesInColumn() {
	      window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, this.props.userstore.getText('placing')), 10);

	      var data = [];
	      var x = this.props.viewstore.getView().left;
	      var y = this.props.viewstore.getView().top;
	      var viewId = this.state.viewId;
	      this.imagesToPlace = this.state.content.length;
	      this.imagesPlaced = 0;
	      for (var i = 0; i < this.state.content.length; ++i) {
	        _utilsServiceMethods2['default'].place(viewId, this.state.content[i].uid, x, y, this.imagePlaced.bind(this, viewId));
	        y = y + this.state.content[i].height + 200;
	      }
	    }
	  }, {
	    key: 'placeAllImagesInGrid',
	    value: function placeAllImagesInGrid() {
	      window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, this.props.userstore.getText('placing')), 10);

	      var x = this.props.viewstore.getView().left;
	      var y = this.props.viewstore.getView().top;
	      var maxHeight = Math.max(this.state.content[0] ? this.state.content[0].height : 0, this.state.content[1] ? this.state.content[1].height : 0, this.state.content[2] ? this.state.content[2].height : 0, this.state.content[3] ? this.state.content[3].height : 0, this.state.content[4] ? this.state.content[4].height : 0);
	      var maxWidth = Math.max(this.state.content[0] ? this.state.content[0].width : 0, this.state.content[1] ? this.state.content[1].width : 0, this.state.content[2] ? this.state.content[2].width : 0, this.state.content[3] ? this.state.content[3].width : 0, this.state.content[4] ? this.state.content[4].width : 0);
	      var viewId = this.state.viewId;
	      this.imagesToPlace = this.state.content.length;
	      this.imagesPlaced = 0;
	      for (var i = 0; i < this.state.content.length; ++i) {
	        _utilsServiceMethods2['default'].place(viewId, this.state.content[i].uid, x, y, this.imagePlaced.bind(this, viewId));

	        x = x + maxWidth + 200;
	        if ((i + 1) % 5 == 0) {
	          y = y + maxHeight + 200;
	          x = this.props.viewstore.getView().left;
	          maxHeight = Math.max(this.state.content[i + 1] ? this.state.content[i + 1].height : 0, this.state.content[i + 2] ? this.state.content[i + 2].height : 0, this.state.content[i + 3] ? this.state.content[i + 3].height : 0, this.state.content[i + 4] ? this.state.content[i + 4].height : 0, this.state.content[i + 5] ? this.state.content[i + 5].height : 0);
	          maxWidth = Math.max(this.state.content[i + 1] ? this.state.content[i + 1].width : 0, this.state.content[i + 2] ? this.state.content[i + 2].width : 0, this.state.content[i + 3] ? this.state.content[i + 3].width : 0, this.state.content[i + 4] ? this.state.content[i + 4].width : 0, this.state.content[i + 5] ? this.state.content[i + 5].width : 0);
	        }
	      }
	    }
	  }, {
	    key: 'imagePlaced',
	    value: function imagePlaced() {
	      this.imagesPlaced++;
	      if (this.imagesPlaced === this.imagesToPlace) {
	        window.setTimeout(_actionsViewActions2['default'].fitView, 750);
	        window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, null), 10);
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	      this.props.benchstore.addLabBenchLoadListener(this._onLabBenchLoaded);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.content.length == 0) {
	        nextState.active = false;
	        nextState.open = false;
	      }
	      if (nextState.content.length > 0) {
	        nextState.active = true;
	      }
	      if (this.state.active && !this.state.open) {
	        if (nextState.open || !nextState.active) {
	          $(this.refs.component.getDOMNode()).transition('remove looping');
	        }
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.active && !this.state.open) {
	        $(this.refs.component.getDOMNode()).transition('set looping').transition('pulse', '2000ms');
	      }
	      if (this.state.active && this.state.open) {
	        $('.menu .item', $(this.refs.tabs.getDOMNode())).tab();
	        $(this.refs.image.getDOMNode()).popup();
	        $('.ui.button', $(this.refs.buttons.getDOMNode())).popup();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	      this.props.benchstore.removeLabBenchLoadListener(this._onLabBenchLoaded);
	      if (this.state.viewId) {
	        this.props.metastore.removeMetadataUpdateListener(this.state.viewId, this._onViewUpdated);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (!this.state.active) {
	        return null;
	      }
	      if (!this.state.open) {
	        return _react2['default'].createElement(
	          'div',
	          { ref: 'component', style: this.componentStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui teal button',
	              onClick: this.open.bind(this) },
	            this.props.userstore.getInterpolatedText('setHasUnplacedImages', [this.state.content.length])
	          )
	        );
	      }
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui segment', style: this.componentStyle, ref: 'tabs' },
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui top attached fitted tabular menu' },
	          _react2['default'].createElement(
	            'div',
	            {
	              className: 'active item',
	              'data-tab': 'automatic' },
	            this.props.userstore.getText('auto')
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'item', 'data-tab': 'manual' },
	            this.props.userstore.getText('manual')
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui bottom attached active tab segment', 'data-tab': 'automatic' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui button disabled' },
	            this.props.userstore.getInterpolatedText('countImages', [this.state.content.length])
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui tiny two buttons',
	              ref: 'buttons'
	            },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui button',
	                onClick: this.placeAllImagesInLine.bind(this),
	                'data-content': this.props.userstore.getText('placeInLine') },
	              _react2['default'].createElement('i', { className: 'ui ellipsis horizontal icon' })
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui button',
	                onClick: this.placeAllImagesInColumn.bind(this),
	                'data-content': this.props.userstore.getText('placeInColumn') },
	              _react2['default'].createElement('i', { className: 'ui ellipsis vertical icon' })
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui tiny two buttons',
	              ref: 'buttons' },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui button',
	                onClick: this.placeAllImagesInGrid.bind(this),
	                'data-content': this.props.userstore.getText('placeInMatrix') },
	              _react2['default'].createElement('i', { className: 'ui grid layout icon' })
	            )
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui bottom attached tab segment', 'data-tab': 'manual' },
	          _react2['default'].createElement('img', { className: 'ui image',
	            ref: 'image',
	            'data-content': this.props.userstore.getText('dragDropImage'),
	            src: this.state.content[this.state.selected].thumbnail,
	            alt: this.props.userstore.getText('loading'),
	            draggable: 'true',
	            onDragStart: this.startDragImage.bind(this) }),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui mini three buttons' },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui button', onClick: this.previous.bind(this) },
	              _react2['default'].createElement('i', { className: 'ui left chevron icon' })
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui button disabled' },
	              this.state.selected + 1,
	              '/',
	              this.state.content.length
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui button', onClick: this.next.bind(this) },
	              _react2['default'].createElement('i', { className: 'ui right chevron icon' })
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return Inbox;
	})(_react2['default'].Component);

	exports['default'] = Inbox;
	module.exports = exports['default'];

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Bench lab border arrows which can be used to move the viewport around by hovering mouse over them.
	 *
	 * Created by dmitri on 02/03/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var WorkbenchBorders = (function (_React$Component) {
	  _inherits(WorkbenchBorders, _React$Component);

	  function WorkbenchBorders(props) {
	    var _this = this;

	    _classCallCheck(this, WorkbenchBorders);

	    _get(Object.getPrototypeOf(WorkbenchBorders.prototype), 'constructor', this).call(this, props);

	    this.componentStyle = {
	      position: 'absolute',
	      left: 0,
	      top: 0,
	      height: '100%',
	      width: '100%',
	      pointerEvents: 'none'
	    };

	    this.borderSize = '20px';
	    this.leftBorderStyle = {
	      position: 'absolute',
	      left: 0,
	      top: 0,
	      width: this.borderSize,
	      height: '100%',
	      //backgroundColor: 'rgba(127,127,127,0.3)',
	      pointerEvents: 'auto'
	    };

	    this.rightBorderStyle = {
	      position: 'absolute',
	      right: 0,
	      top: 0,
	      width: this.borderSize,
	      height: '100%',
	      //backgroundColor: 'rgba(127,127,127,0.3)',
	      pointerEvents: 'auto'
	    };

	    this.topBorderStyle = {
	      position: 'absolute',
	      left: 0,
	      top: 0,
	      width: '100%',
	      height: this.borderSize,
	      //backgroundColor: 'rgba(127,127,127,0.3)',
	      pointerEvents: 'auto'
	    };

	    this.bottomBorderStyle = {
	      position: 'absolute',
	      left: 0,
	      bottom: 0,
	      width: '100%',
	      height: this.borderSize,
	      //backgroundColor: 'rgba(127,127,127,0.3)',
	      pointerEvents: 'auto'
	    };

	    var view = props.viewstore.getView();

	    this.arrowNStyle = {
	      position: 'absolute',
	      top: 0,
	      left: view.width / 2,
	      pointerEvents: 'auto',
	      width: 0,
	      height: 0,
	      borderLeft: '30px solid transparent',
	      borderRight: '30px solid transparent',
	      borderBottom: '30px solid rgba(127,127,127,0.5)'
	    };

	    this.arrowSStyle = JSON.parse(JSON.stringify(this.arrowNStyle));
	    this.arrowSStyle.top = null;
	    this.arrowSStyle.bottom = 0;
	    this.arrowSStyle.WebkitTransform = 'rotate(180deg)';
	    this.arrowSStyle.transform = 'rotate(180deg)';

	    this.arrowWStyle = JSON.parse(JSON.stringify(this.arrowNStyle));
	    this.arrowWStyle.top = view.height / 2;
	    this.arrowWStyle.left = '-10px';
	    this.arrowWStyle.WebkitTransform = 'rotate(-90deg)';
	    this.arrowWStyle.transform = 'rotate(-90deg)';

	    this.arrowEStyle = JSON.parse(JSON.stringify(this.arrowNStyle));
	    this.arrowEStyle.top = view.height / 2;
	    this.arrowEStyle.left = null;
	    this.arrowEStyle.right = '-10px';
	    this.arrowEStyle.WebkitTransform = 'rotate(90deg)';
	    this.arrowEStyle.transform = 'rotate(90deg)';

	    this.arrowNWStyle = JSON.parse(JSON.stringify(this.arrowNStyle));
	    this.arrowNWStyle.top = '-3px';
	    this.arrowNWStyle.left = '-15px';
	    this.arrowNWStyle.WebkitTransform = 'rotate(-45deg)';
	    this.arrowNWStyle.transform = 'rotate(-45deg)';

	    this.arrowNEStyle = JSON.parse(JSON.stringify(this.arrowNStyle));
	    this.arrowNEStyle.top = '-3px';
	    this.arrowNEStyle.left = null;
	    this.arrowNEStyle.right = '-15px';
	    this.arrowNEStyle.WebkitTransform = 'rotate(45deg)';
	    this.arrowNEStyle.transform = 'rotate(45deg)';

	    this.arrowSWStyle = JSON.parse(JSON.stringify(this.arrowNStyle));
	    this.arrowSWStyle.top = null;
	    this.arrowSWStyle.bottom = '-3px';
	    this.arrowSWStyle.left = '-15px';
	    this.arrowSWStyle.WebkitTransform = 'rotate(-135deg)';
	    this.arrowSWStyle.transform = 'rotate(-135deg)';

	    this.arrowSEStyle = JSON.parse(JSON.stringify(this.arrowNStyle));
	    this.arrowSEStyle.top = null;
	    this.arrowSEStyle.left = null;
	    this.arrowSEStyle.bottom = '-3px';
	    this.arrowSEStyle.right = '-15px';
	    this.arrowSEStyle.WebkitTransform = 'rotate(135deg)';
	    this.arrowSEStyle.transform = 'rotate(135deg)';

	    this.scrollInterval = null;

	    this._onViewChange = function () {
	      var updateArrowPositions = function updateArrowPositions() {
	        return _this.updateArrowPositions(_this.props.viewstore.getView());
	      };
	      return updateArrowPositions.apply(_this);
	    };
	  }

	  _createClass(WorkbenchBorders, [{
	    key: 'updateArrowPositions',
	    value: function updateArrowPositions(view) {
	      this.arrowNStyle.left = view.width / 2;
	      this.arrowSStyle.left = view.width / 2;
	      this.arrowEStyle.top = view.height / 2;
	      this.arrowWStyle.top = view.height / 2;
	      this.setState({});
	    }
	  }, {
	    key: 'startScroll',
	    value: function startScroll(top, right, bottom, left) {
	      this.scrollInterval = window.setInterval(this.scroll.bind(this, top, right, bottom, left), 10);
	    }
	  }, {
	    key: 'scroll',
	    value: function scroll(top, right, bottom, left) {
	      var viewport = this.props.viewstore.getView();
	      var newLeft = viewport.left;
	      var newTop = viewport.top;
	      var moveFactor = 1;

	      if (viewport.scale < 0.1) {
	        moveFactor = 2;
	      } else if (viewport.scale < 0.5) {
	        moveFactor = 3;
	      } else if (viewport.scale < 1) {
	        moveFactor = 4;
	      } else {
	        moveFactor = 5;
	      }

	      if (top) {
	        newTop = newTop + moveFactor;
	      } else if (bottom) {
	        newTop = newTop - moveFactor;
	      }

	      if (right) {
	        newLeft = newLeft - moveFactor;
	      } else if (left) {
	        newLeft = newLeft + moveFactor;
	      }

	      _actionsViewActions2['default'].updateViewport(newLeft, newTop, null, null, null);
	    }
	  }, {
	    key: 'stopScrolling',
	    value: function stopScrolling() {
	      window.clearInterval(this.scrollInterval);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.viewstore.addViewportListener(this._onViewChange);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.viewstore.removeViewportListener(this._onViewChange);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { style: this.componentStyle },
	        _react2['default'].createElement('div', { style: this.arrowNWStyle,
	          onMouseEnter: this.startScroll.bind(this, true, false, false, true),
	          onMouseLeave: this.stopScrolling.bind(this) }),
	        _react2['default'].createElement(
	          'div',
	          { style: this.arrowNStyle,
	            onMouseEnter: this.startScroll.bind(this, true, false, false, false),
	            onMouseLeave: this.stopScrolling.bind(this) },
	          ' '
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.arrowNEStyle,
	            onMouseEnter: this.startScroll.bind(this, true, true, false, false),
	            onMouseLeave: this.stopScrolling.bind(this) },
	          ' '
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.arrowWStyle,
	            onMouseEnter: this.startScroll.bind(this, false, false, false, true),
	            onMouseLeave: this.stopScrolling.bind(this) },
	          ' '
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.arrowEStyle,
	            onMouseEnter: this.startScroll.bind(this, false, true, false, false),
	            onMouseLeave: this.stopScrolling.bind(this) },
	          ' '
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.arrowSWStyle,
	            onMouseEnter: this.startScroll.bind(this, false, false, true, true),
	            onMouseLeave: this.stopScrolling.bind(this) },
	          ' '
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.arrowSStyle,
	            onMouseEnter: this.startScroll.bind(this, false, false, true, false),
	            onMouseLeave: this.stopScrolling.bind(this) },
	          ' '
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.arrowSEStyle,
	            onMouseEnter: this.startScroll.bind(this, false, true, true, false),
	            onMouseLeave: this.stopScrolling.bind(this) },
	          ' '
	        )
	      );
	    }
	  }]);

	  return WorkbenchBorders;
	})(_react2['default'].Component);

	exports['default'] = WorkbenchBorders;
	module.exports = exports['default'];

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Displays the name of the active Set in the lab bench.
	 *
	 * Created by dmitri on 17/05/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _constantsViewConstants = __webpack_require__(197);

	var _constantsViewConstants2 = _interopRequireDefault(_constantsViewConstants);

	var ActiveSetNameDisplay = (function (_React$Component) {
	  _inherits(ActiveSetNameDisplay, _React$Component);

	  function ActiveSetNameDisplay(props) {
	    var _this = this;

	    _classCallCheck(this, ActiveSetNameDisplay);

	    _get(Object.getPrototypeOf(ActiveSetNameDisplay.prototype), 'constructor', this).call(this, props);

	    this.topButtonStyle = {
	      position: 'fixed',
	      left: '20vw',
	      top: window.innerHeight - this.closeTopPaneButtonHeight + 'px',
	      zIndex: _constantsViewConstants2['default'].zIndices.topPaneCloseButton,
	      height: '30px',
	      maxHeight: '60px',
	      width: '200px',
	      maxWidth: '200px',
	      fontSize: '12',
	      WebkitTransition: 'top 1.1s',
	      transition: 'top 1.1s'
	    };

	    this._onSetIdChange = function () {
	      var changeDisplayedName = function changeDisplayedName() {
	        return _this.setState({ name: _this.getActiveSetName() });
	      };
	      return changeDisplayedName.apply(_this);
	    };

	    this.state = {
	      name: this.getActiveSetName()
	    };
	  }

	  _createClass(ActiveSetNameDisplay, [{
	    key: 'getActiveSetName',
	    value: function getActiveSetName() {
	      if (this.props.managerstore.getSelected().name) {
	        return this.props.managerstore.getSelected().name;
	      } else {
	        return this.props.userstore.getText('noActiveSet');
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	      this.props.managerstore.addSelectionChangeListener(this._onSetIdChange);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	      this.props.managerstore.removeSelectionChangeListener(this._onSetIdChange);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui bottom attached button mini compact',
	          style: this.topButtonStyle },
	        _react2['default'].createElement('i', { className: 'ui icon sidebar' }),
	        this.state.name
	      );
	    }
	  }]);

	  return ActiveSetNameDisplay;
	})(_react2['default'].Component);

	exports['default'] = ActiveSetNameDisplay;
	module.exports = exports['default'];

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Displays how many images are loading in the background. Not displayed when all images are loaded (or have failed to load)
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var ImagesLoadingStatus = (function (_React$Component) {
	  _inherits(ImagesLoadingStatus, _React$Component);

	  function ImagesLoadingStatus(props) {
	    var _this = this;

	    _classCallCheck(this, ImagesLoadingStatus);

	    _get(Object.getPrototypeOf(ImagesLoadingStatus.prototype), 'constructor', this).call(this, props);

	    this.componentStyle = {
	      display: 'none',
	      position: 'absolute',
	      right: '5px',
	      top: '50px',
	      maxHeight: '60px',
	      maxWidth: '150px',
	      margin: 0,
	      padding: '5px 5px 5px 5px',
	      backgroundColor: 'rgba(255,255,255,0.4)'
	    };

	    this._onImageLoadingStatusChange = function () {
	      var updateStatusDisplay = function updateStatusDisplay() {
	        return _this.setComponentVisibility();
	      };
	      return updateStatusDisplay.apply(_this);
	    };

	    this.state = {
	      countLoadingImages: this.props.imagestore.countLoadingImages()
	    };
	  }

	  _createClass(ImagesLoadingStatus, [{
	    key: 'setComponentVisibility',
	    value: function setComponentVisibility() {
	      this.setState({ countLoadingImages: this.props.imagestore.countLoadingImages() });
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.imagestore.addLoadingStateChangeListener(this._onImageLoadingStatusChange);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.countLoadingImages > 0) {
	        this.componentStyle.display = '';
	      } else {
	        this.componentStyle.display = 'none';
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.imagestore.removeLoadingStateChangeListener(this._onImageLoadingStatusChange);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { style: this.componentStyle, className: 'ui text segment' },
	        _react2['default'].createElement('div', { className: 'ui active small inline loader' }),
	        this.props.userstore.getInterpolatedText('loadingImages', [this.state.countLoadingImages])
	      );
	    }
	  }]);

	  return ImagesLoadingStatus;
	})(_react2['default'].Component);

	exports['default'] = ImagesLoadingStatus;
	module.exports = exports['default'];

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Filters to toggle on/off display of certain entities (borders, anchors)
	 *
	 * Created by dmitri on 17/01/17.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _commonProgressBar = __webpack_require__(314);

	var _commonProgressBar2 = _interopRequireDefault(_commonProgressBar);

	var _imagesAngleSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/angle.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesAngleSvg2 = _interopRequireDefault(_imagesAngleSvg);

	var _imagesPerimeterSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/perimeter.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesPerimeterSvg2 = _interopRequireDefault(_imagesPerimeterSvg);

	var _imagesPoiSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/poi.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesPoiSvg2 = _interopRequireDefault(_imagesPoiSvg);

	var _imagesPolylinePng = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/polyline.png\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesPolylinePng2 = _interopRequireDefault(_imagesPolylinePng);

	var _imagesBorderSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/border.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesBorderSvg2 = _interopRequireDefault(_imagesBorderSvg);

	var EntityFilters = (function (_React$Component) {
	  _inherits(EntityFilters, _React$Component);

	  function EntityFilters(props) {
	    var _this = this;

	    _classCallCheck(this, EntityFilters);

	    _get(Object.getPrototypeOf(EntityFilters.prototype), 'constructor', this).call(this, props);

	    this.componentStyle = {
	      position: 'absolute',
	      left: '5px',
	      top: '27px',
	      maxHeight: '230px !important',
	      maxWidth: '50px !important',
	      display: 'flex',
	      flexDirection: 'column',
	      backgroundColor: 'rgba(0,0,0,0.3)',
	      padding: '2px 2px',
	      opacity: 0.3
	    };

	    this.buttonStyle = {
	      margin: '3px 0px 0px 0px',
	      padding: '3px 3px',
	      display: 'flex',
	      alignItems: 'center',
	      alignContent: 'center'
	    };

	    this.buttonProgressStyle = {
	      position: 'relative'
	    };

	    this._forceRender = function () {
	      var update = function update() {
	        return _this.setState({});
	      };
	      return update.apply(_this);
	    };
	  }

	  _createClass(EntityFilters, [{
	    key: 'show',
	    value: function show() {
	      this.componentStyle.opacity = 1.0;
	      this.setState({});
	    }
	  }, {
	    key: 'hide',
	    value: function hide() {
	      this.componentStyle.opacity = 0.3;
	      this.setState({});
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.viewstore.addFilterUpdateListener(this._forceRender);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.viewstore.removeFilterUpdateListener(this._forceRender);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var displays = this.props.viewstore.getDisplayedTypes();
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui segment', style: this.componentStyle, onMouseEnter: this.show.bind(this), onMouseLeave: this.hide.bind(this) },
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui button ' + (displays.borders ? 'green' : 'grey'),
	            onClick: _actionsViewActions2['default'].updateDisplayFilters.bind(null, { borders: !displays.borders }),
	            style: this.buttonStyle },
	          _react2['default'].createElement('img', { height: '20px', width: '20px', src: _imagesBorderSvg2['default'] })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.buttonProgressStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui button ' + (displays.points ? 'green' : 'grey'),
	              onClick: _actionsViewActions2['default'].updateDisplayFilters.bind(null, { points: !displays.points }),
	              style: this.buttonStyle },
	            _react2['default'].createElement('img', { height: '20px', width: '20px', src: _imagesPoiSvg2['default'] })
	          ),
	          _react2['default'].createElement(_commonProgressBar2['default'], { property: 'poi', benchstore: this.props.benchstore })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.buttonProgressStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui button ' + (displays.trails ? 'green' : 'grey'),
	              onClick: _actionsViewActions2['default'].updateDisplayFilters.bind(null, { trails: !displays.trails }),
	              style: this.buttonStyle },
	            _react2['default'].createElement('img', { height: '20px', width: '20px', src: _imagesPolylinePng2['default'] })
	          ),
	          _react2['default'].createElement(_commonProgressBar2['default'], { property: 'toi', benchstore: this.props.benchstore })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.buttonProgressStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui button ' + (displays.regions ? 'green' : 'grey'),
	              onClick: _actionsViewActions2['default'].updateDisplayFilters.bind(null, { regions: !displays.regions }),
	              style: this.buttonStyle },
	            _react2['default'].createElement('img', { height: '20px', width: '20px', src: _imagesPerimeterSvg2['default'] })
	          ),
	          _react2['default'].createElement(_commonProgressBar2['default'], { property: 'roi', benchstore: this.props.benchstore })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.buttonProgressStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui button ' + (displays.angles ? 'green' : 'grey'),
	              onClick: _actionsViewActions2['default'].updateDisplayFilters.bind(null, { angles: !displays.angles }),
	              style: this.buttonStyle },
	            _react2['default'].createElement('img', { height: '20px', width: '20px', src: _imagesAngleSvg2['default'] })
	          ),
	          _react2['default'].createElement(_commonProgressBar2['default'], { property: 'aoi', benchstore: this.props.benchstore })
	        )
	      );
	    }
	  }]);

	  return EntityFilters;
	})(_react2['default'].Component);

	exports['default'] = EntityFilters;
	module.exports = exports['default'];

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Generic thin horizontal progress bar component for LabBenchStore entities.
	 *
	 * Properties:
	 *  - property: name of the property to watch progress
	 *
	 * Created by dmitri on 18/01/17.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var ProgressBar = (function (_React$Component) {
	  _inherits(ProgressBar, _React$Component);

	  function ProgressBar(props) {
	    var _this = this;

	    _classCallCheck(this, ProgressBar);

	    _get(Object.getPrototypeOf(ProgressBar.prototype), 'constructor', this).call(this, props);

	    this.componentStyle = {
	      width: '100%',
	      margin: 0,
	      padding: 0,
	      display: 'flex',
	      justifyContent: 'center',
	      position: 'relative'
	    };

	    this.redBackgroundStyle = {
	      width: '100%',
	      backgroundColor: 'red',
	      height: '2px'
	    };

	    this.greenProgressStyle = {
	      position: 'absolute',
	      bottom: 0,
	      left: 0,
	      width: '0%',
	      backgroundColor: 'yellow',
	      height: '2px'
	    };

	    this._updateLoadProgress = function () {
	      var update = function update() {
	        return _this.setProgress();
	      };
	      return update.apply(_this);
	    };
	  }

	  _createClass(ProgressBar, [{
	    key: 'setProgress',
	    value: function setProgress() {
	      var prog = this.props.benchstore.getProgress(this.props.property);
	      if (!prog.max) {
	        this.greenProgressStyle.width = "100%";
	        this.greenProgressStyle.backgroundColor = 'blue';
	      } else {
	        this.greenProgressStyle.width = prog.current * 100 / prog.max + "%";

	        if (prog.current === prog.max) {
	          this.greenProgressStyle.backgroundColor = 'green';
	        } else {
	          this.greenProgressStyle.backgroundColor = 'yellow';
	        }
	      }
	      this.setState({});
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.benchstore.addLoadProgressListener(this._updateLoadProgress);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.benchstore.removeLoadProgressListener(this._updateLoadProgress);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { style: this.componentStyle },
	        _react2['default'].createElement('div', { style: this.redBackgroundStyle }),
	        _react2['default'].createElement('div', { style: this.greenProgressStyle })
	      );
	    }
	  }]);

	  return ProgressBar;
	})(_react2['default'].Component);

	exports['default'] = ProgressBar;
	module.exports = exports['default'];

/***/ },
/* 315 */,
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Simple store used for the drag and drop action, to provide consistent behavior across browsers. This store is used to keep the data about the item being dragged in order to transmit it from dragged item to drop area.
	 *
	 * Created by dmitri on 03/02/16.
	 */
	'use strict';

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var DragNDropStore = (function () {
	  function DragNDropStore() {
	    _classCallCheck(this, DragNDropStore);

	    this.data = {};
	    this.type = null;
	  }

	  /**
	   * Sets the action information
	   * @param type String type of drag action. Checked by drop areas for compatibility with data
	   * @param data Object data to transmit to the drop area
	   */

	  _createClass(DragNDropStore, [{
	    key: 'setAction',
	    value: function setAction(type, data) {
	      this.type = type;
	      this.data = data;
	    }
	  }, {
	    key: 'getType',
	    value: function getType() {
	      return this.type;
	    }
	  }, {
	    key: 'getData',
	    value: function getData() {
	      return this.data;
	    }

	    /**
	     * Resets the store. Call after finishing the drag&drop action.
	     */
	  }, {
	    key: 'reset',
	    value: function reset() {
	      this.data = {};
	      this.type = null;
	    }
	  }]);

	  return DragNDropStore;
	})();

	exports['default'] = DragNDropStore;
	module.exports = exports['default'];

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Container for a tool's popup component. Not displayed when no tool is active.
	 *
	 * Created by dmitri on 27/08/15.
	 */
	"use strict";

	var _get = __webpack_require__(3)["default"];

	var _inherits = __webpack_require__(19)["default"];

	var _createClass = __webpack_require__(28)["default"];

	var _classCallCheck = __webpack_require__(31)["default"];

	var _interopRequireDefault = __webpack_require__(1)["default"];

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var PopupToolComponent = (function (_React$Component) {
	  _inherits(PopupToolComponent, _React$Component);

	  function PopupToolComponent(props) {
	    var _this = this;

	    _classCallCheck(this, PopupToolComponent);

	    _get(Object.getPrototypeOf(PopupToolComponent.prototype), "constructor", this).call(this, props);

	    this.componentStyle = {
	      position: "absolute",
	      top: "10%",
	      right: "10%",
	      display: "none"
	    };

	    this.state = {
	      popup: null
	    };

	    this._onActiveToolChange = function () {
	      var fetchData = function fetchData() {
	        return _this.updatePopup(_this.props.toolstore.getActiveToolPopup());
	      };
	      return fetchData.apply(_this);
	    };
	  }

	  _createClass(PopupToolComponent, [{
	    key: "updatePopup",
	    value: function updatePopup(popup) {
	      this.setState({ popup: popup });
	    }
	  }, {
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.props.toolstore.addActiveToolPopupChangeListener(this._onActiveToolChange);
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.props.toolstore.removeActiveToolPopupChangeListener(this._onActiveToolChange);
	    }
	  }, {
	    key: "componentWillUpdate",
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.popup == null) {
	        this.componentStyle.display = "none";
	      } else {
	        this.componentStyle.display = "";
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return _react2["default"].createElement(
	        "div",
	        { style: this.componentStyle },
	        this.state.popup
	      );
	    }
	  }]);

	  return PopupToolComponent;
	})(_react2["default"].Component);

	exports["default"] = PopupToolComponent;
	module.exports = exports["default"];

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Right pane of the application.
	 *
	 * Created by dmitri on 30/11/15.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _toolsPalettesMetadataViewer = __webpack_require__(319);

	var _toolsPalettesMetadataViewer2 = _interopRequireDefault(_toolsPalettesMetadataViewer);

	var _toolsPalettesElementInspector = __webpack_require__(325);

	var _toolsPalettesElementInspector2 = _interopRequireDefault(_toolsPalettesElementInspector);

	var _toolsPalettesSimpleImageDisplay = __webpack_require__(353);

	var _toolsPalettesSimpleImageDisplay2 = _interopRequireDefault(_toolsPalettesSimpleImageDisplay);

	var _toolsPalettesAnnotationList = __webpack_require__(354);

	var _toolsPalettesAnnotationList2 = _interopRequireDefault(_toolsPalettesAnnotationList);

	var _toolsPalettesSpecimenMetadataDisplay = __webpack_require__(368);

	var _toolsPalettesSpecimenMetadataDisplay2 = _interopRequireDefault(_toolsPalettesSpecimenMetadataDisplay);

	var _constantsModeConstants = __webpack_require__(243);

	var _constantsModeConstants2 = _interopRequireDefault(_constantsModeConstants);

	var RightPane = (function (_React$Component) {
	  _inherits(RightPane, _React$Component);

	  function RightPane(props) {
	    _classCallCheck(this, RightPane);

	    _get(Object.getPrototypeOf(RightPane.prototype), 'constructor', this).call(this, props);

	    this.setModeHeights = [3 / 16, 0, 5 / 16, 5 / 16, 3 / 16];
	    this.orgModeHeights = [0, 6 / 16, 0, 6 / 16, 4 / 16];

	    this.containerStyle = {
	      backgroundColor: '#F2F2F2',
	      height: '100%',
	      width: '100%',
	      marginTop: '10px'
	      //overflow: 'auto'
	    };

	    this.state = {
	      componentHeights: [200, 200, 200, 200, 200]
	    };
	  }

	  /**
	   * Always keep 1/16th of the height unallocated for spacing/margins/etc
	   * @param totalHeight
	   */

	  _createClass(RightPane, [{
	    key: 'recalculateComponentHeight',
	    value: function recalculateComponentHeight() {
	      var totalHeight = arguments.length <= 0 || arguments[0] === undefined ? undefined : arguments[0];

	      if (!totalHeight) {
	        totalHeight = this.props.visibleHeight;
	      }
	      if (!totalHeight) {
	        return;
	      }
	      if (this.props.modestore.isInSetMode()) {
	        this.setState({ componentHeights: [totalHeight * this.setModeHeights[0], totalHeight * this.setModeHeights[1], totalHeight * this.setModeHeights[2], totalHeight * this.setModeHeights[3], totalHeight * this.setModeHeights[4]] });
	      } else if (this.props.modestore.isInObservationMode() || this.props.modestore.isInOrganisationMode()) {
	        this.setState({ componentHeights: [totalHeight * this.orgModeHeights[0], totalHeight * this.orgModeHeights[1], totalHeight * this.orgModeHeights[2], totalHeight * this.orgModeHeights[3], totalHeight * this.orgModeHeights[4]] });
	      } else {
	        console.warn('Mode not handled: ' + this.props.modestore.getMode());
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.modestore.addModeChangeListener(this.recalculateComponentHeight.bind(this));
	      this.recalculateComponentHeight(this.props.visibleHeight);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(props) {
	      if (props.visibleHeight != this.props.visibleHeight) {
	        this.recalculateComponentHeight(props.visibleHeight);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.modestore.removeModeChangeListener(this.recalculateComponentHeight.bind(this));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (this.props.modestore.isInSetMode()) {
	        return _react2['default'].createElement(
	          'div',
	          { style: this.containerStyle },
	          _react2['default'].createElement(_toolsPalettesSimpleImageDisplay2['default'], {
	            key: 'SimpleImageDisplay',
	            height: this.state.componentHeights[0],
	            metastore: this.props.metastore,
	            modestore: this.props.modestore,
	            userstore: this.props.userstore,
	            managerstore: this.props.managerstore
	          }),
	          _react2['default'].createElement(_toolsPalettesSpecimenMetadataDisplay2['default'], {
	            key: 'SpecimenMetadataDisplay',
	            height: this.state.componentHeights[2],
	            metastore: this.props.metastore,
	            toolstore: this.props.toolstore,
	            modestore: this.props.modestore,
	            userstore: this.props.userstore,
	            managerstore: this.props.managerstore }),
	          _react2['default'].createElement(_toolsPalettesAnnotationList2['default'], {
	            key: 'AnnotationList',
	            height: this.state.componentHeights[3],
	            modestore: this.props.modestore,
	            inspecstore: this.props.inspecstore,
	            metastore: this.props.metastore,
	            viewstore: this.props.viewstore,
	            userstore: this.props.userstore,
	            benchstore: this.props.benchstore
	          }),
	          _react2['default'].createElement(_toolsPalettesElementInspector2['default'], {
	            key: 'ElementInspector',
	            height: this.state.componentHeights[4],
	            toolstore: this.props.toolstore,
	            userstore: this.props.userstore,
	            modestore: this.props.modestore,
	            viewstore: this.props.viewstore,
	            metastore: this.props.metastore,
	            inspecstore: this.props.inspecstore,
	            benchstore: this.props.benchstore
	          })
	        );
	      } else if (this.props.modestore.isInOrganisationMode() || this.props.modestore.isInObservationMode()) {
	        return _react2['default'].createElement(
	          'div',
	          { style: this.containerStyle },
	          _react2['default'].createElement(_toolsPalettesMetadataViewer2['default'], {
	            key: 'MetadataViewer',
	            height: this.state.componentHeights[1],
	            toolstore: this.props.toolstore,
	            metastore: this.props.metastore,
	            viewstore: this.props.viewstore,
	            modestore: this.props.modestore,
	            userstore: this.props.userstore,
	            benchstore: this.props.benchstore
	          }),
	          _react2['default'].createElement(_toolsPalettesAnnotationList2['default'], {
	            key: 'AnnotationList',
	            height: this.state.componentHeights[3],
	            modestore: this.props.modestore,
	            inspecstore: this.props.inspecstore,
	            metastore: this.props.metastore,
	            viewstore: this.props.viewstore,
	            userstore: this.props.userstore,
	            benchstore: this.props.benchstore
	          }),
	          _react2['default'].createElement(_toolsPalettesElementInspector2['default'], {
	            key: 'ElementInspector',
	            height: this.state.componentHeights[4],
	            toolstore: this.props.toolstore,
	            userstore: this.props.userstore,
	            modestore: this.props.modestore,
	            viewstore: this.props.viewstore,
	            metastore: this.props.metastore,
	            inspecstore: this.props.inspecstore,
	            benchstore: this.props.benchstore
	          })
	        );
	      } else {
	        console.error('No render handler in mode ' + this.props.modestore.getMode());
	      }
	    }
	  }]);

	  return RightPane;
	})(_react2['default'].Component);

	exports['default'] = RightPane;
	module.exports = exports['default'];

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This component displays Recolnat API metadata about a selected specimen/image
	 *
	 * TODO: Update the code to user getExternalMetadata of MetaStore instead of calling API directly.
	 *
	 * Created by dmitri on 30/03/15.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _superagent = __webpack_require__(229);

	var _superagent2 = _interopRequireDefault(_superagent);

	var _metadataSpecimenMetadataTable = __webpack_require__(320);

	var _metadataSpecimenMetadataTable2 = _interopRequireDefault(_metadataSpecimenMetadataTable);

	var _metadataHarvestMetadataTable = __webpack_require__(322);

	var _metadataHarvestMetadataTable2 = _interopRequireDefault(_metadataHarvestMetadataTable);

	var _metadataDeterminationMetadataTable = __webpack_require__(323);

	var _metadataDeterminationMetadataTable2 = _interopRequireDefault(_metadataDeterminationMetadataTable);

	var _metadataLocationMetadataTable = __webpack_require__(324);

	var _metadataLocationMetadataTable2 = _interopRequireDefault(_metadataLocationMetadataTable);

	var MetadataViewer = (function (_React$Component) {
	  _inherits(MetadataViewer, _React$Component);

	  function MetadataViewer(props) {
	    var _this = this;

	    _classCallCheck(this, MetadataViewer);

	    _get(Object.getPrototypeOf(MetadataViewer.prototype), 'constructor', this).call(this, props);

	    this.placeholderStyle = {
	      backgroundColor: '#F2F2F2',
	      height: this.props.height - 10,
	      padding: '5px 5px 15px 5px',
	      borderColor: '#2185d0!important'
	    };

	    this.labelContainerStyle = {
	      position: 'relative',
	      width: 0,
	      height: '10px'
	    };

	    this.labelStyle = {
	      position: 'relative',
	      top: '-15px',
	      left: '10px',
	      whiteSpace: 'nowrap'
	    };

	    this.titleStyle = {
	      padding: '5px 5px 5px 5px',
	      margin: 0
	    };

	    this.tableStyle = {
	      height: '100%',
	      overflow: 'auto'
	    };

	    this.loaderStyle = {
	      display: ''
	    };

	    this.noDataStyle = {
	      display: 'none'
	    };

	    this._onChangeSelection = function () {
	      var loadMetadata = function loadMetadata() {
	        return _this.loadMetadata();
	      };
	      return loadMetadata.apply(_this);
	    };

	    this._onImageMetadataUpdated = function () {
	      var displayImageMetadata = function displayImageMetadata() {
	        return _this.displayImageMetadata();
	      };
	      return displayImageMetadata.apply(_this);
	    };

	    this._onSpecimenMetadataUpdated = function () {
	      var displaySpecimenMetadata = function displaySpecimenMetadata() {
	        return _this.displaySpecimenMetadata();
	      };
	      return displaySpecimenMetadata.apply(_this);
	    };

	    this._onSourceMetadataUpdated = function () {
	      var displaySourceMetadata = function displaySourceMetadata() {
	        return _this.displayOriginalSourceMetadata();
	      };
	      return displaySourceMetadata.apply(_this);
	    };

	    this._forceUpdate = function () {
	      var update = function update() {
	        return _this.setState({});
	      };
	      return update.apply(_this);
	    };

	    this.state = {
	      loading: true,
	      noContent: true,
	      imageCoLabId: null,
	      specimenCoLabId: null,
	      originalSourceCoLabId: null,
	      coLabImageMetadata: null,
	      coLabSpecimenMetadata: null,
	      specimen: null,
	      determinations: [],
	      harvest: null,
	      location: null,
	      loadingSpecimen: true,
	      loadingDeterminations: true,
	      loadingHarvest: true,
	      loadingLocation: true
	      //global: [],
	      //exif: []
	    };
	  }

	  _createClass(MetadataViewer, [{
	    key: 'loadMetadata',
	    value: function loadMetadata() {
	      //console.log('loadMetadata');
	      var imageLinkId = this.props.toolstore.getSelectedImageId();
	      var view = this.props.benchstore.getActiveViewData();
	      var imageId = null;

	      //console.log(imageLinkId);
	      if (!view) {
	        return;
	      }

	      for (var i = 0; i < view.displays.length; ++i) {
	        var dEntity = view.displays[i];
	        //console.log(JSON.stringify(dEntity));
	        if (dEntity.link == imageLinkId) {
	          imageId = dEntity.entity;
	          break;
	        }
	      }

	      //console.log('fetching metadata for image ' + imageId);

	      if (imageId != this.state.imageCoLabId) {
	        if (this.state.imageCoLabId) {
	          this.props.metastore.removeMetadataUpdateListener(this.state.imageCoLabId, this._onImageMetadataUpdated);
	        }
	        if (this.state.specimenCoLabId) {
	          this.props.metastore.removeMetadataUpdateListener(this.state.specimenCoLabId, this._onSpecimenMetadataUpdated);
	        }
	        if (this.state.originalSourceCoLabId) {
	          this.props.metastore.removeMetadataUpdateListener(this.state.originalSourceCoLabId, this._onSourceMetadataUpdated);
	        }
	        if (imageId) {
	          this.props.metastore.addMetadataUpdateListener(imageId, this._onImageMetadataUpdated);
	        }
	        this.setState({
	          loading: imageId != null,
	          noContent: imageId == null,
	          imageCoLabId: imageId,
	          specimenCoLabId: null,
	          originalSourceCoLabId: null,
	          coLabImageMetadata: null,
	          coLabSpecimenMetadata: null,
	          specimen: null,
	          determinations: [],
	          harvest: null,
	          location: null,
	          loadingSpecimen: true,
	          loadingDeterminations: true,
	          loadingHarvest: true,
	          loadingLocation: true });
	      }

	      //window.setTimeout(this._onImageMetadataUpdated, 50);
	    }
	  }, {
	    key: 'displayImageMetadata',
	    value: function displayImageMetadata() {
	      //console.log('displayImageMetadata');
	      var id = this.state.imageCoLabId;
	      //console.log(id);
	      if (!id) {
	        this.setState({ loading: false, noContent: true });
	        return;
	      }

	      var metadata = this.props.metastore.getMetadataAbout(id);
	      var specimenId = null;
	      var loading = false;
	      //console.log(JSON.stringify(metadata));
	      if (metadata.specimens) {
	        if (metadata.specimens.length > 0) {
	          loading = true;
	          if (metadata.specimens.length > 1) {
	            console.warn('Multiple specimens for image ' + id);
	          }
	          specimenId = metadata.specimens[0];
	          this.props.metastore.addMetadataUpdateListener(specimenId, this._onSpecimenMetadataUpdated);
	        }
	      }

	      this.setState({ coLabImageMetadata: metadata, specimenCoLabId: specimenId, loading: loading });

	      //window.setTimeout(this._onSpecimenMetadataUpdated, 50);
	    }
	  }, {
	    key: 'displaySpecimenMetadata',
	    value: function displaySpecimenMetadata() {
	      //console.log('displaySpecimenMetadata');
	      if (!this.state.specimenCoLabId) {
	        this.setState({ loading: false });
	        return;
	      }
	      var metadata = this.props.metastore.getMetadataAbout(this.state.specimenCoLabId);
	      this.setState({ coLabSpecimenMetadata: metadata });

	      if (metadata.originalSource) {
	        this.setState({ originalSourceCoLabId: metadata.originalSource });
	        this.props.metastore.addMetadataUpdateListener(metadata.originalSource, this._onSourceMetadataUpdated);
	      }

	      //window.setTimeout(this._onSourceMetadataUpdated, 50);
	    }
	  }, {
	    key: 'displayOriginalSourceMetadata',
	    value: function displayOriginalSourceMetadata() {
	      //console.log('displayOriginalSourceMetadata');
	      var metadata = this.props.metastore.getMetadataAbout(this.state.originalSourceCoLabId);
	      if (!metadata) {
	        return;
	      }
	      var origin = metadata.origin;
	      var type = metadata.typeInOriginSource;
	      var id = metadata.idInOriginSource;
	      switch (origin.toLowerCase()) {
	        case 'recolnat':
	          this.getRecolnatMetadata(id, type);
	          break;
	        default:
	          console.error('Unknown data source ' + origin);
	          this.setState({ loading: false });
	          break;
	      }
	    }
	  }, {
	    key: 'getRecolnatMetadata',
	    value: function getRecolnatMetadata(id, type) {
	      switch (type.toLowerCase()) {
	        case 'specimen':
	          this.getRecolnatSpecimenMetadata(id);
	          break;
	        default:
	          console.error('No handler for ReColNat object type ' + type);
	          break;
	      }
	    }
	  }, {
	    key: 'getRecolnatSpecimenMetadata',
	    value: function getRecolnatSpecimenMetadata(id) {
	      var _this2 = this;

	      // Example id 3A160E6F-8ED3-4ED3-A46A-D6737893E844
	      // https://api.recolnat.org/erecolnat/v1/specimens/3a160e6f-8ed3-4ed3-a46a-d6737893e844
	      // Then go to determination(s)
	      //console.log('getting recolnat data about ' + id);
	      if (this.state.loadingSpecimen) {
	        _superagent2['default'].get('https://api.recolnat.org/erecolnat/v1/specimens/' + id)
	        //.withCredentials()
	        .end(function (err, res) {
	          if (err) {
	            console.error('Could not retrieve resource data from recolnat about ' + id + ' -> ' + err);
	            alert(_this2.props.userstore.getText('cannotRetrieveRecolnatData') + ' https://api.recolnat.org/erecolnat/v1/specimens/' + id);
	            _this2.setState({
	              specimen: null,
	              loadingSpecimen: false
	            });
	          } else {
	            var specimen = JSON.parse(res.text);
	            //console.log('specimen=' + res.text);
	            _this2.setState({
	              specimen: specimen,
	              loadingSpecimen: false
	            });

	            if (specimen.links) {
	              for (var i = 0; i < specimen.links.length; ++i) {
	                var link = specimen.links[i];
	                switch (link.rel) {
	                  case "determinations":
	                    if (_this2.state.loadingDeterminations) {
	                      _superagent2['default'].get(link.href)
	                      //.withCredentials()
	                      .end(function (err, res) {
	                        if (err) {
	                          console.error('Error requesting determinations about ' + id + ' -> ' + err);
	                          _this2.setState({
	                            determinations: [],
	                            loadingDeterminations: false
	                          });
	                        } else {
	                          var determinations = JSON.parse(res.text);
	                          //console.log('determinations=' + res.text);
	                          _this2.setState({ determinations: determinations,
	                            loadingDeterminations: false });
	                        }
	                      });
	                    } else {
	                      _this2.setState({
	                        determinations: [],
	                        loadingDeterminations: false
	                      });
	                    }
	                    break;
	                  case "recoltes":
	                    if (_this2.state.loadingHarvest) {
	                      _superagent2['default'].get(link.href)
	                      //.withCredentials()
	                      .end(function (err, res) {
	                        if (err) {
	                          console.error('Error requesting harvest data about ' + id + ' -> ' + err);
	                          _this2.setState({
	                            harvest: null,
	                            loadingHarvest: false,
	                            loadingLocation: false
	                          });
	                        } else {
	                          var harvest = JSON.parse(res.text);
	                          //console.log('harvest=' + res.text);
	                          _this2.setState({ harvest: harvest, location: harvest.localisation, loadingHarvest: false, loadingLocation: false });
	                        }
	                      });
	                    } else {
	                      _this2.setState({
	                        harvest: null,
	                        loadingHarvest: false,
	                        loadingLocation: false
	                      });
	                    }
	                    break;
	                  default:
	                    break;
	                }
	              }
	            }
	          }
	        });
	      }

	      this.setState({
	        linkToExplore: 'https://explore.recolnat.org/#/specimen/botanique/' + id.split('-').join('')
	      });
	    }
	  }, {
	    key: 'displaySelectedName',
	    value: function displaySelectedName() {
	      if (this.state.coLabSpecimenMetadata) {
	        if (this.state.coLabSpecimenMetadata.name) {
	          return this.state.coLabSpecimenMetadata.name;
	        }
	        return this.props.userstore.getText('nameUnavailable');
	      }
	      return this.props.userstore.getText('noSheetSelected');
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.refs.accordion) {
	        $(this.refs.accordion.getDOMNode()).accordion({
	          exclusive: false
	        });
	      }
	      this.props.toolstore.addSelectionChangeListener(this._onChangeSelection);
	      this.props.modestore.addModeChangeListener(this._forceUpdate);
	      this.props.userstore.addLanguageChangeListener(this._forceUpdate);
	      // this._onChangeSelection();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(props) {
	      if (props.height != this.props.height) {
	        this.placeholderStyle.height = props.height - 10;
	      }
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      nextState.noContent = !nextState.coLabImageMetadata;

	      this.loaderStyle.display = 'none';
	      this.noDataStyle.display = 'none';
	      this.tableStyle.display = '';
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.loading == false && this.state.noContent == false) {
	        $(this.refs.accordion.getDOMNode()).accordion('refresh');
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.toolstore.removeSelectionChangeListener(this._onChangeSelection);
	      this.props.modestore.removeModeChangeListener(this._forceUpdate);
	      if (this.state.imageCoLabId) {
	        this.props.metastore.removeMetadataUpdateListener(this.state.imageCoLabId, this._onImageMetadataUpdated);
	      }
	      if (this.state.specimenCoLabId) {
	        this.props.metastore.removeMetadataUpdateListener(this.state.imageCoLabId, this._onSpecimenMetadataUpdated);
	      }
	      this.props.userstore.removeLanguageChangeListener(this._forceUpdate);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var self = this;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui segment container', style: this.placeholderStyle },
	        _react2['default'].createElement(
	          'div',
	          { style: this.labelContainerStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui blue tiny basic label',
	              style: this.labelStyle },
	            this.props.userstore.getText('recolnatData')
	          )
	        ),
	        _react2['default'].createElement('div', { style: this.loaderStyle, className: 'ui active loader' }),
	        _react2['default'].createElement(
	          'div',
	          { style: this.noDataStyle, className: 'ui container' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui centered header segment', style: this.titleStyle },
	            this.displaySelectedName()
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui segment' },
	            this.props.userstore.getText('noInformationAboutSelection')
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { ref: 'accordion', className: 'ui fluid accordion', style: this.tableStyle },
	          _react2['default'].createElement(_metadataSpecimenMetadataTable2['default'], { loading: this.state.loadingSpecimen,
	            userstore: this.props.userstore,
	            metadata: this.state.specimen,
	            title: this.props.userstore.getText('specimen') }),
	          this.state.determinations.map(function (determination, index) {
	            return _react2['default'].createElement(_metadataDeterminationMetadataTable2['default'], { key: 'META-DET-' + index,
	              userstore: self.props.userstore,
	              loading: self.state.loadingDeterminations,
	              metadata: determination,
	              title: self.props.userstore.getText('determination') + ' ' + (index + 1) });
	          }),
	          _react2['default'].createElement(_metadataHarvestMetadataTable2['default'], { userstore: this.props.userstore,
	            metadata: this.state.harvest,
	            loading: this.state.loadingHarvest,
	            title: this.props.userstore.getText('harvest') }),
	          _react2['default'].createElement(_metadataLocationMetadataTable2['default'], { userstore: this.props.userstore,
	            metadata: this.state.location,
	            loading: this.state.loadingLocation,
	            title: this.props.userstore.getText('location') })
	        )
	      );
	    }
	  }]);

	  return MetadataViewer;
	})(_react2['default'].Component);

	exports['default'] = MetadataViewer;
	module.exports = exports['default'];

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * MetadataTable extension to display Specimen data received from Recolnat API.
	 *
	 * Created by dmitri on 18/02/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _MetadataTable2 = __webpack_require__(321);

	var _MetadataTable3 = _interopRequireDefault(_MetadataTable2);

	var SpecimenMetadataTable = (function (_MetadataTable) {
	  _inherits(SpecimenMetadataTable, _MetadataTable);

	  function SpecimenMetadataTable(props) {
	    _classCallCheck(this, SpecimenMetadataTable);

	    _get(Object.getPrototypeOf(SpecimenMetadataTable.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(SpecimenMetadataTable, [{
	    key: 'buildDisplayTableBody',
	    value: function buildDisplayTableBody() {
	      if (this.props.loading) {
	        return _react2['default'].createElement(
	          'tbody',
	          null,
	          _react2['default'].createElement(
	            'tr',
	            null,
	            _react2['default'].createElement(
	              'td',
	              { colSpan: '2', className: 'ui center aligned' },
	              this.props.userstore.getText('loading')
	            )
	          )
	        );
	      }
	      return _react2['default'].createElement(
	        'tbody',
	        null,
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('basisOfRecord')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.basisofrecord
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('lifeStage')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.lifestage
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('sex')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.sex
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('associatedTaxa')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.associatedTaxa
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('occurrenceRemarks')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.occurrenceremarks
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('institutionCode')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.institutioncode
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('ownerInstitutionCode')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.ownerinstitutionCode
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('collectionCode')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.collectioncode
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('catalogNumber')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.catalognumber
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('recordNumber')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.recordnumber
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('bibliographicCitation')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.bibliographiccitation
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('associatedReferences')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.associatedReferences
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('rightsHolder')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.rightsholder
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('creationDate')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            new Date(this.state.metadata.created).toLocaleString()
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('lastModified')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            new Date(this.state.metadata.modified).toLocaleString()
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('rights')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.rights
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('accessRights')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.accessrights
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('associatedMedia')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.associatedmedia
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('disposition')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.disposition
	          )
	        )
	      );
	    }
	  }]);

	  return SpecimenMetadataTable;
	})(_MetadataTable3['default']);

	exports['default'] = SpecimenMetadataTable;
	module.exports = exports['default'];

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Generic metadata table display palette. Displays itself as an accordion. This one displays basic entity data received from Recolnat API.
	 *
	 * Can be easily extended to other types of data by implementing the buildDisplayTableBody function.
	 *
	 * Created by dmitri on 15/02/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var MetadataTable = (function (_React$Component) {
	  _inherits(MetadataTable, _React$Component);

	  function MetadataTable(props) {
	    _classCallCheck(this, MetadataTable);

	    _get(Object.getPrototypeOf(MetadataTable.prototype), 'constructor', this).call(this, props);

	    this.textStyle = {
	      wordBreak: 'break-all',
	      fontSize: 10,
	      lineHeight: '10px',
	      margin: 0,
	      padding: '1px 1px 1px 3px'
	    };

	    this.labelStyle = {
	      //wordBreak: 'break-all',
	      fontSize: 10,
	      lineHeight: '10px',
	      margin: 0,
	      padding: '1px 3px 1px 1px'
	    };

	    this.accordionTitleStyle = {
	      marginBottom: 0
	      //backgroundColor: '#a39d76'
	    };

	    this.headerStyle = {
	      height: 0,
	      lineHeight: 0,
	      overflow: 'hidden',
	      margin: 0,
	      padding: 0
	    };

	    this.headerRowStyle = {
	      padding: 0,
	      margin: 0
	    };

	    this.headerCellStyle = {
	      padding: 0,
	      margin: 0
	    };

	    this.contentStyle = {
	      padding: '2px 2px 2px 2px'
	    };

	    this.state = {
	      metadata: []
	    };

	    if (props.metadata) {
	      this.state.metadata = JSON.parse(JSON.stringify(this.props.metadata));
	    }
	  }

	  _createClass(MetadataTable, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      //console.log('Updating metadata with ' + JSON.stringify(nextProps.metadata));
	      if (nextProps.metadata) {
	        nextState.metadata = JSON.parse(JSON.stringify(nextProps.metadata));
	      } else {
	        nextState.metadata = [];
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: 'buildDisplayTableBody',
	    value: function buildDisplayTableBody() {
	      //console.log(JSON.stringify(this.state.metadata));
	      return _react2['default'].createElement(
	        'tbody',
	        null,
	        this.state.metadata.map(function (elt, index) {
	          return _react2['default'].createElement(
	            'tr',
	            { key: 'META-' + index },
	            _react2['default'].createElement(
	              'td',
	              { className: 'ui right aligned' },
	              elt.key
	            ),
	            _react2['default'].createElement(
	              'td',
	              { style: self.textStyle, className: 'ui left aligned' },
	              elt.value
	            )
	          );
	        })
	      );
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      if (this.state.metadata.length == 0) {
	        return null;
	      }

	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui container' },
	        _react2['default'].createElement(
	          'p',
	          { className: 'ui title', style: this.accordionTitleStyle },
	          _react2['default'].createElement('i', { className: 'dropdown icon' }),
	          this.props.title
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui content', style: this.contentStyle },
	          _react2['default'].createElement(
	            'table',
	            { className: 'ui basic striped very compact table' },
	            _react2['default'].createElement(
	              'thead',
	              { style: this.headerStyle },
	              _react2['default'].createElement(
	                'tr',
	                { style: this.headerRowStyle },
	                _react2['default'].createElement('th', { className: 'six wide', style: this.headerCellStyle }),
	                _react2['default'].createElement('th', { className: 'ten wide', style: this.headerCellStyle })
	              )
	            ),
	            this.buildDisplayTableBody()
	          )
	        )
	      );
	    }
	  }]);

	  return MetadataTable;
	})(_react2['default'].Component);

	exports['default'] = MetadataTable;
	module.exports = exports['default'];

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * MetadataTable extension to display Harvest data received from Recolnat API.
	 *
	 * Created by dmitri on 18/02/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _MetadataTable2 = __webpack_require__(321);

	var _MetadataTable3 = _interopRequireDefault(_MetadataTable2);

	var HarvestMetadataTable = (function (_MetadataTable) {
	  _inherits(HarvestMetadataTable, _MetadataTable);

	  function HarvestMetadataTable(props) {
	    _classCallCheck(this, HarvestMetadataTable);

	    _get(Object.getPrototypeOf(HarvestMetadataTable.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(HarvestMetadataTable, [{
	    key: 'buildDisplayTableBody',
	    value: function buildDisplayTableBody() {
	      if (this.props.loading) {
	        return _react2['default'].createElement(
	          'tbody',
	          null,
	          _react2['default'].createElement(
	            'tr',
	            null,
	            _react2['default'].createElement(
	              'td',
	              { colSpan: '2', className: 'ui center aligned' },
	              this.props.userstore.getText('loading')
	            )
	          )
	        );
	      }

	      return _react2['default'].createElement(
	        'tbody',
	        null,
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('verbatimEventDate')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            new Date(this.state.metadata.verbatimEventDate).toLocaleString()
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('fieldNotes')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.fieldnotes
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('eventDate')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.eventDate
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('eventRemarks')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.eventRemarks
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('day')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.eday,
	            ' ',
	            this.state.metadata.sday
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('month')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.smonth,
	            ' ',
	            this.state.metadata.emonth
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('year')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.syear,
	            ' ',
	            this.state.metadata.eyear
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('decade')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.decade
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('fieldNumber')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.fieldnumber
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('habitat')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.habitat
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('recordedBy')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.recordedBy
	          )
	        )
	      );
	    }
	  }]);

	  return HarvestMetadataTable;
	})(_MetadataTable3['default']);

	exports['default'] = HarvestMetadataTable;
	module.exports = exports['default'];

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * MetadataTable extension to display Determination data received from Recolnat API.
	 * Created by dmitri on 18/02/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _MetadataTable2 = __webpack_require__(321);

	var _MetadataTable3 = _interopRequireDefault(_MetadataTable2);

	var DeterminationMetadataTable = (function (_MetadataTable) {
	  _inherits(DeterminationMetadataTable, _MetadataTable);

	  function DeterminationMetadataTable(props) {
	    _classCallCheck(this, DeterminationMetadataTable);

	    _get(Object.getPrototypeOf(DeterminationMetadataTable.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(DeterminationMetadataTable, [{
	    key: 'buildDisplayTableBody',
	    value: function buildDisplayTableBody() {
	      //console.log('displaying=' + JSON.stringify(this.state.metadata));
	      if (this.props.loading) {
	        return _react2['default'].createElement(
	          'tbody',
	          null,
	          _react2['default'].createElement(
	            'tr',
	            null,
	            _react2['default'].createElement(
	              'td',
	              { colSpan: '2', className: 'ui center aligned' },
	              this.props.userstore.getText('loading')
	            )
	          )
	        );
	      }
	      return _react2['default'].createElement(
	        'tbody',
	        null,
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('identifiedBy')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.uidentifiedby
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('identificationQualifier')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.uidentificationqualifier
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            'Date de création'
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            new Date(this.state.metadata.created).toLocaleString()
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('typeStatus')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.typestatus
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('identificationVerificationStatus')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.identificationverificationStatus
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('dateIdentified')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            new Date(this.state.metadata.dateidentified).toLocaleString()
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('identificationRemarks')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.uidentificationremarks
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('lastModified')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            new Date(this.state.metadata.modified).toLocaleString()
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('taxonomicStatus')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.taxonomicStatus
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('taxonOrder')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.order_
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('acceptedNameUsage')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.acceptedNameUsage
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('taxonPhylum')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.phylum
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('namePublishedInYear')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.namePublishedInYear
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('kingdom')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.kingdom
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('creationDate')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            new Date(this.state.metadata.taxon.created).toLocaleString()
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('namePublishedIn')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.namePublishedIn
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('taxonRank')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.taxonRank
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('specificEpithet')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.specificEpithet
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('taxonRemarks')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.taxonRemarks
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('scientificName')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.scientificName
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('class')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.class_
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('genus')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.genus
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('subGenus')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.subgenus
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('family')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.family
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('parentNameUsage')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.parentnameusage
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('vernacularName')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.vernacularname
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('originalNameUsage')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.originalnameusage
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('nomenclaturalCode')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.nomenclaturalCode
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('higherClassification')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.higherClassification
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('nomenclaturalStatus')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.nomenclaturalStatus
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('nameAccordingTo')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.nameAccordingTo
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('scientificNameAuthorship')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.scientificNameAuthorship
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('infraspecificEpithet')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.taxon.infraspecificEpithet
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('lastModified')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            new Date(this.state.metadata.taxon.modified).toLocaleString()
	          )
	        )
	      );
	    }
	  }]);

	  return DeterminationMetadataTable;
	})(_MetadataTable3['default']);

	exports['default'] = DeterminationMetadataTable;
	module.exports = exports['default'];

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * MetadataTable extension to display Harvest data received from Recolnat API.
	 * Created by dmitri on 18/02/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _MetadataTable2 = __webpack_require__(321);

	var _MetadataTable3 = _interopRequireDefault(_MetadataTable2);

	var LocationMetadataTable = (function (_MetadataTable) {
	  _inherits(LocationMetadataTable, _MetadataTable);

	  function LocationMetadataTable(props) {
	    _classCallCheck(this, LocationMetadataTable);

	    _get(Object.getPrototypeOf(LocationMetadataTable.prototype), 'constructor', this).call(this, props);
	  }

	  _createClass(LocationMetadataTable, [{
	    key: 'buildDisplayTableBody',
	    value: function buildDisplayTableBody() {
	      if (this.props.loading) {
	        return _react2['default'].createElement(
	          'tbody',
	          null,
	          _react2['default'].createElement(
	            'tr',
	            null,
	            _react2['default'].createElement(
	              'td',
	              { colSpan: '2', className: 'ui center aligned' },
	              this.props.userstore.getText('loading')
	            )
	          )
	        );
	      }
	      return _react2['default'].createElement(
	        'tbody',
	        null,
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('longitude')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.decimallongitude
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('verbatimLocality')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.verbatimlocality
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('countryCode')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.countrycode
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('minDepthInM')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.minimumdepthinmeters
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('geodeticDatum')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.geodeticdatum
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('municipality')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.municipality
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('locationRemarks')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.locationremarks
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('locationId')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.locationID
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('georeferenceSources')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.georeferencesources
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('verbatimElevation')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.verbatimelevation
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('country')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.country
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('maxElevationInM')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.maximumelevationInmeters
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('averageAltitudeRounded')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.averagealtituderounded
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('county')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.county
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('continent')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.continent
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('locality')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.locality
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getText('stateOrProvince')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.stateprovince
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('maxDepthInM')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.maximumdepthinmeters
	          )
	        ),
	        _react2['default'].createElement(
	          'tr',
	          null,
	          _react2['default'].createElement(
	            'td',
	            { className: 'ui right aligned', style: this.labelStyle },
	            this.props.userstore.getOntologyField('minElevationInM')
	          ),
	          _react2['default'].createElement(
	            'td',
	            { style: this.textStyle, className: 'ui left aligned' },
	            this.state.metadata.minimumelevationinmeters
	          )
	        )
	      );
	    }
	  }]);

	  return LocationMetadataTable;
	})(_MetadataTable3['default']);

	exports['default'] = LocationMetadataTable;
	module.exports = exports['default'];

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This component provides complete information on the selected entities (Properties panel).
	 *
	 * Created by dmitri on 02/05/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _toConsumableArray = __webpack_require__(326)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _d3 = __webpack_require__(200);

	var _d32 = _interopRequireDefault(_d3);

	var _componentsCommonTagInput = __webpack_require__(228);

	var _componentsCommonTagInput2 = _interopRequireDefault(_componentsCommonTagInput);

	var _componentsCommonTag = __webpack_require__(352);

	var _componentsCommonTag2 = _interopRequireDefault(_componentsCommonTag);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var _utilsD3ViewUtils = __webpack_require__(253);

	var _utilsD3ViewUtils2 = _interopRequireDefault(_utilsD3ViewUtils);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var ElementInspector = (function (_React$Component) {
	  _inherits(ElementInspector, _React$Component);

	  function ElementInspector(props) {
	    var _this = this;

	    _classCallCheck(this, ElementInspector);

	    _get(Object.getPrototypeOf(ElementInspector.prototype), 'constructor', this).call(this, props);

	    this.containerStyle = {
	      padding: '5px 5px 5px 5px',
	      borderColor: '#2185d0!important',
	      height: this.props.height - 10
	    };

	    this.labelContainerStyle = {
	      position: 'relative',
	      width: 0,
	      height: '10px'
	    };

	    this.labelStyle = {
	      position: 'relative',
	      top: '-15px',
	      left: '10px',
	      whiteSpace: 'nowrap'
	    };

	    this.annotationInputStyle = {
	      display: 'flex',
	      flexDirection: 'column',
	      backgroundColor: 'lavender',
	      overflow: 'hidden',
	      maxHeight: 0
	    };

	    this.annotationInputTitleStyle = {
	      textAlign: 'center'
	    };

	    this.annotationInputTextStyle = {
	      lineHeight: 1
	    };

	    this.annotationInputButtonRowStyle = {
	      display: 'flex',
	      flexDirection: 'row',
	      justifyContent: 'space-between'
	    };

	    this.scrollerStyle = {
	      height: this.props.height - 35,
	      overflowY: 'auto'
	    };

	    this.fixedHeightStyle = {
	      height: '100%'
	    };

	    this.menuStyle = {
	      margin: 0
	    };

	    this.metadataStyle = {
	      margin: 0,
	      padding: 0,
	      position: 'relative'
	    };

	    this.titleStyle = {
	      display: 'flex',
	      flexDirection: 'row',
	      justifyContent: 'space-between'
	    };

	    this.entityNameStyle = {
	      fontWeight: 'bold',
	      margin: 0
	    };

	    this.entityMetaStyle = {
	      margin: 0
	    };

	    this.addAnnotationStyle = {
	      cursor: 'pointer'
	    };

	    this.annotationStyle = {
	      //marginBottom: '-10px'
	    };

	    this.annotationMetadataStyle = {
	      display: 'flex',
	      flexDirection: 'row-reverse',
	      fontSize: 'x-small',
	      position: 'relative',
	      bottom: '-10px'
	    };

	    this.annotationAuthorStyle = {
	      order: 2,
	      marginLeft: 5,
	      marginRight: 5
	    };

	    this.annotationDateStyle = {
	      order: 1,
	      marginLeft: 5,
	      marginRight: 5
	    };

	    this.annotationTextStyle = {};

	    this.annotationTitleStyle = {
	      margin: 0,
	      width: '80%',
	      whiteSpace: 'nowrap',
	      overflow: 'hidden',
	      textOverflow: 'ellipsis'
	    };

	    this.tagsStyle = {
	      display: 'none',
	      overflowY: 'auto',
	      height: 0
	    };

	    this._onSelectionChange = function () {
	      var setElementsUnderCursor = function setElementsUnderCursor() {
	        return _this.setInspectorContent();
	      };
	      return setElementsUnderCursor.apply(_this);
	    };

	    this._onEntityMetadataChange = function () {
	      var processEntityMetadata = function processEntityMetadata() {
	        return _this.processEntityMetadata();
	      };
	      return processEntityMetadata.apply(_this);
	    };

	    this._onAnnotationMetadataChange = function () {
	      var processAnnotationMetadata = function processAnnotationMetadata() {
	        return _this.processAnnotationMetadata();
	      };
	      return processAnnotationMetadata.apply(_this);
	    };

	    this._onStandardMetadataChange = function () {
	      var processStandardMetadata = function processStandardMetadata() {
	        return _this.processStandardMetadata();
	      };
	      return processStandardMetadata.apply(_this);
	    };

	    this._onCreatorMetadataChange = function () {
	      var processCreatorMetadata = function processCreatorMetadata() {
	        return _this.processCreatorMetadata();
	      };
	      return processCreatorMetadata.apply(_this);
	    };

	    this._onTagChange = function () {
	      var update = function update() {
	        return _this.processTag();
	      };
	      return update.apply(_this);
	    };

	    this._forceUpdate = function () {
	      var update = function update() {
	        return _this.setState({});
	      };
	      return update.apply(_this);
	    };

	    this.state = {
	      entitiesIds: [],
	      annotationsIds: [],
	      tagsIds: [],
	      creatorsIds: [],
	      standardsIds: [],
	      entities: {},
	      annotations: {},
	      standards: {},
	      tags: {},
	      creators: {},
	      annotationTextInput: '',
	      newAnnotationActiveField: null,
	      position: {}
	    };
	  }

	  _createClass(ElementInspector, [{
	    key: 'setInspectorContent',
	    value: function setInspectorContent() {
	      this.clearMetadataListeners(this.state.entitiesIds, this._onEntityMetadataChange);
	      this.clearMetadataListeners(this.state.annotationsIds, this._onAnnotationMetadataChange);
	      this.clearMetadataListeners(this.state.creatorsIds, this._onCreatorMetadataChange);
	      this.clearMetadataListeners(this.state.standardsIds, this._onStandardMetadataChange);

	      var elements = this.props.inspecstore.getInspectorContent();

	      this.setState({
	        entitiesIds: elements,
	        annotationsIds: [],
	        tagsIds: [],
	        creatorsIds: [],
	        standardsIds: [],
	        entities: {},
	        annotations: {},
	        standards: {},
	        tags: {},
	        annotationTextInput: '',
	        newAnnotationActiveField: null
	      });

	      this.addMetadataListeners(elements, this._onEntityMetadataChange);
	      //window.setTimeout(this._onEntityMetadataChange, 50);
	    }
	  }, {
	    key: 'addMetadataListeners',
	    value: function addMetadataListeners(ids, callback) {
	      for (var i = 0; i < ids.length; ++i) {
	        this.props.metastore.addMetadataUpdateListener(ids[i], callback);
	      }
	    }
	  }, {
	    key: 'clearMetadataListeners',
	    value: function clearMetadataListeners(ids, callback) {
	      for (var k = 0; k < ids.length; ++k) {
	        this.props.metastore.removeMetadataUpdateListener(ids[k], callback);
	      }
	    }
	  }, {
	    key: 'processEntityMetadata',
	    value: function processEntityMetadata() {
	      var metadatas = {};
	      var annotationsIds = [];
	      var tagsIds = [];

	      for (var i = 0; i < this.state.entitiesIds.length; ++i) {
	        var metadata = this.props.metastore.getMetadataAbout(this.state.entitiesIds[i]);
	        if (metadata) {
	          metadatas[this.state.entitiesIds[i]] = metadata;
	          if (metadata.annotations) {
	            Array.prototype.push.apply(annotationsIds, metadata.annotations);
	          }
	          if (metadata.measurements) {
	            Array.prototype.push.apply(annotationsIds, metadata.measurements);
	          }
	          if (metadata.tags) {
	            Array.prototype.push.apply(tagsIds, metadata.tags);
	          }
	        } else {
	          metadatas[this.state.entitiesIds[i]] = null;
	        }
	      }

	      annotationsIds = _.uniq(annotationsIds);
	      var newAnnotationIds = _.difference(annotationsIds, this.state.annotationsIds);
	      //var removedAnnotationIds = _.difference(this.state.annotationsIds, annotationsIds);
	      //console.log('New annotations ids: ' + JSON.stringify(newAnnotationIds));
	      //this.clearMetadataListeners(removedAnnotationIds);
	      this.addMetadataListeners(newAnnotationIds, this._onAnnotationMetadataChange);

	      tagsIds = _.uniq(tagsIds);
	      var newTagsIds = _.difference(tagsIds, this.state.tagsIds);
	      this.addMetadataListeners(newTagsIds, this._onTagChange);

	      this.setState({
	        entities: metadatas,
	        annotationsIds: annotationsIds,
	        tagsIds: tagsIds
	      });

	      //window.setTimeout(this._onAnnotationMetadataChange, 50);
	    }
	  }, {
	    key: 'processAnnotationMetadata',
	    value: function processAnnotationMetadata() {
	      var annotations = {};
	      var creatorIds = [];
	      var standardIds = [];
	      for (var i = 0; i < this.state.annotationsIds.length; ++i) {
	        var metadata = this.props.metastore.getMetadataAbout(this.state.annotationsIds[i]);
	        if (metadata) {
	          annotations[metadata.uid] = metadata;
	          if (metadata.creator) {
	            creatorIds.push(metadata.creator);
	          }
	          if (metadata.standards) {
	            var _standardIds;

	            (_standardIds = standardIds).push.apply(_standardIds, _toConsumableArray(metadata.standards));
	          }
	        } else {
	          annotations[this.state.annotationsIds[i]] = null;
	        }
	      }

	      creatorIds = _.uniq(creatorIds);
	      var newCreatorIds = _.difference(creatorIds, this.state.creatorsIds);
	      //var removedCreatorIds = _.difference(this.state.creatorsIds, creatorIds);
	      standardIds = _.uniq(standardIds);
	      var newStandardIds = _.difference(standardIds, this.state.standardsIds);

	      //this.clearMetadataListeners(removedCreatorIds);
	      this.addMetadataListeners(newCreatorIds, this._onCreatorMetadataChange);
	      this.addMetadataListeners(newStandardIds, this._onStandardMetadataChange);

	      this.setState({
	        annotations: annotations,
	        creatorsIds: creatorIds,
	        standardsIds: standardIds
	      });

	      //window.setTimeout(this._onCreatorMetadataChange, 50);
	    }
	  }, {
	    key: 'processCreatorMetadata',
	    value: function processCreatorMetadata() {
	      var creators = {};
	      for (var i = 0; i < this.state.creatorsIds.length; ++i) {
	        var metadata = this.props.metastore.getMetadataAbout(this.state.creatorsIds[i]);
	        if (metadata) {
	          creators[metadata.uid] = metadata;
	        } else {
	          creators[this.state.creatorsIds[i]] = null;
	        }
	      }

	      this.setState({
	        creators: creators
	      });
	    }
	  }, {
	    key: 'processStandardMetadata',
	    value: function processStandardMetadata() {
	      var standards = {};
	      for (var i = 0; i < this.state.standardsIds.length; ++i) {
	        var metadata = this.props.metastore.getMetadataAbout(this.state.standardsIds[i]);
	        if (metadata) {
	          standards[metadata.uid] = metadata;
	        } else {
	          standards[this.state.standardsIds[i]] = null;
	        }
	      }

	      this.setState({
	        standards: standards
	      });
	    }
	  }, {
	    key: 'processTag',
	    value: function processTag() {
	      var tags = {};
	      for (var i = 0; i < this.state.tagsIds.length; ++i) {
	        var tag = this.props.metastore.getMetadataAbout(this.state.tagsIds[i]);
	        if (tag && !tag.deleted) {
	          tags[tag.uid] = tag;
	        } else {
	          delete tags[this.state.tagsIds[i]];
	        }
	      }

	      this.setState({
	        tags: tags
	      });
	    }
	  }, {
	    key: 'annotationToMetaDisplay',
	    value: function annotationToMetaDisplay(metadata) {
	      var item = {
	        date: new Date(),
	        value: metadata.content
	      };
	      item.date.setTime(metadata.creationDate);
	      item.date = item.date.toLocaleDateString(this.props.userstore.getLanguage());

	      if (!metadata.creator) {
	        item.author = this.props.userstore.getText('recolnatSystem');
	      } else {
	        var authorMetadata = this.state.creators[metadata.creator];
	        if (authorMetadata) {
	          item.author = authorMetadata.name;
	        }
	      }

	      return item;
	    }
	  }, {
	    key: 'measurementToMetaDisplay',
	    value: function measurementToMetaDisplay(metadata) {
	      var item = {
	        date: new Date()
	      };
	      item.date.setTime(metadata.creationDate);
	      item.date = item.date.toLocaleDateString(this.props.userstore.getLanguage());
	      // Ideally all of this metadata has been downloaded beforehand, otherwise the inspector could not have been reached.
	      var entityId = metadata.parents[0];
	      if (!entityId) {
	        return null;
	      }
	      var imageId = this.state.entities[entityId].parents[0];
	      if (!imageId) {
	        return null;
	      }
	      var imageMetadata = this.props.metastore.getMetadataAbout(imageId);
	      var mmPerPixel = null;
	      if (imageMetadata.scales.length > 0) {
	        var scaleId = imageMetadata.scales[imageMetadata.scales.length - 1];
	        var scale = this.props.metastore.getMetadataAbout(scaleId);
	        if (scale) {
	          mmPerPixel = scale.mmPerPixel;
	        }
	      }
	      if (!mmPerPixel) {
	        mmPerPixel = _utilsGlobals2['default'].getEXIFScalingData(imageMetadata);
	      }
	      if (mmPerPixel) {
	        switch (metadata.measureType) {
	          case 101:
	            // Perimeter
	            item.value = this.props.userstore.getText('perimeter') + ' = ' + (mmPerPixel * metadata.valueInPx).toFixed(2) + ' mm';
	            break;
	          case 100:
	            // Area
	            item.value = this.props.userstore.getText('area') + ' = ' + (mmPerPixel * mmPerPixel * metadata.valueInPx).toFixed(2) + ' mm²';
	            break;
	          case 102:
	            // Length
	            item.value = this.props.userstore.getText('length') + ' = ' + (mmPerPixel * metadata.valueInPx).toFixed(2) + ' mm';
	            break;
	          case 103:
	            item.value = this.props.userstore.getText('angle') + ' = ' + this.convertToDMS(metadata.valueInPx);
	            break;
	          default:
	            console.warn('Unknown measure type ' + metadata.measureType);
	        }
	      } else {
	        item.value = metadata.valueInPx.toFixed(2) + ' px';
	        item.warning = this.props.userstore.getText('noStandardAvailable');
	      }
	      if (!metadata.creator) {
	        item.author = this.props.userstore.getText('recolnatSystem');
	      } else {
	        var authorMetadata = this.state.creators[metadata.creator];
	        if (authorMetadata) {
	          item.author = authorMetadata.name;
	        }
	      }

	      if (metadata.standards) {
	        item.standards = [];
	        for (var i = 0; i < metadata.standards.length; ++i) {
	          var standard = this.state.standards[metadata.standards[i]];
	          if (standard) {
	            item.standards.push(standard.length + standard.unit);
	          }
	        }
	      }

	      return item;
	    }
	  }, {
	    key: 'convertToDMS',
	    value: function convertToDMS(angle) {
	      return [0 | angle, '° ', 0 | (angle < 0 ? angle = -angle : angle) % 1 * 60, "' ", 0 | angle * 60 % 1 * 60, '"'].join('');
	    }
	  }, {
	    key: 'addAnnotation',
	    value: function addAnnotation(id) {
	      if (!id) {
	        alert('Internal Error: no entity selected');
	        return;
	      }

	      this.setState({ newAnnotationActiveField: id });
	    }
	  }, {
	    key: 'addTag',
	    value: function addTag(id) {
	      this.setState({ newTagActiveField: id });
	    }
	  }, {
	    key: 'cancelNewAnnotation',
	    value: function cancelNewAnnotation() {
	      this.setState({
	        newAnnotationActiveField: null,
	        annotationTextInput: ''
	      });
	    }
	  }, {
	    key: 'saveNewAnnotation',
	    value: function saveNewAnnotation(id) {
	      _utilsServiceMethods2['default'].addAnnotation(id, this.state.annotationTextInput, this.onAnnotationSaveResponse.bind(this));
	    }
	  }, {
	    key: 'onAnnotationSaveResponse',
	    value: function onAnnotationSaveResponse(msg) {
	      if (msg.clientProcessError) {
	        alert(this.props.userstore.getText('operationFailedNetwork'));
	      } else {
	        this.cancelNewAnnotation();
	      }
	    }
	  }, {
	    key: 'onAnnotationTextChange',
	    value: function onAnnotationTextChange(e) {
	      this.setState({ annotationTextInput: e.target.value });
	    }
	  }, {
	    key: 'centerViewOn',
	    value: function centerViewOn(meta) {
	      if (!meta) {
	        alert('Internal error: action unavailable for this entity');
	        return;
	      }
	      _utilsD3ViewUtils2['default'].zoomToObject(meta, this.props.benchstore, this.props.viewstore.getView());
	    }
	  }, {
	    key: 'toggleOutline',
	    value: function toggleOutline(d3id) {
	      if (_d32['default'].select('#' + d3id).classed('outline')) {
	        _utilsD3ViewUtils2['default'].stopOutlineAnimation(d3id);
	      } else {
	        _utilsD3ViewUtils2['default'].animateOutline(d3id);
	      }
	    }
	  }, {
	    key: 'showOutline',
	    value: function showOutline(d3id) {
	      if (d3id == null) {
	        return;
	      }
	      if (!_d32['default'].select('#' + d3id).classed('outline')) {
	        _utilsD3ViewUtils2['default'].animateOutline(d3id);
	      }
	    }
	  }, {
	    key: 'hideOutline',
	    value: function hideOutline(d3id) {
	      if (d3id == null) {
	        return;
	      }
	      if (_d32['default'].select('#' + d3id).classed('outline')) {
	        _utilsD3ViewUtils2['default'].stopOutlineAnimation(d3id);
	      }
	    }
	  }, {
	    key: 'buildEntityDisplay',
	    value: function buildEntityDisplay(entityId) {
	      var displayName = null;
	      var d3id = null;
	      var displayType = '(?)';
	      var entityMetadata = this.state.entities[entityId];
	      if (entityMetadata) {
	        displayName = entityMetadata.name;
	      } else {
	        return null;
	      }

	      var eyeIconStyle = JSON.parse(JSON.stringify(this.addAnnotationStyle));
	      var toggleIconStyle = JSON.parse(JSON.stringify(this.addAnnotationStyle));

	      switch (entityMetadata.type) {
	        case 'PointOfInterest':
	          displayType = this.props.userstore.getText('vertex') + ' : ';
	          d3id = 'POI-' + entityId;
	          break;
	        case 'TrailOfInterest':
	          displayType = this.props.userstore.getText('trail') + ' : ';
	          d3id = 'PATH-' + entityId;
	          break;
	        case 'RegionOfInterest':
	          displayType = this.props.userstore.getText('region') + ' : ';
	          d3id = 'ROI-' + entityId;
	          break;
	        case 'AngleOfInterest':
	          displayType = this.props.userstore.getText('angle') + ' : ';
	          d3id = 'AOI-' + entityId;
	          break;
	        case 'Image':
	          displayType = this.props.userstore.getText('image') + ' : ';
	          eyeIconStyle.visibility = 'hidden';
	          toggleIconStyle.visibility = 'hidden';
	          break;
	        case 'Specimen':
	          displayType = this.props.userstore.getText('specimen') + ' : ';
	          eyeIconStyle.visibility = 'hidden';
	          toggleIconStyle.visibility = 'hidden';
	          break;
	        case 'Set':
	          displayType = this.props.userstore.getText('set') + ' : ';
	          eyeIconStyle.visibility = 'hidden';
	          toggleIconStyle.visibility = 'hidden';
	          break;
	        default:
	          console.warn('Unknown entity type ' + entityMetadata.type);
	      }
	      var measurements = entityMetadata.measurements;
	      if (!measurements) {
	        measurements = [];
	      }
	      var annotations = entityMetadata.annotations;
	      if (!annotations) {
	        annotations = [];
	      } else {
	        annotations = _.map(entityMetadata.annotations, this.getAnnotationData.bind(this));
	        annotations = _.sortBy(annotations, _utilsGlobals2['default'].getCreationDate).reverse();
	      }

	      if (this.props.modestore.isInSetMode() || this.props.modestore.isInTabularMode()) {
	        eyeIconStyle.visibility = 'hidden';
	        toggleIconStyle.visibility = 'hidden';
	      }
	      var annotationInputLocalStyle = JSON.parse(JSON.stringify(this.annotationInputStyle));
	      if (this.state.newAnnotationActiveField == entityId) {
	        //annotationInputLocalStyle.height = 'auto';
	        annotationInputLocalStyle.maxHeight = '500px';
	        annotationInputLocalStyle.transition = 'max-height 0.25s ease-in';
	        annotationInputLocalStyle.overflow = null;
	      } else {
	        annotationInputLocalStyle.maxHeight = 0;
	        annotationInputLocalStyle.transition = 'max-height 0.15s ease-out';
	        annotationInputLocalStyle.overflow = 'hidden';
	      }

	      var tagInput = null;
	      if (this.state.newTagActiveField) {
	        tagInput = _react2['default'].createElement(_componentsCommonTagInput2['default'], {
	          top: this.state.position.top,
	          right: this.state.position.left,
	          onClose: this.setState.bind(this, { newTagActiveField: null }, null),
	          entity: this.state.newTagActiveField });
	      }

	      return _react2['default'].createElement(
	        'div',
	        { style: this.metadataStyle,
	          key: 'ENTITY-' + entityId,
	          onMouseEnter: this.showOutline.bind(this, d3id),
	          onMouseLeave: this.hideOutline.bind(this, d3id) },
	        _react2['default'].createElement(
	          'div',
	          { style: this.titleStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'text', style: this.entityNameStyle },
	            displayName
	          ),
	          _react2['default'].createElement(
	            'div',
	            null,
	            _react2['default'].createElement('i', { className: 'grey small eye icon',
	              style: eyeIconStyle,
	              'data-content': this.props.userstore.getText('zoomOnEntity'),
	              onClick: this.centerViewOn.bind(this, entityMetadata) }),
	            _react2['default'].createElement('i', { className: 'grey small tag icon',
	              style: this.addAnnotationStyle,
	              'data-content': this.props.userstore.getText('addATag'),
	              onClick: this.addTag.bind(this, entityId) }),
	            _react2['default'].createElement('i', { className: 'grey small write icon',
	              style: this.addAnnotationStyle,
	              'data-content': this.props.userstore.getText('addAnAnnotation'),
	              onClick: this.addAnnotation.bind(this, entityId) })
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'text', style: this.entityMetaStyle },
	          this.props.userstore.getText('creationDate') + ' : ' + new Date(entityMetadata.creationDate).toLocaleString(this.props.userstore.getLanguage(), { weekday: 'long', day: 'numeric', month: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric' })
	        ),
	        measurements.map(this.buildMeasurementDisplay.bind(this)),
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui field', style: annotationInputLocalStyle },
	          _react2['default'].createElement(
	            'label',
	            { style: this.annotationInputTitleStyle },
	            this.props.userstore.getText('newAnnotation')
	          ),
	          _react2['default'].createElement('textarea', { rows: '2',
	            autoFocus: 'true',
	            style: this.annotationInputTextStyle,
	            value: this.state.annotationTextInput,
	            onChange: this.onAnnotationTextChange.bind(this) }),
	          _react2['default'].createElement(
	            'div',
	            { style: this.annotationInputButtonRowStyle, className: 'ui tiny compact buttons' },
	            _react2['default'].createElement(
	              'button',
	              { className: 'ui red button', onClick: this.cancelNewAnnotation.bind(this) },
	              this.props.userstore.getText('cancel')
	            ),
	            _react2['default'].createElement(
	              'button',
	              { className: 'ui green button', onClick: this.saveNewAnnotation.bind(this, entityId) },
	              this.props.userstore.getText('save')
	            )
	          )
	        ),
	        entityMetadata.tags.map(this.buildTagDisplay.bind(this)),
	        tagInput,
	        annotations.map(this.buildAnnotationDisplay.bind(this)),
	        _react2['default'].createElement('div', { className: 'ui horizontal divider' })
	      );
	    }
	  }, {
	    key: 'buildTagDisplay',
	    value: function buildTagDisplay(tagId) {
	      var tag = this.state.tags[tagId];
	      if (!tag) {
	        return null;
	      }
	      return _react2['default'].createElement(_componentsCommonTag2['default'], { key: tag.definition,
	        tag: tag,
	        modestore: this.props.modestore,
	        metastore: this.props.metastore,
	        viewstore: this.props.viewstore,
	        showDelete: true });
	    }
	  }, {
	    key: 'buildMeasurementDisplay',
	    value: function buildMeasurementDisplay(measurementId) {
	      var measurementMetadata = this.state.annotations[measurementId];
	      if (!measurementMetadata) {
	        return null;
	      }
	      var meta = this.measurementToMetaDisplay(measurementMetadata);
	      if (!meta) {
	        return null;
	      }
	      var icon = '';
	      if (meta.warning) {
	        icon = 'yellow warning icon';
	      }
	      var authorStyle = JSON.parse(JSON.stringify(this.annotationAuthorStyle));
	      if (this.props.userstore.getUser().login === meta.author) {
	        authorStyle.visibility = 'hidden';
	      }

	      var standardIcon = null;
	      if (meta.standards) {
	        standardIcon = _react2['default'].createElement('i', { className: 'blue small info circle icon', 'data-content': this.props.userstore.getInterpolatedText('measureIsStandard', [JSON.stringify(meta.standards)]) });
	      }

	      return _react2['default'].createElement(
	        'div',
	        { style: this.annotationStyle, key: 'MEASURE-' + measurementId },
	        _react2['default'].createElement(
	          'div',
	          { style: this.annotationTextStyle },
	          _react2['default'].createElement(
	            'span',
	            null,
	            meta.value
	          ),
	          _react2['default'].createElement('i', { className: icon, 'data-content': meta.warning }),
	          standardIcon
	        )
	      );
	    }
	  }, {
	    key: 'buildAnnotationDisplay',
	    value: function buildAnnotationDisplay(annotationMetadata) {
	      //var annotationMetadata = this.state.annotations[annotationId];
	      if (!annotationMetadata) {
	        return null;
	      }
	      var meta = this.annotationToMetaDisplay(annotationMetadata);
	      if (!meta) {
	        return null;
	      }

	      var date = new Date();
	      date.setTime(annotationMetadata.creationDate);

	      var author = '';
	      if (!annotationMetadata.creator) {
	        author = this.props.userstore.getText('recolnatSystem');
	      } else {
	        var authorMetadata = this.state.creators[annotationMetadata.creator];
	        if (authorMetadata) {
	          author = authorMetadata.name;
	        }
	      }
	      var authorStyle = JSON.parse(JSON.stringify(this.annotationAuthorStyle));
	      if (this.props.userstore.getUser().login === author) {
	        authorStyle.visibility = 'hidden';
	      }

	      return _react2['default'].createElement(
	        'div',
	        { style: this.annotationStyle, key: 'ANNOTATION-' + annotationMetadata.uid },
	        _react2['default'].createElement(
	          'div',
	          { style: this.annotationMetadataStyle },
	          _react2['default'].createElement(
	            'a',
	            { style: authorStyle, className: 'author' },
	            author
	          ),
	          _react2['default'].createElement(
	            'span',
	            { style: this.annotationDateStyle, className: 'date' },
	            date.toLocaleDateString(this.props.userstore.getLanguage())
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.annotationTextStyle, className: 'text' },
	          _react2['default'].createElement(
	            'i',
	            null,
	            annotationMetadata.content
	          )
	        )
	      );
	    }
	  }, {
	    key: 'getAnnotationData',
	    value: function getAnnotationData(annotationId) {
	      return this.state.annotations[annotationId];
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.modestore.addModeChangeListener(this._forceUpdate);
	      this.props.inspecstore.addContentChangeListener(this._onSelectionChange);
	      this.props.userstore.addLanguageChangeListener(this._forceUpdate);
	      var pos = _react2['default'].findDOMNode(this).getBoundingClientRect();
	      this.setState({ position: { top: pos.top, left: pos.left } });
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(props) {
	      if (props.height != this.props.height) {
	        this.containerStyle.height = props.height - 10;
	        this.scrollerStyle.height = props.height - 35;
	      }
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      var pos = _react2['default'].findDOMNode(this).getBoundingClientRect();
	      nextState.position.top = pos.top;
	      nextState.position.left = pos.left;
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      $('.yellow.warning.icon', $(this.refs.component.getDOMNode())).popup();
	      $('.small.icon', $(this.refs.component.getDOMNode())).popup();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.userstore.removeLanguageChangeListener(this._forceUpdate);
	      this.clearMetadataListeners(this.state.entitiesIds, this._onEntityMetadataChange);
	      this.clearMetadataListeners(this.state.annotationsIds, this._onAnnotationMetadataChange);
	      this.clearMetadataListeners(this.state.creatorsIds, this._onCreatorMetadataChange);
	      this.props.modestore.removeModeChangeListener(this._forceUpdate);
	      this.props.inspecstore.removeContentChangeListener(this._onSelectionChange);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui segment container', ref: 'component', style: this.containerStyle },
	        _react2['default'].createElement(
	          'div',
	          { style: this.labelContainerStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui blue tiny basic label',
	              style: this.labelStyle },
	            this.props.userstore.getText('properties')
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.scrollerStyle },
	          this.state.entitiesIds.map(this.buildEntityDisplay.bind(this))
	        )
	      );
	    }
	  }]);

	  return ElementInspector;
	})(_react2['default'].Component);

	exports['default'] = ElementInspector;
	module.exports = exports['default'];

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Array$from = __webpack_require__(327)["default"];

	exports["default"] = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

	    return arr2;
	  } else {
	    return _Array$from(arr);
	  }
	};

	exports.__esModule = true;

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(328), __esModule: true };

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(329);
	__webpack_require__(345);
	module.exports = __webpack_require__(15).Array.from;

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(330)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(332)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(331)
	  , defined   = __webpack_require__(11);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 331 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(333)
	  , $export        = __webpack_require__(13)
	  , redefine       = __webpack_require__(334)
	  , hide           = __webpack_require__(335)
	  , has            = __webpack_require__(338)
	  , Iterators      = __webpack_require__(339)
	  , $iterCreate    = __webpack_require__(340)
	  , setToStringTag = __webpack_require__(341)
	  , getProto       = __webpack_require__(6).getProto
	  , ITERATOR       = __webpack_require__(342)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';

	var returnThis = function(){ return this; };

	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , methods, key;
	  // Fix native
	  if($native){
	    var IteratorPrototype = getProto($default.call(new Base));
	    // Set @@toStringTag to native iterators
	    setToStringTag(IteratorPrototype, TAG, true);
	    // FF fix
	    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    // fix Array#{values, @@iterator}.name in V8 / FF
	    if(DEF_VALUES && $native.name !== VALUES){
	      VALUES_BUG = true;
	      $default = function values(){ return $native.call(this); };
	    }
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES  ? $default : getMethod(VALUES),
	      keys:    IS_SET      ? $default : getMethod(KEYS),
	      entries: !DEF_VALUES ? $default : getMethod('entries')
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 333 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(335);

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	var $          = __webpack_require__(6)
	  , createDesc = __webpack_require__(336);
	module.exports = __webpack_require__(337) ? function(object, key, value){
	  return $.setDesc(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 336 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(18)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 338 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 339 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $              = __webpack_require__(6)
	  , descriptor     = __webpack_require__(336)
	  , setToStringTag = __webpack_require__(341)
	  , IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(335)(IteratorPrototype, __webpack_require__(342)('iterator'), function(){ return this; });

	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(6).setDesc
	  , has = __webpack_require__(338)
	  , TAG = __webpack_require__(342)('toStringTag');

	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	var store  = __webpack_require__(343)('wks')
	  , uid    = __webpack_require__(344)
	  , Symbol = __webpack_require__(14).Symbol;
	module.exports = function(name){
	  return store[name] || (store[name] =
	    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
	};

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(14)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 344 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ctx         = __webpack_require__(16)
	  , $export     = __webpack_require__(13)
	  , toObject    = __webpack_require__(288)
	  , call        = __webpack_require__(346)
	  , isArrayIter = __webpack_require__(347)
	  , toLength    = __webpack_require__(348)
	  , getIterFn   = __webpack_require__(349);
	$export($export.S + $export.F * !__webpack_require__(351)(function(iter){ Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
	    var O       = toObject(arrayLike)
	      , C       = typeof this == 'function' ? this : Array
	      , $$      = arguments
	      , $$len   = $$.length
	      , mapfn   = $$len > 1 ? $$[1] : undefined
	      , mapping = mapfn !== undefined
	      , index   = 0
	      , iterFn  = getIterFn(O)
	      , length, result, step, iterator;
	    if(mapping)mapfn = ctx(mapfn, $$len > 2 ? $$[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
	      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
	        result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;
	      }
	    } else {
	      length = toLength(O.length);
	      for(result = new C(length); length > index; index++){
	        result[index] = mapping ? mapfn(O[index], index) : O[index];
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(27);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(339)
	  , ITERATOR   = __webpack_require__(342)('iterator')
	  , ArrayProto = Array.prototype;

	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(331)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	var classof   = __webpack_require__(350)
	  , ITERATOR  = __webpack_require__(342)('iterator')
	  , Iterators = __webpack_require__(339);
	module.exports = __webpack_require__(15).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(10)
	  , TAG = __webpack_require__(342)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	var ITERATOR     = __webpack_require__(342)('iterator')
	  , SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }

	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Generic tag component.
	 *
	 * Properties:
	 * - showDelete: Boolean display or not the option to delete this tag. This will not display if the tag tags more than one entity.
	 * - tag: Object with the following parameters:
	 *   - key: String left-hand value of the tag
	 *   - value: String right-hand value of the tag (optional)
	 *   - count: Integer (optional) Number of entities this tag tags
	 *   - entities: Array<String> (optional) UIDs of entities tagged by this tag
	 *   - deletable: Boolean indicates whether this tag can be deleted by this user
	 *
	 * Created by dmitri on 06/03/17.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _constantsStyles = __webpack_require__(227);

	var _constantsStyles2 = _interopRequireDefault(_constantsStyles);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var Tag = (function (_React$Component) {
	  _inherits(Tag, _React$Component);

	  function Tag(props) {
	    var _this = this;

	    _classCallCheck(this, Tag);

	    _get(Object.getPrototypeOf(Tag.prototype), 'constructor', this).call(this, props);

	    this.tagStyle = JSON.parse(JSON.stringify(_constantsStyles2['default'].tag));

	    this.deleteIconStyle = {
	      marginLeft: '4px',
	      marginRight: 0
	    };

	    this._onFiltersChange = function () {
	      var update = function update() {
	        return _this.updateTagColor();
	      };
	      return update.apply(_this);
	    };

	    this.state = {
	      name: this.getName(props.tag),
	      color: props.viewstore.getColor(props.tag.definition)
	    };
	  }

	  _createClass(Tag, [{
	    key: 'updateTagColor',
	    value: function updateTagColor() {
	      var color = this.props.viewstore.getColor(this.props.tag.definition);
	      this.setState({ color: color });
	    }
	  }, {
	    key: 'getName',
	    value: function getName(tag) {
	      var displayName = tag.key;
	      if (tag.value) {
	        displayName = displayName + " : " + tag.value;
	      }
	      if (tag.count) {
	        displayName = displayName + " (" + tag.count + ")";
	      } else if (tag.entities) {
	        displayName = displayName + " (" + tag.entities.length + ")";
	      }
	      return displayName;
	    }
	  }, {
	    key: 'hilightTaggedEntities',
	    value: function hilightTaggedEntities() {
	      window.setTimeout(_actionsViewActions2['default'].updateDisplayFilters.bind(null, { all: true }), 10);
	      if (this.props.modestore.isInObservationMode() || this.props.modestore.isInOrganisationMode()) {
	        window.setTimeout(this.hilightTaggedEntitiesInLabBench.bind(this), 100);
	      }
	    }
	  }, {
	    key: 'hilightTaggedEntitiesInLabBench',
	    value: function hilightTaggedEntitiesInLabBench() {
	      if (this.state.color) {
	        this.removeHilights();
	        return;
	      }
	      var color = _utilsGlobals2['default'].getRandomColor();
	      window.setTimeout(_actionsViewActions2['default'].setDisplayColor.bind(null, this.props.tag.definition, color, true), 10);
	      if (this.props.tag.entities) {
	        for (var i = 0; i < this.props.tag.entities.length; ++i) {
	          var tagAssocId = this.props.tag.entities[i];
	          var tagAssocData = this.props.metastore.getMetadataAbout(tagAssocId);
	          window.setTimeout(_actionsViewActions2['default'].setDisplayColor.bind(null, tagAssocData.resource, color, true), 10);

	          // Get Image of Entity and color it in the same color
	          var images = [];
	          _utilsGlobals2['default'].getImagesOfEntity(tagAssocData.resource, this.props.metastore, images);
	          for (var j = 0; j < images.length; ++j) {
	            window.setTimeout(_actionsViewActions2['default'].setDisplayColor.bind(null, images[j], color, true), 10);
	          }
	        }
	      }
	    }
	  }, {
	    key: 'removeHilights',
	    value: function removeHilights() {
	      if (this.props.tag.entities && this.state.color) {
	        for (var i = 0; i < this.props.tag.entities.length; ++i) {
	          var tagAssocId = this.props.tag.entities[i];
	          var tagAssocData = this.props.metastore.getMetadataAbout(tagAssocId);
	          window.setTimeout(_actionsViewActions2['default'].setDisplayColor.bind(null, tagAssocData.resource, this.state.color, false), 10);

	          var images = [];
	          _utilsGlobals2['default'].getImagesOfEntity(tagAssocData.resource, this.props.metastore, images);
	          for (var j = 0; j < images.length; ++j) {
	            window.setTimeout(_actionsViewActions2['default'].setDisplayColor.bind(null, images[j], this.state.color, false), 10);
	          }
	        }

	        window.setTimeout(_actionsViewActions2['default'].setDisplayColor.bind(null, this.props.tag.definition, this.state.color, false), 10);
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.viewstore.addFilterUpdateListener(this._onFiltersChange);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(props) {
	      this.setState({ name: this.getName(props.tag) });
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      this.tagStyle.backgroundColor = nextState.color;
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.viewstore.removeFilterUpdateListener(this._onFiltersChange);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var deleteIcon = null;
	      if (this.props.showDelete && this.props.tag.deletable && (this.props.tag.count === 1 || !this.props.tag.count)) {
	        deleteIcon = _react2['default'].createElement('i', { className: 'ui icon remove',
	          style: this.deleteIconStyle,
	          onClick: _utilsServiceMethods2['default'].remove.bind(null, this.props.tag.uid, null) });
	      }
	      return _react2['default'].createElement(
	        'a',
	        { style: this.tagStyle,
	          onClick: this.hilightTaggedEntities.bind(this),
	          className: 'ui tiny tag label' },
	        this.state.name,
	        deleteIcon
	      );
	    }
	  }]);

	  return Tag;
	})(_react2['default'].Component);

	exports['default'] = Tag;
	module.exports = exports['default'];

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This component displays the list of images in a set and shows a thumbnail of the image when it is selected.
	 *
	 * Created by dmitri on 24/05/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _actionsModeActions = __webpack_require__(244);

	var _actionsModeActions2 = _interopRequireDefault(_actionsModeActions);

	var _constantsModeConstants = __webpack_require__(243);

	var _constantsModeConstants2 = _interopRequireDefault(_constantsModeConstants);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var SimpleImageDisplay = (function (_React$Component) {
	  _inherits(SimpleImageDisplay, _React$Component);

	  function SimpleImageDisplay(props) {
	    var _this = this;

	    _classCallCheck(this, SimpleImageDisplay);

	    _get(Object.getPrototypeOf(SimpleImageDisplay.prototype), 'constructor', this).call(this, props);

	    this._isMounted = false;

	    this.componentStyle = {
	      height: this.props.height - 10,
	      padding: '5px 5px 5px 5px',
	      borderColor: '#2185d0!important'
	    };

	    this.labelContainerStyle = {
	      position: 'relative',
	      width: 0,
	      height: '10px'
	    };

	    this.labelStyle = {
	      position: 'relative',
	      top: '-15px',
	      left: '10px',
	      whiteSpace: 'nowrap'
	    };

	    this.scrollerStyle = {
	      height: this.props.height - 35,
	      overflowY: 'auto'
	    };

	    this.compactBorderlessSegmentStyle = {
	      padding: 0,
	      margin: 0
	    };

	    this.twoColumnContainerStyle = {
	      display: 'flex',
	      flexDirection: 'row',
	      height: '90%',
	      width: '100%'
	    };

	    this.imageStyle = {
	      maxWidth: '50%',
	      maxHeight: '90%'
	    };

	    this.segmentsContainerStyle = {
	      width: '50%',
	      height: '90%',
	      overflowY: 'auto'
	    };

	    this._onSelectionChange = function () {
	      var getImages = function getImages() {
	        _this.getImagesOfSelection(_this.props.managerstore.getSelected());
	      };
	      return getImages.apply(_this);
	    };

	    this._onMetadataReceived = function (id) {
	      var processMetadata = function processMetadata(id) {
	        return _this.processReceivedMetadata(id);
	      };
	      return processMetadata.apply(_this, [id]);
	    };

	    this._forceUpdate = function () {
	      var update = function update() {
	        return _this.setState({});
	      };
	      return update.apply(_this);
	    };

	    this.state = {
	      selectionTitle: null,
	      imagesOfSelection: [],
	      imageUrl: null,
	      listening: [],
	      offset: 0,
	      limit: this.props.height / 5
	    };
	  }

	  _createClass(SimpleImageDisplay, [{
	    key: 'removeListeners',
	    value: function removeListeners() {
	      for (var i = 0; i < this.state.listening.length; ++i) {
	        this.props.metastore.removeMetadataUpdateListener(this.state.listening[i], this._onMetadataReceived);
	      }
	    }
	  }, {
	    key: 'getImagesOfSelection',
	    value: function getImagesOfSelection(selection) {
	      if (!this._isMounted) return;
	      this.removeListeners();
	      this.setState({ imagesOfSelection: [], imageUrl: null, listening: [selection.id], limit: this.props.height / 5 });
	      switch (selection.type) {
	        case 'Image':
	        case 'Specimen':
	        case 'Set':
	          this.props.metastore.addMetadataUpdateListener(selection.id, this._onMetadataReceived);
	          break;
	        default:
	          this.setState({ selectionTitle: null });
	          return;
	      }
	      this.setState({ selectionTitle: selection.name });
	    }
	  }, {
	    key: 'processReceivedMetadata',
	    value: function processReceivedMetadata(id) {
	      var skipListenerCheck = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

	      if (!this._isMounted) return;
	      if (!_.contains(this.state.listening, id) && !skipListenerCheck) {
	        return;
	      }
	      var metadata = this.props.metastore.getMetadataAbout(id);
	      if (metadata) {
	        switch (metadata.type) {
	          case 'Image':
	            var keyedImages = _.indexBy(this.state.imagesOfSelection, function (image) {
	              return image.uid;
	            });
	            keyedImages[metadata.uid] = metadata;
	            this.setState({
	              imagesOfSelection: _.sortBy(_.values(keyedImages), _utilsGlobals2['default'].getName) });
	            break;
	          case 'Specimen':
	            var listening = JSON.parse(JSON.stringify(this.state.listening));
	            for (var i = 0; i < metadata.images.length; ++i) {
	              this.props.metastore.addMetadataUpdateListener(metadata.images[i], this._onMetadataReceived);
	              listening.push(metadata.images[i]);
	            }
	            this.setState({ listening: listening });
	            break;
	          case 'Set':
	            listening = JSON.parse(JSON.stringify(this.state.listening));
	            var metaToUpdate = [];
	            for (var i = 0; i < metadata.items.length; ++i) {
	              this.props.metastore.addMetadataUpdateListener(metadata.items[i].uid, this._onMetadataReceived);
	              listening.push(metadata.items[i].uid);
	              metaToUpdate.push(metadata.items[i].uid);
	            }
	            this.setState({ listening: listening });
	            break;
	          default:
	            console.warn('No metadata processor for type ' + metadata.type);
	            break;
	        }
	      }
	    }
	  }, {
	    key: 'showImage',
	    value: function showImage(url) {
	      this.setState({ imageUrl: url });
	    }
	  }, {
	    key: 'loadParentSet',
	    value: function loadParentSet() {
	      var sets = this.props.managerstore.getSets();
	      var id = sets[sets.length - 1].uid;
	      if (id) {
	        window.setTimeout(_actionsViewActions2['default'].setActiveSet.bind(null, id), 10);
	        // window.setTimeout(ManagerActions.toggleSetManagerVisibility.bind(null,false),20);
	        window.setTimeout(_actionsModeActions2['default'].changeMode.bind(null, _constantsModeConstants2['default'].Modes.OBSERVATION), 20);
	      } else {
	        console.warn('Last displayed set not obtained');
	      }
	    }
	  }, {
	    key: 'scrolled',
	    value: function scrolled(e) {
	      var node = _react2['default'].findDOMNode(this.refs.scroller);
	      if (node.offsetHeight + node.scrollTop >= node.scrollHeight - 10) {
	        this.setState({ limit: Math.min(this.state.imagesOfSelection.length, this.state.limit + 5) });
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._isMounted = true;
	      this.props.userstore.addLanguageChangeListener(this._forceUpdate);
	      this.props.modestore.addModeChangeListener(this._forceUpdate);
	      this.props.managerstore.addSelectionChangeListener(this._onSelectionChange);
	      this._onSelectionChange();
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(props) {
	      if (props.height != this.props.height) {
	        this.componentStyle.height = props.height - 10;
	        this.scrollerStyle.height = props.height - 35;
	      }
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      this.componentStyle.display = '';
	      if (nextState.imageUrl == null && nextState.imagesOfSelection.length > 0) {
	        nextState.imageUrl = nextState.imagesOfSelection[0].thumbnail;
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.userstore.removeLanguageChangeListener(this._forceUpdate);
	      this.props.modestore.removeModeChangeListener(this._forceUpdate);
	      this.props.managerstore.removeSelectionChangeListener(this._onSelectionChange);
	      this.removeListeners();
	      this._isMounted = false;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var self = this;

	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui segment container', style: this.componentStyle },
	        _react2['default'].createElement(
	          'div',
	          { style: this.labelContainerStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui blue tiny basic label',
	              style: this.labelStyle },
	            this.props.userstore.getText('preview')
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.scrollerStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui small header centered segment',
	              style: this.compactBorderlessSegmentStyle },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui item' },
	              this.state.selectionTitle ? this.state.selectionTitle : this.props.userstore.getText('imagePreviewer'),
	              _react2['default'].createElement(
	                'i',
	                null,
	                ' ' + this.state.imagesOfSelection.length + ' images'
	              ),
	              '(',
	              this.props.userstore.getText('preview'),
	              ')'
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui container', style: this.twoColumnContainerStyle },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui compact segments',
	                style: this.segmentsContainerStyle,
	                ref: 'scroller',
	                onScroll: this.scrolled.bind(this) },
	              this.state.imagesOfSelection.map(function (image, index) {
	                if (index < self.state.offset || index > self.state.limit) {
	                  return null;
	                }
	                var color = 'ui';
	                if (image.thumbnail == self.state.imageUrl) {
	                  color = 'ui blue inverted';
	                }
	                return _react2['default'].createElement(
	                  'div',
	                  { className: color + ' segment',
	                    key: 'SIMPLE-IMAGE-' + image.uid,
	                    style: self.compactBorderlessSegmentStyle,
	                    onDoubleClick: self.loadParentSet.bind(self),
	                    onClick: self.showImage.bind(self, image.thumbnail) },
	                  image.name
	                );
	              })
	            ),
	            _react2['default'].createElement('img', { className: 'ui centered bordered image',
	              style: this.imageStyle,
	              src: this.state.imageUrl,
	              onDoubleClick: self.loadParentSet.bind(self),
	              alt: this.props.userstore.getText('noDataForSelection') })
	          )
	        )
	      );
	    }
	  }]);

	  return SimpleImageDisplay;
	})(_react2['default'].Component);

	exports['default'] = SimpleImageDisplay;
	module.exports = exports['default'];

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Lists the tags and annoations of a selected Set/Specimen/Image. The listing takes into account the entity's links with other entities. Types taken into account : Set, Specimen, Image, Anchor (* of Interest).
	 *
	 * Recursively getting annotations and tags is an expensive operation (in terms of number of entities to subscribe to). A better option may be to move the processing to server-side. It may also be better (but not ergonomic) to only show this component in its own Mode.
	 *
	 * Created by dmitri on 12/10/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _toConsumableArray = __webpack_require__(326)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _clipboard = __webpack_require__(355);

	var _clipboard2 = _interopRequireDefault(_clipboard);

	var _downloadCsv = __webpack_require__(363);

	var _downloadCsv2 = _interopRequireDefault(_downloadCsv);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var _utilsD3ViewUtils = __webpack_require__(253);

	var _utilsD3ViewUtils2 = _interopRequireDefault(_utilsD3ViewUtils);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _componentsCommonTagInput = __webpack_require__(228);

	var _componentsCommonTagInput2 = _interopRequireDefault(_componentsCommonTagInput);

	var _componentsCommonTag = __webpack_require__(352);

	var _componentsCommonTag2 = _interopRequireDefault(_componentsCommonTag);

	var _constantsStyles = __webpack_require__(227);

	var _constantsStyles2 = _interopRequireDefault(_constantsStyles);

	var _imagesMeasureSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/measure.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesMeasureSvg2 = _interopRequireDefault(_imagesMeasureSvg);

	var _imagesPolylinePng = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/polyline.png\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesPolylinePng2 = _interopRequireDefault(_imagesPolylinePng);

	var _imagesAngleSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/angle.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesAngleSvg2 = _interopRequireDefault(_imagesAngleSvg);

	var _imagesPerimeterSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/perimeter.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesPerimeterSvg2 = _interopRequireDefault(_imagesPerimeterSvg);

	var _imagesAreaSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/area.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesAreaSvg2 = _interopRequireDefault(_imagesAreaSvg);

	var _imagesPoiSvg = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/poi.svg\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesPoiSvg2 = _interopRequireDefault(_imagesPoiSvg);

	var AnnotationList = (function (_React$Component) {
	  _inherits(AnnotationList, _React$Component);

	  function AnnotationList(props) {
	    var _this = this;

	    _classCallCheck(this, AnnotationList);

	    _get(Object.getPrototypeOf(AnnotationList.prototype), 'constructor', this).call(this, props);

	    console.log('Received height ' + this.props.height);
	    this.containerStyle = {
	      padding: '5px 5px 5px 5px',
	      borderColor: '#2185d0!important',
	      height: this.props.height - 10
	      //overflow: 'hidden'
	    };

	    this.labelContainerStyle = {
	      position: 'relative',
	      width: 0,
	      height: '10px'
	    };

	    this.labelStyle = {
	      position: 'relative',
	      top: '-15px',
	      left: '10px',
	      whiteSpace: 'nowrap'
	    };

	    this.scrollerStyle = {
	      height: this.props.height - 35,
	      overflowY: 'auto'
	    };

	    this.menuStyle = {
	      display: 'flex',
	      flexDirection: 'row',
	      justifyContent: 'space-between'
	    };

	    this.typeMenuStyle = {
	      display: 'flex',
	      flexDirection: 'row'
	    };

	    this.menuOptionStyle = {
	      margin: '2px 2px 2px 2px',
	      padding: 0
	    };

	    this.upperButtonsStyle = {
	      display: 'flex',
	      flexDirection: 'row'
	    };

	    this.buttonStyle = {
	      height: '20px',
	      width: '20px',
	      display: 'flex',
	      alignItems: 'center',
	      justifyContent: 'center'
	    };

	    this.tableStyle = {};

	    this.nothingStyle = {
	      display: 'none'
	    };

	    this.iconButtonStyle = {
	      margin: 0
	    };

	    this.cellStyle = {
	      padding: 0,
	      lineHeight: 1.2,
	      textAlign: 'center'
	    };

	    this.cellLfAlignStyle = {
	      padding: 0,
	      lineHeight: 1.2,
	      textAlign: 'left'
	    };

	    this._onMetadataUpdate = function (id) {
	      var processMetadata = function processMetadata(id) {
	        var meta = _this.props.metastore.getMetadataAbout(id);
	        if (!meta) {
	          return;
	        }
	        if (_this.state.data[id]) {
	          if (JSON.stringify(meta) === JSON.stringify(_this.state.data[id])) {
	            return;
	          }
	        }
	        switch (meta.type) {
	          case 'Set':
	            _this.receiveSet(id);
	            break;
	          case 'Specimen':
	            _this.receiveSpecimen(id);
	            break;
	          case 'Image':
	            _this.receiveImage(id);
	            break;
	          case 'PointOfInterest':
	          case 'TrailOfInterest':
	          case 'AngleOfInterest':
	          case 'RegionOfInterest':
	            _this.receiveAnchor(id);
	            break;
	          case 'Annotation':
	            if (meta.content === 'MeasureStandard') {
	              _this.receiveStandard(id);
	            } else {
	              _this.receiveAnnotation(id);
	            }
	            break;
	          case 'TagAssociation':
	            _this.receiveTag(id);
	            break;
	          default:
	            console.warn('No handler for ' + meta.type);
	        }
	      };
	      return processMetadata.apply(_this, [id]);
	    };

	    this._onExternalMetadataUpdate = function (id) {
	      var receiveExtMetadata = function receiveExtMetadata(id) {
	        return _this.receiveSourceMetadata(id);
	      };
	      return receiveExtMetadata.apply(_this, [id]);
	    };

	    this._onEntitySelected = function () {
	      var updateSelection = function updateSelection() {
	        return _this.updateSelection(_this.props.inspecstore.getAnnotationListSelection());
	      };
	      return updateSelection.apply(_this);
	    };

	    this._forceUpdate = function () {
	      var update = function update() {
	        return _this.setState({});
	      };
	      return update.apply(_this);
	    };

	    this.state = {
	      selectedImageId: null,
	      selectedSetId: null,
	      display: 'tags',
	      subject: 'set',
	      buttons: {
	        measures: '',
	        tags: 'active',
	        image: 'disabled',
	        set: 'disabled'
	      },
	      data: {},
	      extData: {},
	      annotations: [],
	      updateAnnotations: [],
	      selection: {},
	      tags: {},
	      tagInputEntity: null,
	      offset: 0,
	      limit: this.props.height / 12
	    };

	    this.position = {
	      top: null,
	      left: null
	    };
	  }

	  _createClass(AnnotationList, [{
	    key: 'updateSelection',
	    value: function updateSelection(selection) {
	      this.setState({
	        selectedSetId: selection.setId,
	        selectedImageId: selection.imageId,
	        selection: {},
	        tags: {},
	        tagInputEntity: null,
	        offset: 0,
	        limit: this.props.height / 12
	      });

	      switch (this.state.subject) {
	        case 'image':
	          this.removeListeners();
	          this.props.metastore.addMetadataUpdateListener(selection.imageId, this._onMetadataUpdate);
	          break;
	        case 'set':
	          this.removeListeners();
	          this.props.metastore.addMetadataUpdateListener(selection.setId, this._onMetadataUpdate);
	          break;
	        default:
	          console.warning('Unknown subject ' + this.state.subject);
	          return;
	      }
	    }
	  }, {
	    key: 'receiveSet',
	    value: function receiveSet(id) {
	      var meta = this.props.metastore.getMetadataAbout(id);
	      if (!meta) {
	        return;
	      }
	      if (meta.deleted) {
	        var _data = JSON.parse(JSON.stringify(this.state.data));
	        _data[id].deleted = true;
	        this.setState({ data: _data });
	        return;
	      }
	      var data = JSON.parse(JSON.stringify(this.state.data));
	      data[id] = meta;

	      if (this.state.subject === 'set') {
	        var _ids = _.keys(data);

	        if (this.state.display === 'measures') {
	          var itemIds = meta.items.map(function (i) {
	            return i.uid;
	          });
	          var newIds = _.without(itemIds, _ids);
	          for (var i = 0; i < newIds.length; ++i) {
	            if (!data[newIds[i]]) {
	              this.props.metastore.addMetadataUpdateListener(newIds[i], this._onMetadataUpdate);
	              data[newIds[i]] = null;
	            }
	          }
	        }

	        if (this.state.display === 'tags') {
	          var newTags = _.without(meta.tags, _ids);
	          for (var i = 0; i < newTags.length; ++i) {
	            if (!data[newTags[i]]) {
	              this.props.metastore.addMetadataUpdateListener(newTags[i], this._onMetadataUpdate);
	              data[newTags[i]] = null;
	            }
	          }

	          var newItems = _.without(meta.items.map(function (i) {
	            return i.uid;
	          }), _ids);
	          for (var i = 0; i < newItems.length; ++i) {
	            this.props.metastore.addMetadataUpdateListener(newItems[i], this._onMetadataUpdate);
	            data[newItems[i]] = null;
	          }
	        }
	      }

	      this.setState({ data: data });
	    }
	  }, {
	    key: 'receiveItem',
	    value: function receiveItem(id) {
	      var meta = this.props.metastore.getMetadataAbout(id);
	      if (!meta) {
	        return;
	      }
	      switch (meta.type) {
	        case 'Image':
	          this.receiveImage(id);
	          break;
	        case 'Specimen':
	          this.receiveSpecimen(id);
	          break;
	        default:
	          console.warn('No handler for type ' + meta.type);
	      }
	    }
	  }, {
	    key: 'receiveSpecimen',
	    value: function receiveSpecimen(id) {
	      var meta = this.props.metastore.getMetadataAbout(id);
	      if (!meta) {
	        return;
	      }
	      if (meta.deleted) {
	        var _data2 = JSON.parse(JSON.stringify(this.state.data));
	        _data2[id].deleted = true;
	        this.setState({ data: _data2 });
	        return;
	      }
	      var data = JSON.parse(JSON.stringify(this.state.data));
	      data[id] = meta;

	      var updateAnnotations = [];

	      if (this.state.display === 'measures') {
	        if (this.state.subject === 'set' || this.state.subject === 'image' && this.state.selectedImageId === id) {
	          var _ids2 = _.keys(data);
	          var newIds = _.without(meta.images, _ids2);
	          for (var i = 0; i < newIds.length; ++i) {
	            if (!data[newIds[i]]) {
	              this.props.metastore.addMetadataUpdateListener(newIds[i], this._onMetadataUpdate);
	              data[newIds[i]] = null;
	            }
	          }
	        }
	        if (this.state.subject === 'image') {
	          var newSetIds = _.without(meta.inSets, ids);
	          for (var i = 0; i < newSetIds.length; ++i) {
	            if (!data[newSetIds[i]]) {
	              this.props.metastore.addMetadataUpdateListener(newSetIds[i], this._onMetadataUpdate);
	              data[newSetIds[i]] = null;
	            }
	          }
	        }

	        // Get barcode for inSpecimen data
	        this.props.metastore.addExternalMetadataUpdateListener(id, this._onExternalMetadataUpdate);

	        // Update all measures of all images of this specimen (if available)
	        updateAnnotations = JSON.parse(JSON.stringify(this.state.updateAnnotations));
	        for (var i = 0; i < meta.images.length; ++i) {
	          var imageMeta = this.props.metastore.getMetadataAbout(meta.images[i]);
	          if (imageMeta) {
	            var imageAnchors = _.flatten(imageMeta.aois, imageMeta.pois, imageMeta.rois, imageMeta.tois);
	            for (var j = 0; j < imageAnchors.length; ++j) {
	              var anchorMeta = this.props.metastore.getMetadataAbout(imageAnchors[j]);
	              if (anchorMeta) {
	                var _updateAnnotations;

	                (_updateAnnotations = updateAnnotations).push.apply(_updateAnnotations, _toConsumableArray(anchorMeta.annotations));
	              }
	            }
	          }
	        }
	      } else if (this.state.display === 'tags') {
	        var _ids3 = _.keys(data);
	        var newTags = _.without(meta.tags, _ids3);
	        for (var i = 0; i < newTags.length; ++i) {
	          this.props.metastore.addMetadataUpdateListener(newTags[i], this._onMetadataUpdate);
	          data[newTags[i]] = null;
	        }

	        // Get tags of images
	        var newImages = _.without(meta.images, _ids3);
	        for (var i = 0; i < newImages.length; ++i) {
	          this.props.metastore.addMetadataUpdateListener(newImages[i], this._onMetadataUpdate);
	          data[newImages[i]] = null;
	        }
	      }
	      this.setState({ data: data, updateAnnotations: updateAnnotations });
	    }
	  }, {
	    key: 'receiveImage',
	    value: function receiveImage(id) {
	      var meta = this.props.metastore.getMetadataAbout(id);
	      if (!meta) {
	        return;
	      }
	      if (meta.deleted) {
	        var _data3 = JSON.parse(JSON.stringify(this.state.data));
	        _data3[id].deleted = true;
	        this.setState({ data: _data3 });
	        return;
	      }
	      var data = JSON.parse(JSON.stringify(this.state.data));
	      data[id] = meta;
	      var updateAnnotations = JSON.parse(JSON.stringify(this.state.updateAnnotations));

	      var ids = _.keys(data);

	      if (this.state.display === 'measures') {
	        var itemIds = _.union(meta.pois, meta.rois, meta.aois, meta.tois);
	        var newIds = _.without(itemIds, ids);
	        for (var i = 0; i < newIds.length; ++i) {
	          if (!data[newIds[i]]) {
	            this.props.metastore.addMetadataUpdateListener(newIds[i], this._onMetadataUpdate);
	            data[newIds[i]] = null;
	          }
	        }

	        if (this.state.subject === 'image' && this.state.selectedImageId === id) {
	          var newSpecimenIds = _.without(meta.specimens, ids);
	          for (var i = 0; i < newSpecimenIds.length; ++i) {
	            if (!data[newSpecimenIds[i]]) {
	              this.props.metastore.addMetadataUpdateListener(newSpecimenIds[i], this._onMetadataUpdate);
	              data[newSpecimenIds[i]] = null;
	            }
	          }
	        }

	        // let updateAnnotations = JSON.parse(JSON.stringify(this.state.updateAnnotations));
	        var imageAnchors = _.flatten(meta.aois, meta.pois, meta.rois, meta.tois);
	        for (var i = 0; i < imageAnchors.length; ++i) {
	          var anchorMeta = this.props.metastore.getMetadataAbout(imageAnchors[i]);
	          if (anchorMeta) {
	            updateAnnotations.push.apply(updateAnnotations, _toConsumableArray(anchorMeta.annotations));
	          }
	        }
	      } else if (this.state.display === 'tags') {
	        var tagIds = _.without(meta.tags, ids);
	        for (var i = 0; i < tagIds.length; ++i) {
	          this.props.metastore.addMetadataUpdateListener(tagIds[i], this._onMetadataUpdate);
	          data[tagIds[i]] = null;
	        }

	        var anchorIds = _.union(meta.pois, meta.rois, meta.aois, meta.tois);
	        var newAnchorIds = _.without(anchorIds, ids);
	        for (var i = 0; i < newAnchorIds.length; ++i) {
	          this.props.metastore.addMetadataUpdateListener(newAnchorIds[i], this._onMetadataUpdate);
	          data[newAnchorIds[i]] = null;
	        }
	      }

	      this.setState({ data: data, updateAnnotations: updateAnnotations });
	    }
	  }, {
	    key: 'receiveAnchor',
	    value: function receiveAnchor(id) {
	      var meta = this.props.metastore.getMetadataAbout(id);
	      if (!meta) {
	        return;
	      }
	      if (meta.deleted) {
	        var _data4 = JSON.parse(JSON.stringify(this.state.data));
	        _data4[id].deleted = true;
	        this.setState({ data: _data4 });
	        return;
	      }
	      var data = JSON.parse(JSON.stringify(this.state.data));
	      data[id] = meta;

	      var updateAnnotations = JSON.parse(JSON.stringify(this.state.updateAnnotations));
	      var ids = _.keys(data);

	      if (this.state.display === 'measures') {
	        var newIds = _.without(meta.measurements, ids);
	        for (var i = 0; i < newIds.length; ++i) {
	          if (!data[newIds[i]]) {
	            this.props.metastore.addMetadataUpdateListener(newIds[i], this._onMetadataUpdate);
	            data[newIds[i]] = null;
	            //window.setTimeout(this.receiveAnchor.bind(this, newIds[i]), 100);
	          }
	        }

	        updateAnnotations.push.apply(updateAnnotations, _toConsumableArray(meta.annotations));
	      }
	      // Download tags in all cases (so they are ready if user decides to download annotations)
	      if (meta.tags) {
	        var tagIds = _.without(meta.tags, ids);
	        for (var i = 0; i < tagIds.length; ++i) {
	          this.props.metastore.addMetadataUpdateListener(tagIds[i], this._onMetadataUpdate);
	          data[tagIds[i]] = null;
	        }
	      }
	      this.setState({ data: data, updateAnnotations: updateAnnotations });
	    }
	  }, {
	    key: 'receiveAnnotation',
	    value: function receiveAnnotation(id) {
	      var meta = this.props.metastore.getMetadataAbout(id);
	      if (!meta) {
	        return;
	      }
	      if (meta.deleted) {
	        var _data5 = JSON.parse(JSON.stringify(this.state.data));
	        _data5[id].deleted = true;
	        this.setState({ data: _data5 });
	        return;
	      }
	      var data = JSON.parse(JSON.stringify(this.state.data));
	      data[id] = meta;

	      if (meta.standards) {
	        for (var i = 0; i < meta.standards.length; ++i) {
	          var standardId = meta.standards[i];
	          this.props.metastore.addMetadataUpdateListener(standardId, this._onMetadataUpdate);
	          data[standardId] = null;
	        }
	      }

	      var updateAnnotations = JSON.parse(JSON.stringify(this.state.updateAnnotations));
	      updateAnnotations.push(id);
	      this.setState({ data: data, updateAnnotations: updateAnnotations });
	    }
	  }, {
	    key: 'receiveStandard',
	    value: function receiveStandard(id) {
	      var meta = this.props.metastore.getMetadataAbout(id);
	      if (!meta) {
	        return;
	      }
	      if (meta.deleted) {
	        var _data6 = JSON.parse(JSON.stringify(this.state.data));
	        _data6[id].deleted = true;
	        this.setState({ data: _data6 });
	        return;
	      }
	      var data = JSON.parse(JSON.stringify(this.state.data));
	      data[id] = meta;

	      var updateAnnotations = JSON.parse(JSON.stringify(this.state.updateAnnotations));
	      updateAnnotations.push.apply(updateAnnotations, _toConsumableArray(meta.parents));

	      this.setState({ data: data, updateAnnotations: updateAnnotations });
	    }
	  }, {
	    key: 'receiveSourceMetadata',
	    value: function receiveSourceMetadata(id) {
	      var meta = this.props.metastore.getExternalMetadata(id);
	      if (this.state.extData[id]) {
	        if (JSON.stringify(meta) === JSON.stringify(this.state.extData[id])) {
	          return;
	        }
	      }
	      var extData = JSON.parse(JSON.stringify(this.state.extData));
	      extData[id] = meta;
	      this.setState({ extData: extData, updateAnnotations: this.state.annotations.map(function (d) {
	          return d.uid;
	        }) });
	    }
	  }, {
	    key: 'receiveTag',
	    value: function receiveTag(id) {
	      var meta = this.props.metastore.getMetadataAbout(id);
	      if (!meta) {
	        return;
	      }
	      var tags = JSON.parse(JSON.stringify(this.state.tags));
	      var data = JSON.parse(JSON.stringify(this.state.data));

	      if (meta.deleted) {
	        delete data[id];
	        tags[meta.definition].entities = _.without(tags[meta.definition].entities, id);
	        if (tags[meta.definition].entities.length === 0) {
	          delete tags[meta.definition];
	        }
	        this.setState({ data: data, tags: tags });
	        return;
	      }

	      if (tags[meta.definition]) {
	        if (!_.contains(tags[meta.definition].entities, id)) {
	          tags[meta.definition].entities.push(id);
	        }
	      } else {
	        tags[meta.definition] = meta;
	        tags[meta.definition].entities = [id];
	      }
	      data[id] = meta;

	      this.setState({ tags: tags, data: data });
	    }
	  }, {
	    key: 'activateTagInput',
	    value: function activateTagInput() {
	      switch (this.state.subject) {
	        case 'set':
	          this.setState({ tagInputEntity: this.state.selectedSetId });
	          break;
	        case 'image':
	          this.setState({ tagInputEntity: this.state.selectedImageId });
	          break;
	      }
	    }
	  }, {
	    key: 'removeListeners',
	    value: function removeListeners() {
	      this.props.metastore.removeMetadataUpdateListener(this.state.selectedImageId, this._onMetadataUpdate);
	      this.props.metastore.removeMetadataUpdateListener(this.state.selectedSetId, this._onMetadataUpdate);

	      var ids = _.keys(this.state.data);
	      for (var i = 0; i < ids.length; ++i) {
	        this.props.metastore.removeMetadataUpdateListener(ids[i], this._onMetadataUpdate);
	      }

	      for (var i = 0; i < this.state.annotations.length; ++i) {
	        this.props.metastore.removeExternalMetadataUpdateListener(this.state.annotations[i].inSpecimen, this._onExternalMetadataUpdate);
	      }

	      this.setState({ annotations: [], data: {}, extData: {} });
	    }
	  }, {
	    key: 'createAnnotations',
	    value: function createAnnotations(state) {
	      var _this2 = this;

	      return _.chain(state.updateAnnotations).map(function (d) {
	        var meta = _this2.props.metastore.getMetadataAbout(d);return meta ? meta : null;
	      }).pick(function (d) {
	        return d;
	      }).pick(function (d) {
	        return d.type === 'Annotation' && d.valueInPx !== 0 || d.type === 'PointOfInterest';
	      }).map(function (a) {
	        return JSON.parse(JSON.stringify(a));
	      }).each(function (a, idx, list) {
	        return _this2.enrichAnnotation(a, state);
	      }, [this])
	      // .sortBy(Globals.getCreationDate)
	      .value();
	      // .reverse();
	    }
	  }, {
	    key: 'enrichAnnotation',
	    value: function enrichAnnotation(annotation, state) {
	      if (!state.data || !annotation) {
	        return;
	      }

	      if (annotation.type === 'PointOfInterest') {
	        return this.enrichPoIAnnotation(annotation, state);
	      }

	      annotation.inEntity = annotation.parents[0];
	      if (!annotation.inEntity) {
	        return;
	      }

	      if (!state.data[annotation.inEntity]) {
	        return;
	      }
	      annotation.inImage = state.data[annotation.inEntity].parents[0];
	      if (!annotation.inImage) {
	        return;
	      }

	      if (!state.data[annotation.inImage]) {
	        return;
	      }
	      annotation.inSpecimen = state.data[annotation.inImage].specimens[0];
	      if (!annotation.inSpecimen) {
	        // return;
	        annotation.barcode = this.props.userstore.getText('notRecolnat');
	        annotation.inSet = state.data[annotation.inImage].inSets[0];
	      } else {
	        if (!state.data[annotation.inSpecimen]) {
	          return;
	        }
	        annotation.inSet = state.data[annotation.inSpecimen].inSets[0];
	      }

	      if (!annotation.inSet) {
	        return;
	      }

	      if (annotation.inSpecimen) {
	        var data = this.props.metastore.getExternalMetadata(annotation.inSpecimen);
	        if (data === 'loading') {
	          annotation.barcode = this.props.userstore.getText('loading');
	        } else if (data) {
	          annotation.barcode = data.institutioncode + ' ' + data.catalognumber;
	        } else {
	          annotation.barcode = this.props.userstore.getText('unavailable');
	        }
	      }

	      var anchorData = state.data[annotation.inEntity];
	      if (anchorData) {
	        annotation.name = anchorData.name;
	      }

	      annotation.selected = state.selection[annotation.uid];

	      annotation.displayDate = new Date(annotation.creationDate);

	      if (annotation.measureType) {
	        var mmPerPixel = this.getScale(annotation.inImage);
	        switch (annotation.measureType) {
	          case 100:
	            // Area
	            if (mmPerPixel) {
	              annotation.displayValue = (annotation.valueInPx * mmPerPixel * mmPerPixel).toFixed(2) + ' mm²';
	            } else {
	              annotation.displayValue = annotation.valueInPx.toFixed(2) + ' px²';
	            }
	            annotation.displayType = _react2['default'].createElement('img', { src: _imagesAreaSvg2['default'], height: '15px', width: '15px' });
	            annotation.display = true;
	            break;
	          case 101:
	            // Perimeter
	            if (mmPerPixel) {
	              annotation.displayValue = (annotation.valueInPx * mmPerPixel).toFixed(2) + ' mm';
	            } else {
	              annotation.displayValue = annotation.valueInPx.toFixed(2) + ' px';
	            }
	            annotation.displayType = _react2['default'].createElement('img', { src: _imagesPerimeterSvg2['default'], height: '15px', width: '15px' });
	            annotation.display = true;
	            break;
	          case 102:
	            // Length
	            if (mmPerPixel) {
	              annotation.displayValue = (annotation.valueInPx * mmPerPixel).toFixed(2) + ' mm';
	            } else {
	              annotation.displayValue = annotation.valueInPx.toFixed(2) + ' px';
	            }
	            annotation.displayType = _react2['default'].createElement('img', { src: _imagesPolylinePng2['default'], height: '15px', width: '15px' });
	            annotation.display = true;
	            break;
	          case 103:
	            // Angle
	            annotation.displayValue = annotation.valueInPx.toFixed(2) + ' °';
	            annotation.displayType = _react2['default'].createElement('img', { src: _imagesAngleSvg2['default'], height: '15px', width: '15px' });
	            annotation.display = true;
	            break;
	          default:
	            console.warn('Unknown measure type ' + annotation.measureType);
	            annotation.display = false;
	            break;
	        }
	      }
	    }
	  }, {
	    key: 'getScale',
	    value: function getScale(imageId) {
	      var imageData = this.state.data[imageId];
	      if (imageData) {
	        if (imageData.scales.length > 0) {
	          var scaleId = imageData.scales[imageData.scales.length - 1];
	          var scale = state.data[scaleId];
	          if (scale) {
	            return scale.mmPerPixel;
	          }
	        }
	      }
	      return _utilsGlobals2['default'].getEXIFScalingData(this.state.data[imageId]);
	    }
	  }, {
	    key: 'enrichPoIAnnotation',
	    value: function enrichPoIAnnotation(annotation, state) {
	      annotation.inEntity = annotation.uid;
	      if (!annotation.inEntity) {
	        return;
	      }

	      if (!state.data[annotation.inEntity]) {
	        return;
	      }
	      annotation.inImage = annotation.parents[0];
	      if (!annotation.inImage) {
	        return;
	      }

	      if (!state.data[annotation.inImage]) {
	        return;
	      }
	      annotation.inSpecimen = state.data[annotation.inImage].specimens[0];
	      if (!annotation.inSpecimen) {
	        return;
	      }

	      if (!state.data[annotation.inSpecimen]) {
	        return;
	      }
	      annotation.inSet = state.data[annotation.inSpecimen].inSets[0];
	      if (!annotation.inSet) {
	        return;
	      }

	      if (annotation.inSpecimen) {
	        var data = this.props.metastore.getExternalMetadata(annotation.inSpecimen);
	        if (data === 'loading') {
	          annotation.barcode = this.props.userstore.getText('loading');
	        } else if (data) {
	          annotation.barcode = data.institutioncode + ' ' + data.catalognumber;
	        } else {
	          annotation.barcode = this.props.userstore.getText('unavailable');
	        }
	      }

	      annotation.selected = state.selection[annotation.uid];
	      annotation.displayValue = '';
	      annotation.display = true;
	      annotation.displayType = _react2['default'].createElement('img', { src: _imagesPoiSvg2['default'], height: '15px', width: '15px' });
	      annotation.displayDate = new Date(annotation.creationDate);
	    }
	  }, {
	    key: 'setSubject',
	    value: function setSubject(subject) {
	      if (subject === this.state.subject) {
	        return;
	      }
	      this.removeListeners();

	      switch (subject) {
	        case 'image':
	          this.props.metastore.addMetadataUpdateListener(this.state.selectedImageId, this._onMetadataUpdate);
	          break;
	        case 'set':
	          this.props.metastore.addMetadataUpdateListener(this.state.selectedSetId, this._onMetadataUpdate);
	          break;
	        default:
	          console.warning('Unknown subject ' + subject);
	          return;
	      }
	      this.setState({ subject: subject });
	    }
	  }, {
	    key: 'select',
	    value: function select(id) {
	      var selection = JSON.parse(JSON.stringify(this.state.selection));
	      selection[id] = true;

	      this.setState({ selection: selection });
	    }
	  }, {
	    key: 'unselect',
	    value: function unselect(id) {
	      var selection = JSON.parse(JSON.stringify(this.state.selection));
	      selection[id] = false;

	      this.setState({ selection: selection });
	    }
	  }, {
	    key: 'toggleSelectAll',
	    value: function toggleSelectAll(isSelected) {
	      var annotations = this.state.annotations;
	      var selection = {};
	      for (var i = 0; i < annotations.length; ++i) {
	        selection[annotations[i].uid] = isSelected;
	      }

	      this.setState({ selection: selection });
	    }

	    /**
	     * If nothing is selected, copy everything
	     * @returns {string}
	     */
	  }, {
	    key: 'formatSelectionForClipboardCopy',
	    value: function formatSelectionForClipboardCopy() {
	      var annotationsToCopy = [];
	      for (var i = 0; i < this.state.annotations.length; ++i) {
	        if (this.state.annotations[i].selected) {
	          var annotation = JSON.parse(JSON.stringify(this.state.annotations[i]));
	          annotationsToCopy.push(annotation);
	        }
	      }
	      if (annotationsToCopy.length === 0) {
	        annotationsToCopy = JSON.parse(JSON.stringify(this.state.annotations));
	      }

	      var text = this.props.userstore.getText('type') + '\t' + this.props.userstore.getText('name') + '\t' + this.props.userstore.getText('value') + '\t' + this.props.userstore.getText('sheet') + '\n';
	      for (var i = 0; i < annotationsToCopy.length; ++i) {
	        var annotation = annotationsToCopy[i];
	        switch (annotation.type) {
	          case 'Text':
	            continue;
	          case 'Unknown':
	            console.warning('Unknown annotation type for ' + JSON.stringify(annotation));
	            continue;
	          case 'Area':
	            text += this.props.userstore.getText('area') + '\t';
	            break;
	          case 'Perimeter':
	            text += this.props.userstore.getText('perimeter') + '\t';
	            break;
	          case 'Length':
	            text += this.props.userstore.getText('length') + '\t';
	            break;
	          case 'Angle':
	            text += this.props.userstore.getText('angle') + '\t';
	            break;
	          default:
	            break;
	        }
	        text += annotation.name + '\t' + annotation.displayValue + '\t' + annotation.barcode + '\n';
	      }

	      return text;
	    }
	  }, {
	    key: 'exportAsCSV',
	    value: function exportAsCSV() {
	      var columnTitles = {
	        type: this.props.userstore.getText('type'),
	        name: this.props.userstore.getText('name'),
	        value: this.props.userstore.getText('value'),
	        unit: this.props.userstore.getText('unit'),
	        barcode: this.props.userstore.getText('catalogNumber'),
	        created: this.props.userstore.getText('creationDate'),
	        setName: this.props.userstore.getText('set'),
	        imageName: this.props.userstore.getText('imageName'),
	        specimenDisplayName: this.props.userstore.getText('displayedSpecimenName'),
	        tags: this.props.userstore.getText('tags'),
	        coordinates: this.props.userstore.getText('coordinatesWithOrigin'),
	        linkToExplore: this.props.userstore.getText('specimenExplorePage')
	      };
	      var columns = [];

	      var annotationsToExport = [];
	      for (var i = 0; i < this.state.annotations.length; ++i) {
	        if (this.state.annotations[i].selected) {
	          var annotation = JSON.parse(JSON.stringify(this.state.annotations[i]));
	          annotationsToExport.push(annotation);
	        }
	      }
	      if (annotationsToExport.length === 0) {
	        annotationsToExport = JSON.parse(JSON.stringify(this.state.annotations));
	      }

	      var setName = undefined;
	      var encoder = new TextEncoder();
	      var decoder = new TextDecoder("utf-8");

	      for (var i = 0; i < annotationsToExport.length; ++i) {
	        var annotation = annotationsToExport[i];
	        var entityData = this.props.metastore.getMetadataAbout(annotation.inEntity);
	        var imageData = this.props.metastore.getMetadataAbout(annotation.inImage);
	        var setData = this.props.metastore.getMetadataAbout(annotation.inSet);
	        var specimenData = this.props.metastore.getMetadataAbout(annotation.inSpecimen);
	        var vertices = [];
	        if (entityData.polygonVertices) {
	          //console.log(entityData.polygonVertices);
	          var polygonVertices = JSON.parse(entityData.polygonVertices);
	          for (var j = 0; j < polygonVertices.length; ++j) {
	            var vertex = polygonVertices[j];
	            vertices.push([imageData.width - vertex[0], imageData.height - vertex[1]]);
	          }
	        }
	        var value = null;
	        var unit = null;
	        var mmPerPixel = this.getScale(annotation.inImage);
	        switch (annotation.measureType) {
	          case 100:
	            value = mmPerPixel ? (annotation.valueInPx * mmPerPixel * mmPerPixel).toFixed(2) : annotation.valueInPx.toFixed(2);
	            unit = mmPerPixel ? 'mm²' : 'px²';
	            break;
	          case 101:
	          case 102:
	            value = mmPerPixel ? (annotation.valueInPx * mmPerPixel).toFixed(2) : annotation.valueInPx.toFixed(2);
	            unit = mmPerPixel ? 'mm' : 'px';
	            break;
	          case 103:
	            value = annotation.valueInPx;
	            unit = '°';
	            break;
	          default:
	            value = annotation.displayValue;
	            unit = '-';

	        }
	        var tags = "";
	        if (entityData.tags) {
	          for (var _i = 0; _i < entityData.tags.length; ++_i) {
	            var tagData = this.state.data[entityData.tags[_i]];
	            if (tagData.value) {
	              tags = tags + tagData.key + ":" + tagData.value;
	            } else {
	              tags = tags + tagData.key;
	            }
	            if (_i < entityData.tags.length - 1) {
	              tags = tags + ", ";
	            }
	          }
	        }
	        //console.log(JSON.stringify(vertices));
	        var data = {
	          type: '"' + decoder.decode(encoder.encode(annotation.type)) + '"',
	          name: '"' + decoder.decode(encoder.encode(annotation.name)) + '"',
	          value: '"' + decoder.decode(encoder.encode(value)) + '"',
	          unit: "" + decoder.decode(encoder.encode(unit)) + "",
	          barcode: '"' + decoder.decode(encoder.encode(annotation.barcode)) + '"',
	          created: '"' + decoder.decode(encoder.encode(annotation.displayDate)) + '"',
	          setName: '"' + decoder.decode(encoder.encode(setData.name)) + '"',
	          imageName: '"' + decoder.decode(encoder.encode(imageData.name)) + '"',
	          specimenDisplayName: '"' + decoder.decode(encoder.encode(specimenData.name)) + '"',
	          tags: '"' + decoder.decode(encoder.encode(tags)) + '"',
	          coordinates: '"' + decoder.decode(encoder.encode(JSON.stringify(vertices))) + '"'
	        };
	        setName = setData.name;

	        columns.push(data);
	      }

	      var date = new Date();
	      (0, _downloadCsv2['default'])(columns, columnTitles, setName + "-export-" + date.getFullYear() + "" + (date.getMonth() + 1) + "" + date.getDay() + "" + date.getHours() + "" + date.getMinutes() + "" + date.getSeconds() + ".csv");
	    }
	  }, {
	    key: 'zoomOnElement',
	    value: function zoomOnElement(entityId) {
	      var meta = this.props.metastore.getMetadataAbout(entityId);
	      if (!meta) {
	        return;
	      }
	      switch (meta.type) {
	        case 'RegionOfInterest':
	        case 'TrailOfInterest':
	        case 'PointOfInterest':
	        case 'AngleOfInterest':
	          _utilsD3ViewUtils2['default'].zoomToObject(meta, this.props.benchstore, this.props.viewstore.getView());
	          break;
	        default:
	          console.warn('Annotation type not handled: ' + meta.type);
	      }
	    }
	  }, {
	    key: 'tableScrolled',
	    value: function tableScrolled(e) {
	      var node = _react2['default'].findDOMNode(this.refs.scroller);
	      if (node.offsetHeight + node.scrollTop >= node.scrollHeight - 10) {
	        this.setState({ limit: Math.min(this.state.annotations.length + this.props.height / 10, this.state.limit + 10) });
	      }
	    }
	  }, {
	    key: 'sortAnnotationsBy',
	    value: function sortAnnotationsBy(property) {
	      this.setState({ annotations: _.sortBy(this.state.annotations, property) });
	    }
	  }, {
	    key: 'buildAnnotationRow',
	    value: function buildAnnotationRow(annotation, index) {
	      if (index < this.state.offset || index > this.state.limit) {
	        return null;
	      }
	      if (!annotation.display) {
	        return null;
	      }
	      var titleCell = null;
	      var barcodeCell = null;
	      var selectionIcon = null;
	      if (annotation.name) {
	        if (annotation.name.length > 15) {
	          titleCell = _react2['default'].createElement(
	            'td',
	            { style: this.cellLfAlignStyle, className: 'tooltip title', 'data-content': annotation.name,
	              'data-sort-value': annotation.name },
	            annotation.name.substring(0, 15) + '...'
	          );
	        } else {
	          titleCell = _react2['default'].createElement(
	            'td',
	            { style: this.cellLfAlignStyle, 'data-sort-value': annotation.name },
	            annotation.name
	          );
	        }
	      } else {
	        titleCell = _react2['default'].createElement(
	          'td',
	          { style: this.cellLfAlignStyle, 'data-sort-value': this.props.userstore.getText('nameUnavailable') },
	          this.props.userstore.getText('nameUnavailable')
	        );
	      }

	      if (this.state.selection[annotation.uid]) {
	        selectionIcon = _react2['default'].createElement('i', { className: 'ui checkmark box icon', onClick: this.unselect.bind(this, annotation.uid) });
	      } else {
	        selectionIcon = _react2['default'].createElement('i', { className: 'ui square outline icon', onClick: this.select.bind(this, annotation.uid) });
	      }

	      if (annotation.barcode) {
	        if (annotation.barcode.length > 10) {
	          barcodeCell = _react2['default'].createElement(
	            'td',
	            { style: this.cellStyle,
	              className: 'tooltip title',
	              'data-content': annotation.barcode,
	              'data-sort-value': annotation.barcode },
	            '...' + annotation.barcode.substring(annotation.barcode.length - 10)
	          );
	        } else {
	          barcodeCell = _react2['default'].createElement(
	            'td',
	            { style: this.cellStyle, 'data-sort-value': annotation.barcode },
	            annotation.barcode
	          );
	        }
	      } else {
	        barcodeCell = _react2['default'].createElement(
	          'td',
	          { style: this.cellStyle, 'data-sort-value': this.props.userstore.getText('unavailable') },
	          this.props.userstore.getText('unavailable')
	        );
	      }

	      var eyeIconStyle = JSON.parse(JSON.stringify(this.cellStyle));
	      if (!this.props.modestore.isInObservationMode() && !this.props.modestore.isInOrganisationMode()) {
	        eyeIconStyle.visibility = 'hidden';
	      }

	      return _react2['default'].createElement(
	        'tr',
	        { key: 'ANNOT-' + annotation.uid },
	        _react2['default'].createElement(
	          'td',
	          { style: this.cellStyle },
	          selectionIcon
	        ),
	        _react2['default'].createElement(
	          'td',
	          { style: this.cellStyle,
	            'data-sort-value': annotation.type },
	          annotation.displayType
	        ),
	        titleCell,
	        _react2['default'].createElement(
	          'td',
	          { style: this.cellStyle,
	            'data-sort-value': annotation.valueInPx },
	          annotation.displayValue
	        ),
	        barcodeCell,
	        _react2['default'].createElement(
	          'td',
	          { style: eyeIconStyle },
	          _react2['default'].createElement('i', { className: 'ui eye icon', onClick: this.zoomOnElement.bind(this, annotation.inEntity) })
	        )
	      );
	    }
	  }, {
	    key: 'displayMeasures',
	    value: function displayMeasures() {
	      var selectAllIcon = null;
	      if (this.state.annotations.length === 0) {
	        selectAllIcon = _react2['default'].createElement('i', { className: 'ui square icon' });
	      } else if (this.state.selection[this.state.annotations[0].uid]) {
	        selectAllIcon = _react2['default'].createElement('i', { className: 'ui checkmark box icon', onClick: this.toggleSelectAll.bind(this, false) });
	      } else {
	        selectAllIcon = _react2['default'].createElement('i', { className: 'ui square outline icon', onClick: this.toggleSelectAll.bind(this, true) });
	      }

	      return _react2['default'].createElement(
	        'div',
	        { key: 'MEASURES' },
	        _react2['default'].createElement(
	          'table',
	          { style: this.tableStyle,
	            ref: 'table',
	            className: 'ui selectable sortable unstackable striped celled collapsing compact small fixed table' },
	          _react2['default'].createElement(
	            'thead',
	            null,
	            _react2['default'].createElement(
	              'tr',
	              null,
	              _react2['default'].createElement(
	                'th',
	                { className: 'one wide disabled', style: this.cellStyle },
	                selectAllIcon
	              ),
	              _react2['default'].createElement('th', { className: 'one wide', style: this.cellStyle, onClick: this.sortAnnotationsBy.bind(this, 'type') }),
	              _react2['default'].createElement(
	                'th',
	                { className: 'five wide', style: this.cellLfAlignStyle, onClick: this.sortAnnotationsBy.bind(this, 'name') },
	                this.props.userstore.getText('name')
	              ),
	              _react2['default'].createElement(
	                'th',
	                { className: 'four wide', style: this.cellStyle, onClick: this.sortAnnotationsBy.bind(this, 'valueInPx') },
	                this.props.userstore.getText('value')
	              ),
	              _react2['default'].createElement(
	                'th',
	                { className: 'four wide', style: this.cellStyle, onClick: this.sortAnnotationsBy.bind(this, 'barcode') },
	                this.props.userstore.getText('sheet')
	              ),
	              _react2['default'].createElement('th', { className: 'one wide disabled', style: this.cellStyle })
	            )
	          ),
	          _react2['default'].createElement(
	            'tbody',
	            null,
	            this.state.annotations.slice(this.state.offset, this.state.limit).map(this.buildAnnotationRow.bind(this))
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.nothingStyle },
	          this.props.userstore.getText('noDataForSelection')
	        )
	      );
	    }
	  }, {
	    key: 'displayTags',
	    value: function displayTags() {
	      var self = this;
	      return _react2['default'].createElement(
	        'div',
	        { key: 'TAGS', className: 'ui mini labels' },
	        _.chain(this.state.tags).values(this.state.tags).sortBy(function (t) {
	          return t.key.toLowerCase();
	        }).value().map(function (tag, index) {
	          return _react2['default'].createElement(_componentsCommonTag2['default'], { key: tag.definition,
	            tag: tag,
	            modestore: self.props.modestore,
	            metastore: self.props.metastore,
	            viewstore: self.props.viewstore,
	            showDelete: false });
	        })
	      );
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.userstore.addLanguageChangeListener(this._forceUpdate);
	      this.props.modestore.addModeChangeListener(this._forceUpdate);
	      this.props.inspecstore.addAnnotationSelectionListener(this._onEntitySelected);
	      // this._onEntitySelected();
	      var pos = _react2['default'].findDOMNode(this).getBoundingClientRect();
	      this.position.top = pos.top;
	      this.position.left = pos.left;
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(props) {
	      if (props.height != this.props.height) {
	        this.containerStyle.height = props.height - 10;
	        this.scrollerStyle.height = props.height - 35;
	      }
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      nextState.buttons.image = nextState.selectedImageId ? '' : 'disabled';
	      nextState.buttons.set = nextState.selectedSetId ? '' : 'disabled';

	      nextState.buttons.image += nextState.subject == 'image' ? ' active' : '';
	      nextState.buttons.set += nextState.subject == 'set' ? ' active' : '';

	      nextState.buttons.measures = nextState.display === 'measures' ? 'active' : '';
	      nextState.buttons.tags = nextState.display === 'tags' ? 'active' : '';

	      if (nextState.updateAnnotations.length > 0) {
	        var _nextState$annotations;

	        var newAnnotations = this.createAnnotations(nextState);
	        (_nextState$annotations = nextState.annotations).push.apply(_nextState$annotations, _toConsumableArray(newAnnotations));
	        nextState.annotations = _.sortBy(nextState.annotations, _utilsGlobals2['default'].getCreationDate).reverse();
	        nextState.updateAnnotations = [];
	      }

	      if (nextState.annotations.length == 0) {
	        this.tableStyle.display = 'none';
	        this.nothingStyle.display = '';
	      } else {
	        this.tableStyle.display = '';
	        this.nothingStyle.display = 'none';
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var pos = _react2['default'].findDOMNode(this).getBoundingClientRect();
	      this.position.top = pos.top;
	      this.position.left = pos.left;

	      if (this.state.annotations.length > 0) {
	        // $(this.refs.table.getDOMNode()).tablesort();
	        $('.tooltip.title', $(_react2['default'].findDOMNode(this.refs.table))).popup();
	      }

	      $('.button', $(_react2['default'].findDOMNode(this.refs.menu))).popup();

	      if (this.state.display === 'tags') {
	        $(_react2['default'].findDOMNode(this.refs.activateTag)).popup();
	      }

	      if (this.state.display != prevState.display) {
	        this.updateSelection({ setId: this.state.selectedSetId, imageId: this.state.selectedImageId });
	      }

	      //var copyText = this.copySelected();
	      new _clipboard2['default'](this.refs.copyButton.getDOMNode(), {
	        text: this.formatSelectionForClipboardCopy.bind(this)
	      });
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.removeListeners();
	      this.props.modestore.removeModeChangeListener(this._forceUpdate);
	      this.props.inspecstore.removeAnnotationSelectionListener(this._onEntitySelected);
	      this.props.userstore.removeLanguageChangeListener(this._forceUpdate);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      // note to self: sort/date, sort/type
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui segment container', ref: 'component', style: this.containerStyle },
	        _react2['default'].createElement(
	          'div',
	          { style: this.labelContainerStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui blue tiny basic label',
	              style: this.labelStyle },
	            this.props.userstore.getText('tagsAndMeasures')
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.scrollerStyle, onScroll: this.tableScrolled.bind(this), ref: 'scroller' },
	          _react2['default'].createElement(
	            'div',
	            { style: this.menuStyle, ref: 'menu' },
	            _react2['default'].createElement(
	              'div',
	              { style: this.upperButtonsStyle, className: 'ui mini buttons' },
	              _react2['default'].createElement(
	                'div',
	                { style: this.buttonStyle,
	                  onClick: this.setState.bind(this, { display: 'measures' }, null),
	                  'data-content': this.props.userstore.getText('measures'),
	                  className: 'ui compact button ' + this.state.buttons.measures },
	                _react2['default'].createElement('img', { src: _imagesMeasureSvg2['default'], style: this.iconButtonStyle, height: '15px', width: '15px' })
	              ),
	              _react2['default'].createElement(
	                'div',
	                { style: this.buttonStyle,
	                  onClick: this.setState.bind(this, { display: 'tags' }, null),
	                  'data-content': this.props.userstore.getText('tags'),
	                  className: 'ui compact mini icon button ' + this.state.buttons.tags },
	                _react2['default'].createElement('i', { className: 'tags icon' })
	              )
	            ),
	            _react2['default'].createElement(
	              'div',
	              { style: this.upperButtonsStyle, className: 'ui mini buttons' },
	              _react2['default'].createElement(
	                'div',
	                { style: this.buttonStyle,
	                  className: 'ui compact button ' + this.state.buttons.image,
	                  'data-content': this.props.userstore.getText('imageSheet'),
	                  onClick: this.setSubject.bind(this, 'image') },
	                _react2['default'].createElement('i', { className: 'file icon', style: this.iconButtonStyle })
	              ),
	              _react2['default'].createElement(
	                'div',
	                { style: this.buttonStyle,
	                  className: 'ui compact button ' + this.state.buttons.set,
	                  'data-content': this.props.userstore.getText('set'),
	                  onClick: this.setSubject.bind(this, 'set') },
	                _react2['default'].createElement('i', { className: 'folder icon', style: this.iconButtonStyle })
	              )
	            ),
	            _react2['default'].createElement(
	              'div',
	              { style: this.upperButtonsStyle },
	              _react2['default'].createElement(
	                'div',
	                { style: this.buttonStyle,
	                  'data-content': this.props.userstore.getText('copyToClipboard'),
	                  ref: 'copyButton',
	                  className: 'ui mini compact button' },
	                _react2['default'].createElement('i', { className: 'copy icon', style: this.iconButtonStyle })
	              ),
	              _react2['default'].createElement(
	                'div',
	                { style: this.buttonStyle,
	                  'data-content': this.props.userstore.getText('exportAsCsv'),
	                  onClick: this.exportAsCSV.bind(this),
	                  className: 'ui mini compact button' },
	                _react2['default'].createElement('i', { className: 'download icon', style: this.iconButtonStyle })
	              ),
	              _react2['default'].createElement(
	                'div',
	                { style: this.buttonStyle,
	                  'data-content': this.props.userstore.getText('displayOptions'),
	                  className: 'ui mini compact button disabled' },
	                _react2['default'].createElement('i', { style: this.iconButtonStyle, className: 'setting icon' })
	              )
	            )
	          ),
	          this.state.display === 'measures' ? this.displayMeasures() : this.displayTags()
	        )
	      );
	    }
	  }]);

	  return AnnotationList;
	})(_react2['default'].Component);

	exports['default'] = AnnotationList;
	module.exports = exports['default'];

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(356), __webpack_require__(358), __webpack_require__(359)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(module, require('./clipboard-action'), require('tiny-emitter'), require('good-listener'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod, global.clipboardAction, global.tinyEmitter, global.goodListener);
	        global.clipboard = mod.exports;
	    }
	})(this, function (module, _clipboardAction, _tinyEmitter, _goodListener) {
	    'use strict';

	    var _clipboardAction2 = _interopRequireDefault(_clipboardAction);

	    var _tinyEmitter2 = _interopRequireDefault(_tinyEmitter);

	    var _goodListener2 = _interopRequireDefault(_goodListener);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	        return typeof obj;
	    } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };

	    function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	            throw new TypeError("Cannot call a class as a function");
	        }
	    }

	    var _createClass = function () {
	        function defineProperties(target, props) {
	            for (var i = 0; i < props.length; i++) {
	                var descriptor = props[i];
	                descriptor.enumerable = descriptor.enumerable || false;
	                descriptor.configurable = true;
	                if ("value" in descriptor) descriptor.writable = true;
	                Object.defineProperty(target, descriptor.key, descriptor);
	            }
	        }

	        return function (Constructor, protoProps, staticProps) {
	            if (protoProps) defineProperties(Constructor.prototype, protoProps);
	            if (staticProps) defineProperties(Constructor, staticProps);
	            return Constructor;
	        };
	    }();

	    function _possibleConstructorReturn(self, call) {
	        if (!self) {
	            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	        }

	        return call && (typeof call === "object" || typeof call === "function") ? call : self;
	    }

	    function _inherits(subClass, superClass) {
	        if (typeof superClass !== "function" && superClass !== null) {
	            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	        }

	        subClass.prototype = Object.create(superClass && superClass.prototype, {
	            constructor: {
	                value: subClass,
	                enumerable: false,
	                writable: true,
	                configurable: true
	            }
	        });
	        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	    }

	    var Clipboard = function (_Emitter) {
	        _inherits(Clipboard, _Emitter);

	        /**
	         * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
	         * @param {Object} options
	         */
	        function Clipboard(trigger, options) {
	            _classCallCheck(this, Clipboard);

	            var _this = _possibleConstructorReturn(this, (Clipboard.__proto__ || Object.getPrototypeOf(Clipboard)).call(this));

	            _this.resolveOptions(options);
	            _this.listenClick(trigger);
	            return _this;
	        }

	        /**
	         * Defines if attributes would be resolved using internal setter functions
	         * or custom functions that were passed in the constructor.
	         * @param {Object} options
	         */


	        _createClass(Clipboard, [{
	            key: 'resolveOptions',
	            value: function resolveOptions() {
	                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	                this.action = typeof options.action === 'function' ? options.action : this.defaultAction;
	                this.target = typeof options.target === 'function' ? options.target : this.defaultTarget;
	                this.text = typeof options.text === 'function' ? options.text : this.defaultText;
	                this.container = _typeof(options.container) === 'object' ? options.container : document.body;
	            }
	        }, {
	            key: 'listenClick',
	            value: function listenClick(trigger) {
	                var _this2 = this;

	                this.listener = (0, _goodListener2.default)(trigger, 'click', function (e) {
	                    return _this2.onClick(e);
	                });
	            }
	        }, {
	            key: 'onClick',
	            value: function onClick(e) {
	                var trigger = e.delegateTarget || e.currentTarget;

	                if (this.clipboardAction) {
	                    this.clipboardAction = null;
	                }

	                this.clipboardAction = new _clipboardAction2.default({
	                    action: this.action(trigger),
	                    target: this.target(trigger),
	                    text: this.text(trigger),
	                    container: this.container,
	                    trigger: trigger,
	                    emitter: this
	                });
	            }
	        }, {
	            key: 'defaultAction',
	            value: function defaultAction(trigger) {
	                return getAttributeValue('action', trigger);
	            }
	        }, {
	            key: 'defaultTarget',
	            value: function defaultTarget(trigger) {
	                var selector = getAttributeValue('target', trigger);

	                if (selector) {
	                    return document.querySelector(selector);
	                }
	            }
	        }, {
	            key: 'defaultText',
	            value: function defaultText(trigger) {
	                return getAttributeValue('text', trigger);
	            }
	        }, {
	            key: 'destroy',
	            value: function destroy() {
	                this.listener.destroy();

	                if (this.clipboardAction) {
	                    this.clipboardAction.destroy();
	                    this.clipboardAction = null;
	                }
	            }
	        }], [{
	            key: 'isSupported',
	            value: function isSupported() {
	                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['copy', 'cut'];

	                var actions = typeof action === 'string' ? [action] : action;
	                var support = !!document.queryCommandSupported;

	                actions.forEach(function (action) {
	                    support = support && !!document.queryCommandSupported(action);
	                });

	                return support;
	            }
	        }]);

	        return Clipboard;
	    }(_tinyEmitter2.default);

	    /**
	     * Helper function to retrieve attribute value.
	     * @param {String} suffix
	     * @param {Element} element
	     */
	    function getAttributeValue(suffix, element) {
	        var attribute = 'data-clipboard-' + suffix;

	        if (!element.hasAttribute(attribute)) {
	            return;
	        }

	        return element.getAttribute(attribute);
	    }

	    module.exports = Clipboard;
	});

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module, __webpack_require__(357)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        factory(module, require('select'));
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod, global.select);
	        global.clipboardAction = mod.exports;
	    }
	})(this, function (module, _select) {
	    'use strict';

	    var _select2 = _interopRequireDefault(_select);

	    function _interopRequireDefault(obj) {
	        return obj && obj.__esModule ? obj : {
	            default: obj
	        };
	    }

	    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	        return typeof obj;
	    } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };

	    function _classCallCheck(instance, Constructor) {
	        if (!(instance instanceof Constructor)) {
	            throw new TypeError("Cannot call a class as a function");
	        }
	    }

	    var _createClass = function () {
	        function defineProperties(target, props) {
	            for (var i = 0; i < props.length; i++) {
	                var descriptor = props[i];
	                descriptor.enumerable = descriptor.enumerable || false;
	                descriptor.configurable = true;
	                if ("value" in descriptor) descriptor.writable = true;
	                Object.defineProperty(target, descriptor.key, descriptor);
	            }
	        }

	        return function (Constructor, protoProps, staticProps) {
	            if (protoProps) defineProperties(Constructor.prototype, protoProps);
	            if (staticProps) defineProperties(Constructor, staticProps);
	            return Constructor;
	        };
	    }();

	    var ClipboardAction = function () {
	        /**
	         * @param {Object} options
	         */
	        function ClipboardAction(options) {
	            _classCallCheck(this, ClipboardAction);

	            this.resolveOptions(options);
	            this.initSelection();
	        }

	        /**
	         * Defines base properties passed from constructor.
	         * @param {Object} options
	         */


	        _createClass(ClipboardAction, [{
	            key: 'resolveOptions',
	            value: function resolveOptions() {
	                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	                this.action = options.action;
	                this.container = options.container;
	                this.emitter = options.emitter;
	                this.target = options.target;
	                this.text = options.text;
	                this.trigger = options.trigger;

	                this.selectedText = '';
	            }
	        }, {
	            key: 'initSelection',
	            value: function initSelection() {
	                if (this.text) {
	                    this.selectFake();
	                } else if (this.target) {
	                    this.selectTarget();
	                }
	            }
	        }, {
	            key: 'selectFake',
	            value: function selectFake() {
	                var _this = this;

	                var isRTL = document.documentElement.getAttribute('dir') == 'rtl';

	                this.removeFake();

	                this.fakeHandlerCallback = function () {
	                    return _this.removeFake();
	                };
	                this.fakeHandler = this.container.addEventListener('click', this.fakeHandlerCallback) || true;

	                this.fakeElem = document.createElement('textarea');
	                // Prevent zooming on iOS
	                this.fakeElem.style.fontSize = '12pt';
	                // Reset box model
	                this.fakeElem.style.border = '0';
	                this.fakeElem.style.padding = '0';
	                this.fakeElem.style.margin = '0';
	                // Move element out of screen horizontally
	                this.fakeElem.style.position = 'absolute';
	                this.fakeElem.style[isRTL ? 'right' : 'left'] = '-9999px';
	                // Move element to the same position vertically
	                var yPosition = window.pageYOffset || document.documentElement.scrollTop;
	                this.fakeElem.style.top = yPosition + 'px';

	                this.fakeElem.setAttribute('readonly', '');
	                this.fakeElem.value = this.text;

	                this.container.appendChild(this.fakeElem);

	                this.selectedText = (0, _select2.default)(this.fakeElem);
	                this.copyText();
	            }
	        }, {
	            key: 'removeFake',
	            value: function removeFake() {
	                if (this.fakeHandler) {
	                    this.container.removeEventListener('click', this.fakeHandlerCallback);
	                    this.fakeHandler = null;
	                    this.fakeHandlerCallback = null;
	                }

	                if (this.fakeElem) {
	                    this.container.removeChild(this.fakeElem);
	                    this.fakeElem = null;
	                }
	            }
	        }, {
	            key: 'selectTarget',
	            value: function selectTarget() {
	                this.selectedText = (0, _select2.default)(this.target);
	                this.copyText();
	            }
	        }, {
	            key: 'copyText',
	            value: function copyText() {
	                var succeeded = void 0;

	                try {
	                    succeeded = document.execCommand(this.action);
	                } catch (err) {
	                    succeeded = false;
	                }

	                this.handleResult(succeeded);
	            }
	        }, {
	            key: 'handleResult',
	            value: function handleResult(succeeded) {
	                this.emitter.emit(succeeded ? 'success' : 'error', {
	                    action: this.action,
	                    text: this.selectedText,
	                    trigger: this.trigger,
	                    clearSelection: this.clearSelection.bind(this)
	                });
	            }
	        }, {
	            key: 'clearSelection',
	            value: function clearSelection() {
	                if (this.trigger) {
	                    this.trigger.focus();
	                }

	                window.getSelection().removeAllRanges();
	            }
	        }, {
	            key: 'destroy',
	            value: function destroy() {
	                this.removeFake();
	            }
	        }, {
	            key: 'action',
	            set: function set() {
	                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'copy';

	                this._action = action;

	                if (this._action !== 'copy' && this._action !== 'cut') {
	                    throw new Error('Invalid "action" value, use either "copy" or "cut"');
	                }
	            },
	            get: function get() {
	                return this._action;
	            }
	        }, {
	            key: 'target',
	            set: function set(target) {
	                if (target !== undefined) {
	                    if (target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && target.nodeType === 1) {
	                        if (this.action === 'copy' && target.hasAttribute('disabled')) {
	                            throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
	                        }

	                        if (this.action === 'cut' && (target.hasAttribute('readonly') || target.hasAttribute('disabled'))) {
	                            throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');
	                        }

	                        this._target = target;
	                    } else {
	                        throw new Error('Invalid "target" value, use a valid Element');
	                    }
	                }
	            },
	            get: function get() {
	                return this._target;
	            }
	        }]);

	        return ClipboardAction;
	    }();

	    module.exports = ClipboardAction;
	});

/***/ },
/* 357 */
/***/ function(module, exports) {

	function select(element) {
	    var selectedText;

	    if (element.nodeName === 'SELECT') {
	        element.focus();

	        selectedText = element.value;
	    }
	    else if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {
	        var isReadOnly = element.hasAttribute('readonly');

	        if (!isReadOnly) {
	            element.setAttribute('readonly', '');
	        }

	        element.select();
	        element.setSelectionRange(0, element.value.length);

	        if (!isReadOnly) {
	            element.removeAttribute('readonly');
	        }

	        selectedText = element.value;
	    }
	    else {
	        if (element.hasAttribute('contenteditable')) {
	            element.focus();
	        }

	        var selection = window.getSelection();
	        var range = document.createRange();

	        range.selectNodeContents(element);
	        selection.removeAllRanges();
	        selection.addRange(range);

	        selectedText = selection.toString();
	    }

	    return selectedText;
	}

	module.exports = select;


/***/ },
/* 358 */
/***/ function(module, exports) {

	function E () {
	  // Keep this empty so it's easier to inherit from
	  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
	}

	E.prototype = {
	  on: function (name, callback, ctx) {
	    var e = this.e || (this.e = {});

	    (e[name] || (e[name] = [])).push({
	      fn: callback,
	      ctx: ctx
	    });

	    return this;
	  },

	  once: function (name, callback, ctx) {
	    var self = this;
	    function listener () {
	      self.off(name, listener);
	      callback.apply(ctx, arguments);
	    };

	    listener._ = callback
	    return this.on(name, listener, ctx);
	  },

	  emit: function (name) {
	    var data = [].slice.call(arguments, 1);
	    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
	    var i = 0;
	    var len = evtArr.length;

	    for (i; i < len; i++) {
	      evtArr[i].fn.apply(evtArr[i].ctx, data);
	    }

	    return this;
	  },

	  off: function (name, callback) {
	    var e = this.e || (this.e = {});
	    var evts = e[name];
	    var liveEvents = [];

	    if (evts && callback) {
	      for (var i = 0, len = evts.length; i < len; i++) {
	        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
	          liveEvents.push(evts[i]);
	      }
	    }

	    // Remove event from queue to prevent memory leak
	    // Suggested by https://github.com/lazd
	    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910

	    (liveEvents.length)
	      ? e[name] = liveEvents
	      : delete e[name];

	    return this;
	  }
	};

	module.exports = E;


/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	var is = __webpack_require__(360);
	var delegate = __webpack_require__(361);

	/**
	 * Validates all params and calls the right
	 * listener function based on its target type.
	 *
	 * @param {String|HTMLElement|HTMLCollection|NodeList} target
	 * @param {String} type
	 * @param {Function} callback
	 * @return {Object}
	 */
	function listen(target, type, callback) {
	    if (!target && !type && !callback) {
	        throw new Error('Missing required arguments');
	    }

	    if (!is.string(type)) {
	        throw new TypeError('Second argument must be a String');
	    }

	    if (!is.fn(callback)) {
	        throw new TypeError('Third argument must be a Function');
	    }

	    if (is.node(target)) {
	        return listenNode(target, type, callback);
	    }
	    else if (is.nodeList(target)) {
	        return listenNodeList(target, type, callback);
	    }
	    else if (is.string(target)) {
	        return listenSelector(target, type, callback);
	    }
	    else {
	        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');
	    }
	}

	/**
	 * Adds an event listener to a HTML element
	 * and returns a remove listener function.
	 *
	 * @param {HTMLElement} node
	 * @param {String} type
	 * @param {Function} callback
	 * @return {Object}
	 */
	function listenNode(node, type, callback) {
	    node.addEventListener(type, callback);

	    return {
	        destroy: function() {
	            node.removeEventListener(type, callback);
	        }
	    }
	}

	/**
	 * Add an event listener to a list of HTML elements
	 * and returns a remove listener function.
	 *
	 * @param {NodeList|HTMLCollection} nodeList
	 * @param {String} type
	 * @param {Function} callback
	 * @return {Object}
	 */
	function listenNodeList(nodeList, type, callback) {
	    Array.prototype.forEach.call(nodeList, function(node) {
	        node.addEventListener(type, callback);
	    });

	    return {
	        destroy: function() {
	            Array.prototype.forEach.call(nodeList, function(node) {
	                node.removeEventListener(type, callback);
	            });
	        }
	    }
	}

	/**
	 * Add an event listener to a selector
	 * and returns a remove listener function.
	 *
	 * @param {String} selector
	 * @param {String} type
	 * @param {Function} callback
	 * @return {Object}
	 */
	function listenSelector(selector, type, callback) {
	    return delegate(document.body, selector, type, callback);
	}

	module.exports = listen;


/***/ },
/* 360 */
/***/ function(module, exports) {

	/**
	 * Check if argument is a HTML element.
	 *
	 * @param {Object} value
	 * @return {Boolean}
	 */
	exports.node = function(value) {
	    return value !== undefined
	        && value instanceof HTMLElement
	        && value.nodeType === 1;
	};

	/**
	 * Check if argument is a list of HTML elements.
	 *
	 * @param {Object} value
	 * @return {Boolean}
	 */
	exports.nodeList = function(value) {
	    var type = Object.prototype.toString.call(value);

	    return value !== undefined
	        && (type === '[object NodeList]' || type === '[object HTMLCollection]')
	        && ('length' in value)
	        && (value.length === 0 || exports.node(value[0]));
	};

	/**
	 * Check if argument is a string.
	 *
	 * @param {Object} value
	 * @return {Boolean}
	 */
	exports.string = function(value) {
	    return typeof value === 'string'
	        || value instanceof String;
	};

	/**
	 * Check if argument is a function.
	 *
	 * @param {Object} value
	 * @return {Boolean}
	 */
	exports.fn = function(value) {
	    var type = Object.prototype.toString.call(value);

	    return type === '[object Function]';
	};


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	var closest = __webpack_require__(362);

	/**
	 * Delegates event to a selector.
	 *
	 * @param {Element} element
	 * @param {String} selector
	 * @param {String} type
	 * @param {Function} callback
	 * @param {Boolean} useCapture
	 * @return {Object}
	 */
	function delegate(element, selector, type, callback, useCapture) {
	    var listenerFn = listener.apply(this, arguments);

	    element.addEventListener(type, listenerFn, useCapture);

	    return {
	        destroy: function() {
	            element.removeEventListener(type, listenerFn, useCapture);
	        }
	    }
	}

	/**
	 * Finds closest match and invokes callback.
	 *
	 * @param {Element} element
	 * @param {String} selector
	 * @param {String} type
	 * @param {Function} callback
	 * @return {Function}
	 */
	function listener(element, selector, type, callback) {
	    return function(e) {
	        e.delegateTarget = closest(e.target, selector);

	        if (e.delegateTarget) {
	            callback.call(element, e);
	        }
	    }
	}

	module.exports = delegate;


/***/ },
/* 362 */
/***/ function(module, exports) {

	var DOCUMENT_NODE_TYPE = 9;

	/**
	 * A polyfill for Element.matches()
	 */
	if (typeof Element !== 'undefined' && !Element.prototype.matches) {
	    var proto = Element.prototype;

	    proto.matches = proto.matchesSelector ||
	                    proto.mozMatchesSelector ||
	                    proto.msMatchesSelector ||
	                    proto.oMatchesSelector ||
	                    proto.webkitMatchesSelector;
	}

	/**
	 * Finds the closest parent that matches a selector.
	 *
	 * @param {Element} element
	 * @param {String} selector
	 * @return {Function}
	 */
	function closest (element, selector) {
	    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
	        if (typeof element.matches === 'function' &&
	            element.matches(selector)) {
	          return element;
	        }
	        element = element.parentNode;
	    }
	}

	module.exports = closest;


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	var creatCSVFile = __webpack_require__(364);
	var downloadFile = __webpack_require__(365);
	var detectionClientType = __webpack_require__(366);

	function downloadCsv(datas, columns, filename) {
	  downloadFile(creatCSVFile(datas, columns), filename);
	};

	downloadCsv.creatCsvFile = creatCSVFile;
	downloadCsv.downloadFile = downloadFile;
	downloadCsv.detectionClientType = detectionClientType;

	module.exports = downloadCsv;


/***/ },
/* 364 */
/***/ function(module, exports) {

	"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n};module.exports=function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:",";if(!n||Array.isArray(n)&&!n.length||!Object.keys(n).length)return"传入数据为空(the download datas is null)";var r=[];if("object"===("undefined"==typeof n?"undefined":_typeof(n))&&Array.isArray(n)){var o=function(){var o=Array.isArray(n[0]);return n.some(function(n){return Array.isArray(n)!==o})?{v:"传入数据格式不一致(the array element data format is inconsistent)"}:void(o?r=r.concat(n.map(function(n){return n.join(t)})):!function(){var o=[];if(n.forEach(function(n){return o=o.concat(Object.keys(n))}),o=o.filter(function(n,e,t){return t.indexOf(n)===e}),o.length>0)if(e&&"object"===("undefined"==typeof e?"undefined":_typeof(e))){var f=o.map(function(n){return e.hasOwnProperty(n)?e[n]:n});r.push(f.join(t))}else r.push(o.join(t));n.map(function(n){return o.map(function(e){return"undefined"!=typeof n[e]?n[e]:""})}).forEach(function(n){r.push(n.join(t))})}())}();if("object"===("undefined"==typeof o?"undefined":_typeof(o)))return o.v}else{if("object"!==("undefined"==typeof n?"undefined":_typeof(n)))return n;for(var f in n)e&&e.hasOwnProperty(f)?r.push(e[f]+","+n[f]):r.push(f+","+n[f])}return r.join("\r\n")};

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";var detectionClientType=__webpack_require__(366);module.exports=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"export.csv";if(!e)return void console.log("the file is null");var n=detectionClientType(),o="\ufeff",c="data:attachment/csv;charset=utf-8,"+o+encodeURIComponent(e);if(window.Blob&&window.URL&&window.URL.createObjectURL){var a=new Blob([o+e],{type:"text/csv"});c=URL.createObjectURL(a)}if("IE"===n.name){var d=window.top.open("about:blank","_blank");return d.document.write("sep=,\r\n"+e),d.document.close(),d.document.execCommand("SaveAs",!0,t),void d.close()}if("Safari"===n.name){var i=document.createElement("a");i.id="csvDwnLink",document.body.appendChild(i);var r=o+e,l="data:attachment/csv;charset=utf-8,"+encodeURIComponent(r);return document.getElementById("csvDwnLink").setAttribute("href",l),document.getElementById("csvDwnLink").click(),void document.body.removeChild(i)}if("Firefox"===n.name){var v=document.createElement("a");v.download=t,v.target="_blank",v.href=c;var m=document.createEvent("MouseEvents");return m.initEvent("click",!0,!0),void v.dispatchEvent(m)}var u=document.createElement("a");u.download=t,u.href=c,u.click()};

/***/ },
/* 366 */
/***/ function(module, exports) {

	"use strict";module.exports=function(){var e={},r=navigator.userAgent.toLowerCase(),a=void 0;return(a=r.match(/msie ([\d.]+)/))?e.ie=a[1]:(a=r.match(/firefox\/([\d.]+)/))?e.firefox=a[1]:(a=r.match(/chrome\/([\d.]+)/))?e.chrome=a[1]:(a=r.match(/opera.([\d.]+)/))?e.opera=a[1]:(a=r.match(/version\/([\d.]+).*safari/))?e.safari=a[1]:0,e.ie?{name:"IE",version:e.ie}:e.firefox?{name:"Firefox",version:e.firefox}:e.chrome?{name:"Chrome",version:e.chrome}:e.opera?{name:"Opera",version:e.opera}:e.safari?{name:"Safari",version:e.safari}:{name:""}};

/***/ },
/* 367 */,
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Displays the most relevant (as defined by Marc) metadata regarding a Specimen, as well as a link to the Explore page of said specimen. Does not work for non-Recolnat specimens.
	 *
	 * Created by dmitri on 16/02/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _superagent = __webpack_require__(229);

	var _superagent2 = _interopRequireDefault(_superagent);

	var _componentsManagerAbstractManagerMetadataDisplay = __webpack_require__(369);

	var _componentsManagerAbstractManagerMetadataDisplay2 = _interopRequireDefault(_componentsManagerAbstractManagerMetadataDisplay);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _actionsSocketActions = __webpack_require__(240);

	var _actionsSocketActions2 = _interopRequireDefault(_actionsSocketActions);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var SpecimenMetadataDisplay = (function (_React$Component) {
	  _inherits(SpecimenMetadataDisplay, _React$Component);

	  function SpecimenMetadataDisplay(props) {
	    var _this = this;

	    _classCallCheck(this, SpecimenMetadataDisplay);

	    _get(Object.getPrototypeOf(SpecimenMetadataDisplay.prototype), 'constructor', this).call(this, props);

	    this.containerStyle = {
	      //overflowY: 'auto',
	      height: this.props.height - 10,
	      padding: '5px 5px 5px 5px',
	      borderColor: '#2185d0!important'
	    };

	    this.labelContainerStyle = {
	      position: 'relative',
	      width: 0,
	      height: '10px'
	    };

	    this.labelStyle = {
	      position: 'relative',
	      top: '-15px',
	      left: '10px',
	      whiteSpace: 'nowrap'
	    };

	    this.scrollerStyle = {
	      height: this.props.height - 35,
	      overflowY: 'auto'
	    };

	    this.textStyle = {
	      wordBreak: 'break-all'
	    };

	    this._onOriginalSourceMetadataAvailable = function (id) {
	      var getDataFromSource = function getDataFromSource(id) {
	        return _this.getMetadataFromSource(_this.props.metastore.getMetadataAbout(id));
	      };
	      return getDataFromSource.apply(_this, [id]);
	    };

	    this._onSelectionChange = function () {
	      var updateMetadataDisplay = function updateMetadataDisplay() {
	        return _this.downloadMetadata(_this.props.managerstore.getSelected().id);
	      };
	      updateMetadataDisplay.apply(_this);
	    };

	    this._forceUpdate = function () {
	      var update = function update() {
	        return _this.setState({});
	      };
	      return update.apply(_this);
	    };

	    this.state = this.initialState();
	  }

	  _createClass(SpecimenMetadataDisplay, [{
	    key: 'initialState',
	    value: function initialState() {
	      return {
	        id: null,
	        metadata: null,
	        source: null,
	        scientificName: null,
	        scientificNameAuthorship: null,
	        determinationStatusWarning: null,
	        harvestRecordedBy: null,
	        harvestFieldNumber: null,
	        harvestVerbatimLocality: null,
	        institutionCode: null,
	        catalogNumber: null,
	        linkToExplore: null
	      };
	    }
	  }, {
	    key: 'downloadMetadata',
	    value: function downloadMetadata(id) {
	      if (this.state.id) {
	        this.props.metastore.removeMetadataUpdateListener(this.state.id, this.receiveMetadata.bind(this));
	      }
	      this.props.metastore.addMetadataUpdateListener(id, this.receiveMetadata.bind(this));
	      this.setState({ id: id });
	      //window.setTimeout(this.receiveMetadata.bind(this), 50);
	    }
	  }, {
	    key: 'receiveMetadata',
	    value: function receiveMetadata() {
	      var data = this.props.metastore.getMetadataAbout(this.state.id);
	      if (data) {
	        this.processCoLabMetadata(data);
	      }
	    }
	  }, {
	    key: 'processCoLabMetadata',
	    value: function processCoLabMetadata(metadata) {
	      if (metadata.type == 'Specimen') {
	        this.setState(this.initialState());
	        //console.log(JSON.stringify(metadata));
	        if (metadata.originalSource) {
	          if (this.state.metadata) {
	            this.props.metastore.removeMetadataUpdateListener(this.state.metadata.originalSource, this._onOriginalSourceMetadataAvailable);
	          }
	          this.props.metastore.addMetadataUpdateListener(metadata.originalSource, this._onOriginalSourceMetadataAvailable);
	        }

	        this.setState({ metadata: metadata });
	        //window.setTimeout(this._onOriginalSourceMetadataAvailable.bind(this, metadata.originalSource), 50);
	      }
	    }
	  }, {
	    key: 'getMetadataFromSource',
	    value: function getMetadataFromSource(colabMetadata) {
	      if (!colabMetadata) {
	        return;
	      }

	      var id = colabMetadata.idInOriginSource;
	      var type = colabMetadata.typeInOriginSource;
	      var source = colabMetadata.origin;
	      switch (source.toLowerCase()) {
	        case 'recolnat':
	          this.getRecolnatMetadata(id, type);
	          break;
	        default:
	          console.error('Unknown data source ' + source);
	          break;
	      }
	      this.setState({ source: source });
	    }
	  }, {
	    key: 'getRecolnatMetadata',
	    value: function getRecolnatMetadata(id, type) {
	      switch (type.toLowerCase()) {
	        case 'specimen':
	          this.getRecolnatSpecimenMetadata(id);
	          break;
	        default:
	          console.error('No handler for ReColNat object type ' + type);
	          break;
	      }
	    }
	  }, {
	    key: 'getRecolnatSpecimenMetadata',
	    value: function getRecolnatSpecimenMetadata(id) {
	      var _this2 = this;

	      // Example id 3A160E6F-8ED3-4ED3-A46A-D6737893E844
	      // https://api.recolnat.org/erecolnat/v1/specimens/3a160e6f-8ed3-4ed3-a46a-d6737893e844
	      // Then go to determination(s)
	      _superagent2['default'].get('https://api.recolnat.org/erecolnat/v1/specimens/' + id)
	      //.withCredentials()
	      .end(function (err, res) {
	        if (err) {
	          console.error('Could not retrieve resource data from recolnat about ' + id);
	          _this2.setState({
	            type: 'specimen',
	            source: 'recolnat',
	            institutionCode: _this2.props.userstore.getText('dataUnavailableDueToNetworkError'),
	            catalogNumber: ''
	          });
	        } else {
	          var specimen = JSON.parse(res.text);
	          var institCode = _this2.props.userstore.getText('insitutionCodeUnavailable');
	          var catalogNum = _this2.props.userstore.getText('catalogNumberUnavailable');
	          if (specimen.institutioncode) {
	            institCode = specimen.institutioncode;
	          }
	          if (specimen.catalognumber) {
	            catalogNum = specimen.catalognumber;
	          }
	          _this2.setState({
	            type: 'specimen',
	            source: 'recolnat',
	            institutionCode: institCode,
	            catalogNumber: catalogNum
	          });
	        }
	      });

	      _superagent2['default'].get('https://api.recolnat.org/erecolnat/v1/specimens/' + id + '/determinations')
	      //.withCredentials()
	      .end(function (err, res) {
	        if (err) {
	          console.error('Error requesting determinations about ' + id);
	          _this2.setState({
	            scientificName: _this2.props.userstore.getText('dataUnavailableDueToNetworkError'),
	            scientificNameAuthorship: ''
	          });
	        } else {
	          var determinations = JSON.parse(res.text);
	          var scName = _this2.props.userstore.getText('dataUnavailable');
	          var scNameAuth = _this2.props.userstore.getText('dataUnavailable');
	          var determinationStatusWarning = 'warning';
	          //console.log('determinations=' + res.text);
	          for (var i = 0; i < determinations.length; ++i) {
	            var determination = determinations[i];
	            if (determination.taxon.scientificName) {
	              scName = determination.taxon.scientificName;
	            }
	            if (determination.taxon.scientificNameAuthorship) {
	              scNameAuth = determination.taxon.scientificNameAuthorship;
	            }
	            if (determination.identificationverificationstatus == 1) {
	              //console.log('determination1=' + JSON.stringify(determination));
	              determinationStatusWarning = null;
	              break;
	            }
	          }
	          _this2.setState({
	            scientificName: scName,
	            scientificNameAuthorship: scNameAuth,
	            determinationStatusWarning: determinationStatusWarning
	          });
	        }
	      });

	      _superagent2['default'].get('https://api.recolnat.org/erecolnat/v1/specimens/' + id + '/recolte')
	      //.withCredentials()
	      .end(function (err, res) {
	        if (err) {
	          console.error('Error requesting harvest data about ' + id);
	          _this2.setState({
	            harvestVerbatimLocality: _this2.props.userstore.getText('dataUnavailableDueToNetworkError'),
	            harvestRecordedBy: _this2.props.userstore.getText('dataUnavailableDueToNetworkError'),
	            harvestFieldNumber: ''
	          });
	        } else {
	          var harvest = JSON.parse(res.text);
	          //console.log('harvest=' + res.text);
	          var recBy = _this2.props.userstore.getText('dataUnavailable');
	          var fieldNum = _this2.props.userstore.getText('dataUnavailable');
	          var verbatimLoc = _this2.props.userstore.getText('dataUnavailable');

	          if (harvest.recordedBy) {
	            recBy = harvest.recordedBy;
	          }
	          if (harvest.localisation.verbatimlocality) {
	            verbatimLoc = harvest.localisation.verbatimlocality;
	          }
	          if (harvest.fieldnumber) {
	            fieldNum = harvest.fieldnumber;
	          }
	          _this2.setState({
	            harvestVerbatimLocality: verbatimLoc,
	            harvestRecordedBy: recBy,
	            harvestFieldNumber: fieldNum
	          });
	        }
	      });

	      this.setState({
	        linkToExplore: 'https://explore.recolnat.org/#/specimen/botanique/' + id.split('-').join('')
	      });
	    }
	  }, {
	    key: 'createMetadataTable',
	    value: function createMetadataTable() {
	      if (!this.state.linkToExplore) {
	        return null;
	      }

	      // Name, Species, Harvester, Location, Collection, Link-to-Explore
	      return _react2['default'].createElement(
	        'table',
	        { className: 'ui selectable striped structured very compact table' },
	        _react2['default'].createElement(
	          'thead',
	          null,
	          _react2['default'].createElement(
	            'tr',
	            null,
	            _react2['default'].createElement(
	              'th',
	              { colSpan: '2', className: 'center aligned' },
	              _react2['default'].createElement('i', { className: 'ui yellow ' + this.state.determinationStatusWarning + ' icon', ref: 'warning', 'data-content': this.props.userstore.getText('noDeterminationAccepted') }),
	              _react2['default'].createElement(
	                'i',
	                null,
	                this.state.scientificName
	              ),
	              ' ',
	              this.state.scientificNameAuthorship
	            )
	          )
	        ),
	        _react2['default'].createElement(
	          'tbody',
	          null,
	          _react2['default'].createElement(
	            'tr',
	            null,
	            _react2['default'].createElement(
	              'td',
	              { className: 'right aligned' },
	              this.props.userstore.getText('harvester')
	            ),
	            _react2['default'].createElement(
	              'td',
	              { className: 'left aligned', style: this.textStyle },
	              this.state.harvestRecordedBy,
	              ' ',
	              this.state.harvestFieldNumber
	            )
	          ),
	          _react2['default'].createElement(
	            'tr',
	            null,
	            _react2['default'].createElement(
	              'td',
	              { className: 'right aligned' },
	              this.props.userstore.getText('harvestLocation')
	            ),
	            _react2['default'].createElement(
	              'td',
	              { className: 'left aligned', style: this.textStyle },
	              this.state.harvestVerbatimLocality
	            )
	          ),
	          _react2['default'].createElement(
	            'tr',
	            null,
	            _react2['default'].createElement(
	              'td',
	              { className: 'right aligned' },
	              this.props.userstore.getText('catalogNumber')
	            ),
	            _react2['default'].createElement(
	              'td',
	              { className: 'left aligned', style: this.textStyle },
	              this.state.institutionCode,
	              ' ',
	              this.state.catalogNumber
	            )
	          ),
	          _react2['default'].createElement(
	            'tr',
	            null,
	            _react2['default'].createElement(
	              'td',
	              { className: 'center aligned', style: this.textStyle, colSpan: '2' },
	              _react2['default'].createElement(
	                'a',
	                { href: this.state.linkToExplore, target: '_blank' },
	                this.props.userstore.getText('specimenExplorePage')
	              )
	            )
	          )
	        )
	      );
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.managerstore.addSelectionChangeListener(this._onSelectionChange);
	      this.props.modestore.addModeChangeListener(this._forceUpdate);
	      this.props.userstore.addLanguageChangeListener(this._forceUpdate);
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(props) {
	      if (props.height != this.props.height) {
	        this.containerStyle.height = props.height - 10;
	        this.scrollerStyle.height = props.height - 35;
	      }
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {}
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.determinationStatusWarning) {
	        $(this.refs.warning.getDOMNode()).popup();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this.state.id) {
	        this.props.metastore.removeMetadataUpdateListener(this.state.id, this.receiveMetadata.bind(this));
	      }
	      if (this.state.metadata) {
	        this.props.metastore.removeMetadataUpdateListener(this.state.metadata.originalSource, this._onOriginalSourceMetadataAvailable);
	      }
	      this.props.managerstore.removeSelectionChangeListener(this._onSelectionChange);
	      this.props.modestore.removeModeChangeListener(this._forceUpdate);
	      this.props.userstore.removeLanguageChangeListener(this._forceUpdate);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { style: this.containerStyle, className: 'ui segment container' },
	        _react2['default'].createElement(
	          'div',
	          { style: this.labelContainerStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui blue tiny basic label',
	              style: this.labelStyle },
	            'Specimen'
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { style: this.scrollerStyle },
	          this.createMetadataTable()
	        )
	      );
	    }
	  }]);

	  return SpecimenMetadataDisplay;
	})(_react2['default'].Component);

	exports['default'] = SpecimenMetadataDisplay;
	module.exports = exports['default'];

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Displays a subset of metadata of the selected entity. Abstract component to be extended by the actual components. See palettes/SpecimenMetadataDisplay for example.
	 *
	 * Created by dmitri on 25/01/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsSocketActions = __webpack_require__(240);

	var _actionsSocketActions2 = _interopRequireDefault(_actionsSocketActions);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var WorkbenchManagerMetadataDisplay = (function (_React$Component) {
	  _inherits(WorkbenchManagerMetadataDisplay, _React$Component);

	  function WorkbenchManagerMetadataDisplay(props) {
	    var _this = this;

	    _classCallCheck(this, WorkbenchManagerMetadataDisplay);

	    _get(Object.getPrototypeOf(WorkbenchManagerMetadataDisplay.prototype), 'constructor', this).call(this, props);

	    this._onWorkbenchSelectionChange = function () {
	      var updateMetadataDisplay = function updateMetadataDisplay() {
	        return _this.downloadMetadata(_this.props.managerstore.getSelected().id);
	      };
	      updateMetadataDisplay.apply(_this);
	    };

	    this.textStyle = {
	      wordBreak: 'break-all'
	    };

	    this.containerStyle = {
	      overflowY: 'auto'
	    };

	    this._onModeChange = function () {
	      var setModeVisibility = function setModeVisibility() {
	        return _this.setState({
	          isVisibleInCurrentMode: _this.props.modestore.isInSetMode()
	        });
	      };
	      return setModeVisibility.apply(_this);
	    };

	    this.state = this.initialState();
	  }

	  _createClass(WorkbenchManagerMetadataDisplay, [{
	    key: 'initialState',
	    value: function initialState() {
	      return {
	        id: null,
	        isVisibleInCurrentMode: true,
	        type: null,
	        source: null,
	        name: null,
	        species: null,
	        harvester: null,
	        harvestLocation: null,
	        collection: null,
	        linkToExplore: null
	      };
	    }
	  }, {
	    key: 'downloadMetadata',
	    value: function downloadMetadata(id) {
	      if (this.state.id) {
	        this.props.metastore.removeMetadataUpdateListener(this.state.id, this.receiveMetadata.bind(this));
	      }
	      this.props.metastore.addMetadataUpdateListener(id, this.receiveMetadata.bind(this));
	      this.setState({ id: id });
	      //window.setTimeout(this.receiveMetadata.bind(this, id), 50);
	    }
	  }, {
	    key: 'receiveMetadata',
	    value: function receiveMetadata() {
	      var data = this.props.metastore.getMetadataAbout(this.state.id);
	      if (data) {
	        this.processCoLabMetadata(data);
	      }
	    }
	  }, {
	    key: 'processCoLabMetadata',
	    value: function processCoLabMetadata(metadata) {
	      console.error('Method processCoLabMetadata not implemented in child class');
	    }
	  }, {
	    key: 'createMetadataTable',
	    value: function createMetadataTable() {
	      console.error('Method createMetadataTable not implemented in child class');
	      return null;
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.managerstore.addSelectionChangeListener(this._onWorkbenchSelectionChange);
	      this.props.modestore.addModeChangeListener(this._onModeChange);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.isVisibleInCurrentMode) {
	        this.containerStyle.display = '';
	      } else {
	        this.containerStyle.display = 'none';
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.managerstore.removeSelectionChangeListener(this._onWorkbenchSelectionChange);
	      this.props.modestore.removeModeChangeListener(this._onModeChange);
	      if (this.state.id) {
	        this.props.metastore.removeMetadataUpdateListener(this.state.id, this.receiveMetadata.bind(this));
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { style: this.containerStyle, className: 'ui container' },
	        this.createMetadataTable()
	      );
	    }
	  }]);

	  return WorkbenchManagerMetadataDisplay;
	})(_react2['default'].Component);

	exports['default'] = WorkbenchManagerMetadataDisplay;
	module.exports = exports['default'];

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Colaboratory main menu.
	 *
	 * Created by dmitri on 11/03/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsModalActions = __webpack_require__(265);

	var _actionsModalActions2 = _interopRequireDefault(_actionsModalActions);

	var _actionsUserActions = __webpack_require__(371);

	var _actionsUserActions2 = _interopRequireDefault(_actionsUserActions);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var MainMenu = (function (_React$Component) {
	  _inherits(MainMenu, _React$Component);

	  function MainMenu(props) {
	    _classCallCheck(this, MainMenu);

	    _get(Object.getPrototypeOf(MainMenu.prototype), 'constructor', this).call(this, props);

	    this.componentStyle = {
	      zIndex: 99999,
	      left: 0,
	      top: this.props.top + 'px',
	      width: this.props.width + 'px',
	      minWidth: this.props.width + 'px',
	      maxWidth: this.props.width + 'px',
	      cursor: 'default',
	      pointerEvents: 'none'
	    };

	    this.headerStyle = {
	      padding: '5px 5px 5px 5px',
	      margin: 0,
	      textAlign: 'center'
	    };

	    this.enableEventsStyle = {
	      pointerEvents: 'auto'
	    };

	    this.optionStyle = {
	      width: this.props.width + 'px',
	      padding: '2px 5px 2px 5px !important'
	    };

	    this.textStyle = {
	      color: '#0C0400',
	      fontVariant: 'small-caps',
	      fontSize: '16pt'
	    };

	    {}

	    /*<script src="build-timestamp.json" id="colaboratory_BuildTimestamp" type="application/json"></script>*/ // console.log($('#colaboratory_BuildTimestamp'));
	    // let timestamp = JSON.parse($('#colaboratory_BuildTimestamp').html());

	    this.state = {
	      timestamp: null
	    };
	  }

	  _createClass(MainMenu, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	      $(this.refs.dropdown.getDOMNode()).dropdown({
	        action: 'hide',
	        direction: 'downward',
	        onShow: this.setState.bind(this, {})
	      });

	      var self = this;
	      $.getJSON('build-timestamp.json', function (data) {
	        self.setState({ timestamp: data.date });
	      });
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var self = this;
	      return _react2['default'].createElement(
	        'div',
	        { ref: 'dropdown', style: this.componentStyle, className: 'ui dropdown' },
	        _react2['default'].createElement('i', { className: 'circular inverted blue sidebar icon', style: this.enableEventsStyle }),
	        _react2['default'].createElement(
	          'div',
	          { className: 'menu', style: this.enableEventsStyle },
	          _react2['default'].createElement(
	            'div',
	            { className: 'header', style: this.headerStyle },
	            this.props.userstore.getText('collaboratory')
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'item', style: this.optionStyle },
	            _react2['default'].createElement(
	              'span',
	              { className: 'text' },
	              this.props.userstore.getText('version'),
	              ' 0.9.3 (beta) - ',
	              this.state.timestamp ? new Date(this.state.timestamp).toLocaleString(this.props.userstore.getLanguage()) : null
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'item', onClick: _actionsModalActions2['default'].showModal.bind(null, _constantsModalConstants2['default'].Modals.feedback, null, null, null), style: this.optionStyle },
	            _react2['default'].createElement(
	              'span',
	              { className: 'text' },
	              this.props.userstore.getText('contactForm')
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'item', onClick: _actionsModalActions2['default'].showModal.bind(null, _constantsModalConstants2['default'].Modals.downloadSet, null, null, null), style: this.optionStyle },
	            _react2['default'].createElement(
	              'span',
	              { className: 'text' },
	              this.props.userstore.getText('exports')
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'dropdown item', style: this.optionStyle },
	            this.props.userstore.getText('languages'),
	            _react2['default'].createElement('i', { className: 'dropdown icon' }),
	            _react2['default'].createElement(
	              'div',
	              { className: 'menu' },
	              _confApplicationConfiguration2['default'].app.languages.map(function (language) {
	                return _react2['default'].createElement(
	                  'a',
	                  { className: 'item', key: language.code, style: self.optionStyle, onClick: _actionsUserActions2['default'].setLanguage.bind(null, language.code) },
	                  _react2['default'].createElement('i', { className: language.flag + ' flag' }),
	                  language.localized
	                );
	              })
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return MainMenu;
	})(_react2['default'].Component);

	exports['default'] = MainMenu;
	module.exports = exports['default'];

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Actions on the user or user profile options.
	 *
	 * Created by dmitri on 12/12/16.
	 */
	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _constantsUserConstants = __webpack_require__(372);

	var _constantsUserConstants2 = _interopRequireDefault(_constantsUserConstants);

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	exports['default'] = {
	  /**
	   * Sets the language of the application.
	   * @param code String code of the language to use (see ApplicationConfiguration)
	   */
	  setLanguage: function setLanguage(code) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsUserConstants2['default'].ActionTypes.USER_SET_LANGUAGE,
	      code: code
	    });
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 372 */
/***/ function(module, exports) {

	/**
	 * Constants for actions acting on user preferences.
	 *
	 * Created by dmitri on 12/12/16.
	 */
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  ActionTypes: {
	    USER_SET_LANGUAGE: "USER_SET_LANGUAGE"
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Invisible container containing all modals available in the application. Any new modal must be placed here to be available for display.
	 *
	 * Created by dmitri on 07/04/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _modalsLoginModal = __webpack_require__(374);

	var _modalsLoginModal2 = _interopRequireDefault(_modalsLoginModal);

	var _modalsConfirmDelete = __webpack_require__(375);

	var _modalsConfirmDelete2 = _interopRequireDefault(_modalsConfirmDelete);

	var _modalsAddAnnotationToEntity = __webpack_require__(377);

	var _modalsAddAnnotationToEntity2 = _interopRequireDefault(_modalsAddAnnotationToEntity);

	var _modalsTestRunnerModal = __webpack_require__(378);

	var _modalsTestRunnerModal2 = _interopRequireDefault(_modalsTestRunnerModal);

	var _modalsFeedbackForm = __webpack_require__(379);

	var _modalsFeedbackForm2 = _interopRequireDefault(_modalsFeedbackForm);

	var _modalsAddToSet = __webpack_require__(380);

	var _modalsAddToSet2 = _interopRequireDefault(_modalsAddToSet);

	var _modalsOrganiseSet = __webpack_require__(429);

	var _modalsOrganiseSet2 = _interopRequireDefault(_modalsOrganiseSet);

	var _modalsDownloadSetImages = __webpack_require__(430);

	var _modalsDownloadSetImages2 = _interopRequireDefault(_modalsDownloadSetImages);

	var _constantsViewConstants = __webpack_require__(197);

	var _constantsViewConstants2 = _interopRequireDefault(_constantsViewConstants);

	var Modals = (function (_React$Component) {
	  _inherits(Modals, _React$Component);

	  function Modals(props) {
	    var _this = this;

	    _classCallCheck(this, Modals);

	    _get(Object.getPrototypeOf(Modals.prototype), 'constructor', this).call(this, props);

	    this.containerStyle = {
	      display: '',
	      // position: 'fixed',
	      zIndex: _constantsViewConstants2['default'].zIndices.modalDimmer,
	      top: 0,
	      left: 0
	    };

	    this._onModalChange = function () {
	      var updateDisplay = function updateDisplay() {
	        return _this.setState({ showModal: _this.props.modalstore.getModalId() });
	      };
	      return updateDisplay.apply(_this);
	    };

	    this._onUserLogIn = function () {
	      var userLogIn = function userLogIn() {
	        return _this.setState({ showModal: null });
	      };
	      return userLogIn.apply(_this);
	    };

	    this._onUserLogOut = function () {
	      var userLogOut = function userLogOut() {
	        return _this.setState({ showModal: true });
	      };
	      return userLogOut.apply(_this);
	    };

	    this.state = {
	      showModal: !props.userstore.isUserAuthorized()
	    };
	  }

	  _createClass(Modals, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.modalstore.addModalChangeListener(this._onModalChange);
	      this.props.userstore.addUserLogInListener(this._onUserLogIn);
	      this.props.userstore.addUserLogOutListener(this._onUserLogOut);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (this.state.showModal && !nextState.showModal) {
	        this.containerStyle.display = 'none';
	      }
	      if (!this.state.showModal && nextState.showModal) {
	        this.containerStyle.display = '';
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.modalstore.removeModalChangeListener(this._onModalChange);
	      this.props.userstore.addUserLogInListener(this._onUserLogIn);
	      this.props.userstore.addUserLogOutListener(this._onUserLogOut);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { style: this.containerStyle },
	        _react2['default'].createElement(_modalsLoginModal2['default'], { userstore: this.props.userstore }),
	        _react2['default'].createElement(_modalsAddToSet2['default'], { modalstore: this.props.modalstore,
	          metastore: this.props.metastore,
	          managerstore: this.props.managerstore,
	          viewstore: this.props.viewstore,
	          benchstore: this.props.benchstore,
	          basketstore: this.props.basketstore,
	          userstore: this.props.userstore,
	          modestore: this.props.modestore }),
	        _react2['default'].createElement(_modalsConfirmDelete2['default'], { modalstore: this.props.modalstore,
	          userstore: this.props.userstore,
	          metastore: this.props.metastore }),
	        _react2['default'].createElement(_modalsAddAnnotationToEntity2['default'], { modalstore: this.props.modalstore,
	          userstore: this.props.userstore
	        }),
	        _react2['default'].createElement(_modalsTestRunnerModal2['default'], { modalstore: this.props.modalstore,
	          userstore: this.props.userstore }),
	        _react2['default'].createElement(_modalsFeedbackForm2['default'], { modalstore: this.props.modalstore,
	          userstore: this.props.userstore }),
	        _react2['default'].createElement(_modalsOrganiseSet2['default'], { metastore: this.props.metastore,
	          benchstore: this.props.benchstore,
	          userstore: this.props.userstore,
	          modalstore: this.props.modalstore }),
	        _react2['default'].createElement(_modalsDownloadSetImages2['default'], { metastore: this.props.metastore,
	          benchstore: this.props.benchstore,
	          userstore: this.props.userstore,
	          modalstore: this.props.modalstore })
	      );
	    }
	  }]);

	  return Modals;
	})(_react2['default'].Component);

	exports['default'] = Modals;
	module.exports = exports['default'];

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Modal requesting the user to log in or create a new account.
	 *
	 * This component does not implement AbstractModal and has its own show/hide logic. This modal's actions do not go through ModalStore. This modal cannot be closed by the user.
	 *
	 * Created by dmitri on 20/04/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var _constantsViewConstants = __webpack_require__(197);

	var _constantsViewConstants2 = _interopRequireDefault(_constantsViewConstants);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var LoginModal = (function (_React$Component) {
	  _inherits(LoginModal, _React$Component);

	  function LoginModal(props) {
	    var _this = this;

	    _classCallCheck(this, LoginModal);

	    _get(Object.getPrototypeOf(LoginModal.prototype), 'constructor', this).call(this, props);

	    this.loginModalStyle = {
	      zIndex: _constantsViewConstants2['default'].zIndices.loginRequiredModal,
	      position: 'absolute',
	      top: '100px !important',
	      left: '50% !important'
	    };

	    this._onUserLogIn = function () {
	      var userLogIn = function userLogIn() {
	        return _this.hide();
	      };
	      return userLogIn.apply(_this);
	    };

	    this._onUserLogOut = function () {
	      var userLogOut = function userLogOut() {
	        return _this.requestLogin();
	      };
	      return userLogOut.apply(_this);
	    };

	    this.loginWindow = null;

	    this.state = {
	      active: !props.userstore.isUserAuthorized()
	    };
	  }

	  _createClass(LoginModal, [{
	    key: 'requestLogin',
	    value: function requestLogin() {
	      this.setState({ active: true });
	    }
	  }, {
	    key: 'hide',
	    value: function hide() {
	      this.setState({ active: false });
	    }
	  }, {
	    key: 'openLoginPopup',
	    value: function openLoginPopup() {
	      this.loginWindow = window.open(_confApplicationConfiguration2['default'].integration.casLoginUrl, 'casLogin', 'menubar=no,status=no,titlebar=no,toolbar=no,width=700,height=800,top=' + window.self.screenY + ',left=' + window.self.screenX);
	    }
	  }, {
	    key: 'openRegisterPopup',
	    value: function openRegisterPopup() {
	      window.open(_confApplicationConfiguration2['default'].integration.casSignupUrl, 'menubar=no,status=no,titlebar=no,toolbar=no,width=700,height=800,top=' + window.self.screenY + ',left=' + window.self.screenX);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.userstore.addUserLogInListener(this._onUserLogIn);
	      this.props.userstore.addUserLogOutListener(this._onUserLogOut);
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	      $(_react2['default'].findDOMNode(this)).modal({ closable: false, detachable: false });
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (!nextState.active && this.state.active) {
	        $(_react2['default'].findDOMNode(this)).modal('hide');
	        if (this.loginWindow) {
	          this.loginWindow.close();
	          this.loginWindow = null;
	        }
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.active) {
	        $(_react2['default'].findDOMNode(this)).modal('show');
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	      this.props.userstore.removeUserLogInListener(this._onUserLogIn);
	      this.props.userstore.removeUserLogOutListener(this._onUserLogOut);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { ref: 'modal', className: 'ui modal', style: this.loginModalStyle },
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui header' },
	          this.props.userstore.getText('loginRequired')
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui content' },
	          _react2['default'].createElement(
	            'p',
	            null,
	            this.props.userstore.getText('loginHelp')
	          ),
	          _react2['default'].createElement(
	            'a',
	            { className: 'ui button',
	              onClick: this.openLoginPopup.bind(this) },
	            this.props.userstore.getText('login')
	          ),
	          _react2['default'].createElement(
	            'a',
	            { className: 'ui button',
	              onClick: this.openRegisterPopup.bind(this) },
	            this.props.userstore.getText('createAccount')
	          )
	        )
	      );
	    }
	  }]);

	  return LoginModal;
	})(_react2['default'].Component);

	exports['default'] = LoginModal;
	module.exports = exports['default'];

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Confirm if the user wants to delete the selected link between a set/view and an item it contains. Thid modal only supports deleting links between entities, not entities themselves.
	 *
	 * Data object passed to ModalStore must contain :
	 *  - link: String UID of the link to delete
	 *  - actionType: String either 'unlink-from-view' or 'unlink-from-set'
	 *
	 * Created by dmitri on 30/05/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _AbstractModal2 = __webpack_require__(376);

	var _AbstractModal3 = _interopRequireDefault(_AbstractModal2);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var _constantsServerConstants = __webpack_require__(239);

	var _constantsServerConstants2 = _interopRequireDefault(_constantsServerConstants);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var ConfirmDelete = (function (_AbstractModal) {
	  _inherits(ConfirmDelete, _AbstractModal);

	  function ConfirmDelete(props) {
	    _classCallCheck(this, ConfirmDelete);

	    _get(Object.getPrototypeOf(ConfirmDelete.prototype), 'constructor', this).call(this, props);

	    this.modalName = _constantsModalConstants2['default'].Modals.confirmDelete;
	  }

	  _createClass(ConfirmDelete, [{
	    key: 'clearState',
	    value: function clearState(state) {}
	  }, {
	    key: 'checkKey',
	    value: function checkKey(event) {
	      switch (event.keyCode) {
	        case 13:
	          this.unlink();
	          break;
	        case 27:
	          this.cancel();
	          break;
	      }
	    }
	  }, {
	    key: 'shouldModalClose',
	    value: function shouldModalClose() {
	      return true;
	    }
	  }, {
	    key: 'receiveMessage',
	    value: function receiveMessage(message) {
	      if (message.action === _constantsServerConstants2['default'].ActionTypes.Receive.DONE) {
	        this.props.modalstore.runSuccessCallback(message);
	      } else {
	        this.props.modalstore.runErrorCallback(message);
	      }
	    }
	  }, {
	    key: 'unlink',
	    value: function unlink() {
	      var data = this.props.modalstore.getTargetData();
	      console.log(JSON.stringify(data));
	      switch (data.actionType) {
	        case 'unlink-from-view':
	          _utilsServiceMethods2['default'].deleteElementFromView(data.link, this.receiveMessage.bind(this));
	          break;
	        case 'unlink-from-set':
	          _utilsServiceMethods2['default'].deleteElementFromSet(data.link, this.receiveMessage.bind(this));
	          break;
	        default:
	          console.warn('No handler for ' + data.actionType);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      //console.log('rendering confirm delete');
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui small modal', ref: 'modal' },
	        _react2['default'].createElement('i', { className: 'close icon' }),
	        _react2['default'].createElement(
	          'div',
	          { className: 'header' },
	          this.props.userstore.getText('deleteFromSet')
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'content', onKeyUp: this.checkKey.bind(this) },
	          _react2['default'].createElement(
	            'div',
	            { className: 'description' },
	            this.props.userstore.getText('deleteHelp0')
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'actions' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui black deny button', onClick: this.cancel.bind(this) },
	            this.props.userstore.getText('cancel')
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui positive right labeled icon button',
	              onClick: this.unlink.bind(this) },
	            this.props.userstore.getText('confirm'),
	            _react2['default'].createElement('i', { className: 'checkmark icon' })
	          )
	        )
	      );
	    }
	  }]);

	  return ConfirmDelete;
	})(_AbstractModal3['default']);

	exports['default'] = ConfirmDelete;
	module.exports = exports['default'];

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Abstract modal component to be implemented by actual modals. Implementing classes must specify a ref='modal' reference on their components.
	 *
	 * Created by dmitri on 20/04/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsModalActions = __webpack_require__(265);

	var _actionsModalActions2 = _interopRequireDefault(_actionsModalActions);

	var AbstractModal = (function (_React$Component) {
	  _inherits(AbstractModal, _React$Component);

	  function AbstractModal(props) {
	    var _this = this;

	    _classCallCheck(this, AbstractModal);

	    _get(Object.getPrototypeOf(AbstractModal.prototype), 'constructor', this).call(this, props);

	    this._onModalChanged = function () {
	      var activateModal = function activateModal() {
	        return _this.activateModal(_this.props.modalstore.getModalId());
	      };
	      return activateModal.apply(_this);
	    };

	    this.modalName = 'empty';

	    this.state = {
	      active: false
	    };
	  }

	  _createClass(AbstractModal, [{
	    key: 'activateModal',
	    value: function activateModal(modal) {
	      //console.log('Activating modal ' + modal);
	      if (modal == this.modalName) {
	        this.setState({ active: true });
	      } else {
	        this.setState({ active: false });
	      }
	    }
	  }, {
	    key: 'cancel',
	    value: function cancel() {
	      window.setTimeout(_actionsModalActions2['default'].showModal.bind(null, null, null), 10);
	    }
	  }, {
	    key: 'clearState',
	    value: function clearState(state) {}
	  }, {
	    key: 'shouldModalClose',
	    value: function shouldModalClose() {
	      return false;
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	      this.props.modalstore.addModalChangeListener(this._onModalChanged);

	      $(_react2['default'].findDOMNode(this.refs.modal)).modal({
	        detachable: false,
	        onHide: this.cancel,
	        observeChanges: true,
	        onApprove: this.shouldModalClose.bind(this)
	      });
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (!nextState.active && this.state.active) {
	        this.clearState(nextState);
	        $(_react2['default'].findDOMNode(this.refs.modal)).modal('hide');
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.active && !prevState.active) {
	        $(_react2['default'].findDOMNode(this.refs.modal)).modal('show');
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	      this.props.modalstore.removeModalChangeListener(this._onModalChanged);
	    }
	  }]);

	  return AbstractModal;
	})(_react2['default'].Component);

	exports['default'] = AbstractModal;
	module.exports = exports['default'];

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Modal with a large text field to add an annotation to a specific entity.
	 *
	 * Data object passed to ModalStore must contain :
	 *  - entity: String UID of the entity to add the annotation to
	 *
	 * Created by dmitri on 07/06/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _AbstractModal2 = __webpack_require__(376);

	var _AbstractModal3 = _interopRequireDefault(_AbstractModal2);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var _actionsModalActions = __webpack_require__(265);

	var _actionsModalActions2 = _interopRequireDefault(_actionsModalActions);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var AddAnnotationToEntity = (function (_AbstractModal) {
	  _inherits(AddAnnotationToEntity, _AbstractModal);

	  function AddAnnotationToEntity(props) {
	    _classCallCheck(this, AddAnnotationToEntity);

	    _get(Object.getPrototypeOf(AddAnnotationToEntity.prototype), 'constructor', this).call(this, props);
	    this.state.annotationTextInput = '';
	    this.modalName = _constantsModalConstants2['default'].Modals.addAnnotationToEntity;
	  }

	  _createClass(AddAnnotationToEntity, [{
	    key: 'clearState',
	    value: function clearState(state) {
	      state.annotationTextInput = '';
	    }
	  }, {
	    key: 'checkKey',
	    value: function checkKey(event) {
	      switch (event.keyCode) {
	        //case 13:
	        //  this.addAnnotation();
	        //  break;
	        case 27:
	          this.cancel();
	          break;
	      }
	    }
	  }, {
	    key: 'addAnnotation',
	    value: function addAnnotation() {
	      if (this.state.annotationTextInput.length < 1) {
	        alert(this.props.userstore.getText('textIsMandatory'));
	        return;
	      }

	      var self = this;
	      var onSuccess = function onSuccess(data) {
	        window.setTimeout(self.props.modalstore.runSuccessCallback(data), 10);
	        self.cancel();
	      };

	      var onError = function onError(data) {
	        window.setTimeout(self.props.modalstore.runErrorCallback(data), 10);
	        alert(this.props.userstore.getText('operationFailedNetwork'));
	      };

	      _utilsServiceMethods2['default'].addAnnotation(this.props.modalstore.getTargetData().entity, this.state.annotationTextInput, onSuccess, onError);
	      this.cancel();
	    }
	  }, {
	    key: 'onTextChange',
	    value: function onTextChange(event) {
	      this.setState({ annotationTextInput: event.target.value });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui small modal', ref: 'modal' },
	        _react2['default'].createElement('i', { className: 'close icon' }),
	        _react2['default'].createElement(
	          'div',
	          { className: 'header' },
	          this.props.userstore.getText('newAnnotation')
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'content', onKeyUp: this.checkKey.bind(this) },
	          _react2['default'].createElement(
	            'div',
	            { className: 'description' },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui form' },
	              _react2['default'].createElement(
	                'div',
	                { className: 'field' },
	                _react2['default'].createElement(
	                  'label',
	                  null,
	                  this.props.userstore.getText('newAnnotationText')
	                ),
	                _react2['default'].createElement('textarea', { rows: '6',
	                  autofocus: 'true',
	                  value: this.state.annotationTextInput,
	                  onChange: this.onTextChange.bind(this) })
	              )
	            )
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'actions' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui black deny button', onClick: this.cancel.bind(this) },
	            this.props.userstore.getText('cancel')
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui positive right labeled icon button',
	              onClick: this.addAnnotation.bind(this) },
	            this.props.userstore.getText('addAnnotation'),
	            _react2['default'].createElement('i', { className: 'checkmark icon' })
	          )
	        )
	      );
	    }
	  }]);

	  return AddAnnotationToEntity;
	})(_AbstractModal3['default']);

	exports['default'] = AddAnnotationToEntity;
	module.exports = exports['default'];

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Modal containing dev options for load-testing REST API (nothing useful at the moment).
	 * Created by dmitri on 11/07/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _superagent = __webpack_require__(229);

	var _superagent2 = _interopRequireDefault(_superagent);

	var _superagentNoCache = __webpack_require__(235);

	var _superagentNoCache2 = _interopRequireDefault(_superagentNoCache);

	var _AbstractModal2 = __webpack_require__(376);

	var _AbstractModal3 = _interopRequireDefault(_AbstractModal2);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var TestRunnerModal = (function (_AbstractModal) {
	  _inherits(TestRunnerModal, _AbstractModal);

	  function TestRunnerModal(props) {
	    _classCallCheck(this, TestRunnerModal);

	    _get(Object.getPrototypeOf(TestRunnerModal.prototype), 'constructor', this).call(this, props);
	    this.modalName = _constantsModalConstants2['default'].Modals.testRunnerModal;
	  }

	  _createClass(TestRunnerModal, [{
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui small modal', ref: 'modal' },
	        _react2['default'].createElement('i', { className: 'close icon' }),
	        _react2['default'].createElement(
	          'div',
	          { className: 'header' },
	          'Tests'
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'content' },
	          _react2['default'].createElement('div', { className: 'description' })
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'actions' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui black deny button', onClick: this.cancel.bind(this) },
	            'Fermer'
	          )
	        )
	      );
	    }
	  }]);

	  return TestRunnerModal;
	})(_AbstractModal3['default']);

	exports['default'] = TestRunnerModal;
	module.exports = exports['default'];

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Modal which provides a form to the user to send feedback about the Colaboratory to the server (which then stores the feedback somewhere).
	 *
	 * No data expected from ModalStore
	 *
	 * Created by dmitri on 30/05/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _AbstractModal2 = __webpack_require__(376);

	var _AbstractModal3 = _interopRequireDefault(_AbstractModal2);

	var _utilsGlobals = __webpack_require__(242);

	var _utilsGlobals2 = _interopRequireDefault(_utilsGlobals);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var _constantsServerConstants = __webpack_require__(239);

	var _constantsServerConstants2 = _interopRequireDefault(_constantsServerConstants);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var FeedbackForm = (function (_AbstractModal) {
	  _inherits(FeedbackForm, _AbstractModal);

	  function FeedbackForm(props) {
	    _classCallCheck(this, FeedbackForm);

	    _get(Object.getPrototypeOf(FeedbackForm.prototype), 'constructor', this).call(this, props);

	    this.modalName = _constantsModalConstants2['default'].Modals.feedback;

	    this.state = {
	      feedbackType: null,
	      message: '',
	      userWantsAnswer: false
	    };
	  }

	  _createClass(FeedbackForm, [{
	    key: 'clearState',
	    value: function clearState(state) {
	      state.feedbackType = null;
	      state.message = '';
	      state.userWantsAnswer = false;
	    }
	  }, {
	    key: 'shouldModalClose',
	    value: function shouldModalClose() {
	      return this.postFeedback();
	    }
	  }, {
	    key: 'checkKey',
	    value: function checkKey(event) {
	      switch (event.keyCode) {
	        case 13:
	          this.postFeedback();
	          break;
	        case 27:
	          this.cancel();
	          break;
	      }
	    }
	  }, {
	    key: 'receiveMessage',
	    value: function receiveMessage(message) {
	      if (message.action === _constantsServerConstants2['default'].ActionTypes.Receive.DONE) {
	        this.props.modalstore.runSuccessCallback(message);
	      } else {
	        this.props.modalstore.runErrorCallback(message);
	      }
	    }
	  }, {
	    key: 'postFeedback',
	    value: function postFeedback() {
	      if (!this.state.feedbackType) {
	        alert(this.props.userstore.getText('dropdownSelectRequired'));
	        return false;
	      }
	      if (this.state.message.length < 2) {
	        alert(this.props.userstore.getText('textIsMandatory'));
	        return false;
	      }

	      var message = {
	        type: this.state.feedbackType,
	        text: this.state.message,
	        rsvp: this.state.userWantsAnswer
	      };

	      _utilsServiceMethods2['default'].sendFeedback(message);

	      this.setState({ feedbackType: null,
	        message: '',
	        userWantsAnswer: false });

	      return true;
	    }
	  }, {
	    key: 'toggleAnswerDemand',
	    value: function toggleAnswerDemand() {
	      if (this.state.userWantsAnswer) {
	        this.setState({ userWantsAnswer: false });
	      } else {
	        this.setState({ userWantsAnswer: true });
	      }
	    }
	  }, {
	    key: 'onTextChange',
	    value: function onTextChange(e) {
	      this.setState({ message: e.target.value });
	    }
	  }, {
	    key: 'selectFeedbackOption',
	    value: function selectFeedbackOption(e) {
	      this.setState({ feedbackType: e.target.value });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      //console.log('rendering confirm delete');
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui small modal', ref: 'modal' },
	        _react2['default'].createElement('i', { className: 'close icon' }),
	        _react2['default'].createElement(
	          'div',
	          { className: 'header' },
	          this.props.userstore.getText('contactForm')
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'content', onKeyUp: this.checkKey.bind(this) },
	          _react2['default'].createElement(
	            'div',
	            { className: 'description' },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui form' },
	              _react2['default'].createElement(
	                'select',
	                { value: this.state.type, className: 'menu', onChange: this.selectFeedbackOption.bind(this) },
	                _react2['default'].createElement(
	                  'option',
	                  { className: 'item', value: null },
	                  this.props.userstore.getText('selectInDropdown')
	                ),
	                _react2['default'].createElement(
	                  'option',
	                  { className: 'item', value: 'bug' },
	                  this.props.userstore.getText('reportBug')
	                ),
	                _react2['default'].createElement(
	                  'option',
	                  { className: 'item', value: 'enhancement' },
	                  this.props.userstore.getText('suggestEnhancement')
	                ),
	                _react2['default'].createElement(
	                  'option',
	                  { className: 'item', value: 'feedback' },
	                  this.props.userstore.getText('provideFeedback')
	                ),
	                _react2['default'].createElement(
	                  'option',
	                  { className: 'item', value: 'other' },
	                  this.props.userstore.getText('other')
	                )
	              ),
	              _react2['default'].createElement(
	                'div',
	                { className: 'field' },
	                _react2['default'].createElement('textarea', { rows: '6',
	                  autofocus: 'true',
	                  value: this.state.message,
	                  onChange: this.onTextChange.bind(this) })
	              ),
	              _react2['default'].createElement(
	                'div',
	                { className: 'ui checkbox' },
	                _react2['default'].createElement('input', { type: 'checkbox', checked: this.state.userWantsAnswer, onChange: this.toggleAnswerDemand.bind(this) }),
	                _react2['default'].createElement(
	                  'label',
	                  null,
	                  this.props.userstore.getText('feedbackFormHelp0')
	                )
	              )
	            )
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'actions' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui black deny button', onClick: this.cancel.bind(this) },
	            this.props.userstore.getText('cancel')
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui positive right labeled icon button' },
	            this.props.userstore.getText('send'),
	            _react2['default'].createElement('i', { className: 'unlink icon' })
	          )
	        )
	      );
	    }
	  }]);

	  return FeedbackForm;
	})(_AbstractModal3['default']);

	exports['default'] = FeedbackForm;
	module.exports = exports['default'];

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Add entities to a set. This modal can be used to create subsets and directly import entities into it, either from the ReColNat Basket or from a CSV file.
	 *
	 * Data object passed to ModalStore must contain :
	 *  - parent: String UID of the Set to fill
	 *
	 * Created by dmitri on 18/11/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _fastCsv = __webpack_require__(381);

	var _fastCsv2 = _interopRequireDefault(_fastCsv);

	var _AbstractModal2 = __webpack_require__(376);

	var _AbstractModal3 = _interopRequireDefault(_AbstractModal2);

	var _managerBasket = __webpack_require__(423);

	var _managerBasket2 = _interopRequireDefault(_managerBasket);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var _constantsModeConstants = __webpack_require__(243);

	var _constantsModeConstants2 = _interopRequireDefault(_constantsModeConstants);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _actionsModalActions = __webpack_require__(265);

	var _actionsModalActions2 = _interopRequireDefault(_actionsModalActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _actionsBasketActions = __webpack_require__(425);

	var _actionsBasketActions2 = _interopRequireDefault(_actionsBasketActions);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _utilsSetCreator = __webpack_require__(428);

	var _utilsSetCreator2 = _interopRequireDefault(_utilsSetCreator);

	var AddToSet = (function (_AbstractModal) {
	  _inherits(AddToSet, _AbstractModal);

	  function AddToSet(props) {
	    var _this = this;

	    _classCallCheck(this, AddToSet);

	    _get(Object.getPrototypeOf(AddToSet.prototype), 'constructor', this).call(this, props);

	    this.newSubSetInputFieldStyle = {
	      display: 'none'
	    };

	    this.basketPaneStyle = {
	      display: 'none'
	    };

	    this.newSetStyle = {
	      display: 'none'
	    };

	    this.selectCSVStyle = {
	      display: 'none'
	    };

	    this.csvParseResultStyle = {
	      display: 'none'
	    };

	    this.reloadButtonStyle = {
	      display: 'none'
	    };

	    this.nextButtonStyle = {
	      display: 'none'
	    };

	    this.launchRecolnatImportButtonStyle = {
	      display: 'none'
	    };

	    this.launchWebImportButtonStyle = {
	      display: 'none'
	    };

	    this.hiddenStyle = {
	      maxHeight: 0,
	      maxWidth: 0,
	      opacity: 0
	    };

	    this._onMetadataAvailable = function () {
	      var updateDisplayedName = function updateDisplayedName() {
	        return _this.updateDisplayName();
	      };
	      return updateDisplayedName.apply(_this);
	    };

	    this._onBasketUpdate = function () {
	      var refresh = function refresh() {
	        return _this.setState({});
	      };
	      return refresh.apply(_this);
	    };

	    // 1 displays first window, 2 displays CSV options
	    this.state.stage = 1;
	    // basket or csv or none
	    this.state.source = 'basket';
	    // current or new
	    this.state.destination = 'current';

	    this.state.parentId = null;

	    // if destination = new
	    this.state.newSetNameInput = '';

	    // if source = csv
	    this.state.separator = ',';
	    this.state.inputSeparator = '';
	    this.state.csvFileInput = null;
	    this.state.isCSVInvalid = false;
	    this.state.csvParseResult = [];
	    this.state.csvParseMessages = [];
	    this.state.csvParseErrors = [];

	    this.state.displayName = '';

	    this.modalName = _constantsModalConstants2['default'].Modals.addToSet;
	  }

	  _createClass(AddToSet, [{
	    key: 'clearState',
	    value: function clearState(state) {
	      state.stage = 1;
	      // basket or csv or none
	      state.source = 'basket';
	      // current or new
	      state.destination = 'current';

	      state.parentId = null;

	      // if destination = new
	      state.newSetNameInput = '';

	      // if source = csv
	      state.separator = ',';
	      state.inputSeparator = '';
	      state.csvFileInput = null;
	      state.isCSVInvalid = false;
	      state.csvParseResult = [];
	      state.csvParseMessages = [];
	      state.csvParseErrors = [];

	      state.displayName = '';
	    }
	  }, {
	    key: 'checkKey',
	    value: function checkKey(event) {
	      switch (event.keyCode) {
	        case 13:
	          this.launch(true);
	          break;
	        case 27:
	          this.cancel();
	          break;
	      }
	    }
	  }, {
	    key: 'sourceChanged',
	    value: function sourceChanged(event) {
	      if (event.target.value === 'none') {
	        this.setState({ source: event.target.value, destination: 'new', stage: 1 });
	      } else {
	        this.setState({ source: event.target.value, stage: 1 });
	      }
	    }
	  }, {
	    key: 'destinationChanged',
	    value: function destinationChanged(event) {
	      this.setState({ destination: event.target.value, stage: 1 });
	    }
	  }, {
	    key: 'separatorChanged',
	    value: function separatorChanged(event) {
	      this.setState({ separator: event.target.value });
	    }
	  }, {
	    key: 'inputSeparatorChanged',
	    value: function inputSeparatorChanged(event) {
	      this.setState({ inputSeparator: event.target.value });
	    }
	  }, {
	    key: 'newSetNameInputChange',
	    value: function newSetNameInputChange(event) {
	      this.setState({ newSetNameInput: event.target.value });
	    }
	  }, {
	    key: 'loadFile',
	    value: function loadFile(e) {
	      //console.log(e.target.files[0]);
	      this.setState({ csvFileInput: e.target.files[0] });
	    }
	  }, {
	    key: 'showCsvParseResults',
	    value: function showCsvParseResults() {
	      this.setState({ stage: 2 });
	      this.reloadCsv();
	    }
	  }, {
	    key: 'reloadCsv',
	    value: function reloadCsv() {
	      var reader = new FileReader();
	      reader.onload = this.csvLoaded.bind(this);
	      reader.readAsText(this.state.csvFileInput);
	    }
	  }, {
	    key: 'csvLoaded',
	    value: function csvLoaded(e) {
	      //console.log(e.target.result);
	      var self = this;
	      var parsedRows = [];
	      var invalidRows = [];
	      var messages = [];
	      var csvInvalid = false;
	      var rowCounter = 0;
	      _fastCsv2['default'].fromString(e.target.result, {
	        headers: true,
	        strictColumnHandling: true,
	        trim: true,
	        ignoreEmpty: true,
	        delimiter: this.state.separator === 'other' ? this.state.inputSeparator : this.state.separator
	      }).validate(function (data) {
	        if (!data) {
	          return false;
	        }
	        if (!data.name || !data.url) {
	          return false;
	        }
	        return true;
	      }).on('data-invalid', function (data, index) {
	        //rowCounter++;
	        if (data) {
	          var invalid = {
	            data: data.join(self.state.separator === 'other' ? self.state.inputSeparator : self.state.separator),
	            row: index
	          };
	          invalidRows.push(invalid);
	        } else {
	          invalidRows[invalidRows.length - 1].row = index;
	        }
	        csvInvalid = true;
	      }).on('data', function (data) {
	        //rowCounter++;
	        parsedRows.push(data);
	      }).on('error', function (error) {
	        messages.push(this.props.userstore.getText('errorNotCsv'));
	        csvInvalid = true;
	      }).on('end', function () {
	        console.log('CSV parse end');
	        self.setState({ csvParseResult: parsedRows, csvParseErrors: invalidRows, csvParseMessages: messages, isCSVInvalid: csvInvalid });
	      });
	    }
	  }, {
	    key: 'updateDisplayName',
	    value: function updateDisplayName() {
	      // this.props.metastore.removeMetadataUpdateListener(this.state.parentId, this._onMetadataAvailable);
	      this.setState({ displayName: this.props.metastore.getMetadataAbout(this.state.parentId).name });
	    }
	  }, {
	    key: 'launch',
	    value: function launch(keepInBasket) {
	      window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, this.props.userstore.getText('startingImport')), 10);
	      var setProps = {
	        name: this.state.destination === 'new' ? this.state.newSetNameInput : null,
	        parent: this.state.destination === 'new' ? this.state.parentId : null,
	        setId: this.state.destination === 'current' ? this.state.parentId : null
	      };
	      var imports = [];
	      if (this.state.source === 'basket') {
	        var items = this.props.basketstore.getBasketSelection();
	        if (items.length === 0) {
	          alert(this.props.userstore.getText('nothingToImport'));
	          return;
	        }
	        for (var i = 0; i < items.length; ++i) {
	          var itemId = items[i];
	          var itemUuid = itemId.slice(0, 8) + '-' + itemId.slice(8, 12) + '-' + itemId.slice(12, 16) + '-' + itemId.slice(16, 20) + '-' + itemId.slice(20);

	          var itemData = this.props.basketstore.getBasketItem(itemId);
	          //console.log('uuid=' + itemUuid);
	          var name = '';
	          if (itemData.scientificname) {
	            name = itemData.scientificname;
	          } else if (itemData.catalognumber) {
	            name = itemData.catalognumber;
	          } else {
	            name = this.props.userstore.getText('specimen') + " " + itemId;
	          }
	          imports.push({
	            source: 'recolnat',
	            recolnatSpecimenUuid: itemUuid,
	            images: itemData.image,
	            name: name
	          });
	        }
	      } else if (this.state.source === 'csv') {
	        for (var i = 0; i < this.state.csvParseResult.length; ++i) {
	          imports.push({
	            source: 'web',
	            name: this.state.csvParseResult[i].name,
	            url: this.state.csvParseResult[i].url
	          });
	        }
	      }
	      var placeInView = this.props.modestore.isInObservationMode() || this.props.modestore.isInOrganisationMode();

	      var creator = new _utilsSetCreator2['default'](setProps, imports, placeInView, keepInBasket, this.props.benchstore, this.props.viewstore, this.props.userstore);
	      creator.run();

	      // Hide modal
	      window.setTimeout(_actionsModalActions2['default'].showModal.bind(null, null), 10);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _get(Object.getPrototypeOf(AddToSet.prototype), 'componentDidMount', this).call(this);
	      this.props.basketstore.addBasketUpdateListener(this._onBasketUpdate);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (!this.state.active && nextState.active) {
	        if (this.props.modalstore.getTargetData().parent) {
	          nextState.parentId = this.props.modalstore.getTargetData().parent;
	          var metadata = nextProps.metastore.getMetadataAbout(nextState.parentId);
	          if (metadata) {
	            nextState.displayName = metadata.name;
	          } else {
	            this.props.metastore.addMetadataUpdateListener(nextState.parentId, this._onMetadataAvailable);
	          }
	        } else {
	          nextState.displayName = this.props.userstore.getText('mySets');
	        }
	        window.setTimeout(_actionsBasketActions2['default'].reloadBasket, 10);
	      }

	      if (nextState.active) {
	        if (!this.props.modalstore.getTargetData().parent) {
	          nextState.destination = 'new';
	        }
	        if (nextState.stage === 1) {
	          this.newSubSetInputFieldStyle.display = nextState.destination === 'new' ? '' : 'none';
	          this.basketPaneStyle.display = nextState.source === 'basket' ? '' : 'none';
	          this.selectCSVStyle.display = nextState.source === 'csv' ? '' : 'none';
	          this.nextButtonStyle.display = nextState.csvFileInput == null ? 'none' : '';
	          this.launchRecolnatImportButtonStyle.display = nextState.source === 'basket' ? '' : 'none';
	          this.newSetStyle.display = nextState.source === 'none' ? '' : 'none';
	        } else {
	          this.newSubSetInputFieldStyle.display = 'none';
	          this.basketPaneStyle.display = 'none';
	          this.selectCSVStyle.display = 'none';
	          this.launchRecolnatImportButtonStyle.display = 'none';
	          this.newSetStyle.display = 'none';
	        }
	        if (nextState.stage === 2) {
	          this.csvParseResultStyle.display = '';
	          this.reloadButtonStyle.display = nextState.isCSVInvalid ? '' : 'none';
	          this.launchWebImportButtonStyle.display = nextState.isCSVInvalid ? 'none' : '';
	        } else {
	          this.csvParseResultStyle.display = 'none';
	          this.reloadButtonStyle.display = 'none';
	          this.launchWebImportButtonStyle.display = 'none';
	        }
	      }
	      _get(Object.getPrototypeOf(AddToSet.prototype), 'componentWillUpdate', this).call(this, nextProps, nextState);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _get(Object.getPrototypeOf(AddToSet.prototype), 'componentWillUnmount', this).call(this);
	      this.props.basketstore.removeBasketUpdateListener(this._onBasketUpdate);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui modal', ref: 'modal' },
	        _react2['default'].createElement('i', { className: 'close icon' }),
	        _react2['default'].createElement(
	          'div',
	          { className: 'header' },
	          this.props.userstore.getText('addToSet')
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'content', onKeyUp: this.checkKey.bind(this) },
	          _react2['default'].createElement(
	            'div',
	            null,
	            this.props.userstore.getText('addImages'),
	            _react2['default'].createElement(
	              'div',
	              { className: 'grouped fields' },
	              _react2['default'].createElement(
	                'div',
	                { className: 'field' },
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui radio checkbox' },
	                  _react2['default'].createElement('input', { name: 'source',
	                    type: 'radio',
	                    value: 'basket',
	                    onChange: this.sourceChanged.bind(this),
	                    checked: this.state.source === 'basket' }),
	                  _react2['default'].createElement(
	                    'label',
	                    null,
	                    this.props.userstore.getText('fromBasket')
	                  )
	                )
	              ),
	              _react2['default'].createElement(
	                'div',
	                { className: 'field' },
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui radio checkbox' },
	                  _react2['default'].createElement('input', { name: 'source',
	                    type: 'radio',
	                    value: 'csv',
	                    onChange: this.sourceChanged.bind(this),
	                    checked: this.state.source === 'csv' }),
	                  _react2['default'].createElement(
	                    'label',
	                    null,
	                    this.props.userstore.getText('fromCsv')
	                  )
	                )
	              ),
	              _react2['default'].createElement(
	                'div',
	                { className: 'field' },
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui radio checkbox' },
	                  _react2['default'].createElement('input', { name: 'source',
	                    type: 'radio',
	                    value: 'none',
	                    onChange: this.sourceChanged.bind(this),
	                    checked: this.state.source === 'none' }),
	                  _react2['default'].createElement(
	                    'label',
	                    null,
	                    this.props.userstore.getText('fromNowhere')
	                  )
	                )
	              )
	            ),
	            _react2['default'].createElement('div', { className: 'ui divider' }),
	            _react2['default'].createElement(
	              'div',
	              { className: 'grouped fields' },
	              _react2['default'].createElement(
	                'div',
	                { className: 'field' },
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui radio checkbox' + (this.state.parentId ? '' : ' disabled') + (this.state.source === 'none' ? ' disabled' : '') },
	                  _react2['default'].createElement('input', { name: 'destination',
	                    type: 'radio',
	                    value: 'current',
	                    onChange: this.destinationChanged.bind(this),
	                    checked: this.state.destination === 'current' }),
	                  _react2['default'].createElement(
	                    'label',
	                    null,
	                    this.props.userstore.getText('intoSet'),
	                    ' ',
	                    this.state.displayName
	                  )
	                )
	              ),
	              _react2['default'].createElement(
	                'div',
	                { className: 'field' },
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui radio checkbox' },
	                  _react2['default'].createElement('input', { name: 'destination',
	                    type: 'radio',
	                    value: 'new',
	                    onChange: this.destinationChanged.bind(this),
	                    checked: this.state.destination === 'new' }),
	                  _react2['default'].createElement(
	                    'label',
	                    null,
	                    this.props.userstore.getText('intoNewSubSet'),
	                    ' ',
	                    this.state.displayName,
	                    ' : '
	                  )
	                ),
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui input', style: this.newSubSetInputFieldStyle },
	                  _react2['default'].createElement('input', { placeholder: this.props.userstore.getText('newSubSetName'), value: this.state.newSetNameInput, onChange: this.newSetNameInputChange.bind(this), type: 'text' })
	                )
	              )
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'content', style: this.newSetStyle },
	            _react2['default'].createElement('div', { className: 'ui divider' }),
	            _react2['default'].createElement(
	              'div',
	              { className: 'actions', style: this.actionBarStyle },
	              _react2['default'].createElement(
	                'div',
	                { className: 'ui black deny button', onClick: this.cancel.bind(this) },
	                this.props.userstore.getText('cancel')
	              ),
	              _react2['default'].createElement(
	                'div',
	                { className: "ui positive right labeled icon button" + (this.state.destination === 'new' && this.state.newSetNameInput.length === 0 ? ' disabled' : ''),
	                  onClick: this.launch.bind(this, true) },
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui text' },
	                  this.props.userstore.getText('createEmptySet')
	                ),
	                _react2['default'].createElement('i', { className: 'checkmark icon' })
	              )
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'content', style: this.basketPaneStyle },
	            _react2['default'].createElement('div', { className: 'ui divider' }),
	            _react2['default'].createElement(
	              'div',
	              { className: 'description' },
	              _react2['default'].createElement(
	                'div',
	                { className: 'header' },
	                this.props.userstore.getInterpolatedText('addNSheetsToSet', [this.props.basketstore.getBasketSelection().length, this.state.destination === 'current' ? this.state.displayName : this.state.newSetNameInput])
	              ),
	              _react2['default'].createElement(_managerBasket2['default'], { basketstore: this.props.basketstore,
	                userstore: this.props.userstore })
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'actions', style: this.actionBarStyle },
	              _react2['default'].createElement(
	                'div',
	                { className: 'ui black deny button', onClick: this.cancel.bind(this) },
	                this.props.userstore.getText('cancel')
	              ),
	              _react2['default'].createElement(
	                'div',
	                { className: "ui positive right labeled icon button" + (this.state.destination === 'new' && this.state.newSetNameInput.length === 0 ? ' disabled' : ''),
	                  style: this.launchRecolnatImportButtonStyle,
	                  onClick: this.launch.bind(this, true) },
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui text' },
	                  this.props.userstore.getText('addToSet')
	                ),
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui text', style: this.buttonSubTextStyle },
	                  this.props.userstore.getText('andKeepInBasket')
	                ),
	                _react2['default'].createElement('i', { className: 'checkmark icon' })
	              ),
	              _react2['default'].createElement(
	                'div',
	                { className: "ui positive right labeled icon button" + (this.state.destination === 'new' && this.state.newSetNameInput.length === 0 ? ' disabled' : ''),
	                  style: this.launchRecolnatImportButtonStyle,
	                  onClick: this.launch.bind(this, false) },
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui text' },
	                  this.props.userstore.getText('addToSet')
	                ),
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui text', style: this.buttonSubTextStyle },
	                  this.props.userstore.getText('andRemoveFromBasket')
	                ),
	                _react2['default'].createElement('i', { className: 'checkmark icon' })
	              )
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'content', style: this.selectCSVStyle },
	            _react2['default'].createElement('div', { className: 'ui divider' }),
	            _react2['default'].createElement(
	              'h4',
	              { className: 'ui center aligned header' },
	              this.props.userstore.getText('importExternalImages')
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'description' },
	              _react2['default'].createElement(
	                'div',
	                { className: 'ui text message' },
	                _react2['default'].createElement(
	                  'p',
	                  null,
	                  this.props.userstore.getText('importExternalHelp0')
	                ),
	                _react2['default'].createElement(
	                  'p',
	                  null,
	                  this.props.userstore.getText('importExternalHelp1')
	                ),
	                _react2['default'].createElement(
	                  'p',
	                  null,
	                  _react2['default'].createElement(
	                    'a',
	                    { href: 'sample.csv', download: true },
	                    this.props.userstore.getText('download')
	                  ),
	                  ' ',
	                  this.props.userstore.getText('validCsvExample')
	                )
	              ),
	              _react2['default'].createElement(
	                'div',
	                { className: 'content' },
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'grouped fields' },
	                  _react2['default'].createElement(
	                    'div',
	                    { className: 'field' },
	                    _react2['default'].createElement(
	                      'div',
	                      { className: 'ui radio checkbox' },
	                      _react2['default'].createElement('input', { name: 'separator',
	                        type: 'radio',
	                        value: ';',
	                        onChange: this.separatorChanged.bind(this),
	                        checked: this.state.separator === ';' }),
	                      _react2['default'].createElement(
	                        'label',
	                        null,
	                        this.props.userstore.getText('frenchFormatCsv')
	                      )
	                    )
	                  ),
	                  _react2['default'].createElement(
	                    'div',
	                    { className: 'field' },
	                    _react2['default'].createElement(
	                      'div',
	                      { className: 'ui radio checkbox' },
	                      _react2['default'].createElement('input', { name: 'separator',
	                        type: 'radio',
	                        value: ',',
	                        onChange: this.separatorChanged.bind(this),
	                        checked: this.state.separator === ',' }),
	                      _react2['default'].createElement(
	                        'label',
	                        null,
	                        this.props.userstore.getText('englishFormatCsv')
	                      )
	                    )
	                  ),
	                  _react2['default'].createElement(
	                    'div',
	                    { className: 'field' },
	                    _react2['default'].createElement(
	                      'div',
	                      { className: 'ui radio checkbox' },
	                      _react2['default'].createElement('input', { name: 'separator',
	                        type: 'radio',
	                        value: '',
	                        onChange: this.separatorChanged.bind(this),
	                        checked: this.state.separator === 'other' }),
	                      _react2['default'].createElement(
	                        'label',
	                        null,
	                        this.props.userstore.getText('otherFormatCsv')
	                      )
	                    ),
	                    _react2['default'].createElement(
	                      'div',
	                      { className: 'ui input' },
	                      _react2['default'].createElement('input', { placeholder: this.props.userstore.getText('separator'),
	                        type: 'text',
	                        value: this.state.inputSeparator,
	                        onChange: this.inputSeparatorChanged.bind(this) })
	                    )
	                  )
	                )
	              ),
	              _react2['default'].createElement('input', { type: 'file',
	                name: 'inputCsvFile',
	                id: 'inputCsvFile',
	                onChange: this.loadFile.bind(this),
	                style: this.hiddenStyle })
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'actions', style: this.actionBarStyle },
	              _react2['default'].createElement(
	                'div',
	                { className: 'ui black deny button', onClick: this.cancel.bind(this) },
	                this.props.userstore.getText('cancel')
	              ),
	              _react2['default'].createElement(
	                'label',
	                { htmlFor: 'inputCsvFile' },
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui button' },
	                  this.state.csvFileInput === null ? 'Choisir fichier CSV' : this.state.csvFileInput.name
	                )
	              ),
	              _react2['default'].createElement(
	                'div',
	                { className: "ui green approve button " + (this.state.csvFileInput ? '' : 'disabled'),
	                  style: this.nextButtonStyle,
	                  onClick: this.showCsvParseResults.bind(this) },
	                this.props.userstore.getText('next')
	              )
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'content', style: this.csvParseResultStyle },
	            _react2['default'].createElement(
	              'h4',
	              { className: 'ui center aligned header' },
	              this.props.userstore.getText('importExternalImages')
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'description' },
	              _react2['default'].createElement(
	                'div',
	                { className: 'ui text' },
	                this.props.userstore.getInterpolatedText('fileHasBeenProcessed', [this.state.csvFileInput === null ? '' : this.state.csvFileInput.name])
	              ),
	              this.state.csvParseMessages.map(function (message) {
	                return _react2['default'].createElement(
	                  'div',
	                  { className: 'ui yellow message' },
	                  message
	                );
	              }),
	              _react2['default'].createElement(
	                'div',
	                { className: 'ui green message' },
	                this.state.csvParseResult.length,
	                ' ',
	                this.props.userstore.getText('imagesFound'),
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui list' },
	                  this.state.csvParseResult.map(function (data) {
	                    return _react2['default'].createElement(
	                      'div',
	                      { className: 'item' },
	                      _react2['default'].createElement('img', { className: 'ui image', src: data.url, height: '20' }),
	                      _react2['default'].createElement(
	                        'span',
	                        { className: 'content' },
	                        data.name
	                      )
	                    );
	                  })
	                )
	              ),
	              this.state.csvParseErrors.map(function (data) {
	                return _react2['default'].createElement(
	                  'div',
	                  { className: 'ui red message' },
	                  this.props.userstore.getInterpolatedText('lineInvalid', [data.row]),
	                  ': ',
	                  data.data
	                );
	              })
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'actions', style: this.actionBarStyle },
	              _react2['default'].createElement(
	                'div',
	                { className: 'ui black deny button', onClick: this.cancel.bind(this) },
	                this.props.userstore.getText('cancel')
	              ),
	              _react2['default'].createElement(
	                'div',
	                { className: 'ui positive right labeled icon button',
	                  style: this.reloadButtonStyle,
	                  onClick: this.reloadCsv.bind(this) },
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui text' },
	                  this.props.userstore.getText('reload')
	                )
	              ),
	              _react2['default'].createElement(
	                'div',
	                { className: "ui positive right labeled icon button" + (this.state.destination === 'new' && this.state.newSetNameInput.length === 0 ? ' disabled' : ''),
	                  style: this.launchWebImportButtonStyle,
	                  onClick: this.launch.bind(this, false) },
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui text' },
	                  this.props.userstore.getText('launchImport')
	                ),
	                _react2['default'].createElement('i', { className: 'checkmark icon' })
	              )
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return AddToSet;
	})(_AbstractModal3['default']);

	exports['default'] = AddToSet;
	module.exports = exports['default'];

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(382);

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @projectName fast-csv
	 * @github https://github.com/C2FO/fast-csv
	 * @includeDoc [Change Log] ../History.md
	 * @header [../README.md]
	 */

	var fs = __webpack_require__(383),
	    parser = __webpack_require__(384),
	    formatter = __webpack_require__(420);

	function csv() {
	    return parser.apply(void 0, arguments);
	}

	csv.parse = csv;
	csv.fromString = parser.fromString;
	csv.fromPath = parser.fromPath;
	csv.fromStream = parser.fromStream;
	csv.format = formatter;
	csv.write = formatter.write;
	csv.writeToStream = formatter.writeToStream;
	csv.writeToString = formatter.writeToString;
	csv.writeToBuffer = formatter.writeToBuffer;
	csv.writeToPath = formatter.writeToPath;
	csv.createWriteStream = formatter.createWriteStream;
	csv.createReadStream = formatter.createWriteStream;

	module.exports = csv;

/***/ },
/* 383 */
/***/ function(module, exports) {

	

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var extended = __webpack_require__(385),
	    out = process.stdout,
	    stream = __webpack_require__(401),
	    fs = __webpack_require__(383),
	    ParserStream = __webpack_require__(418);


	function parse(options) {
	    return new ParserStream(options);
	}

	function fromStream(stream, options) {
	    return stream.pipe(new ParserStream(options));
	}

	function fromPath(location, options) {
	    return fs.createReadStream(location).pipe(new ParserStream(options));
	}

	function fromString(string, options) {
	    var rs = new stream.Readable();
	    rs.push(string);
	    rs.push(null);
	    return rs.pipe(new ParserStream(options));
	}

	parse.fromStream = fromStream;
	parse.fromPath = fromPath;
	parse.fromString = fromString;
	module.exports = parse;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {var is = __webpack_require__(387),
	    hasOwn = Object.prototype.hasOwnProperty;
	module.exports = __webpack_require__(388)()
	    .register(is)
	    .register(__webpack_require__(393))
	    .register(__webpack_require__(396))
	    .register("LINE_BREAK", __webpack_require__(400).EOL)
	    .register("asyncEach", function (arr, iter, cb) {


	        (function asyncIterator(i, l, rows, cb) {
	            if (++i < l) {
	                iter(rows[i], function (err) {
	                    if (err) {
	                        cb(err);
	                    } else {
	                        if ((i % 100) === 0) {
	                            //dont overflow the stack
	                            setImmediate(function () {
	                                asyncIterator(i, l, rows, cb);
	                            });
	                        } else {
	                            asyncIterator(i, l, rows, cb);
	                        }
	                    }
	                });
	            } else {
	                //get out of stack
	                cb(null, arr);
	            }
	        }(-1, arr.length, arr, cb));
	    })
	    .register("spreadArgs", function spreadArgs(f, args, scope) {
	        var ret;
	        switch ((args || []).length) {
	            case 0:
	                ret = f.call(scope);
	                break;
	            case 1:
	                ret = f.call(scope, args[0]);
	                break;
	            case 2:
	                ret = f.call(scope, args[0], args[1]);
	                break;
	            case 3:
	                ret = f.call(scope, args[0], args[1], args[2]);
	                break;
	            default:
	                ret = f.apply(scope, args);
	        }
	        return ret;
	    })
	    .register("keys", function (obj) {
	        var ret = [];
	        for (var i in obj) {
	            if (hasOwn.call(obj, i)) {
	                ret.push(i);
	            }
	        }
	        return ret;
	    });
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(386).setImmediate))

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(34).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

	  immediateIds[id] = true;

	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });

	  return id;
	};

	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(386).setImmediate, __webpack_require__(386).clearImmediate))

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {(function () {
	    "use strict";

	    function defineIsa(extended) {

	        var pSlice = Array.prototype.slice;

	        var hasOwn = Object.prototype.hasOwnProperty;
	        var toStr = Object.prototype.toString;

	        function argsToArray(args, slice) {
	            var i = -1, j = 0, l = args.length, ret = [];
	            slice = slice || 0;
	            i += slice;
	            while (++i < l) {
	                ret[j++] = args[i];
	            }
	            return ret;
	        }

	        function keys(obj) {
	            var ret = [];
	            for (var i in obj) {
	                if (hasOwn.call(obj, i)) {
	                    ret.push(i);
	                }
	            }
	            return ret;
	        }

	        //taken from node js assert.js
	        //https://github.com/joyent/node/blob/master/lib/assert.js
	        function deepEqual(actual, expected) {
	            // 7.1. All identical values are equivalent, as determined by ===.
	            if (actual === expected) {
	                return true;

	            } else if (typeof Buffer !== "undefined" && Buffer.isBuffer(actual) && Buffer.isBuffer(expected)) {
	                if (actual.length !== expected.length) {
	                    return false;
	                }
	                for (var i = 0; i < actual.length; i++) {
	                    if (actual[i] !== expected[i]) {
	                        return false;
	                    }
	                }
	                return true;

	                // 7.2. If the expected value is a Date object, the actual value is
	                // equivalent if it is also a Date object that refers to the same time.
	            } else if (isDate(actual) && isDate(expected)) {
	                return actual.getTime() === expected.getTime();

	                // 7.3 If the expected value is a RegExp object, the actual value is
	                // equivalent if it is also a RegExp object with the same source and
	                // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	            } else if (isRegExp(actual) && isRegExp(expected)) {
	                return actual.source === expected.source &&
	                    actual.global === expected.global &&
	                    actual.multiline === expected.multiline &&
	                    actual.lastIndex === expected.lastIndex &&
	                    actual.ignoreCase === expected.ignoreCase;

	                // 7.4. Other pairs that do not both pass typeof value == 'object',
	                // equivalence is determined by ==.
	            } else if (isString(actual) && isString(expected) && actual !== expected) {
	                return false;
	            } else if (typeof actual !== 'object' && typeof expected !== 'object') {
	                return actual === expected;

	                // 7.5 For all other Object pairs, including Array objects, equivalence is
	                // determined by having the same number of owned properties (as verified
	                // with Object.prototype.hasOwnProperty.call), the same set of keys
	                // (although not necessarily the same order), equivalent values for every
	                // corresponding key, and an identical 'prototype' property. Note: this
	                // accounts for both named and indexed properties on Arrays.
	            } else {
	                return objEquiv(actual, expected);
	            }
	        }


	        function objEquiv(a, b) {
	            var key;
	            if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) {
	                return false;
	            }
	            // an identical 'prototype' property.
	            if (a.prototype !== b.prototype) {
	                return false;
	            }
	            //~~~I've managed to break Object.keys through screwy arguments passing.
	            //   Converting to array solves the problem.
	            if (isArguments(a)) {
	                if (!isArguments(b)) {
	                    return false;
	                }
	                a = pSlice.call(a);
	                b = pSlice.call(b);
	                return deepEqual(a, b);
	            }
	            try {
	                var ka = keys(a),
	                    kb = keys(b),
	                    i;
	                // having the same number of owned properties (keys incorporates
	                // hasOwnProperty)
	                if (ka.length !== kb.length) {
	                    return false;
	                }
	                //the same set of keys (although not necessarily the same order),
	                ka.sort();
	                kb.sort();
	                //~~~cheap key test
	                for (i = ka.length - 1; i >= 0; i--) {
	                    if (ka[i] !== kb[i]) {
	                        return false;
	                    }
	                }
	                //equivalent values for every corresponding key, and
	                //~~~possibly expensive deep test
	                for (i = ka.length - 1; i >= 0; i--) {
	                    key = ka[i];
	                    if (!deepEqual(a[key], b[key])) {
	                        return false;
	                    }
	                }
	            } catch (e) {//happens when one is a string literal and the other isn't
	                return false;
	            }
	            return true;
	        }


	        var isFunction = function (obj) {
	            return toStr.call(obj) === '[object Function]';
	        };

	        //ie hack
	        if ("undefined" !== typeof window && !isFunction(window.alert)) {
	            (function (alert) {
	                isFunction = function (obj) {
	                    return toStr.call(obj) === '[object Function]' || obj === alert;
	                };
	            }(window.alert));
	        }

	        function isObject(obj) {
	            var undef;
	            return obj !== null && typeof obj === "object";
	        }

	        function isHash(obj) {
	            var ret = isObject(obj);
	            return ret && obj.constructor === Object && !obj.nodeType && !obj.setInterval;
	        }

	        function isEmpty(object) {
	            if (isArguments(object)) {
	                return object.length === 0;
	            } else if (isObject(object)) {
	                return keys(object).length === 0;
	            } else if (isString(object) || isArray(object)) {
	                return object.length === 0;
	            }
	            return true;
	        }

	        function isBoolean(obj) {
	            return obj === true || obj === false || toStr.call(obj) === "[object Boolean]";
	        }

	        function isUndefined(obj) {
	            return typeof obj === 'undefined';
	        }

	        function isDefined(obj) {
	            return !isUndefined(obj);
	        }

	        function isUndefinedOrNull(obj) {
	            return isUndefined(obj) || isNull(obj);
	        }

	        function isNull(obj) {
	            return obj === null;
	        }


	        var isArguments = function _isArguments(object) {
	            return toStr.call(object) === '[object Arguments]';
	        };

	        if (!isArguments(arguments)) {
	            isArguments = function _isArguments(obj) {
	                return !!(obj && hasOwn.call(obj, "callee"));
	            };
	        }


	        function isInstanceOf(obj, clazz) {
	            if (isFunction(clazz)) {
	                return obj instanceof clazz;
	            } else {
	                return false;
	            }
	        }

	        function isRegExp(obj) {
	            return toStr.call(obj) === '[object RegExp]';
	        }

	        var isArray = Array.isArray || function isArray(obj) {
	            return toStr.call(obj) === "[object Array]";
	        };

	        function isDate(obj) {
	            return toStr.call(obj) === '[object Date]';
	        }

	        function isString(obj) {
	            return toStr.call(obj) === '[object String]';
	        }

	        function isNumber(obj) {
	            return toStr.call(obj) === '[object Number]';
	        }

	        function isTrue(obj) {
	            return obj === true;
	        }

	        function isFalse(obj) {
	            return obj === false;
	        }

	        function isNotNull(obj) {
	            return !isNull(obj);
	        }

	        function isEq(obj, obj2) {
	            /*jshint eqeqeq:false*/
	            return obj == obj2;
	        }

	        function isNeq(obj, obj2) {
	            /*jshint eqeqeq:false*/
	            return obj != obj2;
	        }

	        function isSeq(obj, obj2) {
	            return obj === obj2;
	        }

	        function isSneq(obj, obj2) {
	            return obj !== obj2;
	        }

	        function isIn(obj, arr) {
	            if ((isArray(arr) && Array.prototype.indexOf) || isString(arr)) {
	                return arr.indexOf(obj) > -1;
	            } else if (isArray(arr)) {
	                for (var i = 0, l = arr.length; i < l; i++) {
	                    if (isEq(obj, arr[i])) {
	                        return true;
	                    }
	                }
	            }
	            return false;
	        }

	        function isNotIn(obj, arr) {
	            return !isIn(obj, arr);
	        }

	        function isLt(obj, obj2) {
	            return obj < obj2;
	        }

	        function isLte(obj, obj2) {
	            return obj <= obj2;
	        }

	        function isGt(obj, obj2) {
	            return obj > obj2;
	        }

	        function isGte(obj, obj2) {
	            return obj >= obj2;
	        }

	        function isLike(obj, reg) {
	            if (isString(reg)) {
	                return ("" + obj).match(reg) !== null;
	            } else if (isRegExp(reg)) {
	                return reg.test(obj);
	            }
	            return false;
	        }

	        function isNotLike(obj, reg) {
	            return !isLike(obj, reg);
	        }

	        function contains(arr, obj) {
	            return isIn(obj, arr);
	        }

	        function notContains(arr, obj) {
	            return !isIn(obj, arr);
	        }

	        function containsAt(arr, obj, index) {
	            if (isArray(arr) && arr.length > index) {
	                return isEq(arr[index], obj);
	            }
	            return false;
	        }

	        function notContainsAt(arr, obj, index) {
	            if (isArray(arr)) {
	                return !isEq(arr[index], obj);
	            }
	            return false;
	        }

	        function has(obj, prop) {
	            return hasOwn.call(obj, prop);
	        }

	        function notHas(obj, prop) {
	            return !has(obj, prop);
	        }

	        function length(obj, l) {
	            if (has(obj, "length")) {
	                return obj.length === l;
	            }
	            return false;
	        }

	        function notLength(obj, l) {
	            if (has(obj, "length")) {
	                return obj.length !== l;
	            }
	            return false;
	        }

	        var isa = {
	            isFunction: isFunction,
	            isObject: isObject,
	            isEmpty: isEmpty,
	            isHash: isHash,
	            isNumber: isNumber,
	            isString: isString,
	            isDate: isDate,
	            isArray: isArray,
	            isBoolean: isBoolean,
	            isUndefined: isUndefined,
	            isDefined: isDefined,
	            isUndefinedOrNull: isUndefinedOrNull,
	            isNull: isNull,
	            isArguments: isArguments,
	            instanceOf: isInstanceOf,
	            isRegExp: isRegExp,
	            deepEqual: deepEqual,
	            isTrue: isTrue,
	            isFalse: isFalse,
	            isNotNull: isNotNull,
	            isEq: isEq,
	            isNeq: isNeq,
	            isSeq: isSeq,
	            isSneq: isSneq,
	            isIn: isIn,
	            isNotIn: isNotIn,
	            isLt: isLt,
	            isLte: isLte,
	            isGt: isGt,
	            isGte: isGte,
	            isLike: isLike,
	            isNotLike: isNotLike,
	            contains: contains,
	            notContains: notContains,
	            has: has,
	            notHas: notHas,
	            isLength: length,
	            isNotLength: notLength,
	            containsAt: containsAt,
	            notContainsAt: notContainsAt
	        };

	        var tester = {
	            constructor: function () {
	                this._testers = [];
	            },

	            noWrap: {
	                tester: function () {
	                    var testers = this._testers;
	                    return function tester(value) {
	                        var isa = false;
	                        for (var i = 0, l = testers.length; i < l && !isa; i++) {
	                            isa = testers[i](value);
	                        }
	                        return isa;
	                    };
	                }
	            }
	        };

	        var switcher = {
	            constructor: function () {
	                this._cases = [];
	                this.__default = null;
	            },

	            def: function (val, fn) {
	                this.__default = fn;
	            },

	            noWrap: {
	                switcher: function () {
	                    var testers = this._cases, __default = this.__default;
	                    return function tester() {
	                        var handled = false, args = argsToArray(arguments), caseRet;
	                        for (var i = 0, l = testers.length; i < l && !handled; i++) {
	                            caseRet = testers[i](args);
	                            if (caseRet.length > 1) {
	                                if (caseRet[1] || caseRet[0]) {
	                                    return caseRet[1];
	                                }
	                            }
	                        }
	                        if (!handled && __default) {
	                            return  __default.apply(this, args);
	                        }
	                    };
	                }
	            }
	        };

	        function addToTester(func) {
	            tester[func] = function isaTester() {
	                this._testers.push(isa[func]);
	            };
	        }

	        function addToSwitcher(func) {
	            switcher[func] = function isaTester() {
	                var args = argsToArray(arguments, 1), isFunc = isa[func], handler, doBreak = true;
	                if (args.length <= isFunc.length - 1) {
	                    throw new TypeError("A handler must be defined when calling using switch");
	                } else {
	                    handler = args.pop();
	                    if (isBoolean(handler)) {
	                        doBreak = handler;
	                        handler = args.pop();
	                    }
	                }
	                if (!isFunction(handler)) {
	                    throw new TypeError("handler must be defined");
	                }
	                this._cases.push(function (testArgs) {
	                    if (isFunc.apply(isa, testArgs.concat(args))) {
	                        return [doBreak, handler.apply(this, testArgs)];
	                    }
	                    return [false];
	                });
	            };
	        }

	        for (var i in isa) {
	            if (hasOwn.call(isa, i)) {
	                addToSwitcher(i);
	                addToTester(i);
	            }
	        }

	        var is = extended.define(isa).expose(isa);
	        is.tester = extended.define(tester);
	        is.switcher = extended.define(switcher);
	        return is;

	    }

	    if (true) {
	        if ("undefined" !== typeof module && module.exports) {
	            module.exports = defineIsa(__webpack_require__(388));

	        }
	    } else if ("function" === typeof define && define.amd) {
	        define(["extended"], function (extended) {
	            return defineIsa(extended);
	        });
	    } else {
	        this.isExtended = defineIsa(this.extended);
	    }

	}).call(this);


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(202).Buffer))

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	(function () {
	    "use strict";
	    /*global extender is, dateExtended*/

	    function defineExtended(extender) {


	        var merge = (function merger() {
	            function _merge(target, source) {
	                var name, s;
	                for (name in source) {
	                    if (source.hasOwnProperty(name)) {
	                        s = source[name];
	                        if (!(name in target) || (target[name] !== s)) {
	                            target[name] = s;
	                        }
	                    }
	                }
	                return target;
	            }

	            return function merge(obj) {
	                if (!obj) {
	                    obj = {};
	                }
	                for (var i = 1, l = arguments.length; i < l; i++) {
	                    _merge(obj, arguments[i]);
	                }
	                return obj; // Object
	            };
	        }());

	        function getExtended() {

	            var loaded = {};


	            //getInitial instance;
	            var extended = extender.define();
	            extended.expose({
	                register: function register(alias, extendWith) {
	                    if (!extendWith) {
	                        extendWith = alias;
	                        alias = null;
	                    }
	                    var type = typeof extendWith;
	                    if (alias) {
	                        extended[alias] = extendWith;
	                    } else if (extendWith && type === "function") {
	                        extended.extend(extendWith);
	                    } else if (type === "object") {
	                        extended.expose(extendWith);
	                    } else {
	                        throw new TypeError("extended.register must be called with an extender function");
	                    }
	                    return extended;
	                },

	                define: function () {
	                    return extender.define.apply(extender, arguments);
	                }
	            });

	            return extended;
	        }

	        function extended() {
	            return getExtended();
	        }

	        extended.define = function define() {
	            return extender.define.apply(extender, arguments);
	        };

	        return extended;
	    }

	    if (true) {
	        if ("undefined" !== typeof module && module.exports) {
	            module.exports = defineExtended(__webpack_require__(389));

	        }
	    } else if ("function" === typeof define && define.amd) {
	        define(["extender"], function (extender) {
	            return defineExtended(extender);
	        });
	    } else {
	        this.extended = defineExtended(this.extender);
	    }

	}).call(this);








/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(390);

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	(function () {
	    /*jshint strict:false*/


	    /**
	     *
	     * @projectName extender
	     * @github http://github.com/doug-martin/extender
	     * @header
	     * [![build status](https://secure.travis-ci.org/doug-martin/extender.png)](http://travis-ci.org/doug-martin/extender)
	     * # Extender
	     *
	     * `extender` is a library that helps in making chainable APIs, by creating a function that accepts different values and returns an object decorated with functions based on the type.
	     *
	     * ## Why Is Extender Different?
	     *
	     * Extender is different than normal chaining because is does more than return `this`. It decorates your values in a type safe manner.
	     *
	     * For example if you return an array from a string based method then the returned value will be decorated with array methods and not the string methods. This allow you as the developer to focus on your API and not worrying about how to properly build and connect your API.
	     *
	     *
	     * ## Installation
	     *
	     * ```
	     * npm install extender
	     * ```
	     *
	     * Or [download the source](https://raw.github.com/doug-martin/extender/master/extender.js) ([minified](https://raw.github.com/doug-martin/extender/master/extender-min.js))
	     *
	     * **Note** `extender` depends on [`declare.js`](http://doug-martin.github.com/declare.js/).
	     *
	     * ### Requirejs
	     *
	     * To use with requirejs place the `extend` source in the root scripts directory
	     *
	     * ```javascript
	     *
	     * define(["extender"], function(extender){
	     * });
	     *
	     * ```
	     *
	     *
	     * ## Usage
	     *
	     * **`extender.define(tester, decorations)`**
	     *
	     * To create your own extender call the `extender.define` function.
	     *
	     * This function accepts an optional tester which is used to determine a value should be decorated with the specified `decorations`
	     *
	     * ```javascript
	     * function isString(obj) {
	     *     return !isUndefinedOrNull(obj) && (typeof obj === "string" || obj instanceof String);
	     * }
	     *
	     *
	     * var myExtender = extender.define(isString, {
	     *		multiply: function (str, times) {
	     *			var ret = str;
	     *			for (var i = 1; i < times; i++) {
	     *				ret += str;
	     *			}
	     *			return ret;
	     *		},
	     *		toArray: function (str, delim) {
	     *			delim = delim || "";
	     *			return str.split(delim);
	     *		}
	     *	});
	     *
	     * myExtender("hello").multiply(2).value(); //hellohello
	     *
	     * ```
	     *
	     * If you do not specify a tester function and just pass in an object of `functions` then all values passed in will be decorated with methods.
	     *
	     * ```javascript
	     *
	     * function isUndefined(obj) {
	     *     var undef;
	     *     return obj === undef;
	     * }
	     *
	     * function isUndefinedOrNull(obj) {
	     *	var undef;
	     *     return obj === undef || obj === null;
	     * }
	     *
	     * function isArray(obj) {
	     *     return Object.prototype.toString.call(obj) === "[object Array]";
	     * }
	     *
	     * function isBoolean(obj) {
	     *     var undef, type = typeof obj;
	     *     return !isUndefinedOrNull(obj) && type === "boolean" || type === "Boolean";
	     * }
	     *
	     * function isString(obj) {
	     *     return !isUndefinedOrNull(obj) && (typeof obj === "string" || obj instanceof String);
	     * }
	     *
	     * var myExtender = extender.define({
	     *	isUndefined : isUndefined,
	     *	isUndefinedOrNull : isUndefinedOrNull,
	     *	isArray : isArray,
	     *	isBoolean : isBoolean,
	     *	isString : isString
	     * });
	     *
	     * ```
	     *
	     * To use
	     *
	     * ```
	     * var undef;
	     * myExtender("hello").isUndefined().value(); //false
	     * myExtender(undef).isUndefined().value(); //true
	     * ```
	     *
	     * You can also chain extenders so that they accept multiple types and decorates accordingly.
	     *
	     * ```javascript
	     * myExtender
	     *     .define(isArray, {
	     *		pluck: function (arr, m) {
	     *			var ret = [];
	     *			for (var i = 0, l = arr.length; i < l; i++) {
	     *				ret.push(arr[i][m]);
	     *			}
	     *			return ret;
	     *		}
	     *	})
	     *     .define(isBoolean, {
	     *		invert: function (val) {
	     *			return !val;
	     *		}
	     *	});
	     *
	     * myExtender([{a: "a"},{a: "b"},{a: "c"}]).pluck("a").value(); //["a", "b", "c"]
	     * myExtender("I love javascript!").toArray(/\s+/).pluck("0"); //["I", "l", "j"]
	     *
	     * ```
	     *
	     * Notice that we reuse the same extender as defined above.
	     *
	     * **Return Values**
	     *
	     * When creating an extender if you return a value from one of the decoration functions then that value will also be decorated. If you do not return any values then the extender will be returned.
	     *
	     * **Default decoration methods**
	     *
	     * By default every value passed into an extender is decorated with the following methods.
	     *
	     * * `value` : The value this extender represents.
	     * * `eq(otherValue)` : Tests strict equality of the currently represented value to the `otherValue`
	     * * `neq(oterValue)` : Tests strict inequality of the currently represented value.
	     * * `print` : logs the current value to the console.
	     *
	     * **Extender initialization**
	     *
	     * When creating an extender you can also specify a constructor which will be invoked with the current value.
	     *
	     * ```javascript
	     * myExtender.define(isString, {
	     *	constructor : function(val){
	     *     //set our value to the string trimmed
	     *		this._value = val.trimRight().trimLeft();
	     *	}
	     * });
	     * ```
	     *
	     * **`noWrap`**
	     *
	     * `extender` also allows you to specify methods that should not have the value wrapped providing a cleaner exit function other than `value()`.
	     *
	     * For example suppose you have an API that allows you to build a validator, rather than forcing the user to invoke the `value` method you could add a method called `validator` which makes more syntactic sense.
	     *
	     * ```
	     *
	     * var myValidator = extender.define({
	     *     //chainable validation methods
	     *     //...
	     *     //end chainable validation methods
	     *
	     *     noWrap : {
	     *         validator : function(){
	     *             //return your validator
	     *         }
	     *     }
	     * });
	     *
	     * myValidator().isNotNull().isEmailAddress().validator(); //now you dont need to call .value()
	     *
	     *
	     * ```
	     * **`extender.extend(extendr)`**
	     *
	     * You may also compose extenders through the use of `extender.extend(extender)`, which will return an entirely new extender that is the composition of extenders.
	     *
	     * Suppose you have the following two extenders.
	     *
	     * ```javascript
	     * var myExtender = extender
	     *        .define({
	     *            isFunction: is.function,
	     *            isNumber: is.number,
	     *            isString: is.string,
	     *            isDate: is.date,
	     *            isArray: is.array,
	     *            isBoolean: is.boolean,
	     *            isUndefined: is.undefined,
	     *            isDefined: is.defined,
	     *            isUndefinedOrNull: is.undefinedOrNull,
	     *            isNull: is.null,
	     *            isArguments: is.arguments,
	     *            isInstanceOf: is.instanceOf,
	     *            isRegExp: is.regExp
	     *        });
	     * var myExtender2 = extender.define(is.array, {
	     *     pluck: function (arr, m) {
	     *         var ret = [];
	     *         for (var i = 0, l = arr.length; i < l; i++) {
	     *             ret.push(arr[i][m]);
	     *         }
	     *         return ret;
	     *     },
	     *
	     *     noWrap: {
	     *         pluckPlain: function (arr, m) {
	     *             var ret = [];
	     *             for (var i = 0, l = arr.length; i < l; i++) {
	     *                 ret.push(arr[i][m]);
	     *             }
	     *             return ret;
	     *         }
	     *     }
	     * });
	     *
	     *
	     * ```
	     *
	     * And you do not want to alter either of them but instead what to create a third that is the union of the two.
	     *
	     *
	     * ```javascript
	     * var composed = extender.extend(myExtender).extend(myExtender2);
	     * ```
	     * So now you can use the new extender with the joined functionality if `myExtender` and `myExtender2`.
	     *
	     * ```javascript
	     * var extended = composed([
	     *      {a: "a"},
	     *      {a: "b"},
	     *      {a: "c"}
	     * ]);
	     * extended.isArray().value(); //true
	     * extended.pluck("a").value(); // ["a", "b", "c"]);
	     *
	     * ```
	     *
	     * **Note** `myExtender` and `myExtender2` will **NOT** be altered.
	     *
	     * **`extender.expose(methods)`**
	     *
	     * The `expose` method allows you to add methods to your extender that are not wrapped or automatically chained by exposing them on the extender directly.
	     *
	     * ```
	     * var isMethods = {
	     *      isFunction: is.function,
	     *      isNumber: is.number,
	     *      isString: is.string,
	     *      isDate: is.date,
	     *      isArray: is.array,
	     *      isBoolean: is.boolean,
	     *      isUndefined: is.undefined,
	     *      isDefined: is.defined,
	     *      isUndefinedOrNull: is.undefinedOrNull,
	     *      isNull: is.null,
	     *      isArguments: is.arguments,
	     *      isInstanceOf: is.instanceOf,
	     *      isRegExp: is.regExp
	     * };
	     *
	     * var myExtender = extender.define(isMethods).expose(isMethods);
	     *
	     * myExtender.isArray([]); //true
	     * myExtender([]).isArray([]).value(); //true
	     *
	     * ```
	     *
	     *
	     * **Using `instanceof`**
	     *
	     * When using extenders you can test if a value is an `instanceof` of an extender by using the instanceof operator.
	     *
	     * ```javascript
	     * var str = myExtender("hello");
	     *
	     * str instanceof myExtender; //true
	     * ```
	     *
	     * ## Examples
	     *
	     * To see more examples click [here](https://github.com/doug-martin/extender/tree/master/examples)
	     */
	    function defineExtender(declare) {


	        var slice = Array.prototype.slice, undef;

	        function indexOf(arr, item) {
	            if (arr && arr.length) {
	                for (var i = 0, l = arr.length; i < l; i++) {
	                    if (arr[i] === item) {
	                        return i;
	                    }
	                }
	            }
	            return -1;
	        }

	        function isArray(obj) {
	            return Object.prototype.toString.call(obj) === "[object Array]";
	        }

	        var merge = (function merger() {
	            function _merge(target, source, exclude) {
	                var name, s;
	                for (name in source) {
	                    if (source.hasOwnProperty(name) && indexOf(exclude, name) === -1) {
	                        s = source[name];
	                        if (!(name in target) || (target[name] !== s)) {
	                            target[name] = s;
	                        }
	                    }
	                }
	                return target;
	            }

	            return function merge(obj) {
	                if (!obj) {
	                    obj = {};
	                }
	                var l = arguments.length;
	                var exclude = arguments[arguments.length - 1];
	                if (isArray(exclude)) {
	                    l--;
	                } else {
	                    exclude = [];
	                }
	                for (var i = 1; i < l; i++) {
	                    _merge(obj, arguments[i], exclude);
	                }
	                return obj; // Object
	            };
	        }());


	        function extender(supers) {
	            supers = supers || [];
	            var Base = declare({
	                instance: {
	                    constructor: function (value) {
	                        this._value = value;
	                    },

	                    value: function () {
	                        return this._value;
	                    },

	                    eq: function eq(val) {
	                        return this["__extender__"](this._value === val);
	                    },

	                    neq: function neq(other) {
	                        return this["__extender__"](this._value !== other);
	                    },
	                    print: function () {
	                        console.log(this._value);
	                        return this;
	                    }
	                }
	            }), defined = [];

	            function addMethod(proto, name, func) {
	                if ("function" !== typeof func) {
	                    throw new TypeError("when extending type you must provide a function");
	                }
	                var extendedMethod;
	                if (name === "constructor") {
	                    extendedMethod = function () {
	                        this._super(arguments);
	                        func.apply(this, arguments);
	                    };
	                } else {
	                    extendedMethod = function extendedMethod() {
	                        var args = slice.call(arguments);
	                        args.unshift(this._value);
	                        var ret = func.apply(this, args);
	                        return ret !== undef ? this["__extender__"](ret) : this;
	                    };
	                }
	                proto[name] = extendedMethod;
	            }

	            function addNoWrapMethod(proto, name, func) {
	                if ("function" !== typeof func) {
	                    throw new TypeError("when extending type you must provide a function");
	                }
	                var extendedMethod;
	                if (name === "constructor") {
	                    extendedMethod = function () {
	                        this._super(arguments);
	                        func.apply(this, arguments);
	                    };
	                } else {
	                    extendedMethod = function extendedMethod() {
	                        var args = slice.call(arguments);
	                        args.unshift(this._value);
	                        return func.apply(this, args);
	                    };
	                }
	                proto[name] = extendedMethod;
	            }

	            function decorateProto(proto, decoration, nowrap) {
	                for (var i in decoration) {
	                    if (decoration.hasOwnProperty(i)) {
	                        if (i !== "getters" && i !== "setters") {
	                            if (i === "noWrap") {
	                                decorateProto(proto, decoration[i], true);
	                            } else if (nowrap) {
	                                addNoWrapMethod(proto, i, decoration[i]);
	                            } else {
	                                addMethod(proto, i, decoration[i]);
	                            }
	                        } else {
	                            proto[i] = decoration[i];
	                        }
	                    }
	                }
	            }

	            function _extender(obj) {
	                var ret = obj, i, l;
	                if (!(obj instanceof Base)) {
	                    var OurBase = Base;
	                    for (i = 0, l = defined.length; i < l; i++) {
	                        var definer = defined[i];
	                        if (definer[0](obj)) {
	                            OurBase = OurBase.extend({instance: definer[1]});
	                        }
	                    }
	                    ret = new OurBase(obj);
	                    ret["__extender__"] = _extender;
	                }
	                return ret;
	            }

	            function always() {
	                return true;
	            }

	            function define(tester, decorate) {
	                if (arguments.length) {
	                    if (typeof tester === "object") {
	                        decorate = tester;
	                        tester = always;
	                    }
	                    decorate = decorate || {};
	                    var proto = {};
	                    decorateProto(proto, decorate);
	                    //handle browsers like which skip over the constructor while looping
	                    if (!proto.hasOwnProperty("constructor")) {
	                        if (decorate.hasOwnProperty("constructor")) {
	                            addMethod(proto, "constructor", decorate.constructor);
	                        } else {
	                            proto.constructor = function () {
	                                this._super(arguments);
	                            };
	                        }
	                    }
	                    defined.push([tester, proto]);
	                }
	                return _extender;
	            }

	            function extend(supr) {
	                if (supr && supr.hasOwnProperty("__defined__")) {
	                    _extender["__defined__"] = defined = defined.concat(supr["__defined__"]);
	                }
	                merge(_extender, supr, ["define", "extend", "expose", "__defined__"]);
	                return _extender;
	            }

	            _extender.define = define;
	            _extender.extend = extend;
	            _extender.expose = function expose() {
	                var methods;
	                for (var i = 0, l = arguments.length; i < l; i++) {
	                    methods = arguments[i];
	                    if (typeof methods === "object") {
	                        merge(_extender, methods, ["define", "extend", "expose", "__defined__"]);
	                    }
	                }
	                return _extender;
	            };
	            _extender["__defined__"] = defined;


	            return _extender;
	        }

	        return {
	            define: function () {
	                return extender().define.apply(extender, arguments);
	            },

	            extend: function (supr) {
	                return extender().define().extend(supr);
	            }
	        };

	    }

	    if (true) {
	        if ("undefined" !== typeof module && module.exports) {
	            module.exports = defineExtender(__webpack_require__(391));

	        }
	    } else if ("function" === typeof define && define.amd) {
	        define(["declare"], function (declare) {
	            return defineExtender(declare);
	        });
	    } else {
	        this.extender = defineExtender(this.declare);
	    }

	}).call(this);

/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(392);

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	(function () {

	    /**
	     * @projectName declare
	     * @github http://github.com/doug-martin/declare.js
	     * @header
	     *
	     * Declare is a library designed to allow writing object oriented code the same way in both the browser and node.js.
	     *
	     * ##Installation
	     *
	     * `npm install declare.js`
	     *
	     * Or [download the source](https://raw.github.com/doug-martin/declare.js/master/declare.js) ([minified](https://raw.github.com/doug-martin/declare.js/master/declare-min.js))
	     *
	     * ###Requirejs
	     *
	     * To use with requirejs place the `declare` source in the root scripts directory
	     *
	     * ```
	     *
	     * define(["declare"], function(declare){
	     *      return declare({
	     *          instance : {
	     *              hello : function(){
	     *                  return "world";
	     *              }
	     *          }
	     *      });
	     * });
	     *
	     * ```
	     *
	     *
	     * ##Usage
	     *
	     * declare.js provides
	     *
	     * Class methods
	     *
	     * * `as(module | object, name)` : exports the object to module or the object with the name
	     * * `mixin(mixin)` : mixes in an object but does not inherit directly from the object. **Note** this does not return a new class but changes the original class.
	     * * `extend(proto)` : extend a class with the given properties. A shortcut to `declare(Super, {})`;
	     *
	     * Instance methods
	     *
	     * * `_super(arguments)`: calls the super of the current method, you can pass in either the argments object or an array with arguments you want passed to super
	     * * `_getSuper()`: returns a this methods direct super.
	     * * `_static` : use to reference class properties and methods.
	     * * `get(prop)` : gets a property invoking the getter if it exists otherwise it just returns the named property on the object.
	     * * `set(prop, val)` : sets a property invoking the setter if it exists otherwise it just sets the named property on the object.
	     *
	     *
	     * ###Declaring a new Class
	     *
	     * Creating a new class with declare is easy!
	     *
	     * ```
	     *
	     * var Mammal = declare({
	     *      //define your instance methods and properties
	     *      instance : {
	     *
	     *          //will be called whenever a new instance is created
	     *          constructor: function(options) {
	     *              options = options || {};
	     *              this._super(arguments);
	     *              this._type = options.type || "mammal";
	     *          },
	     *
	     *          speak : function() {
	     *              return  "A mammal of type " + this._type + " sounds like";
	     *          },
	     *
	     *          //Define your getters
	     *          getters : {
	     *
	     *              //can be accessed by using the get method. (mammal.get("type"))
	     *              type : function() {
	     *                  return this._type;
	     *              }
	     *          },
	     *
	     *           //Define your setters
	     *          setters : {
	     *
	     *                //can be accessed by using the set method. (mammal.set("type", "mammalType"))
	     *              type : function(t) {
	     *                  this._type = t;
	     *              }
	     *          }
	     *      },
	     *
	     *      //Define your static methods
	     *      static : {
	     *
	     *          //Mammal.soundOff(); //"Im a mammal!!"
	     *          soundOff : function() {
	     *              return "Im a mammal!!";
	     *          }
	     *      }
	     * });
	     *
	     *
	     * ```
	     *
	     * You can use Mammal just like you would any other class.
	     *
	     * ```
	     * Mammal.soundOff("Im a mammal!!");
	     *
	     * var myMammal = new Mammal({type : "mymammal"});
	     * myMammal.speak(); // "A mammal of type mymammal sounds like"
	     * myMammal.get("type"); //"mymammal"
	     * myMammal.set("type", "mammal");
	     * myMammal.get("type"); //"mammal"
	     *
	     *
	     * ```
	     *
	     * ###Extending a class
	     *
	     * If you want to just extend a single class use the .extend method.
	     *
	     * ```
	     *
	     * var Wolf = Mammal.extend({
	     *
	     *   //define your instance method
	     *   instance: {
	     *
	     *        //You can override super constructors just be sure to call `_super`
	     *       constructor: function(options) {
	     *          options = options || {};
	     *          this._super(arguments); //call our super constructor.
	     *          this._sound = "growl";
	     *          this._color = options.color || "grey";
	     *      },
	     *
	     *      //override Mammals `speak` method by appending our own data to it.
	     *      speak : function() {
	     *          return this._super(arguments) + " a " + this._sound;
	     *      },
	     *
	     *      //add new getters for sound and color
	     *      getters : {
	     *
	     *           //new Wolf().get("type")
	     *           //notice color is read only as we did not define a setter
	     *          color : function() {
	     *              return this._color;
	     *          },
	     *
	     *          //new Wolf().get("sound")
	     *          sound : function() {
	     *              return this._sound;
	     *          }
	     *      },
	     *
	     *      setters : {
	     *
	     *          //new Wolf().set("sound", "howl")
	     *          sound : function(s) {
	     *              this._sound = s;
	     *          }
	     *      }
	     *
	     *  },
	     *
	     *  static : {
	     *
	     *      //You can override super static methods also! And you can still use _super
	     *      soundOff : function() {
	     *          //You can even call super in your statics!!!
	     *          //should return "I'm a mammal!! that growls"
	     *          return this._super(arguments) + " that growls";
	     *      }
	     *  }
	     * });
	     *
	     * Wolf.soundOff(); //Im a mammal!! that growls
	     *
	     * var myWolf = new Wolf();
	     * myWolf instanceof Mammal //true
	     * myWolf instanceof Wolf //true
	     *
	     * ```
	     *
	     * You can also extend a class by using the declare method and just pass in the super class.
	     *
	     * ```
	     * //Typical hierarchical inheritance
	     * // Mammal->Wolf->Dog
	     * var Dog = declare(Wolf, {
	     *    instance: {
	     *        constructor: function(options) {
	     *            options = options || {};
	     *            this._super(arguments);
	     *            //override Wolfs initialization of sound to woof.
	     *            this._sound = "woof";
	     *
	     *        },
	     *
	     *        speak : function() {
	     *            //Should return "A mammal of type mammal sounds like a growl thats domesticated"
	     *            return this._super(arguments) + " thats domesticated";
	     *        }
	     *    },
	     *
	     *    static : {
	     *        soundOff : function() {
	     *            //should return "I'm a mammal!! that growls but now barks"
	     *            return this._super(arguments) + " but now barks";
	     *        }
	     *    }
	     * });
	     *
	     * Dog.soundOff(); //Im a mammal!! that growls but now barks
	     *
	     * var myDog = new Dog();
	     * myDog instanceof Mammal //true
	     * myDog instanceof Wolf //true
	     * myDog instanceof Dog //true
	     *
	     *
	     * //Notice you still get the extend method.
	     *
	     * // Mammal->Wolf->Dog->Breed
	     * var Breed = Dog.extend({
	     *    instance: {
	     *
	     *        //initialize outside of constructor
	     *        _pitch : "high",
	     *
	     *        constructor: function(options) {
	     *            options = options || {};
	     *            this._super(arguments);
	     *            this.breed = options.breed || "lab";
	     *        },
	     *
	     *        speak : function() {
	     *            //Should return "A mammal of type mammal sounds like a
	     *            //growl thats domesticated with a high pitch!"
	     *            return this._super(arguments) + " with a " + this._pitch + " pitch!";
	     *        },
	     *
	     *        getters : {
	     *            pitch : function() {
	     *                return this._pitch;
	     *            }
	     *        }
	     *    },
	     *
	     *    static : {
	     *        soundOff : function() {
	     *            //should return "I'M A MAMMAL!! THAT GROWLS BUT NOW BARKS!"
	     *            return this._super(arguments).toUpperCase() + "!";
	     *        }
	     *    }
	     * });
	     *
	     *
	     * Breed.soundOff()//"IM A MAMMAL!! THAT GROWLS BUT NOW BARKS!"
	     *
	     * var myBreed = new Breed({color : "gold", type : "lab"}),
	     * myBreed instanceof Dog //true
	     * myBreed instanceof Wolf //true
	     * myBreed instanceof Mammal //true
	     * myBreed.speak() //"A mammal of type lab sounds like a woof thats domesticated with a high pitch!"
	     * myBreed.get("type") //"lab"
	     * myBreed.get("color") //"gold"
	     * myBreed.get("sound")" //"woof"
	     * ```
	     *
	     * ###Multiple Inheritance / Mixins
	     *
	     * declare also allows the use of multiple super classes.
	     * This is useful if you have generic classes that provide functionality but shouldnt be used on their own.
	     *
	     * Lets declare a mixin that allows us to watch for property changes.
	     *
	     * ```
	     * //Notice that we set up the functions outside of declare because we can reuse them
	     *
	     * function _set(prop, val) {
	     *     //get the old value
	     *     var oldVal = this.get(prop);
	     *     //call super to actually set the property
	     *     var ret = this._super(arguments);
	     *     //call our handlers
	     *     this.__callHandlers(prop, oldVal, val);
	     *     return ret;
	     * }
	     *
	     * function _callHandlers(prop, oldVal, newVal) {
	     *    //get our handlers for the property
	     *     var handlers = this.__watchers[prop], l;
	     *     //if the handlers exist and their length does not equal 0 then we call loop through them
	     *     if (handlers && (l = handlers.length) !== 0) {
	     *         for (var i = 0; i < l; i++) {
	     *             //call the handler
	     *             handlers[i].call(null, prop, oldVal, newVal);
	     *         }
	     *     }
	     * }
	     *
	     *
	     * //the watch function
	     * function _watch(prop, handler) {
	     *     if ("function" !== typeof handler) {
	     *         //if its not a function then its an invalid handler
	     *         throw new TypeError("Invalid handler.");
	     *     }
	     *     if (!this.__watchers[prop]) {
	     *         //create the watchers if it doesnt exist
	     *         this.__watchers[prop] = [handler];
	     *     } else {
	     *         //otherwise just add it to the handlers array
	     *         this.__watchers[prop].push(handler);
	     *     }
	     * }
	     *
	     * function _unwatch(prop, handler) {
	     *     if ("function" !== typeof handler) {
	     *         throw new TypeError("Invalid handler.");
	     *     }
	     *     var handlers = this.__watchers[prop], index;
	     *     if (handlers && (index = handlers.indexOf(handler)) !== -1) {
	     *        //remove the handler if it is found
	     *         handlers.splice(index, 1);
	     *     }
	     * }
	     *
	     * declare({
	     *     instance:{
	     *         constructor:function () {
	     *             this._super(arguments);
	     *             //set up our watchers
	     *             this.__watchers = {};
	     *         },
	     *
	     *         //override the default set function so we can watch values
	     *         "set":_set,
	     *         //set up our callhandlers function
	     *         __callHandlers:_callHandlers,
	     *         //add the watch function
	     *         watch:_watch,
	     *         //add the unwatch function
	     *         unwatch:_unwatch
	     *     },
	     *
	     *     "static":{
	     *
	     *         init:function () {
	     *             this._super(arguments);
	     *             this.__watchers = {};
	     *         },
	     *         //override the default set function so we can watch values
	     *         "set":_set,
	     *         //set our callHandlers function
	     *         __callHandlers:_callHandlers,
	     *         //add the watch
	     *         watch:_watch,
	     *         //add the unwatch function
	     *         unwatch:_unwatch
	     *     }
	     * })
	     *
	     * ```
	     *
	     * Now lets use the mixin
	     *
	     * ```
	     * var WatchDog = declare([Dog, WatchMixin]);
	     *
	     * var watchDog = new WatchDog();
	     * //create our handler
	     * function watch(id, oldVal, newVal) {
	     *     console.log("watchdog's %s was %s, now %s", id, oldVal, newVal);
	     * }
	     *
	     * //watch for property changes
	     * watchDog.watch("type", watch);
	     * watchDog.watch("color", watch);
	     * watchDog.watch("sound", watch);
	     *
	     * //now set the properties each handler will be called
	     * watchDog.set("type", "newDog");
	     * watchDog.set("color", "newColor");
	     * watchDog.set("sound", "newSound");
	     *
	     *
	     * //unwatch the property changes
	     * watchDog.unwatch("type", watch);
	     * watchDog.unwatch("color", watch);
	     * watchDog.unwatch("sound", watch);
	     *
	     * //no handlers will be called this time
	     * watchDog.set("type", "newDog");
	     * watchDog.set("color", "newColor");
	     * watchDog.set("sound", "newSound");
	     *
	     *
	     * ```
	     *
	     * ###Accessing static methods and properties witin an instance.
	     *
	     * To access static properties on an instance use the `_static` property which is a reference to your constructor.
	     *
	     * For example if your in your constructor and you want to have configurable default values.
	     *
	     * ```
	     * consturctor : function constructor(opts){
	     *     this.opts = opts || {};
	     *     this._type = opts.type || this._static.DEFAULT_TYPE;
	     * }
	     * ```
	     *
	     *
	     *
	     * ###Creating a new instance of within an instance.
	     *
	     * Often times you want to create a new instance of an object within an instance. If your subclassed however you cannot return a new instance of the parent class as it will not be the right sub class. `declare` provides a way around this by setting the `_static` property on each isntance of the class.
	     *
	     * Lets add a reproduce method `Mammal`
	     *
	     * ```
	     * reproduce : function(options){
	     *     return new this._static(options);
	     * }
	     * ```
	     *
	     * Now in each subclass you can call reproduce and get the proper type.
	     *
	     * ```
	     * var myDog = new Dog();
	     * var myDogsChild = myDog.reproduce();
	     *
	     * myDogsChild instanceof Dog; //true
	     * ```
	     *
	     * ###Using the `as`
	     *
	     * `declare` also provides an `as` method which allows you to add your class to an object or if your using node.js you can pass in `module` and the class will be exported as the module.
	     *
	     * ```
	     * var animals = {};
	     *
	     * Mammal.as(animals, "Dog");
	     * Wolf.as(animals, "Wolf");
	     * Dog.as(animals, "Dog");
	     * Breed.as(animals, "Breed");
	     *
	     * var myDog = new animals.Dog();
	     *
	     * ```
	     *
	     * Or in node
	     *
	     * ```
	     * Mammal.as(exports, "Dog");
	     * Wolf.as(exports, "Wolf");
	     * Dog.as(exports, "Dog");
	     * Breed.as(exports, "Breed");
	     *
	     * ```
	     *
	     * To export a class as the `module` in node
	     *
	     * ```
	     * Mammal.as(module);
	     * ```
	     *
	     *
	     */
	    function createDeclared() {
	        var arraySlice = Array.prototype.slice, classCounter = 0, Base, forceNew = new Function();

	        var SUPER_REGEXP = /(super)/g;

	        function argsToArray(args, slice) {
	            slice = slice || 0;
	            return arraySlice.call(args, slice);
	        }

	        function isArray(obj) {
	            return Object.prototype.toString.call(obj) === "[object Array]";
	        }

	        function isObject(obj) {
	            var undef;
	            return obj !== null && obj !== undef && typeof obj === "object";
	        }

	        function isHash(obj) {
	            var ret = isObject(obj);
	            return ret && obj.constructor === Object;
	        }

	        var isArguments = function _isArguments(object) {
	            return Object.prototype.toString.call(object) === '[object Arguments]';
	        };

	        if (!isArguments(arguments)) {
	            isArguments = function _isArguments(obj) {
	                return !!(obj && obj.hasOwnProperty("callee"));
	            };
	        }

	        function indexOf(arr, item) {
	            if (arr && arr.length) {
	                for (var i = 0, l = arr.length; i < l; i++) {
	                    if (arr[i] === item) {
	                        return i;
	                    }
	                }
	            }
	            return -1;
	        }

	        function merge(target, source, exclude) {
	            var name, s;
	            for (name in source) {
	                if (source.hasOwnProperty(name) && indexOf(exclude, name) === -1) {
	                    s = source[name];
	                    if (!(name in target) || (target[name] !== s)) {
	                        target[name] = s;
	                    }
	                }
	            }
	            return target;
	        }

	        function callSuper(args, a) {
	            var meta = this.__meta,
	                supers = meta.supers,
	                l = supers.length, superMeta = meta.superMeta, pos = superMeta.pos;
	            if (l > pos) {
	                args = !args ? [] : (!isArguments(args) && !isArray(args)) ? [args] : args;
	                var name = superMeta.name, f = superMeta.f, m;
	                do {
	                    m = supers[pos][name];
	                    if ("function" === typeof m && (m = m._f || m) !== f) {
	                        superMeta.pos = 1 + pos;
	                        return m.apply(this, args);
	                    }
	                } while (l > ++pos);
	            }

	            return null;
	        }

	        function getSuper() {
	            var meta = this.__meta,
	                supers = meta.supers,
	                l = supers.length, superMeta = meta.superMeta, pos = superMeta.pos;
	            if (l > pos) {
	                var name = superMeta.name, f = superMeta.f, m;
	                do {
	                    m = supers[pos][name];
	                    if ("function" === typeof m && (m = m._f || m) !== f) {
	                        superMeta.pos = 1 + pos;
	                        return m.bind(this);
	                    }
	                } while (l > ++pos);
	            }
	            return null;
	        }

	        function getter(name) {
	            var getters = this.__getters__;
	            if (getters.hasOwnProperty(name)) {
	                return getters[name].apply(this);
	            } else {
	                return this[name];
	            }
	        }

	        function setter(name, val) {
	            var setters = this.__setters__;
	            if (isHash(name)) {
	                for (var i in name) {
	                    var prop = name[i];
	                    if (setters.hasOwnProperty(i)) {
	                        setters[name].call(this, prop);
	                    } else {
	                        this[i] = prop;
	                    }
	                }
	            } else {
	                if (setters.hasOwnProperty(name)) {
	                    return setters[name].apply(this, argsToArray(arguments, 1));
	                } else {
	                    return this[name] = val;
	                }
	            }
	        }


	        function defaultFunction() {
	            var meta = this.__meta || {},
	                supers = meta.supers,
	                l = supers.length, superMeta = meta.superMeta, pos = superMeta.pos;
	            if (l > pos) {
	                var name = superMeta.name, f = superMeta.f, m;
	                do {
	                    m = supers[pos][name];
	                    if ("function" === typeof m && (m = m._f || m) !== f) {
	                        superMeta.pos = 1 + pos;
	                        return m.apply(this, arguments);
	                    }
	                } while (l > ++pos);
	            }
	            return null;
	        }


	        function functionWrapper(f, name) {
	            if (f.toString().match(SUPER_REGEXP)) {
	                var wrapper = function wrapper() {
	                    var ret, meta = this.__meta || {};
	                    var orig = meta.superMeta;
	                    meta.superMeta = {f: f, pos: 0, name: name};
	                    switch (arguments.length) {
	                    case 0:
	                        ret = f.call(this);
	                        break;
	                    case 1:
	                        ret = f.call(this, arguments[0]);
	                        break;
	                    case 2:
	                        ret = f.call(this, arguments[0], arguments[1]);
	                        break;

	                    case 3:
	                        ret = f.call(this, arguments[0], arguments[1], arguments[2]);
	                        break;
	                    default:
	                        ret = f.apply(this, arguments);
	                    }
	                    meta.superMeta = orig;
	                    return ret;
	                };
	                wrapper._f = f;
	                return wrapper;
	            } else {
	                f._f = f;
	                return f;
	            }
	        }

	        function defineMixinProps(child, proto) {

	            var operations = proto.setters || {}, __setters = child.__setters__, __getters = child.__getters__;
	            for (var i in operations) {
	                if (!__setters.hasOwnProperty(i)) {  //make sure that the setter isnt already there
	                    __setters[i] = operations[i];
	                }
	            }
	            operations = proto.getters || {};
	            for (i in operations) {
	                if (!__getters.hasOwnProperty(i)) {  //make sure that the setter isnt already there
	                    __getters[i] = operations[i];
	                }
	            }
	            for (var j in proto) {
	                if (j !== "getters" && j !== "setters") {
	                    var p = proto[j];
	                    if ("function" === typeof p) {
	                        if (!child.hasOwnProperty(j)) {
	                            child[j] = functionWrapper(defaultFunction, j);
	                        }
	                    } else {
	                        child[j] = p;
	                    }
	                }
	            }
	        }

	        function mixin() {
	            var args = argsToArray(arguments), l = args.length;
	            var child = this.prototype;
	            var childMeta = child.__meta, thisMeta = this.__meta, bases = child.__meta.bases, staticBases = bases.slice(),
	                staticSupers = thisMeta.supers || [], supers = childMeta.supers || [];
	            for (var i = 0; i < l; i++) {
	                var m = args[i], mProto = m.prototype;
	                var protoMeta = mProto.__meta, meta = m.__meta;
	                !protoMeta && (protoMeta = (mProto.__meta = {proto: mProto || {}}));
	                !meta && (meta = (m.__meta = {proto: m.__proto__ || {}}));
	                defineMixinProps(child, protoMeta.proto || {});
	                defineMixinProps(this, meta.proto || {});
	                //copy the bases for static,

	                mixinSupers(m.prototype, supers, bases);
	                mixinSupers(m, staticSupers, staticBases);
	            }
	            return this;
	        }

	        function mixinSupers(sup, arr, bases) {
	            var meta = sup.__meta;
	            !meta && (meta = (sup.__meta = {}));
	            var unique = sup.__meta.unique;
	            !unique && (meta.unique = "declare" + ++classCounter);
	            //check it we already have this super mixed into our prototype chain
	            //if true then we have already looped their supers!
	            if (indexOf(bases, unique) === -1) {
	                //add their id to our bases
	                bases.push(unique);
	                var supers = sup.__meta.supers || [], i = supers.length - 1 || 0;
	                while (i >= 0) {
	                    mixinSupers(supers[i--], arr, bases);
	                }
	                arr.unshift(sup);
	            }
	        }

	        function defineProps(child, proto) {
	            var operations = proto.setters,
	                __setters = child.__setters__,
	                __getters = child.__getters__;
	            if (operations) {
	                for (var i in operations) {
	                    __setters[i] = operations[i];
	                }
	            }
	            operations = proto.getters || {};
	            if (operations) {
	                for (i in operations) {
	                    __getters[i] = operations[i];
	                }
	            }
	            for (i in proto) {
	                if (i != "getters" && i != "setters") {
	                    var f = proto[i];
	                    if ("function" === typeof f) {
	                        var meta = f.__meta || {};
	                        if (!meta.isConstructor) {
	                            child[i] = functionWrapper(f, i);
	                        } else {
	                            child[i] = f;
	                        }
	                    } else {
	                        child[i] = f;
	                    }
	                }
	            }

	        }

	        function _export(obj, name) {
	            if (obj && name) {
	                obj[name] = this;
	            } else {
	                obj.exports = obj = this;
	            }
	            return this;
	        }

	        function extend(proto) {
	            return declare(this, proto);
	        }

	        function getNew(ctor) {
	            // create object with correct prototype using a do-nothing
	            // constructor
	            forceNew.prototype = ctor.prototype;
	            var t = new forceNew();
	            forceNew.prototype = null;	// clean up
	            return t;
	        }


	        function __declare(child, sup, proto) {
	            var childProto = {}, supers = [];
	            var unique = "declare" + ++classCounter, bases = [], staticBases = [];
	            var instanceSupers = [], staticSupers = [];
	            var meta = {
	                supers: instanceSupers,
	                unique: unique,
	                bases: bases,
	                superMeta: {
	                    f: null,
	                    pos: 0,
	                    name: null
	                }
	            };
	            var childMeta = {
	                supers: staticSupers,
	                unique: unique,
	                bases: staticBases,
	                isConstructor: true,
	                superMeta: {
	                    f: null,
	                    pos: 0,
	                    name: null
	                }
	            };

	            if (isHash(sup) && !proto) {
	                proto = sup;
	                sup = Base;
	            }

	            if ("function" === typeof sup || isArray(sup)) {
	                supers = isArray(sup) ? sup : [sup];
	                sup = supers.shift();
	                child.__meta = childMeta;
	                childProto = getNew(sup);
	                childProto.__meta = meta;
	                childProto.__getters__ = merge({}, childProto.__getters__ || {});
	                childProto.__setters__ = merge({}, childProto.__setters__ || {});
	                child.__getters__ = merge({}, child.__getters__ || {});
	                child.__setters__ = merge({}, child.__setters__ || {});
	                mixinSupers(sup.prototype, instanceSupers, bases);
	                mixinSupers(sup, staticSupers, staticBases);
	            } else {
	                child.__meta = childMeta;
	                childProto.__meta = meta;
	                childProto.__getters__ = childProto.__getters__ || {};
	                childProto.__setters__ = childProto.__setters__ || {};
	                child.__getters__ = child.__getters__ || {};
	                child.__setters__ = child.__setters__ || {};
	            }
	            child.prototype = childProto;
	            if (proto) {
	                var instance = meta.proto = proto.instance || {};
	                var stat = childMeta.proto = proto.static || {};
	                stat.init = stat.init || defaultFunction;
	                defineProps(childProto, instance);
	                defineProps(child, stat);
	                if (!instance.hasOwnProperty("constructor")) {
	                    childProto.constructor = instance.constructor = functionWrapper(defaultFunction, "constructor");
	                } else {
	                    childProto.constructor = functionWrapper(instance.constructor, "constructor");
	                }
	            } else {
	                meta.proto = {};
	                childMeta.proto = {};
	                child.init = functionWrapper(defaultFunction, "init");
	                childProto.constructor = functionWrapper(defaultFunction, "constructor");
	            }
	            if (supers.length) {
	                mixin.apply(child, supers);
	            }
	            if (sup) {
	                //do this so we mixin our super methods directly but do not ov
	                merge(child, merge(merge({}, sup), child));
	            }
	            childProto._super = child._super = callSuper;
	            childProto._getSuper = child._getSuper = getSuper;
	            childProto._static = child;
	        }

	        function declare(sup, proto) {
	            function declared() {
	                switch (arguments.length) {
	                case 0:
	                    this.constructor.call(this);
	                    break;
	                case 1:
	                    this.constructor.call(this, arguments[0]);
	                    break;
	                case 2:
	                    this.constructor.call(this, arguments[0], arguments[1]);
	                    break;
	                case 3:
	                    this.constructor.call(this, arguments[0], arguments[1], arguments[2]);
	                    break;
	                default:
	                    this.constructor.apply(this, arguments);
	                }
	            }

	            __declare(declared, sup, proto);
	            return declared.init() || declared;
	        }

	        function singleton(sup, proto) {
	            var retInstance;

	            function declaredSingleton() {
	                if (!retInstance) {
	                    this.constructor.apply(this, arguments);
	                    retInstance = this;
	                }
	                return retInstance;
	            }

	            __declare(declaredSingleton, sup, proto);
	            return  declaredSingleton.init() || declaredSingleton;
	        }

	        Base = declare({
	            instance: {
	                "get": getter,
	                "set": setter
	            },

	            "static": {
	                "get": getter,
	                "set": setter,
	                mixin: mixin,
	                extend: extend,
	                as: _export
	            }
	        });

	        declare.singleton = singleton;
	        return declare;
	    }

	    if (true) {
	        if ("undefined" !== typeof module && module.exports) {
	            module.exports = createDeclared();
	        }
	    } else if ("function" === typeof define && define.amd) {
	        define(createDeclared);
	    } else {
	        this.declare = createDeclared();
	    }
	}());





/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	(function () {
	    "use strict";
	    /*global extended isExtended*/

	    function defineObject(extended, is, arr) {

	        var deepEqual = is.deepEqual,
	            isString = is.isString,
	            isHash = is.isHash,
	            difference = arr.difference,
	            hasOwn = Object.prototype.hasOwnProperty,
	            isFunction = is.isFunction;

	        function _merge(target, source) {
	            var name, s;
	            for (name in source) {
	                if (hasOwn.call(source, name)) {
	                    s = source[name];
	                    if (!(name in target) || (target[name] !== s)) {
	                        target[name] = s;
	                    }
	                }
	            }
	            return target;
	        }

	        function _deepMerge(target, source) {
	            var name, s, t;
	            for (name in source) {
	                if (hasOwn.call(source, name)) {
	                    s = source[name];
	                    t = target[name];
	                    if (!deepEqual(t, s)) {
	                        if (isHash(t) && isHash(s)) {
	                            target[name] = _deepMerge(t, s);
	                        } else if (isHash(s)) {
	                            target[name] = _deepMerge({}, s);
	                        } else {
	                            target[name] = s;
	                        }
	                    }
	                }
	            }
	            return target;
	        }


	        function merge(obj) {
	            if (!obj) {
	                obj = {};
	            }
	            for (var i = 1, l = arguments.length; i < l; i++) {
	                _merge(obj, arguments[i]);
	            }
	            return obj; // Object
	        }

	        function deepMerge(obj) {
	            if (!obj) {
	                obj = {};
	            }
	            for (var i = 1, l = arguments.length; i < l; i++) {
	                _deepMerge(obj, arguments[i]);
	            }
	            return obj; // Object
	        }


	        function extend(parent, child) {
	            var proto = parent.prototype || parent;
	            merge(proto, child);
	            return parent;
	        }

	        function forEach(hash, iterator, scope) {
	            if (!isHash(hash) || !isFunction(iterator)) {
	                throw new TypeError();
	            }
	            var objKeys = keys(hash), key;
	            for (var i = 0, len = objKeys.length; i < len; ++i) {
	                key = objKeys[i];
	                iterator.call(scope || hash, hash[key], key, hash);
	            }
	            return hash;
	        }

	        function filter(hash, iterator, scope) {
	            if (!isHash(hash) || !isFunction(iterator)) {
	                throw new TypeError();
	            }
	            var objKeys = keys(hash), key, value, ret = {};
	            for (var i = 0, len = objKeys.length; i < len; ++i) {
	                key = objKeys[i];
	                value = hash[key];
	                if (iterator.call(scope || hash, value, key, hash)) {
	                    ret[key] = value;
	                }
	            }
	            return ret;
	        }

	        function values(hash) {
	            if (!isHash(hash)) {
	                throw new TypeError();
	            }
	            var objKeys = keys(hash), ret = [];
	            for (var i = 0, len = objKeys.length; i < len; ++i) {
	                ret.push(hash[objKeys[i]]);
	            }
	            return ret;
	        }


	        function keys(hash) {
	            if (!isHash(hash)) {
	                throw new TypeError();
	            }
	            var ret = [];
	            for (var i in hash) {
	                if (hasOwn.call(hash, i)) {
	                    ret.push(i);
	                }
	            }
	            return ret;
	        }

	        function invert(hash) {
	            if (!isHash(hash)) {
	                throw new TypeError();
	            }
	            var objKeys = keys(hash), key, ret = {};
	            for (var i = 0, len = objKeys.length; i < len; ++i) {
	                key = objKeys[i];
	                ret[hash[key]] = key;
	            }
	            return ret;
	        }

	        function toArray(hash) {
	            if (!isHash(hash)) {
	                throw new TypeError();
	            }
	            var objKeys = keys(hash), key, ret = [];
	            for (var i = 0, len = objKeys.length; i < len; ++i) {
	                key = objKeys[i];
	                ret.push([key, hash[key]]);
	            }
	            return ret;
	        }

	        function omit(hash, omitted) {
	            if (!isHash(hash)) {
	                throw new TypeError();
	            }
	            if (isString(omitted)) {
	                omitted = [omitted];
	            }
	            var objKeys = difference(keys(hash), omitted), key, ret = {};
	            for (var i = 0, len = objKeys.length; i < len; ++i) {
	                key = objKeys[i];
	                ret[key] = hash[key];
	            }
	            return ret;
	        }

	        var hash = {
	            forEach: forEach,
	            filter: filter,
	            invert: invert,
	            values: values,
	            toArray: toArray,
	            keys: keys,
	            omit: omit
	        };


	        var obj = {
	            extend: extend,
	            merge: merge,
	            deepMerge: deepMerge,
	            omit: omit
	        };

	        var ret = extended.define(is.isObject, obj).define(isHash, hash).define(is.isFunction, {extend: extend}).expose({hash: hash}).expose(obj);
	        var orig = ret.extend;
	        ret.extend = function __extend() {
	            if (arguments.length === 1) {
	                return orig.extend.apply(ret, arguments);
	            } else {
	                extend.apply(null, arguments);
	            }
	        };
	        return ret;

	    }

	    if (true) {
	        if ("undefined" !== typeof module && module.exports) {
	            module.exports = defineObject(__webpack_require__(388), __webpack_require__(387), __webpack_require__(394));

	        }
	    } else if ("function" === typeof define && define.amd) {
	        define(["extended", "is-extended", "array-extended"], function (extended, is, array) {
	            return defineObject(extended, is, array);
	        });
	    } else {
	        this.objectExtended = defineObject(this.extended, this.isExtended, this.arrayExtended);
	    }

	}).call(this);








/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	(function () {
	    "use strict";
	    /*global define*/

	    function defineArray(extended, is, args) {

	        var isString = is.isString,
	            isArray = Array.isArray || is.isArray,
	            isDate = is.isDate,
	            floor = Math.floor,
	            abs = Math.abs,
	            mathMax = Math.max,
	            mathMin = Math.min,
	            arrayProto = Array.prototype,
	            arrayIndexOf = arrayProto.indexOf,
	            arrayForEach = arrayProto.forEach,
	            arrayMap = arrayProto.map,
	            arrayReduce = arrayProto.reduce,
	            arrayReduceRight = arrayProto.reduceRight,
	            arrayFilter = arrayProto.filter,
	            arrayEvery = arrayProto.every,
	            arraySome = arrayProto.some,
	            argsToArray = args.argsToArray;


	        function cross(num, cros) {
	            return reduceRight(cros, function (a, b) {
	                if (!isArray(b)) {
	                    b = [b];
	                }
	                b.unshift(num);
	                a.unshift(b);
	                return a;
	            }, []);
	        }

	        function permute(num, cross, length) {
	            var ret = [];
	            for (var i = 0; i < cross.length; i++) {
	                ret.push([num].concat(rotate(cross, i)).slice(0, length));
	            }
	            return ret;
	        }


	        function intersection(a, b) {
	            var ret = [], aOne, i = -1, l;
	            l = a.length;
	            while (++i < l) {
	                aOne = a[i];
	                if (indexOf(b, aOne) !== -1) {
	                    ret.push(aOne);
	                }
	            }
	            return ret;
	        }


	        var _sort = (function () {

	            var isAll = function (arr, test) {
	                return every(arr, test);
	            };

	            var defaultCmp = function (a, b) {
	                return a - b;
	            };

	            var dateSort = function (a, b) {
	                return a.getTime() - b.getTime();
	            };

	            return function _sort(arr, property) {
	                var ret = [];
	                if (isArray(arr)) {
	                    ret = arr.slice();
	                    if (property) {
	                        if (typeof property === "function") {
	                            ret.sort(property);
	                        } else {
	                            ret.sort(function (a, b) {
	                                var aProp = a[property], bProp = b[property];
	                                if (isString(aProp) && isString(bProp)) {
	                                    return aProp > bProp ? 1 : aProp < bProp ? -1 : 0;
	                                } else if (isDate(aProp) && isDate(bProp)) {
	                                    return aProp.getTime() - bProp.getTime();
	                                } else {
	                                    return aProp - bProp;
	                                }
	                            });
	                        }
	                    } else {
	                        if (isAll(ret, isString)) {
	                            ret.sort();
	                        } else if (isAll(ret, isDate)) {
	                            ret.sort(dateSort);
	                        } else {
	                            ret.sort(defaultCmp);
	                        }
	                    }
	                }
	                return ret;
	            };

	        })();

	        function indexOf(arr, searchElement, from) {
	            var index = (from || 0) - 1,
	                length = arr.length;
	            while (++index < length) {
	                if (arr[index] === searchElement) {
	                    return index;
	                }
	            }
	            return -1;
	        }

	        function lastIndexOf(arr, searchElement, from) {
	            if (!isArray(arr)) {
	                throw new TypeError();
	            }

	            var t = Object(arr);
	            var len = t.length >>> 0;
	            if (len === 0) {
	                return -1;
	            }

	            var n = len;
	            if (arguments.length > 2) {
	                n = Number(arguments[2]);
	                if (n !== n) {
	                    n = 0;
	                } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
	                    n = (n > 0 || -1) * floor(abs(n));
	                }
	            }

	            var k = n >= 0 ? mathMin(n, len - 1) : len - abs(n);

	            for (; k >= 0; k--) {
	                if (k in t && t[k] === searchElement) {
	                    return k;
	                }
	            }
	            return -1;
	        }

	        function filter(arr, iterator, scope) {
	            if (arr && arrayFilter && arrayFilter === arr.filter) {
	                return arr.filter(iterator, scope);
	            }
	            if (!isArray(arr) || typeof iterator !== "function") {
	                throw new TypeError();
	            }

	            var t = Object(arr);
	            var len = t.length >>> 0;
	            var res = [];
	            for (var i = 0; i < len; i++) {
	                if (i in t) {
	                    var val = t[i]; // in case fun mutates this
	                    if (iterator.call(scope, val, i, t)) {
	                        res.push(val);
	                    }
	                }
	            }
	            return res;
	        }

	        function forEach(arr, iterator, scope) {
	            if (!isArray(arr) || typeof iterator !== "function") {
	                throw new TypeError();
	            }
	            if (arr && arrayForEach && arrayForEach === arr.forEach) {
	                arr.forEach(iterator, scope);
	                return arr;
	            }
	            for (var i = 0, len = arr.length; i < len; ++i) {
	                iterator.call(scope || arr, arr[i], i, arr);
	            }

	            return arr;
	        }

	        function every(arr, iterator, scope) {
	            if (arr && arrayEvery && arrayEvery === arr.every) {
	                return arr.every(iterator, scope);
	            }
	            if (!isArray(arr) || typeof iterator !== "function") {
	                throw new TypeError();
	            }
	            var t = Object(arr);
	            var len = t.length >>> 0;
	            for (var i = 0; i < len; i++) {
	                if (i in t && !iterator.call(scope, t[i], i, t)) {
	                    return false;
	                }
	            }
	            return true;
	        }

	        function some(arr, iterator, scope) {
	            if (arr && arraySome && arraySome === arr.some) {
	                return arr.some(iterator, scope);
	            }
	            if (!isArray(arr) || typeof iterator !== "function") {
	                throw new TypeError();
	            }
	            var t = Object(arr);
	            var len = t.length >>> 0;
	            for (var i = 0; i < len; i++) {
	                if (i in t && iterator.call(scope, t[i], i, t)) {
	                    return true;
	                }
	            }
	            return false;
	        }

	        function map(arr, iterator, scope) {
	            if (arr && arrayMap && arrayMap === arr.map) {
	                return arr.map(iterator, scope);
	            }
	            if (!isArray(arr) || typeof iterator !== "function") {
	                throw new TypeError();
	            }

	            var t = Object(arr);
	            var len = t.length >>> 0;
	            var res = [];
	            for (var i = 0; i < len; i++) {
	                if (i in t) {
	                    res.push(iterator.call(scope, t[i], i, t));
	                }
	            }
	            return res;
	        }

	        function reduce(arr, accumulator, curr) {
	            var initial = arguments.length > 2;
	            if (arr && arrayReduce && arrayReduce === arr.reduce) {
	                return initial ? arr.reduce(accumulator, curr) : arr.reduce(accumulator);
	            }
	            if (!isArray(arr) || typeof accumulator !== "function") {
	                throw new TypeError();
	            }
	            var i = 0, l = arr.length >> 0;
	            if (arguments.length < 3) {
	                if (l === 0) {
	                    throw new TypeError("Array length is 0 and no second argument");
	                }
	                curr = arr[0];
	                i = 1; // start accumulating at the second element
	            } else {
	                curr = arguments[2];
	            }
	            while (i < l) {
	                if (i in arr) {
	                    curr = accumulator.call(undefined, curr, arr[i], i, arr);
	                }
	                ++i;
	            }
	            return curr;
	        }

	        function reduceRight(arr, accumulator, curr) {
	            var initial = arguments.length > 2;
	            if (arr && arrayReduceRight && arrayReduceRight === arr.reduceRight) {
	                return initial ? arr.reduceRight(accumulator, curr) : arr.reduceRight(accumulator);
	            }
	            if (!isArray(arr) || typeof accumulator !== "function") {
	                throw new TypeError();
	            }

	            var t = Object(arr);
	            var len = t.length >>> 0;

	            // no value to return if no initial value, empty array
	            if (len === 0 && arguments.length === 2) {
	                throw new TypeError();
	            }

	            var k = len - 1;
	            if (arguments.length >= 3) {
	                curr = arguments[2];
	            } else {
	                do {
	                    if (k in arr) {
	                        curr = arr[k--];
	                        break;
	                    }
	                }
	                while (true);
	            }
	            while (k >= 0) {
	                if (k in t) {
	                    curr = accumulator.call(undefined, curr, t[k], k, t);
	                }
	                k--;
	            }
	            return curr;
	        }


	        function toArray(o) {
	            var ret = [];
	            if (o !== null) {
	                var args = argsToArray(arguments);
	                if (args.length === 1) {
	                    if (isArray(o)) {
	                        ret = o;
	                    } else if (is.isHash(o)) {
	                        for (var i in o) {
	                            if (o.hasOwnProperty(i)) {
	                                ret.push([i, o[i]]);
	                            }
	                        }
	                    } else {
	                        ret.push(o);
	                    }
	                } else {
	                    forEach(args, function (a) {
	                        ret = ret.concat(toArray(a));
	                    });
	                }
	            }
	            return ret;
	        }

	        function sum(array) {
	            array = array || [];
	            if (array.length) {
	                return reduce(array, function (a, b) {
	                    return a + b;
	                });
	            } else {
	                return 0;
	            }
	        }

	        function avg(arr) {
	            arr = arr || [];
	            if (arr.length) {
	                var total = sum(arr);
	                if (is.isNumber(total)) {
	                    return  total / arr.length;
	                } else {
	                    throw new Error("Cannot average an array of non numbers.");
	                }
	            } else {
	                return 0;
	            }
	        }

	        function sort(arr, cmp) {
	            return _sort(arr, cmp);
	        }

	        function min(arr, cmp) {
	            return _sort(arr, cmp)[0];
	        }

	        function max(arr, cmp) {
	            return _sort(arr, cmp)[arr.length - 1];
	        }

	        function difference(arr1) {
	            var ret = arr1, args = flatten(argsToArray(arguments, 1));
	            if (isArray(arr1)) {
	                ret = filter(arr1, function (a) {
	                    return indexOf(args, a) === -1;
	                });
	            }
	            return ret;
	        }

	        function removeDuplicates(arr) {
	            var ret = [], i = -1, l, retLength = 0;
	            if (arr) {
	                l = arr.length;
	                while (++i < l) {
	                    var item = arr[i];
	                    if (indexOf(ret, item) === -1) {
	                        ret[retLength++] = item;
	                    }
	                }
	            }
	            return ret;
	        }


	        function unique(arr) {
	            return removeDuplicates(arr);
	        }


	        function rotate(arr, numberOfTimes) {
	            var ret = arr.slice();
	            if (typeof numberOfTimes !== "number") {
	                numberOfTimes = 1;
	            }
	            if (numberOfTimes && isArray(arr)) {
	                if (numberOfTimes > 0) {
	                    ret.push(ret.shift());
	                    numberOfTimes--;
	                } else {
	                    ret.unshift(ret.pop());
	                    numberOfTimes++;
	                }
	                return rotate(ret, numberOfTimes);
	            } else {
	                return ret;
	            }
	        }

	        function permutations(arr, length) {
	            var ret = [];
	            if (isArray(arr)) {
	                var copy = arr.slice(0);
	                if (typeof length !== "number") {
	                    length = arr.length;
	                }
	                if (!length) {
	                    ret = [
	                        []
	                    ];
	                } else if (length <= arr.length) {
	                    ret = reduce(arr, function (a, b, i) {
	                        var ret;
	                        if (length > 1) {
	                            ret = permute(b, rotate(copy, i).slice(1), length);
	                        } else {
	                            ret = [
	                                [b]
	                            ];
	                        }
	                        return a.concat(ret);
	                    }, []);
	                }
	            }
	            return ret;
	        }

	        function zip() {
	            var ret = [];
	            var arrs = argsToArray(arguments);
	            if (arrs.length > 1) {
	                var arr1 = arrs.shift();
	                if (isArray(arr1)) {
	                    ret = reduce(arr1, function (a, b, i) {
	                        var curr = [b];
	                        for (var j = 0; j < arrs.length; j++) {
	                            var currArr = arrs[j];
	                            if (isArray(currArr) && !is.isUndefined(currArr[i])) {
	                                curr.push(currArr[i]);
	                            } else {
	                                curr.push(null);
	                            }
	                        }
	                        a.push(curr);
	                        return a;
	                    }, []);
	                }
	            }
	            return ret;
	        }

	        function transpose(arr) {
	            var ret = [];
	            if (isArray(arr) && arr.length) {
	                var last;
	                forEach(arr, function (a) {
	                    if (isArray(a) && (!last || a.length === last.length)) {
	                        forEach(a, function (b, i) {
	                            if (!ret[i]) {
	                                ret[i] = [];
	                            }
	                            ret[i].push(b);
	                        });
	                        last = a;
	                    }
	                });
	            }
	            return ret;
	        }

	        function valuesAt(arr, indexes) {
	            var ret = [];
	            indexes = argsToArray(arguments);
	            arr = indexes.shift();
	            if (isArray(arr) && indexes.length) {
	                for (var i = 0, l = indexes.length; i < l; i++) {
	                    ret.push(arr[indexes[i]] || null);
	                }
	            }
	            return ret;
	        }

	        function union() {
	            var ret = [];
	            var arrs = argsToArray(arguments);
	            if (arrs.length > 1) {
	                for (var i = 0, l = arrs.length; i < l; i++) {
	                    ret = ret.concat(arrs[i]);
	                }
	                ret = removeDuplicates(ret);
	            }
	            return ret;
	        }

	        function intersect() {
	            var collect = [], sets, i = -1 , l;
	            if (arguments.length > 1) {
	                //assume we are intersections all the lists in the array
	                sets = argsToArray(arguments);
	            } else {
	                sets = arguments[0];
	            }
	            if (isArray(sets)) {
	                collect = sets[0];
	                i = 0;
	                l = sets.length;
	                while (++i < l) {
	                    collect = intersection(collect, sets[i]);
	                }
	            }
	            return removeDuplicates(collect);
	        }

	        function powerSet(arr) {
	            var ret = [];
	            if (isArray(arr) && arr.length) {
	                ret = reduce(arr, function (a, b) {
	                    var ret = map(a, function (c) {
	                        return c.concat(b);
	                    });
	                    return a.concat(ret);
	                }, [
	                    []
	                ]);
	            }
	            return ret;
	        }

	        function cartesian(a, b) {
	            var ret = [];
	            if (isArray(a) && isArray(b) && a.length && b.length) {
	                ret = cross(a[0], b).concat(cartesian(a.slice(1), b));
	            }
	            return ret;
	        }

	        function compact(arr) {
	            var ret = [];
	            if (isArray(arr) && arr.length) {
	                ret = filter(arr, function (item) {
	                    return !is.isUndefinedOrNull(item);
	                });
	            }
	            return ret;
	        }

	        function multiply(arr, times) {
	            times = is.isNumber(times) ? times : 1;
	            if (!times) {
	                //make sure times is greater than zero if it is zero then dont multiply it
	                times = 1;
	            }
	            arr = toArray(arr || []);
	            var ret = [], i = 0;
	            while (++i <= times) {
	                ret = ret.concat(arr);
	            }
	            return ret;
	        }

	        function flatten(arr) {
	            var set;
	            var args = argsToArray(arguments);
	            if (args.length > 1) {
	                //assume we are intersections all the lists in the array
	                set = args;
	            } else {
	                set = toArray(arr);
	            }
	            return reduce(set, function (a, b) {
	                return a.concat(b);
	            }, []);
	        }

	        function pluck(arr, prop) {
	            prop = prop.split(".");
	            var result = arr.slice(0);
	            forEach(prop, function (prop) {
	                var exec = prop.match(/(\w+)\(\)$/);
	                result = map(result, function (item) {
	                    return exec ? item[exec[1]]() : item[prop];
	                });
	            });
	            return result;
	        }

	        function invoke(arr, func, args) {
	            args = argsToArray(arguments, 2);
	            return map(arr, function (item) {
	                var exec = isString(func) ? item[func] : func;
	                return exec.apply(item, args);
	            });
	        }


	        var array = {
	            toArray: toArray,
	            sum: sum,
	            avg: avg,
	            sort: sort,
	            min: min,
	            max: max,
	            difference: difference,
	            removeDuplicates: removeDuplicates,
	            unique: unique,
	            rotate: rotate,
	            permutations: permutations,
	            zip: zip,
	            transpose: transpose,
	            valuesAt: valuesAt,
	            union: union,
	            intersect: intersect,
	            powerSet: powerSet,
	            cartesian: cartesian,
	            compact: compact,
	            multiply: multiply,
	            flatten: flatten,
	            pluck: pluck,
	            invoke: invoke,
	            forEach: forEach,
	            map: map,
	            filter: filter,
	            reduce: reduce,
	            reduceRight: reduceRight,
	            some: some,
	            every: every,
	            indexOf: indexOf,
	            lastIndexOf: lastIndexOf
	        };

	        return extended.define(isArray, array).expose(array);
	    }

	    if (true) {
	        if ("undefined" !== typeof module && module.exports) {
	            module.exports = defineArray(__webpack_require__(388), __webpack_require__(387), __webpack_require__(395));
	        }
	    } else if ("function" === typeof define && define.amd) {
	        define(["extended", "is-extended", "arguments-extended"], function (extended, is, args) {
	            return defineArray(extended, is, args);
	        });
	    } else {
	        this.arrayExtended = defineArray(this.extended, this.isExtended, this.argumentsExtended);
	    }

	}).call(this);








/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	(function () {
	    "use strict";

	    function defineArgumentsExtended(extended, is) {

	        var pSlice = Array.prototype.slice,
	            isArguments = is.isArguments;

	        function argsToArray(args, slice) {
	            var i = -1, j = 0, l = args.length, ret = [];
	            slice = slice || 0;
	            i += slice;
	            while (++i < l) {
	                ret[j++] = args[i];
	            }
	            return ret;
	        }


	        return extended
	            .define(isArguments, {
	                toArray: argsToArray
	            })
	            .expose({
	                argsToArray: argsToArray
	            });
	    }

	    if (true) {
	        if ("undefined" !== typeof module && module.exports) {
	            module.exports = defineArgumentsExtended(__webpack_require__(388), __webpack_require__(387));

	        }
	    } else if ("function" === typeof define && define.amd) {
	        define(["extended", "is-extended"], function (extended, is) {
	            return defineArgumentsExtended(extended, is);
	        });
	    } else {
	        this.argumentsExtended = defineArgumentsExtended(this.extended, this.isExtended);
	    }

	}).call(this);



/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	(function () {
	    "use strict";

	    function defineString(extended, is, date, arr) {

	        var stringify;
	        if (typeof JSON === "undefined") {
	            /*
	             json2.js
	             2012-10-08

	             Public Domain.

	             NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.
	             */

	            (function () {
	                function f(n) {
	                    // Format integers to have at least two digits.
	                    return n < 10 ? '0' + n : n;
	                }

	                var isPrimitive = is.tester().isString().isNumber().isBoolean().tester();

	                function toJSON(obj) {
	                    if (is.isDate(obj)) {
	                        return isFinite(obj.valueOf()) ? obj.getUTCFullYear() + '-' +
	                            f(obj.getUTCMonth() + 1) + '-' +
	                            f(obj.getUTCDate()) + 'T' +
	                            f(obj.getUTCHours()) + ':' +
	                            f(obj.getUTCMinutes()) + ':' +
	                            f(obj.getUTCSeconds()) + 'Z'
	                            : null;
	                    } else if (isPrimitive(obj)) {
	                        return obj.valueOf();
	                    }
	                    return obj;
	                }

	                var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	                    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	                    gap,
	                    indent,
	                    meta = {    // table of character substitutions
	                        '\b': '\\b',
	                        '\t': '\\t',
	                        '\n': '\\n',
	                        '\f': '\\f',
	                        '\r': '\\r',
	                        '"': '\\"',
	                        '\\': '\\\\'
	                    },
	                    rep;


	                function quote(string) {
	                    escapable.lastIndex = 0;
	                    return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
	                        var c = meta[a];
	                        return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	                    }) + '"' : '"' + string + '"';
	                }


	                function str(key, holder) {

	                    var i, k, v, length, mind = gap, partial, value = holder[key];
	                    if (value) {
	                        value = toJSON(value);
	                    }
	                    if (typeof rep === 'function') {
	                        value = rep.call(holder, key, value);
	                    }
	                    switch (typeof value) {
	                    case 'string':
	                        return quote(value);
	                    case 'number':
	                        return isFinite(value) ? String(value) : 'null';
	                    case 'boolean':
	                    case 'null':
	                        return String(value);
	                    case 'object':
	                        if (!value) {
	                            return 'null';
	                        }
	                        gap += indent;
	                        partial = [];
	                        if (Object.prototype.toString.apply(value) === '[object Array]') {
	                            length = value.length;
	                            for (i = 0; i < length; i += 1) {
	                                partial[i] = str(i, value) || 'null';
	                            }
	                            v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
	                            gap = mind;
	                            return v;
	                        }
	                        if (rep && typeof rep === 'object') {
	                            length = rep.length;
	                            for (i = 0; i < length; i += 1) {
	                                if (typeof rep[i] === 'string') {
	                                    k = rep[i];
	                                    v = str(k, value);
	                                    if (v) {
	                                        partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                                    }
	                                }
	                            }
	                        } else {
	                            for (k in value) {
	                                if (Object.prototype.hasOwnProperty.call(value, k)) {
	                                    v = str(k, value);
	                                    if (v) {
	                                        partial.push(quote(k) + (gap ? ': ' : ':') + v);
	                                    }
	                                }
	                            }
	                        }
	                        v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
	                        gap = mind;
	                        return v;
	                    }
	                }

	                stringify = function (value, replacer, space) {
	                    var i;
	                    gap = '';
	                    indent = '';
	                    if (typeof space === 'number') {
	                        for (i = 0; i < space; i += 1) {
	                            indent += ' ';
	                        }
	                    } else if (typeof space === 'string') {
	                        indent = space;
	                    }
	                    rep = replacer;
	                    if (replacer && typeof replacer !== 'function' &&
	                        (typeof replacer !== 'object' ||
	                            typeof replacer.length !== 'number')) {
	                        throw new Error('JSON.stringify');
	                    }
	                    return str('', {'': value});
	                };
	            }());
	        } else {
	            stringify = JSON.stringify;
	        }


	        var isHash = is.isHash, aSlice = Array.prototype.slice;

	        var FORMAT_REGEX = /%((?:-?\+?.?\d*)?|(?:\[[^\[|\]]*\]))?([sjdDZ])/g;
	        var INTERP_REGEX = /\{(?:\[([^\[|\]]*)\])?(\w+)\}/g;
	        var STR_FORMAT = /(-?)(\+?)([A-Z|a-z|\W]?)([1-9][0-9]*)?$/;
	        var OBJECT_FORMAT = /([1-9][0-9]*)$/g;

	        function formatString(string, format) {
	            var ret = string;
	            if (STR_FORMAT.test(format)) {
	                var match = format.match(STR_FORMAT);
	                var isLeftJustified = match[1], padChar = match[3], width = match[4];
	                if (width) {
	                    width = parseInt(width, 10);
	                    if (ret.length < width) {
	                        ret = pad(ret, width, padChar, isLeftJustified);
	                    } else {
	                        ret = truncate(ret, width);
	                    }
	                }
	            }
	            return ret;
	        }

	        function formatNumber(number, format) {
	            var ret;
	            if (is.isNumber(number)) {
	                ret = "" + number;
	                if (STR_FORMAT.test(format)) {
	                    var match = format.match(STR_FORMAT);
	                    var isLeftJustified = match[1], signed = match[2], padChar = match[3], width = match[4];
	                    if (signed) {
	                        ret = (number > 0 ? "+" : "") + ret;
	                    }
	                    if (width) {
	                        width = parseInt(width, 10);
	                        if (ret.length < width) {
	                            ret = pad(ret, width, padChar || "0", isLeftJustified);
	                        } else {
	                            ret = truncate(ret, width);
	                        }
	                    }

	                }
	            } else {
	                throw new Error("stringExtended.format : when using %d the parameter must be a number!");
	            }
	            return ret;
	        }

	        function formatObject(object, format) {
	            var ret, match = format.match(OBJECT_FORMAT), spacing = 0;
	            if (match) {
	                spacing = parseInt(match[0], 10);
	                if (isNaN(spacing)) {
	                    spacing = 0;
	                }
	            }
	            try {
	                ret = stringify(object, null, spacing);
	            } catch (e) {
	                throw new Error("stringExtended.format : Unable to parse json from ", object);
	            }
	            return ret;
	        }


	        var styles = {
	            //styles
	            bold: 1,
	            bright: 1,
	            italic: 3,
	            underline: 4,
	            blink: 5,
	            inverse: 7,
	            crossedOut: 9,

	            red: 31,
	            green: 32,
	            yellow: 33,
	            blue: 34,
	            magenta: 35,
	            cyan: 36,
	            white: 37,

	            redBackground: 41,
	            greenBackground: 42,
	            yellowBackground: 43,
	            blueBackground: 44,
	            magentaBackground: 45,
	            cyanBackground: 46,
	            whiteBackground: 47,

	            encircled: 52,
	            overlined: 53,
	            grey: 90,
	            black: 90
	        };

	        var characters = {
	            SMILEY: "☺",
	            SOLID_SMILEY: "☻",
	            HEART: "♥",
	            DIAMOND: "♦",
	            CLOVE: "♣",
	            SPADE: "♠",
	            DOT: "•",
	            SQUARE_CIRCLE: "◘",
	            CIRCLE: "○",
	            FILLED_SQUARE_CIRCLE: "◙",
	            MALE: "♂",
	            FEMALE: "♀",
	            EIGHT_NOTE: "♪",
	            DOUBLE_EIGHTH_NOTE: "♫",
	            SUN: "☼",
	            PLAY: "►",
	            REWIND: "◄",
	            UP_DOWN: "↕",
	            PILCROW: "¶",
	            SECTION: "§",
	            THICK_MINUS: "▬",
	            SMALL_UP_DOWN: "↨",
	            UP_ARROW: "↑",
	            DOWN_ARROW: "↓",
	            RIGHT_ARROW: "→",
	            LEFT_ARROW: "←",
	            RIGHT_ANGLE: "∟",
	            LEFT_RIGHT_ARROW: "↔",
	            TRIANGLE: "▲",
	            DOWN_TRIANGLE: "▼",
	            HOUSE: "⌂",
	            C_CEDILLA: "Ç",
	            U_UMLAUT: "ü",
	            E_ACCENT: "é",
	            A_LOWER_CIRCUMFLEX: "â",
	            A_LOWER_UMLAUT: "ä",
	            A_LOWER_GRAVE_ACCENT: "à",
	            A_LOWER_CIRCLE_OVER: "å",
	            C_LOWER_CIRCUMFLEX: "ç",
	            E_LOWER_CIRCUMFLEX: "ê",
	            E_LOWER_UMLAUT: "ë",
	            E_LOWER_GRAVE_ACCENT: "è",
	            I_LOWER_UMLAUT: "ï",
	            I_LOWER_CIRCUMFLEX: "î",
	            I_LOWER_GRAVE_ACCENT: "ì",
	            A_UPPER_UMLAUT: "Ä",
	            A_UPPER_CIRCLE: "Å",
	            E_UPPER_ACCENT: "É",
	            A_E_LOWER: "æ",
	            A_E_UPPER: "Æ",
	            O_LOWER_CIRCUMFLEX: "ô",
	            O_LOWER_UMLAUT: "ö",
	            O_LOWER_GRAVE_ACCENT: "ò",
	            U_LOWER_CIRCUMFLEX: "û",
	            U_LOWER_GRAVE_ACCENT: "ù",
	            Y_LOWER_UMLAUT: "ÿ",
	            O_UPPER_UMLAUT: "Ö",
	            U_UPPER_UMLAUT: "Ü",
	            CENTS: "¢",
	            POUND: "£",
	            YEN: "¥",
	            CURRENCY: "¤",
	            PTS: "₧",
	            FUNCTION: "ƒ",
	            A_LOWER_ACCENT: "á",
	            I_LOWER_ACCENT: "í",
	            O_LOWER_ACCENT: "ó",
	            U_LOWER_ACCENT: "ú",
	            N_LOWER_TILDE: "ñ",
	            N_UPPER_TILDE: "Ñ",
	            A_SUPER: "ª",
	            O_SUPER: "º",
	            UPSIDEDOWN_QUESTION: "¿",
	            SIDEWAYS_L: "⌐",
	            NEGATION: "¬",
	            ONE_HALF: "½",
	            ONE_FOURTH: "¼",
	            UPSIDEDOWN_EXCLAMATION: "¡",
	            DOUBLE_LEFT: "«",
	            DOUBLE_RIGHT: "»",
	            LIGHT_SHADED_BOX: "░",
	            MEDIUM_SHADED_BOX: "▒",
	            DARK_SHADED_BOX: "▓",
	            VERTICAL_LINE: "│",
	            MAZE__SINGLE_RIGHT_T: "┤",
	            MAZE_SINGLE_RIGHT_TOP: "┐",
	            MAZE_SINGLE_RIGHT_BOTTOM_SMALL: "┘",
	            MAZE_SINGLE_LEFT_TOP_SMALL: "┌",
	            MAZE_SINGLE_LEFT_BOTTOM_SMALL: "└",
	            MAZE_SINGLE_LEFT_T: "├",
	            MAZE_SINGLE_BOTTOM_T: "┴",
	            MAZE_SINGLE_TOP_T: "┬",
	            MAZE_SINGLE_CENTER: "┼",
	            MAZE_SINGLE_HORIZONTAL_LINE: "─",
	            MAZE_SINGLE_RIGHT_DOUBLECENTER_T: "╡",
	            MAZE_SINGLE_RIGHT_DOUBLE_BL: "╛",
	            MAZE_SINGLE_RIGHT_DOUBLE_T: "╢",
	            MAZE_SINGLE_RIGHT_DOUBLEBOTTOM_TOP: "╖",
	            MAZE_SINGLE_RIGHT_DOUBLELEFT_TOP: "╕",
	            MAZE_SINGLE_LEFT_DOUBLE_T: "╞",
	            MAZE_SINGLE_BOTTOM_DOUBLE_T: "╧",
	            MAZE_SINGLE_TOP_DOUBLE_T: "╤",
	            MAZE_SINGLE_TOP_DOUBLECENTER_T: "╥",
	            MAZE_SINGLE_BOTTOM_DOUBLECENTER_T: "╨",
	            MAZE_SINGLE_LEFT_DOUBLERIGHT_BOTTOM: "╘",
	            MAZE_SINGLE_LEFT_DOUBLERIGHT_TOP: "╒",
	            MAZE_SINGLE_LEFT_DOUBLEBOTTOM_TOP: "╓",
	            MAZE_SINGLE_LEFT_DOUBLETOP_BOTTOM: "╙",
	            MAZE_SINGLE_LEFT_TOP: "Γ",
	            MAZE_SINGLE_RIGHT_BOTTOM: "╜",
	            MAZE_SINGLE_LEFT_CENTER: "╟",
	            MAZE_SINGLE_DOUBLECENTER_CENTER: "╫",
	            MAZE_SINGLE_DOUBLECROSS_CENTER: "╪",
	            MAZE_DOUBLE_LEFT_CENTER: "╣",
	            MAZE_DOUBLE_VERTICAL: "║",
	            MAZE_DOUBLE_RIGHT_TOP: "╗",
	            MAZE_DOUBLE_RIGHT_BOTTOM: "╝",
	            MAZE_DOUBLE_LEFT_BOTTOM: "╚",
	            MAZE_DOUBLE_LEFT_TOP: "╔",
	            MAZE_DOUBLE_BOTTOM_T: "╩",
	            MAZE_DOUBLE_TOP_T: "╦",
	            MAZE_DOUBLE_LEFT_T: "╠",
	            MAZE_DOUBLE_HORIZONTAL: "═",
	            MAZE_DOUBLE_CROSS: "╬",
	            SOLID_RECTANGLE: "█",
	            THICK_LEFT_VERTICAL: "▌",
	            THICK_RIGHT_VERTICAL: "▐",
	            SOLID_SMALL_RECTANGLE_BOTTOM: "▄",
	            SOLID_SMALL_RECTANGLE_TOP: "▀",
	            PHI_UPPER: "Φ",
	            INFINITY: "∞",
	            INTERSECTION: "∩",
	            DEFINITION: "≡",
	            PLUS_MINUS: "±",
	            GT_EQ: "≥",
	            LT_EQ: "≤",
	            THEREFORE: "⌠",
	            SINCE: "∵",
	            DOESNOT_EXIST: "∄",
	            EXISTS: "∃",
	            FOR_ALL: "∀",
	            EXCLUSIVE_OR: "⊕",
	            BECAUSE: "⌡",
	            DIVIDE: "÷",
	            APPROX: "≈",
	            DEGREE: "°",
	            BOLD_DOT: "∙",
	            DOT_SMALL: "·",
	            CHECK: "√",
	            ITALIC_X: "✗",
	            SUPER_N: "ⁿ",
	            SQUARED: "²",
	            CUBED: "³",
	            SOLID_BOX: "■",
	            PERMILE: "‰",
	            REGISTERED_TM: "®",
	            COPYRIGHT: "©",
	            TRADEMARK: "™",
	            BETA: "β",
	            GAMMA: "γ",
	            ZETA: "ζ",
	            ETA: "η",
	            IOTA: "ι",
	            KAPPA: "κ",
	            LAMBDA: "λ",
	            NU: "ν",
	            XI: "ξ",
	            OMICRON: "ο",
	            RHO: "ρ",
	            UPSILON: "υ",
	            CHI_LOWER: "φ",
	            CHI_UPPER: "χ",
	            PSI: "ψ",
	            ALPHA: "α",
	            ESZETT: "ß",
	            PI: "π",
	            SIGMA_UPPER: "Σ",
	            SIGMA_LOWER: "σ",
	            MU: "µ",
	            TAU: "τ",
	            THETA: "Θ",
	            OMEGA: "Ω",
	            DELTA: "δ",
	            PHI_LOWER: "φ",
	            EPSILON: "ε"
	        };

	        function pad(string, length, ch, end) {
	            string = "" + string; //check for numbers
	            ch = ch || " ";
	            var strLen = string.length;
	            while (strLen < length) {
	                if (end) {
	                    string += ch;
	                } else {
	                    string = ch + string;
	                }
	                strLen++;
	            }
	            return string;
	        }

	        function truncate(string, length, end) {
	            var ret = string;
	            if (is.isString(ret)) {
	                if (string.length > length) {
	                    if (end) {
	                        var l = string.length;
	                        ret = string.substring(l - length, l);
	                    } else {
	                        ret = string.substring(0, length);
	                    }
	                }
	            } else {
	                ret = truncate("" + ret, length);
	            }
	            return ret;
	        }

	        function format(str, obj) {
	            if (obj instanceof Array) {
	                var i = 0, len = obj.length;
	                //find the matches
	                return str.replace(FORMAT_REGEX, function (m, format, type) {
	                    var replacer, ret;
	                    if (i < len) {
	                        replacer = obj[i++];
	                    } else {
	                        //we are out of things to replace with so
	                        //just return the match?
	                        return m;
	                    }
	                    if (m === "%s" || m === "%d" || m === "%D") {
	                        //fast path!
	                        ret = replacer + "";
	                    } else if (m === "%Z") {
	                        ret = replacer.toUTCString();
	                    } else if (m === "%j") {
	                        try {
	                            ret = stringify(replacer);
	                        } catch (e) {
	                            throw new Error("stringExtended.format : Unable to parse json from ", replacer);
	                        }
	                    } else {
	                        format = format.replace(/^\[|\]$/g, "");
	                        switch (type) {
	                        case "s":
	                            ret = formatString(replacer, format);
	                            break;
	                        case "d":
	                            ret = formatNumber(replacer, format);
	                            break;
	                        case "j":
	                            ret = formatObject(replacer, format);
	                            break;
	                        case "D":
	                            ret = date.format(replacer, format);
	                            break;
	                        case "Z":
	                            ret = date.format(replacer, format, true);
	                            break;
	                        }
	                    }
	                    return ret;
	                });
	            } else if (isHash(obj)) {
	                return str.replace(INTERP_REGEX, function (m, format, value) {
	                    value = obj[value];
	                    if (!is.isUndefined(value)) {
	                        if (format) {
	                            if (is.isString(value)) {
	                                return formatString(value, format);
	                            } else if (is.isNumber(value)) {
	                                return formatNumber(value, format);
	                            } else if (is.isDate(value)) {
	                                return date.format(value, format);
	                            } else if (is.isObject(value)) {
	                                return formatObject(value, format);
	                            }
	                        } else {
	                            return "" + value;
	                        }
	                    }
	                    return m;
	                });
	            } else {
	                var args = aSlice.call(arguments).slice(1);
	                return format(str, args);
	            }
	        }

	        function toArray(testStr, delim) {
	            var ret = [];
	            if (testStr) {
	                if (testStr.indexOf(delim) > 0) {
	                    ret = testStr.replace(/\s+/g, "").split(delim);
	                }
	                else {
	                    ret.push(testStr);
	                }
	            }
	            return ret;
	        }

	        function multiply(str, times) {
	            var ret = [];
	            if (times) {
	                for (var i = 0; i < times; i++) {
	                    ret.push(str);
	                }
	            }
	            return ret.join("");
	        }


	        function style(str, options) {
	            var ret, i, l;
	            if (options) {
	                if (is.isArray(str)) {
	                    ret = [];
	                    for (i = 0, l = str.length; i < l; i++) {
	                        ret.push(style(str[i], options));
	                    }
	                } else if (options instanceof Array) {
	                    ret = str;
	                    for (i = 0, l = options.length; i < l; i++) {
	                        ret = style(ret, options[i]);
	                    }
	                } else if (options in styles) {
	                    ret = '\x1B[' + styles[options] + 'm' + str + '\x1B[0m';
	                }
	            }
	            return ret;
	        }

	        function escape(str, except) {
	            return str.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, function (ch) {
	                if (except && arr.indexOf(except, ch) !== -1) {
	                    return ch;
	                }
	                return "\\" + ch;
	            });
	        }

	        function trim(str) {
	            return str.replace(/^\s*|\s*$/g, "");
	        }

	        function trimLeft(str) {
	            return str.replace(/^\s*/, "");
	        }

	        function trimRight(str) {
	            return str.replace(/\s*$/, "");
	        }

	        function isEmpty(str) {
	            return str.length === 0;
	        }


	        var string = {
	            toArray: toArray,
	            pad: pad,
	            truncate: truncate,
	            multiply: multiply,
	            format: format,
	            style: style,
	            escape: escape,
	            trim: trim,
	            trimLeft: trimLeft,
	            trimRight: trimRight,
	            isEmpty: isEmpty
	        };
	        return extended.define(is.isString, string).define(is.isArray, {style: style}).expose(string).expose({characters: characters});
	    }

	    if (true) {
	        if ("undefined" !== typeof module && module.exports) {
	            module.exports = defineString(__webpack_require__(388), __webpack_require__(387), __webpack_require__(397), __webpack_require__(398));

	        }
	    } else if ("function" === typeof define && define.amd) {
	        define(["extended", "is-extended", "date-extended", "array-extended"], function (extended, is, date, arr) {
	            return defineString(extended, is, date, arr);
	        });
	    } else {
	        this.stringExtended = defineString(this.extended, this.isExtended, this.dateExtended, this.arrayExtended);
	    }

	}).call(this);








/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	(function () {
	    "use strict";

	    function defineDate(extended, is, array) {

	        function _pad(string, length, ch, end) {
	            string = "" + string; //check for numbers
	            ch = ch || " ";
	            var strLen = string.length;
	            while (strLen < length) {
	                if (end) {
	                    string += ch;
	                } else {
	                    string = ch + string;
	                }
	                strLen++;
	            }
	            return string;
	        }

	        function _truncate(string, length, end) {
	            var ret = string;
	            if (is.isString(ret)) {
	                if (string.length > length) {
	                    if (end) {
	                        var l = string.length;
	                        ret = string.substring(l - length, l);
	                    } else {
	                        ret = string.substring(0, length);
	                    }
	                }
	            } else {
	                ret = _truncate("" + ret, length);
	            }
	            return ret;
	        }

	        function every(arr, iterator, scope) {
	            if (!is.isArray(arr) || typeof iterator !== "function") {
	                throw new TypeError();
	            }
	            var t = Object(arr);
	            var len = t.length >>> 0;
	            for (var i = 0; i < len; i++) {
	                if (i in t && !iterator.call(scope, t[i], i, t)) {
	                    return false;
	                }
	            }
	            return true;
	        }


	        var transforms = (function () {
	                var floor = Math.floor, round = Math.round;

	                var addMap = {
	                    day: function addDay(date, amount) {
	                        return [amount, "Date", false];
	                    },
	                    weekday: function addWeekday(date, amount) {
	                        // Divide the increment time span into weekspans plus leftover days
	                        // e.g., 8 days is one 5-day weekspan / and two leftover days
	                        // Can't have zero leftover days, so numbers divisible by 5 get
	                        // a days value of 5, and the remaining days make up the number of weeks
	                        var days, weeks, mod = amount % 5, strt = date.getDay(), adj = 0;
	                        if (!mod) {
	                            days = (amount > 0) ? 5 : -5;
	                            weeks = (amount > 0) ? ((amount - 5) / 5) : ((amount + 5) / 5);
	                        } else {
	                            days = mod;
	                            weeks = parseInt(amount / 5, 10);
	                        }
	                        if (strt === 6 && amount > 0) {
	                            adj = 1;
	                        } else if (strt === 0 && amount < 0) {
	                            // Orig date is Sun / negative increment
	                            // Jump back over Sat
	                            adj = -1;
	                        }
	                        // Get weekday val for the new date
	                        var trgt = strt + days;
	                        // New date is on Sat or Sun
	                        if (trgt === 0 || trgt === 6) {
	                            adj = (amount > 0) ? 2 : -2;
	                        }
	                        // Increment by number of weeks plus leftover days plus
	                        // weekend adjustments
	                        return [(7 * weeks) + days + adj, "Date", false];
	                    },
	                    year: function addYear(date, amount) {
	                        return [amount, "FullYear", true];
	                    },
	                    week: function addWeek(date, amount) {
	                        return [amount * 7, "Date", false];
	                    },
	                    quarter: function addYear(date, amount) {
	                        return [amount * 3, "Month", true];
	                    },
	                    month: function addYear(date, amount) {
	                        return [amount, "Month", true];
	                    }
	                };

	                function addTransform(interval, date, amount) {
	                    interval = interval.replace(/s$/, "");
	                    if (addMap.hasOwnProperty(interval)) {
	                        return addMap[interval](date, amount);
	                    }
	                    return [amount, "UTC" + interval.charAt(0).toUpperCase() + interval.substring(1) + "s", false];
	                }


	                var differenceMap = {
	                    "quarter": function quarterDifference(date1, date2, utc) {
	                        var yearDiff = date2.getFullYear() - date1.getFullYear();
	                        var m1 = date1[utc ? "getUTCMonth" : "getMonth"]();
	                        var m2 = date2[utc ? "getUTCMonth" : "getMonth"]();
	                        // Figure out which quarter the months are in
	                        var q1 = floor(m1 / 3) + 1;
	                        var q2 = floor(m2 / 3) + 1;
	                        // Add quarters for any year difference between the dates
	                        q2 += (yearDiff * 4);
	                        return q2 - q1;
	                    },

	                    "weekday": function weekdayDifference(date1, date2, utc) {
	                        var days = differenceTransform("day", date1, date2, utc), weeks;
	                        var mod = days % 7;
	                        // Even number of weeks
	                        if (mod === 0) {
	                            days = differenceTransform("week", date1, date2, utc) * 5;
	                        } else {
	                            // Weeks plus spare change (< 7 days)
	                            var adj = 0, aDay = date1[utc ? "getUTCDay" : "getDay"](), bDay = date2[utc ? "getUTCDay" : "getDay"]();
	                            weeks = parseInt(days / 7, 10);
	                            // Mark the date advanced by the number of
	                            // round weeks (may be zero)
	                            var dtMark = new Date(+date1);
	                            dtMark.setDate(dtMark[utc ? "getUTCDate" : "getDate"]() + (weeks * 7));
	                            var dayMark = dtMark[utc ? "getUTCDay" : "getDay"]();

	                            // Spare change days -- 6 or less
	                            if (days > 0) {
	                                if (aDay === 6 || bDay === 6) {
	                                    adj = -1;
	                                } else if (aDay === 0) {
	                                    adj = 0;
	                                } else if (bDay === 0 || (dayMark + mod) > 5) {
	                                    adj = -2;
	                                }
	                            } else if (days < 0) {
	                                if (aDay === 6) {
	                                    adj = 0;
	                                } else if (aDay === 0 || bDay === 0) {
	                                    adj = 1;
	                                } else if (bDay === 6 || (dayMark + mod) < 0) {
	                                    adj = 2;
	                                }
	                            }
	                            days += adj;
	                            days -= (weeks * 2);
	                        }
	                        return days;
	                    },
	                    year: function (date1, date2) {
	                        return date2.getFullYear() - date1.getFullYear();
	                    },
	                    month: function (date1, date2, utc) {
	                        var m1 = date1[utc ? "getUTCMonth" : "getMonth"]();
	                        var m2 = date2[utc ? "getUTCMonth" : "getMonth"]();
	                        return (m2 - m1) + ((date2.getFullYear() - date1.getFullYear()) * 12);
	                    },
	                    week: function (date1, date2, utc) {
	                        return round(differenceTransform("day", date1, date2, utc) / 7);
	                    },
	                    day: function (date1, date2) {
	                        return 1.1574074074074074e-8 * (date2.getTime() - date1.getTime());
	                    },
	                    hour: function (date1, date2) {
	                        return 2.7777777777777776e-7 * (date2.getTime() - date1.getTime());
	                    },
	                    minute: function (date1, date2) {
	                        return 0.000016666666666666667 * (date2.getTime() - date1.getTime());
	                    },
	                    second: function (date1, date2) {
	                        return 0.001 * (date2.getTime() - date1.getTime());
	                    },
	                    millisecond: function (date1, date2) {
	                        return date2.getTime() - date1.getTime();
	                    }
	                };


	                function differenceTransform(interval, date1, date2, utc) {
	                    interval = interval.replace(/s$/, "");
	                    return round(differenceMap[interval](date1, date2, utc));
	                }


	                return {
	                    addTransform: addTransform,
	                    differenceTransform: differenceTransform
	                };
	            }()),
	            addTransform = transforms.addTransform,
	            differenceTransform = transforms.differenceTransform;


	        /**
	         * @ignore
	         * Based on DOJO Date Implementation
	         *
	         * Dojo is available under *either* the terms of the modified BSD license *or* the
	         * Academic Free License version 2.1. As a recipient of Dojo, you may choose which
	         * license to receive this code under (except as noted in per-module LICENSE
	         * files). Some modules may not be the copyright of the Dojo Foundation. These
	         * modules contain explicit declarations of copyright in both the LICENSE files in
	         * the directories in which they reside and in the code itself. No external
	         * contributions are allowed under licenses which are fundamentally incompatible
	         * with the AFL or BSD licenses that Dojo is distributed under.
	         *
	         */

	        var floor = Math.floor, round = Math.round, min = Math.min, pow = Math.pow, ceil = Math.ceil, abs = Math.abs;
	        var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
	        var monthAbbr = ["Jan.", "Feb.", "Mar.", "Apr.", "May.", "Jun.", "Jul.", "Aug.", "Sep.", "Oct.", "Nov.", "Dec."];
	        var dayNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
	        var dayAbbr = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
	        var eraNames = ["Before Christ", "Anno Domini"];
	        var eraAbbr = ["BC", "AD"];


	        function getDayOfYear(/*Date*/dateObject, utc) {
	            // summary: gets the day of the year as represented by dateObject
	            return date.difference(new Date(dateObject.getFullYear(), 0, 1, dateObject.getHours()), dateObject, null, utc) + 1; // Number
	        }

	        function getWeekOfYear(/*Date*/dateObject, /*Number*/firstDayOfWeek, utc) {
	            firstDayOfWeek = firstDayOfWeek || 0;
	            var fullYear = dateObject[utc ? "getUTCFullYear" : "getFullYear"]();
	            var firstDayOfYear = new Date(fullYear, 0, 1).getDay(),
	                adj = (firstDayOfYear - firstDayOfWeek + 7) % 7,
	                week = floor((getDayOfYear(dateObject) + adj - 1) / 7);

	            // if year starts on the specified day, start counting weeks at 1
	            if (firstDayOfYear === firstDayOfWeek) {
	                week++;
	            }

	            return week; // Number
	        }

	        function getTimezoneName(/*Date*/dateObject) {
	            var str = dateObject.toString();
	            var tz = '';
	            var pos = str.indexOf('(');
	            if (pos > -1) {
	                tz = str.substring(++pos, str.indexOf(')'));
	            }
	            return tz; // String
	        }


	        function buildDateEXP(pattern, tokens) {
	            return pattern.replace(/([a-z])\1*/ig,function (match) {
	                // Build a simple regexp.  Avoid captures, which would ruin the tokens list
	                var s,
	                    c = match.charAt(0),
	                    l = match.length,
	                    p2 = '0?',
	                    p3 = '0{0,2}';
	                if (c === 'y') {
	                    s = '\\d{2,4}';
	                } else if (c === "M") {
	                    s = (l > 2) ? '\\S+?' : '1[0-2]|' + p2 + '[1-9]';
	                } else if (c === "D") {
	                    s = '[12][0-9][0-9]|3[0-5][0-9]|36[0-6]|' + p3 + '[1-9][0-9]|' + p2 + '[1-9]';
	                } else if (c === "d") {
	                    s = '3[01]|[12]\\d|' + p2 + '[1-9]';
	                } else if (c === "w") {
	                    s = '[1-4][0-9]|5[0-3]|' + p2 + '[1-9]';
	                } else if (c === "E") {
	                    s = '\\S+';
	                } else if (c === "h") {
	                    s = '1[0-2]|' + p2 + '[1-9]';
	                } else if (c === "K") {
	                    s = '1[01]|' + p2 + '\\d';
	                } else if (c === "H") {
	                    s = '1\\d|2[0-3]|' + p2 + '\\d';
	                } else if (c === "k") {
	                    s = '1\\d|2[0-4]|' + p2 + '[1-9]';
	                } else if (c === "m" || c === "s") {
	                    s = '[0-5]\\d';
	                } else if (c === "S") {
	                    s = '\\d{' + l + '}';
	                } else if (c === "a") {
	                    var am = 'AM', pm = 'PM';
	                    s = am + '|' + pm;
	                    if (am !== am.toLowerCase()) {
	                        s += '|' + am.toLowerCase();
	                    }
	                    if (pm !== pm.toLowerCase()) {
	                        s += '|' + pm.toLowerCase();
	                    }
	                    s = s.replace(/\./g, "\\.");
	                } else if (c === 'v' || c === 'z' || c === 'Z' || c === 'G' || c === 'q' || c === 'Q') {
	                    s = ".*";
	                } else {
	                    s = c === " " ? "\\s*" : c + "*";
	                }
	                if (tokens) {
	                    tokens.push(match);
	                }

	                return "(" + s + ")"; // add capture
	            }).replace(/[\xa0 ]/g, "[\\s\\xa0]"); // normalize whitespace.  Need explicit handling of \xa0 for IE.
	        }


	        /**
	         * @namespace Utilities for Dates
	         */
	        var date = {

	            /**@lends date*/

	            /**
	             * Returns the number of days in the month of a date
	             *
	             * @example
	             *
	             *  dateExtender.getDaysInMonth(new Date(2006, 1, 1)); //28
	             *  dateExtender.getDaysInMonth(new Date(2004, 1, 1)); //29
	             *  dateExtender.getDaysInMonth(new Date(2006, 2, 1)); //31
	             *  dateExtender.getDaysInMonth(new Date(2006, 3, 1)); //30
	             *  dateExtender.getDaysInMonth(new Date(2006, 4, 1)); //31
	             *  dateExtender.getDaysInMonth(new Date(2006, 5, 1)); //30
	             *  dateExtender.getDaysInMonth(new Date(2006, 6, 1)); //31
	             * @param {Date} dateObject the date containing the month
	             * @return {Number} the number of days in the month
	             */
	            getDaysInMonth: function (/*Date*/dateObject) {
	                //	summary:
	                //		Returns the number of days in the month used by dateObject
	                var month = dateObject.getMonth();
	                var days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	                if (month === 1 && date.isLeapYear(dateObject)) {
	                    return 29;
	                } // Number
	                return days[month]; // Number
	            },

	            /**
	             * Determines if a date is a leap year
	             *
	             * @example
	             *
	             *  dateExtender.isLeapYear(new Date(1600, 0, 1)); //true
	             *  dateExtender.isLeapYear(new Date(2004, 0, 1)); //true
	             *  dateExtender.isLeapYear(new Date(2000, 0, 1)); //true
	             *  dateExtender.isLeapYear(new Date(2006, 0, 1)); //false
	             *  dateExtender.isLeapYear(new Date(1900, 0, 1)); //false
	             *  dateExtender.isLeapYear(new Date(1800, 0, 1)); //false
	             *  dateExtender.isLeapYear(new Date(1700, 0, 1)); //false
	             *
	             * @param {Date} dateObject
	             * @returns {Boolean} true if it is a leap year false otherwise
	             */
	            isLeapYear: function (/*Date*/dateObject, utc) {
	                var year = dateObject[utc ? "getUTCFullYear" : "getFullYear"]();
	                return (year % 400 === 0) || (year % 4 === 0 && year % 100 !== 0);

	            },

	            /**
	             * Determines if a date is on a weekend
	             *
	             * @example
	             *
	             * var thursday = new Date(2006, 8, 21);
	             * var saturday = new Date(2006, 8, 23);
	             * var sunday = new Date(2006, 8, 24);
	             * var monday = new Date(2006, 8, 25);
	             * dateExtender.isWeekend(thursday)); //false
	             * dateExtender.isWeekend(saturday); //true
	             * dateExtender.isWeekend(sunday); //true
	             * dateExtender.isWeekend(monday)); //false
	             *
	             * @param {Date} dateObject the date to test
	             *
	             * @returns {Boolean} true if the date is a weekend
	             */
	            isWeekend: function (/*Date?*/dateObject, utc) {
	                // summary:
	                //	Determines if the date falls on a weekend, according to local custom.
	                var day = (dateObject || new Date())[utc ? "getUTCDay" : "getDay"]();
	                return day === 0 || day === 6;
	            },

	            /**
	             * Get the timezone of a date
	             *
	             * @example
	             *  //just setting the strLocal to simulate the toString() of a date
	             *  dt.str = 'Sun Sep 17 2006 22:25:51 GMT-0500 (CDT)';
	             *  //just setting the strLocal to simulate the locale
	             *  dt.strLocale = 'Sun 17 Sep 2006 10:25:51 PM CDT';
	             *  dateExtender.getTimezoneName(dt); //'CDT'
	             *  dt.str = 'Sun Sep 17 2006 22:57:18 GMT-0500 (CDT)';
	             *  dt.strLocale = 'Sun Sep 17 22:57:18 2006';
	             *  dateExtender.getTimezoneName(dt); //'CDT'
	             * @param dateObject the date to get the timezone from
	             *
	             * @returns {String} the timezone of the date
	             */
	            getTimezoneName: getTimezoneName,

	            /**
	             * Compares two dates
	             *
	             * @example
	             *
	             * var d1 = new Date();
	             * d1.setHours(0);
	             * dateExtender.compare(d1, d1); // 0
	             *
	             *  var d1 = new Date();
	             *  d1.setHours(0);
	             *  var d2 = new Date();
	             *  d2.setFullYear(2005);
	             *  d2.setHours(12);
	             *  dateExtender.compare(d1, d2, "date"); // 1
	             *  dateExtender.compare(d1, d2, "datetime"); // 1
	             *
	             *  var d1 = new Date();
	             *  d1.setHours(0);
	             *  var d2 = new Date();
	             *  d2.setFullYear(2005);
	             *  d2.setHours(12);
	             *  dateExtender.compare(d2, d1, "date"); // -1
	             *  dateExtender.compare(d1, d2, "time"); //-1
	             *
	             * @param {Date|String} date1 the date to comapare
	             * @param {Date|String} [date2=new Date()] the date to compare date1 againse
	             * @param {"date"|"time"|"datetime"} portion compares the portion specified
	             *
	             * @returns -1 if date1 is < date2 0 if date1 === date2  1 if date1 > date2
	             */
	            compare: function (/*Date*/date1, /*Date*/date2, /*String*/portion) {
	                date1 = new Date(+date1);
	                date2 = new Date(+(date2 || new Date()));

	                if (portion === "date") {
	                    // Ignore times and compare dates.
	                    date1.setHours(0, 0, 0, 0);
	                    date2.setHours(0, 0, 0, 0);
	                } else if (portion === "time") {
	                    // Ignore dates and compare times.
	                    date1.setFullYear(0, 0, 0);
	                    date2.setFullYear(0, 0, 0);
	                }
	                return date1 > date2 ? 1 : date1 < date2 ? -1 : 0;
	            },


	            /**
	             * Adds a specified interval and amount to a date
	             *
	             * @example
	             *  var dtA = new Date(2005, 11, 27);
	             *  dateExtender.add(dtA, "year", 1); //new Date(2006, 11, 27);
	             *  dateExtender.add(dtA, "years", 1); //new Date(2006, 11, 27);
	             *
	             *  dtA = new Date(2000, 0, 1);
	             *  dateExtender.add(dtA, "quarter", 1); //new Date(2000, 3, 1);
	             *  dateExtender.add(dtA, "quarters", 1); //new Date(2000, 3, 1);
	             *
	             *  dtA = new Date(2000, 0, 1);
	             *  dateExtender.add(dtA, "month", 1); //new Date(2000, 1, 1);
	             *  dateExtender.add(dtA, "months", 1); //new Date(2000, 1, 1);
	             *
	             *  dtA = new Date(2000, 0, 31);
	             *  dateExtender.add(dtA, "month", 1); //new Date(2000, 1, 29);
	             *  dateExtender.add(dtA, "months", 1); //new Date(2000, 1, 29);
	             *
	             *  dtA = new Date(2000, 0, 1);
	             *  dateExtender.add(dtA, "week", 1); //new Date(2000, 0, 8);
	             *  dateExtender.add(dtA, "weeks", 1); //new Date(2000, 0, 8);
	             *
	             *  dtA = new Date(2000, 0, 1);
	             *  dateExtender.add(dtA, "day", 1); //new Date(2000, 0, 2);
	             *
	             *  dtA = new Date(2000, 0, 1);
	             *  dateExtender.add(dtA, "weekday", 1); //new Date(2000, 0, 3);
	             *
	             *  dtA = new Date(2000, 0, 1, 11);
	             *  dateExtender.add(dtA, "hour", 1); //new Date(2000, 0, 1, 12);
	             *
	             *  dtA = new Date(2000, 11, 31, 23, 59);
	             *  dateExtender.add(dtA, "minute", 1); //new Date(2001, 0, 1, 0, 0);
	             *
	             *  dtA = new Date(2000, 11, 31, 23, 59, 59);
	             *  dateExtender.add(dtA, "second", 1); //new Date(2001, 0, 1, 0, 0, 0);
	             *
	             *  dtA = new Date(2000, 11, 31, 23, 59, 59, 999);
	             *  dateExtender.add(dtA, "millisecond", 1); //new Date(2001, 0, 1, 0, 0, 0, 0);
	             *
	             * @param {Date} date
	             * @param {String} interval the interval to add
	             *  <ul>
	             *      <li>day | days</li>
	             *      <li>weekday | weekdays</li>
	             *      <li>year | years</li>
	             *      <li>week | weeks</li>
	             *      <li>quarter | quarters</li>
	             *      <li>months | months</li>
	             *      <li>hour | hours</li>
	             *      <li>minute | minutes</li>
	             *      <li>second | seconds</li>
	             *      <li>millisecond | milliseconds</li>
	             *  </ul>
	             * @param {Number} [amount=0] the amount to add
	             */
	            add: function (/*Date*/date, /*String*/interval, /*int*/amount) {
	                var res = addTransform(interval, date, amount || 0);
	                amount = res[0];
	                var property = res[1];
	                var sum = new Date(+date);
	                var fixOvershoot = res[2];
	                if (property) {
	                    sum["set" + property](sum["get" + property]() + amount);
	                }

	                if (fixOvershoot && (sum.getDate() < date.getDate())) {
	                    sum.setDate(0);
	                }

	                return sum; // Date
	            },

	            /**
	             * Finds the difference between two dates based on the specified interval
	             *
	             * @example
	             *
	             * var dtA, dtB;
	             *
	             * dtA = new Date(2005, 11, 27);
	             * dtB = new Date(2006, 11, 27);
	             * dateExtender.difference(dtA, dtB, "year"); //1
	             *
	             * dtA = new Date(2000, 1, 29);
	             * dtB = new Date(2001, 2, 1);
	             * dateExtender.difference(dtA, dtB, "quarter"); //4
	             * dateExtender.difference(dtA, dtB, "month"); //13
	             *
	             * dtA = new Date(2000, 1, 1);
	             * dtB = new Date(2000, 1, 8);
	             * dateExtender.difference(dtA, dtB, "week"); //1
	             *
	             * dtA = new Date(2000, 1, 29);
	             * dtB = new Date(2000, 2, 1);
	             * dateExtender.difference(dtA, dtB, "day"); //1
	             *
	             * dtA = new Date(2006, 7, 3);
	             * dtB = new Date(2006, 7, 11);
	             * dateExtender.difference(dtA, dtB, "weekday"); //6
	             *
	             * dtA = new Date(2000, 11, 31, 23);
	             * dtB = new Date(2001, 0, 1, 0);
	             * dateExtender.difference(dtA, dtB, "hour"); //1
	             *
	             * dtA = new Date(2000, 11, 31, 23, 59);
	             * dtB = new Date(2001, 0, 1, 0, 0);
	             * dateExtender.difference(dtA, dtB, "minute"); //1
	             *
	             * dtA = new Date(2000, 11, 31, 23, 59, 59);
	             * dtB = new Date(2001, 0, 1, 0, 0, 0);
	             * dateExtender.difference(dtA, dtB, "second"); //1
	             *
	             * dtA = new Date(2000, 11, 31, 23, 59, 59, 999);
	             * dtB = new Date(2001, 0, 1, 0, 0, 0, 0);
	             * dateExtender.difference(dtA, dtB, "millisecond"); //1
	             *
	             *
	             * @param {Date} date1
	             * @param {Date} [date2 = new Date()]
	             * @param {String} [interval = "day"] the intercal to find the difference of.
	             *   <ul>
	             *      <li>day | days</li>
	             *      <li>weekday | weekdays</li>
	             *      <li>year | years</li>
	             *      <li>week | weeks</li>
	             *      <li>quarter | quarters</li>
	             *      <li>months | months</li>
	             *      <li>hour | hours</li>
	             *      <li>minute | minutes</li>
	             *      <li>second | seconds</li>
	             *      <li>millisecond | milliseconds</li>
	             *  </ul>
	             */
	            difference: function (/*Date*/date1, /*Date?*/date2, /*String*/interval, utc) {
	                date2 = date2 || new Date();
	                interval = interval || "day";
	                return differenceTransform(interval, date1, date2, utc);
	            },

	            /**
	             * Formats a date to the specidifed format string
	             *
	             * @example
	             *
	             * var date = new Date(2006, 7, 11, 0, 55, 12, 345);
	             * dateExtender.format(date, "EEEE, MMMM dd, yyyy"); //"Friday, August 11, 2006"
	             * dateExtender.format(date, "M/dd/yy"); //"8/11/06"
	             * dateExtender.format(date, "E"); //"6"
	             * dateExtender.format(date, "h:m a"); //"12:55 AM"
	             * dateExtender.format(date, 'h:m:s'); //"12:55:12"
	             * dateExtender.format(date, 'h:m:s.SS'); //"12:55:12.35"
	             * dateExtender.format(date, 'k:m:s.SS'); //"24:55:12.35"
	             * dateExtender.format(date, 'H:m:s.SS'); //"0:55:12.35"
	             * dateExtender.format(date, "ddMMyyyy"); //"11082006"
	             *
	             * @param date the date to format
	             * @param {String} format the format of the date composed of the following options
	             * <ul>
	             *                  <li> G    Era designator    Text    AD</li>
	             *                  <li> y    Year    Year    1996; 96</li>
	             *                  <li> M    Month in year    Month    July; Jul; 07</li>
	             *                  <li> w    Week in year    Number    27</li>
	             *                  <li> W    Week in month    Number    2</li>
	             *                  <li> D    Day in year    Number    189</li>
	             *                  <li> d    Day in month    Number    10</li>
	             *                  <li> E    Day in week    Text    Tuesday; Tue</li>
	             *                  <li> a    Am/pm marker    Text    PM</li>
	             *                  <li> H    Hour in day (0-23)    Number    0</li>
	             *                  <li> k    Hour in day (1-24)    Number    24</li>
	             *                  <li> K    Hour in am/pm (0-11)    Number    0</li>
	             *                  <li> h    Hour in am/pm (1-12)    Number    12</li>
	             *                  <li> m    Minute in hour    Number    30</li>
	             *                  <li> s    Second in minute    Number    55</li>
	             *                  <li> S    Millisecond    Number    978</li>
	             *                  <li> z    Time zone    General time zone    Pacific Standard Time; PST; GMT-08:00</li>
	             *                  <li> Z    Time zone    RFC 822 time zone    -0800 </li>
	             * </ul>
	             */
	            format: function (date, format, utc) {
	                utc = utc || false;
	                var fullYear, month, day, d, hour, minute, second, millisecond;
	                if (utc) {
	                    fullYear = date.getUTCFullYear();
	                    month = date.getUTCMonth();
	                    day = date.getUTCDay();
	                    d = date.getUTCDate();
	                    hour = date.getUTCHours();
	                    minute = date.getUTCMinutes();
	                    second = date.getUTCSeconds();
	                    millisecond = date.getUTCMilliseconds();
	                } else {
	                    fullYear = date.getFullYear();
	                    month = date.getMonth();
	                    d = date.getDate();
	                    day = date.getDay();
	                    hour = date.getHours();
	                    minute = date.getMinutes();
	                    second = date.getSeconds();
	                    millisecond = date.getMilliseconds();
	                }
	                return format.replace(/([A-Za-z])\1*/g, function (match) {
	                    var s, pad,
	                        c = match.charAt(0),
	                        l = match.length;
	                    if (c === 'd') {
	                        s = "" + d;
	                        pad = true;
	                    } else if (c === "H" && !s) {
	                        s = "" + hour;
	                        pad = true;
	                    } else if (c === 'm' && !s) {
	                        s = "" + minute;
	                        pad = true;
	                    } else if (c === 's') {
	                        if (!s) {
	                            s = "" + second;
	                        }
	                        pad = true;
	                    } else if (c === "G") {
	                        s = ((l < 4) ? eraAbbr : eraNames)[fullYear < 0 ? 0 : 1];
	                    } else if (c === "y") {
	                        s = fullYear;
	                        if (l > 1) {
	                            if (l === 2) {
	                                s = _truncate("" + s, 2, true);
	                            } else {
	                                pad = true;
	                            }
	                        }
	                    } else if (c.toUpperCase() === "Q") {
	                        s = ceil((month + 1) / 3);
	                        pad = true;
	                    } else if (c === "M") {
	                        if (l < 3) {
	                            s = month + 1;
	                            pad = true;
	                        } else {
	                            s = (l === 3 ? monthAbbr : monthNames)[month];
	                        }
	                    } else if (c === "w") {
	                        s = getWeekOfYear(date, 0, utc);
	                        pad = true;
	                    } else if (c === "D") {
	                        s = getDayOfYear(date, utc);
	                        pad = true;
	                    } else if (c === "E") {
	                        if (l < 3) {
	                            s = day + 1;
	                            pad = true;
	                        } else {
	                            s = (l === -3 ? dayAbbr : dayNames)[day];
	                        }
	                    } else if (c === 'a') {
	                        s = (hour < 12) ? 'AM' : 'PM';
	                    } else if (c === "h") {
	                        s = (hour % 12) || 12;
	                        pad = true;
	                    } else if (c === "K") {
	                        s = (hour % 12);
	                        pad = true;
	                    } else if (c === "k") {
	                        s = hour || 24;
	                        pad = true;
	                    } else if (c === "S") {
	                        s = round(millisecond * pow(10, l - 3));
	                        pad = true;
	                    } else if (c === "z" || c === "v" || c === "Z") {
	                        s = getTimezoneName(date);
	                        if ((c === "z" || c === "v") && !s) {
	                            l = 4;
	                        }
	                        if (!s || c === "Z") {
	                            var offset = date.getTimezoneOffset();
	                            var tz = [
	                                (offset >= 0 ? "-" : "+"),
	                                _pad(floor(abs(offset) / 60), 2, "0"),
	                                _pad(abs(offset) % 60, 2, "0")
	                            ];
	                            if (l === 4) {
	                                tz.splice(0, 0, "GMT");
	                                tz.splice(3, 0, ":");
	                            }
	                            s = tz.join("");
	                        }
	                    } else {
	                        s = match;
	                    }
	                    if (pad) {
	                        s = _pad(s, l, '0');
	                    }
	                    return s;
	                });
	            }

	        };

	        var numberDate = {};

	        function addInterval(interval) {
	            numberDate[interval + "sFromNow"] = function (val) {
	                return date.add(new Date(), interval, val);
	            };
	            numberDate[interval + "sAgo"] = function (val) {
	                return date.add(new Date(), interval, -val);
	            };
	        }

	        var intervals = ["year", "month", "day", "hour", "minute", "second"];
	        for (var i = 0, l = intervals.length; i < l; i++) {
	            addInterval(intervals[i]);
	        }

	        var stringDate = {

	            parseDate: function (dateStr, format) {
	                if (!format) {
	                    throw new Error('format required when calling dateExtender.parse');
	                }
	                var tokens = [], regexp = buildDateEXP(format, tokens),
	                    re = new RegExp("^" + regexp + "$", "i"),
	                    match = re.exec(dateStr);
	                if (!match) {
	                    return null;
	                } // null
	                var result = [1970, 0, 1, 0, 0, 0, 0], // will get converted to a Date at the end
	                    amPm = "",
	                    valid = every(match, function (v, i) {
	                        if (i) {
	                            var token = tokens[i - 1];
	                            var l = token.length, type = token.charAt(0);
	                            if (type === 'y') {
	                                if (v < 100) {
	                                    v = parseInt(v, 10);
	                                    //choose century to apply, according to a sliding window
	                                    //of 80 years before and 20 years after present year
	                                    var year = '' + new Date().getFullYear(),
	                                        century = year.substring(0, 2) * 100,
	                                        cutoff = min(year.substring(2, 4) + 20, 99);
	                                    result[0] = (v < cutoff) ? century + v : century - 100 + v;
	                                } else {
	                                    result[0] = v;
	                                }
	                            } else if (type === "M") {
	                                if (l > 2) {
	                                    var months = monthNames, j, k;
	                                    if (l === 3) {
	                                        months = monthAbbr;
	                                    }
	                                    //Tolerate abbreviating period in month part
	                                    //Case-insensitive comparison
	                                    v = v.replace(".", "").toLowerCase();
	                                    var contains = false;
	                                    for (j = 0, k = months.length; j < k && !contains; j++) {
	                                        var s = months[j].replace(".", "").toLocaleLowerCase();
	                                        if (s === v) {
	                                            v = j;
	                                            contains = true;
	                                        }
	                                    }
	                                    if (!contains) {
	                                        return false;
	                                    }
	                                } else {
	                                    v--;
	                                }
	                                result[1] = v;
	                            } else if (type === "E" || type === "e") {
	                                var days = dayNames;
	                                if (l === 3) {
	                                    days = dayAbbr;
	                                }
	                                //Case-insensitive comparison
	                                v = v.toLowerCase();
	                                days = array.map(days, function (d) {
	                                    return d.toLowerCase();
	                                });
	                                var d = array.indexOf(days, v);
	                                if (d === -1) {
	                                    v = parseInt(v, 10);
	                                    if (isNaN(v) || v > days.length) {
	                                        return false;
	                                    }
	                                } else {
	                                    v = d;
	                                }
	                            } else if (type === 'D' || type === "d") {
	                                if (type === "D") {
	                                    result[1] = 0;
	                                }
	                                result[2] = v;
	                            } else if (type === "a") {
	                                var am = "am";
	                                var pm = "pm";
	                                var period = /\./g;
	                                v = v.replace(period, '').toLowerCase();
	                                // we might not have seen the hours field yet, so store the state and apply hour change later
	                                amPm = (v === pm) ? 'p' : (v === am) ? 'a' : '';
	                            } else if (type === "k" || type === "h" || type === "H" || type === "K") {
	                                if (type === "k" && (+v) === 24) {
	                                    v = 0;
	                                }
	                                result[3] = v;
	                            } else if (type === "m") {
	                                result[4] = v;
	                            } else if (type === "s") {
	                                result[5] = v;
	                            } else if (type === "S") {
	                                result[6] = v;
	                            }
	                        }
	                        return true;
	                    });
	                if (valid) {
	                    var hours = +result[3];
	                    //account for am/pm
	                    if (amPm === 'p' && hours < 12) {
	                        result[3] = hours + 12; //e.g., 3pm -> 15
	                    } else if (amPm === 'a' && hours === 12) {
	                        result[3] = 0; //12am -> 0
	                    }
	                    var dateObject = new Date(result[0], result[1], result[2], result[3], result[4], result[5], result[6]); // Date
	                    var dateToken = (array.indexOf(tokens, 'd') !== -1),
	                        monthToken = (array.indexOf(tokens, 'M') !== -1),
	                        month = result[1],
	                        day = result[2],
	                        dateMonth = dateObject.getMonth(),
	                        dateDay = dateObject.getDate();
	                    if ((monthToken && dateMonth > month) || (dateToken && dateDay > day)) {
	                        return null;
	                    }
	                    return dateObject; // Date
	                } else {
	                    return null;
	                }
	            }
	        };


	        var ret = extended.define(is.isDate, date).define(is.isString, stringDate).define(is.isNumber, numberDate);
	        for (i in date) {
	            if (date.hasOwnProperty(i)) {
	                ret[i] = date[i];
	            }
	        }

	        for (i in stringDate) {
	            if (stringDate.hasOwnProperty(i)) {
	                ret[i] = stringDate[i];
	            }
	        }
	        for (i in numberDate) {
	            if (numberDate.hasOwnProperty(i)) {
	                ret[i] = numberDate[i];
	            }
	        }
	        return ret;
	    }

	    if (true) {
	        if ("undefined" !== typeof module && module.exports) {
	            module.exports = defineDate(__webpack_require__(388), __webpack_require__(387), __webpack_require__(398));

	        }
	    } else if ("function" === typeof define && define.amd) {
	        define(["extended", "is-extended", "array-extended"], function (extended, is, arr) {
	            return defineDate(extended, is, arr);
	        });
	    } else {
	        this.dateExtended = defineDate(this.extended, this.isExtended, this.arrayExtended);
	    }

	}).call(this);








/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	(function () {
	    "use strict";
	    /*global define*/

	    function defineArray(extended, is, args) {

	        var isString = is.isString,
	            isArray = Array.isArray || is.isArray,
	            isDate = is.isDate,
	            floor = Math.floor,
	            abs = Math.abs,
	            mathMax = Math.max,
	            mathMin = Math.min,
	            arrayProto = Array.prototype,
	            arrayIndexOf = arrayProto.indexOf,
	            arrayForEach = arrayProto.forEach,
	            arrayMap = arrayProto.map,
	            arrayReduce = arrayProto.reduce,
	            arrayReduceRight = arrayProto.reduceRight,
	            arrayFilter = arrayProto.filter,
	            arrayEvery = arrayProto.every,
	            arraySome = arrayProto.some,
	            argsToArray = args.argsToArray;


	        function cross(num, cros) {
	            return reduceRight(cros, function (a, b) {
	                if (!isArray(b)) {
	                    b = [b];
	                }
	                b.unshift(num);
	                a.unshift(b);
	                return a;
	            }, []);
	        }

	        function permute(num, cross, length) {
	            var ret = [];
	            for (var i = 0; i < cross.length; i++) {
	                ret.push([num].concat(rotate(cross, i)).slice(0, length));
	            }
	            return ret;
	        }


	        function intersection(a, b) {
	            var ret = [], aOne, i = -1, l;
	            l = a.length;
	            while (++i < l) {
	                aOne = a[i];
	                if (indexOf(b, aOne) !== -1) {
	                    ret.push(aOne);
	                }
	            }
	            return ret;
	        }


	        var _sort = (function () {

	            var isAll = function (arr, test) {
	                return every(arr, test);
	            };

	            var defaultCmp = function (a, b) {
	                return a - b;
	            };

	            var dateSort = function (a, b) {
	                return a.getTime() - b.getTime();
	            };

	            return function _sort(arr, property) {
	                var ret = [];
	                if (isArray(arr)) {
	                    ret = arr.slice();
	                    if (property) {
	                        if (typeof property === "function") {
	                            ret.sort(property);
	                        } else {
	                            ret.sort(function (a, b) {
	                                var aProp = a[property], bProp = b[property];
	                                if (isString(aProp) && isString(bProp)) {
	                                    return aProp > bProp ? 1 : aProp < bProp ? -1 : 0;
	                                } else if (isDate(aProp) && isDate(bProp)) {
	                                    return aProp.getTime() - bProp.getTime();
	                                } else {
	                                    return aProp - bProp;
	                                }
	                            });
	                        }
	                    } else {
	                        if (isAll(ret, isString)) {
	                            ret.sort();
	                        } else if (isAll(ret, isDate)) {
	                            ret.sort(dateSort);
	                        } else {
	                            ret.sort(defaultCmp);
	                        }
	                    }
	                }
	                return ret;
	            };

	        })();

	        function indexOf(arr, searchElement, from) {
	            var index = (from || 0) - 1,
	                length = arr.length;
	            while (++index < length) {
	                if (arr[index] === searchElement) {
	                    return index;
	                }
	            }
	            return -1;
	        }

	        function lastIndexOf(arr, searchElement, from) {
	            if (!isArray(arr)) {
	                throw new TypeError();
	            }

	            var t = Object(arr);
	            var len = t.length >>> 0;
	            if (len === 0) {
	                return -1;
	            }

	            var n = len;
	            if (arguments.length > 2) {
	                n = Number(arguments[2]);
	                if (n !== n) {
	                    n = 0;
	                } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
	                    n = (n > 0 || -1) * floor(abs(n));
	                }
	            }

	            var k = n >= 0 ? mathMin(n, len - 1) : len - abs(n);

	            for (; k >= 0; k--) {
	                if (k in t && t[k] === searchElement) {
	                    return k;
	                }
	            }
	            return -1;
	        }

	        function filter(arr, iterator, scope) {
	            if (arr && arrayFilter && arrayFilter === arr.filter) {
	                return arr.filter(iterator, scope);
	            }
	            if (!isArray(arr) || typeof iterator !== "function") {
	                throw new TypeError();
	            }

	            var t = Object(arr);
	            var len = t.length >>> 0;
	            var res = [];
	            for (var i = 0; i < len; i++) {
	                if (i in t) {
	                    var val = t[i]; // in case fun mutates this
	                    if (iterator.call(scope, val, i, t)) {
	                        res.push(val);
	                    }
	                }
	            }
	            return res;
	        }

	        function forEach(arr, iterator, scope) {
	            if (!isArray(arr) || typeof iterator !== "function") {
	                throw new TypeError();
	            }
	            if (arr && arrayForEach && arrayForEach === arr.forEach) {
	                arr.forEach(iterator, scope);
	                return arr;
	            }
	            for (var i = 0, len = arr.length; i < len; ++i) {
	                iterator.call(scope || arr, arr[i], i, arr);
	            }

	            return arr;
	        }

	        function every(arr, iterator, scope) {
	            if (arr && arrayEvery && arrayEvery === arr.every) {
	                return arr.every(iterator, scope);
	            }
	            if (!isArray(arr) || typeof iterator !== "function") {
	                throw new TypeError();
	            }
	            var t = Object(arr);
	            var len = t.length >>> 0;
	            for (var i = 0; i < len; i++) {
	                if (i in t && !iterator.call(scope, t[i], i, t)) {
	                    return false;
	                }
	            }
	            return true;
	        }

	        function some(arr, iterator, scope) {
	            if (arr && arraySome && arraySome === arr.some) {
	                return arr.some(iterator, scope);
	            }
	            if (!isArray(arr) || typeof iterator !== "function") {
	                throw new TypeError();
	            }
	            var t = Object(arr);
	            var len = t.length >>> 0;
	            for (var i = 0; i < len; i++) {
	                if (i in t && iterator.call(scope, t[i], i, t)) {
	                    return true;
	                }
	            }
	            return false;
	        }

	        function map(arr, iterator, scope) {
	            if (arr && arrayMap && arrayMap === arr.map) {
	                return arr.map(iterator, scope);
	            }
	            if (!isArray(arr) || typeof iterator !== "function") {
	                throw new TypeError();
	            }

	            var t = Object(arr);
	            var len = t.length >>> 0;
	            var res = [];
	            for (var i = 0; i < len; i++) {
	                if (i in t) {
	                    res.push(iterator.call(scope, t[i], i, t));
	                }
	            }
	            return res;
	        }

	        function reduce(arr, accumulator, curr) {
	            var initial = arguments.length > 2;
	            if (arr && arrayReduce && arrayReduce === arr.reduce) {
	                return initial ? arr.reduce(accumulator, curr) : arr.reduce(accumulator);
	            }
	            if (!isArray(arr) || typeof accumulator !== "function") {
	                throw new TypeError();
	            }
	            var i = 0, l = arr.length >> 0;
	            if (arguments.length < 3) {
	                if (l === 0) {
	                    throw new TypeError("Array length is 0 and no second argument");
	                }
	                curr = arr[0];
	                i = 1; // start accumulating at the second element
	            } else {
	                curr = arguments[2];
	            }
	            while (i < l) {
	                if (i in arr) {
	                    curr = accumulator.call(undefined, curr, arr[i], i, arr);
	                }
	                ++i;
	            }
	            return curr;
	        }

	        function reduceRight(arr, accumulator, curr) {
	            var initial = arguments.length > 2;
	            if (arr && arrayReduceRight && arrayReduceRight === arr.reduceRight) {
	                return initial ? arr.reduceRight(accumulator, curr) : arr.reduceRight(accumulator);
	            }
	            if (!isArray(arr) || typeof accumulator !== "function") {
	                throw new TypeError();
	            }

	            var t = Object(arr);
	            var len = t.length >>> 0;

	            // no value to return if no initial value, empty array
	            if (len === 0 && arguments.length === 2) {
	                throw new TypeError();
	            }

	            var k = len - 1;
	            if (arguments.length >= 3) {
	                curr = arguments[2];
	            } else {
	                do {
	                    if (k in arr) {
	                        curr = arr[k--];
	                        break;
	                    }
	                }
	                while (true);
	            }
	            while (k >= 0) {
	                if (k in t) {
	                    curr = accumulator.call(undefined, curr, t[k], k, t);
	                }
	                k--;
	            }
	            return curr;
	        }


	        function toArray(o) {
	            var ret = [];
	            if (o !== null) {
	                var args = argsToArray(arguments);
	                if (args.length === 1) {
	                    if (isArray(o)) {
	                        ret = o;
	                    } else if (is.isHash(o)) {
	                        for (var i in o) {
	                            if (o.hasOwnProperty(i)) {
	                                ret.push([i, o[i]]);
	                            }
	                        }
	                    } else {
	                        ret.push(o);
	                    }
	                } else {
	                    forEach(args, function (a) {
	                        ret = ret.concat(toArray(a));
	                    });
	                }
	            }
	            return ret;
	        }

	        function sum(array) {
	            array = array || [];
	            if (array.length) {
	                return reduce(array, function (a, b) {
	                    return a + b;
	                });
	            } else {
	                return 0;
	            }
	        }

	        function avg(arr) {
	            arr = arr || [];
	            if (arr.length) {
	                var total = sum(arr);
	                if (is.isNumber(total)) {
	                    return  total / arr.length;
	                } else {
	                    throw new Error("Cannot average an array of non numbers.");
	                }
	            } else {
	                return 0;
	            }
	        }

	        function sort(arr, cmp) {
	            return _sort(arr, cmp);
	        }

	        function min(arr, cmp) {
	            return _sort(arr, cmp)[0];
	        }

	        function max(arr, cmp) {
	            return _sort(arr, cmp)[arr.length - 1];
	        }

	        function difference(arr1) {
	            var ret = arr1, args = flatten(argsToArray(arguments, 1));
	            if (isArray(arr1)) {
	                ret = filter(arr1, function (a) {
	                    return indexOf(args, a) === -1;
	                });
	            }
	            return ret;
	        }

	        function removeDuplicates(arr) {
	            var ret = [], i = -1, l, retLength = 0;
	            if (arr) {
	                l = arr.length;
	                while (++i < l) {
	                    var item = arr[i];
	                    if (indexOf(ret, item) === -1) {
	                        ret[retLength++] = item;
	                    }
	                }
	            }
	            return ret;
	        }


	        function unique(arr) {
	            return removeDuplicates(arr);
	        }


	        function rotate(arr, numberOfTimes) {
	            var ret = arr.slice();
	            if (typeof numberOfTimes !== "number") {
	                numberOfTimes = 1;
	            }
	            if (numberOfTimes && isArray(arr)) {
	                if (numberOfTimes > 0) {
	                    ret.push(ret.shift());
	                    numberOfTimes--;
	                } else {
	                    ret.unshift(ret.pop());
	                    numberOfTimes++;
	                }
	                return rotate(ret, numberOfTimes);
	            } else {
	                return ret;
	            }
	        }

	        function permutations(arr, length) {
	            var ret = [];
	            if (isArray(arr)) {
	                var copy = arr.slice(0);
	                if (typeof length !== "number") {
	                    length = arr.length;
	                }
	                if (!length) {
	                    ret = [
	                        []
	                    ];
	                } else if (length <= arr.length) {
	                    ret = reduce(arr, function (a, b, i) {
	                        var ret;
	                        if (length > 1) {
	                            ret = permute(b, rotate(copy, i).slice(1), length);
	                        } else {
	                            ret = [
	                                [b]
	                            ];
	                        }
	                        return a.concat(ret);
	                    }, []);
	                }
	            }
	            return ret;
	        }

	        function zip() {
	            var ret = [];
	            var arrs = argsToArray(arguments);
	            if (arrs.length > 1) {
	                var arr1 = arrs.shift();
	                if (isArray(arr1)) {
	                    ret = reduce(arr1, function (a, b, i) {
	                        var curr = [b];
	                        for (var j = 0; j < arrs.length; j++) {
	                            var currArr = arrs[j];
	                            if (isArray(currArr) && !is.isUndefined(currArr[i])) {
	                                curr.push(currArr[i]);
	                            } else {
	                                curr.push(null);
	                            }
	                        }
	                        a.push(curr);
	                        return a;
	                    }, []);
	                }
	            }
	            return ret;
	        }

	        function transpose(arr) {
	            var ret = [];
	            if (isArray(arr) && arr.length) {
	                var last;
	                forEach(arr, function (a) {
	                    if (isArray(a) && (!last || a.length === last.length)) {
	                        forEach(a, function (b, i) {
	                            if (!ret[i]) {
	                                ret[i] = [];
	                            }
	                            ret[i].push(b);
	                        });
	                        last = a;
	                    }
	                });
	            }
	            return ret;
	        }

	        function valuesAt(arr, indexes) {
	            var ret = [];
	            indexes = argsToArray(arguments);
	            arr = indexes.shift();
	            if (isArray(arr) && indexes.length) {
	                for (var i = 0, l = indexes.length; i < l; i++) {
	                    ret.push(arr[indexes[i]] || null);
	                }
	            }
	            return ret;
	        }

	        function union() {
	            var ret = [];
	            var arrs = argsToArray(arguments);
	            if (arrs.length > 1) {
	                for (var i = 0, l = arrs.length; i < l; i++) {
	                    ret = ret.concat(arrs[i]);
	                }
	                ret = removeDuplicates(ret);
	            }
	            return ret;
	        }

	        function intersect() {
	            var collect = [], sets, i = -1 , l;
	            if (arguments.length > 1) {
	                //assume we are intersections all the lists in the array
	                sets = argsToArray(arguments);
	            } else {
	                sets = arguments[0];
	            }
	            if (isArray(sets)) {
	                collect = sets[0];
	                i = 0;
	                l = sets.length;
	                while (++i < l) {
	                    collect = intersection(collect, sets[i]);
	                }
	            }
	            return removeDuplicates(collect);
	        }

	        function powerSet(arr) {
	            var ret = [];
	            if (isArray(arr) && arr.length) {
	                ret = reduce(arr, function (a, b) {
	                    var ret = map(a, function (c) {
	                        return c.concat(b);
	                    });
	                    return a.concat(ret);
	                }, [
	                    []
	                ]);
	            }
	            return ret;
	        }

	        function cartesian(a, b) {
	            var ret = [];
	            if (isArray(a) && isArray(b) && a.length && b.length) {
	                ret = cross(a[0], b).concat(cartesian(a.slice(1), b));
	            }
	            return ret;
	        }

	        function compact(arr) {
	            var ret = [];
	            if (isArray(arr) && arr.length) {
	                ret = filter(arr, function (item) {
	                    return !is.isUndefinedOrNull(item);
	                });
	            }
	            return ret;
	        }

	        function multiply(arr, times) {
	            times = is.isNumber(times) ? times : 1;
	            if (!times) {
	                //make sure times is greater than zero if it is zero then dont multiply it
	                times = 1;
	            }
	            arr = toArray(arr || []);
	            var ret = [], i = 0;
	            while (++i <= times) {
	                ret = ret.concat(arr);
	            }
	            return ret;
	        }

	        function flatten(arr) {
	            var set;
	            var args = argsToArray(arguments);
	            if (args.length > 1) {
	                //assume we are intersections all the lists in the array
	                set = args;
	            } else {
	                set = toArray(arr);
	            }
	            return reduce(set, function (a, b) {
	                return a.concat(b);
	            }, []);
	        }

	        function pluck(arr, prop) {
	            prop = prop.split(".");
	            var result = arr.slice(0);
	            forEach(prop, function (prop) {
	                var exec = prop.match(/(\w+)\(\)$/);
	                result = map(result, function (item) {
	                    return exec ? item[exec[1]]() : item[prop];
	                });
	            });
	            return result;
	        }

	        function invoke(arr, func, args) {
	            args = argsToArray(arguments, 2);
	            return map(arr, function (item) {
	                var exec = isString(func) ? item[func] : func;
	                return exec.apply(item, args);
	            });
	        }


	        var array = {
	            toArray: toArray,
	            sum: sum,
	            avg: avg,
	            sort: sort,
	            min: min,
	            max: max,
	            difference: difference,
	            removeDuplicates: removeDuplicates,
	            unique: unique,
	            rotate: rotate,
	            permutations: permutations,
	            zip: zip,
	            transpose: transpose,
	            valuesAt: valuesAt,
	            union: union,
	            intersect: intersect,
	            powerSet: powerSet,
	            cartesian: cartesian,
	            compact: compact,
	            multiply: multiply,
	            flatten: flatten,
	            pluck: pluck,
	            invoke: invoke,
	            forEach: forEach,
	            map: map,
	            filter: filter,
	            reduce: reduce,
	            reduceRight: reduceRight,
	            some: some,
	            every: every,
	            indexOf: indexOf,
	            lastIndexOf: lastIndexOf
	        };

	        return extended.define(isArray, array).expose(array);
	    }

	    if (true) {
	        if ("undefined" !== typeof module && module.exports) {
	            module.exports = defineArray(__webpack_require__(388), __webpack_require__(387), __webpack_require__(399));
	        }
	    } else if ("function" === typeof define && define.amd) {
	        define(["extended", "is-extended", "arguments-extended"], function (extended, is, args) {
	            return defineArray(extended, is, args);
	        });
	    } else {
	        this.arrayExtended = defineArray(this.extended, this.isExtended, this.argumentsExtended);
	    }

	}).call(this);








/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	(function () {
	    "use strict";

	    function defineArgumentsExtended(extended, is) {

	        var pSlice = Array.prototype.slice,
	            isArguments = is.isArguments;

	        function argsToArray(args, slice) {
	            var i = -1, j = 0, l = args.length, ret = [];
	            slice = slice || 0;
	            i += slice;
	            while (++i < l) {
	                ret[j++] = args[i];
	            }
	            return ret;
	        }


	        return extended
	            .define(isArguments, {
	                toArray: argsToArray
	            })
	            .expose({
	                argsToArray: argsToArray
	            });
	    }

	    if (true) {
	        if ("undefined" !== typeof module && module.exports) {
	            module.exports = defineArgumentsExtended(__webpack_require__(388), __webpack_require__(387));

	        }
	    } else if ("function" === typeof define && define.amd) {
	        define(["extended", "is-extended"], function (extended, is) {
	            return defineArgumentsExtended(extended, is);
	        });
	    } else {
	        this.argumentsExtended = defineArgumentsExtended(this.extended, this.isExtended);
	    }

	}).call(this);



/***/ },
/* 400 */
/***/ function(module, exports) {

	exports.endianness = function () { return 'LE' };

	exports.hostname = function () {
	    if (typeof location !== 'undefined') {
	        return location.hostname
	    }
	    else return '';
	};

	exports.loadavg = function () { return [] };

	exports.uptime = function () { return 0 };

	exports.freemem = function () {
	    return Number.MAX_VALUE;
	};

	exports.totalmem = function () {
	    return Number.MAX_VALUE;
	};

	exports.cpus = function () { return [] };

	exports.type = function () { return 'Browser' };

	exports.release = function () {
	    if (typeof navigator !== 'undefined') {
	        return navigator.appVersion;
	    }
	    return '';
	};

	exports.networkInterfaces
	= exports.getNetworkInterfaces
	= function () { return {} };

	exports.arch = function () { return 'javascript' };

	exports.platform = function () { return 'browser' };

	exports.tmpdir = exports.tmpDir = function () {
	    return '/tmp';
	};

	exports.EOL = '\n';


/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(306).EventEmitter;
	var inherits = __webpack_require__(402);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(403);
	Stream.Writable = __webpack_require__(414);
	Stream.Duplex = __webpack_require__(415);
	Stream.Transform = __webpack_require__(416);
	Stream.PassThrough = __webpack_require__(417);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 402 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {exports = module.exports = __webpack_require__(404);
	exports.Stream = __webpack_require__(401);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(410);
	exports.Duplex = __webpack_require__(409);
	exports.Transform = __webpack_require__(412);
	exports.PassThrough = __webpack_require__(413);
	if (!process.browser && process.env.READABLE_STREAM === 'disable') {
	  module.exports = __webpack_require__(401);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(405);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(202).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(306).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(401);

	/*<replacement>*/
	var util = __webpack_require__(406);
	util.inherits = __webpack_require__(407);
	/*</replacement>*/

	var StringDecoder;


	/*<replacement>*/
	var debug = __webpack_require__(408);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/


	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(409);

	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(411).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(409);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(411).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (!util.isNull(ret))
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}

	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 405 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(202).Buffer))

/***/ },
/* 407 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 408 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(406);
	util.inherits = __webpack_require__(407);
	/*</replacement>*/

	var Readable = __webpack_require__(404);
	var Writable = __webpack_require__(410);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(202).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(406);
	util.inherits = __webpack_require__(407);
	/*</replacement>*/

	var Stream = __webpack_require__(401);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(409);

	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(409);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (!util.isFunction(cb))
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);

	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }

	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }

	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));

	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(202).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(409);

	/*<replacement>*/
	var util = __webpack_require__(406);
	util.inherits = __webpack_require__(407);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (!util.isNullOrUndefined(data))
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(412);

	/*<replacement>*/
	var util = __webpack_require__(406);
	util.inherits = __webpack_require__(407);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(410)


/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(409)


/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(412)


/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(413)


/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var extended = __webpack_require__(385),
	    isUndefined = extended.isUndefined,
	    spreadArgs = extended.spreadArgs,
	    util = __webpack_require__(213),
	    out = process.stdout,
	    stream = __webpack_require__(401),
	    EMPTY = /^\s*(?:''|"")?\s*(?:,\s*(?:''|"")?\s*)*$/,
	    DEFAULT_DELIMITER = ",",
	    createParser = __webpack_require__(419),
	    fs = __webpack_require__(383),
	    StringDecoder = __webpack_require__(411).StringDecoder,
	    hasIsPaused = !!stream.Transform.prototype.isPaused;

	function ParserStream(options) {
	    options = options || {};
	    options.objectMode = extended.has(options, "objectMode") ? options.objectMode : true;
	    stream.Transform.call(this, options);
	    this.lines = "";
	    this.decoder = new StringDecoder();
	    this._parsedHeaders = false;
	    this._rowCount = -1;
	    this._emitData = false;
	    var delimiter;
	    if (extended.has(options, "delimiter")) {
	        delimiter = options.delimiter;
	        if (delimiter.length > 1) {
	            throw new Error("delimiter option must be one character long");
	        }
	        delimiter = extended.escape(delimiter);
	    } else {
	        delimiter = DEFAULT_DELIMITER;
	    }
	    options.delimiter = delimiter;
	    this.parser = createParser(options);
	    this._headers = options.headers;
	    this._renameHeaders = options.renameHeaders;
	    this._ignoreEmpty = options.ignoreEmpty;
	    this._discardUnmappedColumns = options.discardUnmappedColumns;
	    this._strictColumnHandling = options.strictColumnHandling;
	    this.__objectMode = options.objectMode;
	    this.__buffered = [];
	    return this;
	}

	util.inherits(ParserStream, stream.Transform);

	var origOn = ParserStream.prototype.on,
	    origEmit = ParserStream.prototype.emit;


	extended(ParserStream).extend({

	    __pausedDone: null,

	    __endEmitted: false,

	    __emittedData: false,

	    __handleLine: function __parseLineData(line, index, ignore, next) {
	        var ignoreEmpty = this._ignoreEmpty, self = this;
	        if (extended.isBoolean(ignoreEmpty) && ignoreEmpty && (!line || EMPTY.test(line.join("")))) {
	            return next(null, null);
	        }
	        if (!ignore) {
	            this.__transform(line, function (err, line) {
	                if (err) {
	                    next(err);
	                } else {
	                    self.__validate(line, function (err, isValid, reason) {
	                        if (err) {
	                            next(err);
	                        } else if (isValid) {
	                            next(null, line);
	                        } else {
	                            self.emit("data-invalid", line, index, reason);
	                            next(null, null);
	                        }
	                    });
	                }
	            });
	        } else {
	            return next(null, line);
	        }
	    },

	    __processRows: function (rows, data, cb) {
	        var self = this, count;
	        extended.asyncEach(rows, function (row, cb) {
	            if (row) {
	                self.__handleLine(row, (count = ++self._rowCount), false, function (err, dataRow) {
	                    if (err) {
	                        cb(err);
	                    } else {
	                        if (dataRow) {
	                            if (!self.isStreamPaused()) {
	                                self.__emitRecord(dataRow, count);
	                            } else {
	                                self.__buffered.push([dataRow, count]);
	                            }
	                        } else {
	                            count = --self._rowCount;
	                        }
	                        cb();
	                    }
	                });
	            }
	        }, function (err) {
	            if (err) {
	                cb(err);
	            } else {
	                cb(null, data.line);
	            }
	        });
	    },

	    __processHeaders: function (rows, cb) {
	        var headers = this._headers,
	            renameHeaders = this._renameHeaders,
	            discardUnmappedColumns = this._discardUnmappedColumns,
	            strictColumnHandling = this._strictColumnHandling,
	            self = this;

	        function headerHandler(err, headers) {
	            if (err) {
	                cb(err);
	            } else if (extended.isArray(headers)) {
	                var headersLength = headers.length,
	                    orig = self.__transform;
	                self.__transform = function (data, cb) {
	                    var ret = {}, i = -1, val;
	                    if (data.length > headersLength) {
	                        if (discardUnmappedColumns) {
	                            data.splice(headersLength);
	                        } else if (strictColumnHandling) {
	                            self.emit("data-invalid", data);
	                            return orig(null, cb);
	                        } else {
	                            self.emit("error", new Error("Unexpected Error: column header mismatch expected: " + headersLength + " columns got: " + data.length));
	                            return orig(null, cb);
	                        }
	                    } else if (strictColumnHandling && (data.length < headersLength)) {
	                        self.emit("data-invalid", data);
	                        return orig(null, cb);
	                    }
	                    while (++i < headersLength) {
	                        if (isUndefined(headers[i])) {
	                            continue;
	                        }
	                        val = data[i];
	                        ret[headers[i]] = isUndefined(val) ? '' : val;
	                    }

	                    return orig(ret, cb);
	                };
	            }
	            self._parsedHeaders = true;
	            cb(null);
	        }

	        if (renameHeaders) {
	            if (Array.isArray(headers)) {
	                rows.shift();
	                headerHandler(null, headers);
	            } else {
	                self.emit("error", new Error("Error renaming headers: new headers must be provided in an array"));
	            }
	        } else if (extended.isBoolean(headers) && headers) {
	            this.__handleLine(rows.shift(), 0, true, headerHandler);
	        } else {
	            headerHandler(null, headers);
	        }

	    },

	    _parse: function _parseLine(data, hasMoreData, cb) {
	        var rows, self = this;
	        try {
	            data = this.parser(data, hasMoreData);
	            rows = data.rows;
	            if (rows.length) {
	                if (!this._parsedHeaders) {
	                    this.__processHeaders(rows, function (err) {
	                        if (err) {
	                            cb(err);
	                        } else {
	                            self.__processRows(rows, data, cb);
	                        }
	                    });
	                } else {
	                    this.__processRows(rows, data, cb);
	                }
	            } else {
	                cb(null, data.line);
	            }
	        } catch (e) {
	            cb(e);
	        }
	    },

	    __emitRecord: function (dataRow, count) {
	        if (this._emitData) {
	            this.push(this.__objectMode ? dataRow : JSON.stringify(dataRow));
	        }
	    },

	    __removeBOM: function (data) {
	        // Catches EFBBBF (UTF-8 BOM) because the buffer-to-string
	        // conversion translates it to FEFF (UTF-16 BOM)
	        if (data && typeof data == 'string' && data.charCodeAt(0) == '0xFEFF') {
	            return data.slice(1);
	        }
	        return data;
	    },

	    _transform: function (data, encoding, done) {
	        var lines = this.lines,
	            lineData = (lines + this.decoder.write(data)),
	            self = this;
	        if (lineData.length > 1) {
	            lineData = this.__removeBOM(lineData);
	            this._parse(lineData, true, function (err, lineData) {
	                if (err) {
	                    done(err);
	                } else {
	                    self.lines = lineData;
	                    if (!self.isStreamPaused()) {
	                        done();
	                    } else {
	                        self.__pausedDone = done;
	                    }
	                }
	            });
	        } else {
	            this.lines = lineData;
	            if (!this.isStreamPaused()) {
	                done();
	            } else {
	                this.__pausedDone = done;
	            }
	        }

	    },

	    __doFlush: function (callback) {
	        try {
	            callback();
	        } catch (e) {
	            callback(e);
	        }
	    },

	    _flush: function (callback) {
	        var self = this;
	        if (this.lines) {
	            this._parse(this.lines, false, function (err) {
	                if (err) {
	                    callback(err);
	                } else if (!self.isStreamPaused()) {
	                    self.__doFlush(callback);
	                } else {
	                    self.__pausedDone = function () {
	                        self.__doFlush(callback);
	                    };
	                }
	            });
	        } else {
	            if (!this.isStreamPaused()) {
	                this.__doFlush(callback);
	            } else {
	                this.__pausedDone = function () {
	                    self.__doFlush(callback);
	                };
	            }
	        }
	    },

	    __validate: function (data, next) {
	        return next(null, true);
	    },

	    __transform: function (data, next) {
	        return next(null, data);
	    },

	    __flushPausedBuffer: function () {
	        var buffered = this.__buffered, l = buffered.length;
	        if (l) {
	            var entry;
	            while (buffered.length) {
	                entry = buffered.shift();
	                this.__emitRecord(entry[0], entry[1]);
	                //handle case where paused is called while emitting data
	                if (this.isStreamPaused()) {
	                    return;
	                }
	            }
	            buffered.length = 0;
	        }
	        if (this.__pausedDone) {
	            var done = this.__pausedDone;
	            this.__pausedDone = null;
	            done();
	        }
	    },

	    isStreamPaused: function () {
	        return this.__paused;
	    },

	    emit: function (event) {
	        if (event === "end") {
	            if (!this.__endEmitted) {
	                this.__endEmitted = true;
	                spreadArgs(origEmit, ["end", ++this._rowCount], this);
	            }
	        } else {
	            if (!hasIsPaused) {
	                if (event === "pause") {
	                    this.__paused = true;
	                } else if (event === "resume") {
	                    this.__paused = false;
	                    this.__flushPausedBuffer();
	                }
	            }
	            spreadArgs(origEmit, arguments, this);
	        }
	    },

	    on: function (evt) {
	        if (evt === "data" || evt === "readable") {
	            this._emitData = true;
	        }
	        spreadArgs(origOn, arguments, this);
	        return this;
	    },

	    validate: function (cb) {
	        if (!extended.isFunction(cb)) {
	            this.emit("error", new TypeError("fast-csv.Parser#validate requires a function"));
	        }
	        if (cb.length === 2) {
	            this.__validate = cb;
	        } else {
	            this.__validate = function (data, next) {
	                return next(null, cb(data));
	            };
	        }
	        return this;
	    },
	    transform: function (cb) {
	        if (!extended.isFunction(cb)) {
	            this.emit("error", new TypeError("fast-csv.Parser#transform requires a function"));
	        }
	        if (cb.length === 2) {
	            this.__transform = cb;
	        } else {
	            this.__transform = function (data, next) {
	                return next(null, cb(data));
	            };
	        }
	        return this;
	    }

	});

	module.exports = ParserStream;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(34)))

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	var extended = __webpack_require__(385),
	    has = extended.has,
	    isUndefinedOrNull = extended.isUndefinedOrNull,
	    trim = extended.trim,
	    trimLeft = extended.trimLeft,
	    trimRight = extended.trimRight;

	function createParser(options) {
	    options = options || {};
	    var delimiter = options.delimiter || ",",
	        doLtrim = options.ltrim || false,
	        doRtrim = options.rtrim || false,
	        doTrim = options.trim || false,
	        ESCAPE = has(options, "quote") ? options.quote : '"',
	        VALUE_REGEXP = new RegExp("([^" + delimiter + "'\"\\s\\\\]*(?:\\s+[^" + delimiter + "'\"\\s\\\\]+)*)"),
	        SEARCH_REGEXP = new RegExp("(?:\\n|\\r|" + delimiter + ")"),
	        ESCAPE_CHAR = options.escape || '"',
	        NEXT_TOKEN_REGEXP = new RegExp("([^\\s]|\\r\\n|\\n|\\r|" + delimiter + ")"),
	        ROW_DELIMITER = /(\r\n|\n|\r)/,
	        SPACE_CHAR_REGEX = new RegExp("(?!" + delimiter + ") "),
	        COMMENT, hasComments;
	    if (has(options, "comment")) {
	        COMMENT = options.comment;
	        hasComments = true;
	    }

	    function formatItem(item) {
	        if (doTrim) {
	            item = trim(item);
	        } else if (doLtrim) {
	            item = trimLeft(item);
	        } else if (doRtrim) {
	            item = trimRight(item);
	        }
	        return item;
	    }

	    function parseEscapedItem(str, items, cursor, hasMoreData) {
	        var depth = 0, ret = [];
	        var startPushing = false, token, i = 0, l = str.length, escapeIsEscape = ESCAPE_CHAR === ESCAPE;
	        if (l) {
	            while (cursor < l && (token = str.charAt(cursor))) {
	                if (token === ESCAPE) {
	                    if (!startPushing) {
	                        depth++;
	                        startPushing = true;
	                    } else if (escapeIsEscape && str.charAt(cursor + 1) === ESCAPE) {
	                        cursor++;
	                        ret[i++] = token;
	                    } else if (!escapeIsEscape && ret[i - 1] === ESCAPE_CHAR) {
	                        ret[i - 1] = token;
	                    } else {
	                        if (!(--depth)) {
	                            ++cursor;
	                            break;
	                        }
	                    }
	                } else {
	                    ret[i++] = token;
	                }
	                ++cursor;
	            }
	        }
	        ret = ret.join("");
	        var next = getNextToken(str, cursor),
	            nextToken = next.token;
	        if (nextToken && nextToken.search(delimiter) === 0) {
	            if (hasMoreData && (next.cursor + 1) >= l) {
	                cursor = null;
	            } else {
	                cursor++;
	            }
	        } else if (depth && !nextToken) {
	            if (hasMoreData) {
	                cursor = null;
	            } else {
	                throw new Error("Parse Error: expected: '" + ESCAPE + "' got: '" + nextToken + "'. at '" + str.substr(cursor).replace(/[r\n]/g, "\\n" + "'"));
	            }
	        } else if ((!depth && nextToken && nextToken.search(SEARCH_REGEXP) === -1)) {
	            throw new Error("Parse Error: expected: '" + ESCAPE + "' got: '" + nextToken + "'. at '" + str.substr(cursor, 10).replace(/[\r\n]/g, "\\n" + "'"));
	        } else if (hasMoreData && (!nextToken || !ROW_DELIMITER.test(nextToken))) {
	            cursor = null;
	        }
	        if (cursor !== null) {
	            items.push(formatItem(ret));
	        }
	        return cursor;
	    }

	    function parseCommentLine(line, cursor, hasMoreData) {
	        var nextIndex = line.substr(cursor).search(ROW_DELIMITER);
	        if (nextIndex === -1) {
	            if (hasMoreData) {
	                nextIndex = null;
	            } else {
	                nextIndex = line.length + 1;
	            }
	        } else {
	            nextIndex = (cursor + nextIndex) + 1; //go past the next line break
	        }
	        return nextIndex;
	    }

	    function parseItem(line, items, cursor, hasMoreData) {
	        var searchStr = line.substr(cursor),
	            nextIndex = searchStr.search(SEARCH_REGEXP);
	        if (nextIndex === -1) {
	            if (!VALUE_REGEXP.test(searchStr)) {
	                throw new Error("Parse Error: delimiter '" + delimiter + "' not found at '" + searchStr.replace(/\n/g, "\\n" + "'"));
	            } else {
	                nextIndex = searchStr.length;
	            }
	        }
	        var nextChar = searchStr.charAt(nextIndex);
	        if (nextChar.search(delimiter) !== -1) {
	            if (hasMoreData && (cursor + (nextIndex + 1) >= line.length)) {
	                cursor = null;
	            } else {
	                items.push(formatItem(searchStr.substr(0, nextIndex)));
	                cursor += nextIndex + 1;

	                var cursorChar = line.charAt(cursor);
	                // if ends with a delimiter, append an empty element, unless strict column handling
	                if (!options.strictColumnHandling && (ROW_DELIMITER.test(cursorChar) || cursor >= line.length)) {
	                    items.push('');
	                }
	                // if ends with empty space that is not a delimiter, append an empty space, unless strict column handling
	                if (!options.strictColumnHandling && SPACE_CHAR_REGEX.test(cursorChar) && !hasMoreData) {
	                    items.push(cursorChar);
	                }
	            }
	        } else if (ROW_DELIMITER.test(nextChar)) {
	            items.push(formatItem(searchStr.substr(0, nextIndex)));
	            cursor += nextIndex;
	        } else if (!hasMoreData) {
	            items.push(formatItem(searchStr.substr(0, nextIndex)));
	            cursor += nextIndex + 1;
	        } else {
	            cursor = null;
	        }

	        return cursor;
	    }

	    function getNextToken(line, cursor) {
	        var token, tokenLen, nextIndex, subStr = line.substr(cursor);
	        if ((nextIndex = subStr.search(NEXT_TOKEN_REGEXP)) !== -1) {
	            tokenLen = subStr.match(NEXT_TOKEN_REGEXP)[1].length;
	            token = line.substr(cursor + nextIndex, tokenLen);
	            cursor += nextIndex + tokenLen - 1;
	        }
	        return {token: token, cursor: cursor};
	    }

	    return function parseLine(line, hasMoreData) {
	        var i = 0, l = line.length, rows = [], items = [], token, nextToken, cursor, lastLineI = 0;
	        while (i < l) {
	            nextToken = getNextToken(line, i);
	            token = nextToken.token;
	            if (isUndefinedOrNull(token)) {
	                i = lastLineI;
	                cursor = null;
	                break;
	            } else if (ROW_DELIMITER.test(token)) {
	                i = nextToken.cursor + 1;
	                if (i < l) {
	                    rows.push(items);
	                    items = [];
	                    lastLineI = i;
	                } else {
	                    // if ends with CR and there is more data, keep unparsed due to possible coming LF in CRLF
	                    if (token === '\r' && hasMoreData) {
	                        i = lastLineI;
	                        cursor = null;
	                    }
	                    break;
	                }
	            } else if (hasComments && token === COMMENT) {
	                cursor = parseCommentLine(line, i, hasMoreData);
	                if (cursor === null) {
	                    i = lastLineI;
	                    break;
	                } else if (cursor < l) {
	                    lastLineI = i = cursor;
	                } else {
	                    i = cursor;
	                    cursor = null;
	                    break;
	                }
	            } else {
	                if (token === ESCAPE) {
	                    cursor = parseEscapedItem(line, items, nextToken.cursor, hasMoreData);
	                } else {
	                    cursor = parseItem(line, items, i, hasMoreData);
	                }
	                if (cursor === null) {
	                    i = lastLineI;
	                    break;
	                } else {
	                    i = cursor;
	                }
	            }

	        }
	        cursor !== null && rows.push(items);
	        return {line: line.substr(i), rows: rows};
	    };

	}
	module.exports = createParser;


/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var fs = __webpack_require__(383),
	    extended = __webpack_require__(385),
	    escape = extended.escape,
	    stream = __webpack_require__(401),
	    LINE_BREAK = extended.LINE_BREAK,
	    CsvTransformStream = __webpack_require__(421);


	function createWriteStream(options) {
	    return new CsvTransformStream(options);
	}

	function write(arr, options, ws) {
	    var csvStream = createWriteStream(options), i = -1, l = arr.length;
	    extended.asyncEach(arr, function (item, cb) {
	        csvStream.write(item, null, cb);
	    }, function (err) {
	        if (err) {
	            csvStream.emit("error", err);
	        } else {
	            csvStream.end();
	        }
	    });
	    return csvStream;
	}

	function writeToStream(ws, arr, options) {
	    return write(arr, options).pipe(ws);
	}

	function writeToString(arr, options, cb) {
	    if (extended.isFunction(options)) {
	        cb = options;
	        options = {};
	    }
	    var ws = new stream.Writable(), written = [];
	    ws._write = function (data, enc, cb) {
	        written.push(data + "");
	        cb();
	    };
	    ws
	        .on("error", cb)
	        .on("finish", function () {
	            cb(null, written.join(""));
	        });
	    write(arr, options).pipe(ws);
	}


	function writeToBuffer(arr, options, cb) {
	    if (extended.isFunction(options)) {
	        cb = options;
	        options = {};
	    }
	    var ws = new stream.Writable(), buffers = [], l = 0;
	    ws._write = function (data, enc, cb) {
	        buffers.push(data);
	        l++;
	        cb();
	    };
	    ws
	        .on("error", cb)
	        .on("finish", function () {
	            cb(null, Buffer.concat(buffers));
	        });
	    write(arr, options).pipe(ws);
	}

	function writeToPath(path, arr, options) {
	    var stream = fs.createWriteStream(path, {encoding: "utf8"});
	    return write(arr, options).pipe(stream);
	}

	createWriteStream.writeToBuffer = writeToBuffer;
	createWriteStream.write = write;
	createWriteStream.createWriteStream = createWriteStream;
	createWriteStream.writeToString = writeToString;
	createWriteStream.writeToPath = writeToPath;
	createWriteStream.writeToStream = writeToStream;
	module.exports = createWriteStream;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(202).Buffer))

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var fs = __webpack_require__(383),
	    util = __webpack_require__(213),
	    extended = __webpack_require__(385),
	    escape = extended.escape,
	    isArray = extended.isArray,
	    has = extended.has,
	    stream = __webpack_require__(401),
	    Transform = stream.Transform,
	    LINE_BREAK = extended.LINE_BREAK,
	    formatter = __webpack_require__(422),
	    createFormatter = formatter.createFormatter,
	    checkHeaders = formatter.checkHeaders,
	    transformItem = formatter.transformItem,
	    defaultTransform = formatter.defaultTransform;

	function CsvTransformStream(options) {
	    options = options || {};
	    options.objectMode = true;

	    if (has(options, "transform")) {
	        // remove so its not set to _transform in Transform constructor
	        options.consumerTransform = options.transform;
	        delete options.transform;
	    }

	    Transform.call(this, options);
	    this.formatter = createFormatter(options, this);
	    this.rowDelimiter = options.rowDelimiter || "\n";
	    var hasHeaders = has(options, "headers") ? !!options.headers : null,
	        headers = (hasHeaders && isArray(options.headers)) ? options.headers : null;
	    this.hasHeaders = hasHeaders;
	    this.headers = headers;
	    if (hasHeaders) {
	        if (headers) {
	            this.parsedHeaders = true;
	            this.headersLength = headers.length;
	        } else {
	            this.parsedHeaders = false;
	        }
	    }
	    this.hasWrittenHeaders = hasHeaders ? false : true;
	    this.includeEndRowDelimiter = !!options.includeEndRowDelimiter,
	    has(options, "consumerTransform") && this.transform(options.consumerTransform);
	}
	util.inherits(CsvTransformStream, Transform);

	extended(CsvTransformStream).extend({

	    headers: null,

	    headersLength: 0,

	    totalCount: 0,

	    _transform: function (item, encoding, cb) {
	        var self = this;
	        this.__transform(item, function (err, item) {
	            if (err) {
	                cb(err);
	            } else {
	                if (checkHeaders(self, item)) {
	                    self.push(new Buffer(transformItem(self, item), "utf8"));
	                }
	                cb();
	            }
	        });
	    },

	    __transform: defaultTransform,

	    transform: function (cb) {
	        if (!extended.isFunction(cb)) {
	            this.emit("error", new TypeError("fast-csv.FormatterStream#transform requires a function"));
	        }
	        if (cb.length === 2) {
	            this.__transform = cb;
	        } else {
	            this.__transform = function (data, next) {
	                next(null, cb(data));
	            };
	        }
	        return this;
	    },

	    _flush: function (cb) {
	        if (this.includeEndRowDelimiter) {
	            this.push(this.rowDelimiter);
	        }
	        cb();
	    }
	});

	module.exports = CsvTransformStream;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(202).Buffer))

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var fs = __webpack_require__(383),
	    extended = __webpack_require__(385),
	    has = extended.has,
	    isBoolean = extended.isBoolean,
	    isUndefinedOrNull = extended.isUndefinedOrNull,
	    escape = extended.escape,
	    isArray = extended.isArray,
	    keys = extended.keys,
	    stream = __webpack_require__(401),
	    LINE_BREAK = extended.LINE_BREAK;

	function createQuoteChecker(stream, quoteColumns, quoteHeaders) {
	    var shouldQuote;
	    if (isBoolean(quoteColumns)) {
	        if (isBoolean(quoteHeaders)) {
	            shouldQuote = function shouldQuote(index, isHeader) {
	                return (isHeader ? quoteHeaders : quoteColumns);
	            };
	        } else if (isArray(quoteHeaders)) {
	            shouldQuote = function shouldQuote(index, isHeader) {
	                return isHeader ? quoteHeaders[index] : quoteColumns;
	            };
	        } else {
	            shouldQuote = function shouldQuote(index, isHeader) {
	                return isHeader ? quoteHeaders[stream.headers[index]] : quoteColumns;
	            };
	        }
	    } else if (isArray(quoteColumns)) {
	        if (isBoolean(quoteHeaders)) {
	            shouldQuote = function shouldQuote(index, isHeader) {
	                return isHeader ? quoteHeaders : quoteColumns[index];
	            };
	        } else {
	            shouldQuote = function shouldQuote(index, isHeader) {
	                return isHeader ? quoteHeaders[index] : quoteColumns[index];
	            };
	        }
	    } else {
	        if (isBoolean(quoteHeaders)) {
	            shouldQuote = function shouldQuote(index, isHeader) {
	                return isHeader ? quoteHeaders : quoteColumns[stream.headers[index]];
	            };
	        } else {
	            shouldQuote = function shouldQuote(index, isHeader) {
	                return isHeader ? quoteHeaders[stream.headers[index]] : quoteColumns[stream.headers[index]];
	            };
	        }
	    }
	    return shouldQuote;
	}

	function createFormatter(options, stream) {
	    options = options || {};
	    var delimiter = options.delimiter || ",",
	        ESCAPE_REGEXP = new RegExp("[" + delimiter + escape(options.rowDelimiter || LINE_BREAK) + "']"),
	        QUOTE = options.quote || '"',
	        ESCAPE = options.escape || '"',
	        REPLACE_REGEXP = new RegExp(QUOTE, "g"),
	        quoteColumns = has(options, "quoteColumns") ? options.quoteColumns : false,
	        quoteHeaders = has(options, "quoteHeaders") ? options.quoteHeaders : quoteColumns,
	        shouldQuote = createQuoteChecker(stream, quoteColumns, quoteHeaders);


	    function escapeField(field, index, isHeader) {
	        var escape;
	        field = field.replace(/\0/g, '');
	        if ((escape = field.indexOf(QUOTE) !== -1)) {
	            field = field.replace(REPLACE_REGEXP, ESCAPE + QUOTE);
	            escape = true;
	        } else {
	            escape = field.search(ESCAPE_REGEXP) !== -1;
	        }
	        escape = escape || shouldQuote(index, isHeader);
	        if (escape) {
	            field = [QUOTE + field + QUOTE];
	        } else {
	            field = [field];
	        }
	        return field.join("");
	    }

	    return function escapeFields(fields, isHeader) {
	        var i = -1, l = fields.length, ret = [], field;
	        while (++i < l) {
	            field = fields[i];
	            field = (isUndefinedOrNull(field) ? "" : field) + "";
	            ret.push(escapeField(field, i, isHeader));
	        }
	        return ret.join(delimiter);
	    };
	}

	function defaultTransform(row, cb) {
	    return cb(null, row);
	}


	function isHashArray(arr) {
	    return isArray(arr) && isArray(arr[0]) && arr[0].length === 2;
	}

	//get headers from a row item
	function gatherHeaders(item) {
	    var ret, i, l;
	    if (isHashArray(item)) {
	        //lets assume a multidimesional array with item 0 bing the title
	        i = -1;
	        l = item.length;
	        ret = [];
	        while (++i < l) {
	            ret[i] = item[i][0];
	        }
	    } else if (isArray(item)) {
	        ret = item;
	    } else {
	        ret = keys(item);
	    }
	    return ret;
	}

	//check if we need to write header return true if we should also write a row
	//could be false if headers is true and the header row(first item) is passed in
	function checkHeaders(stream, item) {
	    var headers, ret = true;
	    if (!stream.parsedHeaders) {
	        stream.parsedHeaders = true;
	        headers = stream.headers = gatherHeaders(item);
	        stream.headersLength = headers.length;
	    }
	    if (!stream.hasWrittenHeaders) {
	        stream.totalCount++;
	        stream.push(new Buffer(stream.formatter(stream.headers, true), "utf8"));
	        stream.hasWrittenHeaders = true;
	        ret = isHashArray(item) || !isArray(item);
	    }
	    return ret;
	}

	//transform an object into a CSV row
	function transformHashData(stream, item) {
	    var vals = [], row = [], headers = stream.headers, i = -1, headersLength = stream.headersLength;
	    if (stream.totalCount++) {
	        row.push(stream.rowDelimiter);
	    }
	    while (++i < headersLength) {
	        vals[i] = item[headers[i]];
	    }
	    row.push(stream.formatter(vals));
	    return row.join("");
	}

	//transform an array into a CSV row
	function transformArrayData(stream, item, cb) {
	    var row = [];
	    if (stream.totalCount++) {
	        row.push(stream.rowDelimiter);
	    }
	    row.push(stream.formatter(item));
	    return row.join("");
	}

	//transform an array of two item arrays into a CSV row
	function transformHashArrayData(stream, item) {
	    var vals = [], row = [], i = -1, headersLength = stream.headersLength;
	    if (stream.totalCount++) {
	        row.push(stream.rowDelimiter);
	    }
	    while (++i < headersLength) {
	        vals[i] = item[i][1];
	    }
	    row.push(stream.formatter(vals));
	    return row.join("");
	}

	//wrapper to determin what transform to run
	function transformItem(stream, item) {
	    var ret;
	    if (isArray(item)) {
	        if (isHashArray(item)) {
	            ret = transformHashArrayData(stream, item);
	        } else {
	            ret = transformArrayData(stream, item);
	        }
	    } else {
	        ret = transformHashData(stream, item);
	    }
	    return ret;
	}

	exports.createFormatter = createFormatter;
	exports.transformItem = transformItem;
	exports.checkHeaders = checkHeaders;
	exports.defaultTransform = defaultTransform;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(202).Buffer))

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * ReColNat basket receiver and display component.
	 *
	 * Created by dmitri on 11/01/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _BasketItem = __webpack_require__(424);

	var _BasketItem2 = _interopRequireDefault(_BasketItem);

	var _actionsBasketActions = __webpack_require__(425);

	var _actionsBasketActions2 = _interopRequireDefault(_actionsBasketActions);

	var Basket = (function (_React$Component) {
	  _inherits(Basket, _React$Component);

	  function Basket(props) {
	    var _this = this;

	    _classCallCheck(this, Basket);

	    _get(Object.getPrototypeOf(Basket.prototype), 'constructor', this).call(this, props);

	    this.basketContainerStyle = {
	      minHeight: '50%',
	      maxHeight: '50%',
	      width: '100%',
	      overflowY: 'auto',
	      overflowX: 'hidden'
	    };

	    this.cardRowStyle = {
	      display: 'flex',
	      flexDirection: 'row',
	      maxHeight: '250px',
	      margin: '5px 0 5px 0',
	      overflowY: 'auto',
	      overflowX: 'auto'
	    };

	    this.state = {
	      basketItems: []
	    };

	    this._onBasketUpdate = function () {
	      var setBasket = function setBasket() {
	        return _this.setState({ basketItems: _this.props.basketstore.getBasket() });
	      };
	      setBasket.apply(_this);
	    };
	  }

	  _createClass(Basket, [{
	    key: 'reloadBasket',
	    value: function reloadBasket() {
	      window.setTimeout(_actionsBasketActions2['default'].reloadBasket, 10);
	    }
	  }, {
	    key: 'getBasketStateText',
	    value: function getBasketStateText() {
	      if (this.state.basketItems.length == 0) {
	        return this.props.userstore.getText('basketEmpty');
	      } else {
	        return this.props.userstore.getText('countImagesInBasket') + ' ' + this.state.basketItems.length;
	      }
	    }
	  }, {
	    key: 'toggleSelectionAll',
	    value: function toggleSelectionAll() {
	      if (this.props.basketstore.getBasketSelection().length === this.props.basketstore.getBasket().length) {
	        // Unselect all
	        window.setTimeout(_actionsBasketActions2['default'].changeBasketSelectionState.bind(null, null, false), 10);
	      } else {
	        // Select all
	        window.setTimeout(_actionsBasketActions2['default'].changeBasketSelectionState.bind(null, null, true), 10);
	      }
	    }
	  }, {
	    key: 'scrollHorizontal',
	    value: function scrollHorizontal(event) {
	      event.preventDefault();
	      var node = this.refs.cards.getDOMNode();
	      node.scrollLeft = node.scrollLeft + event.deltaY;
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.basketstore.addBasketUpdateListener(this._onBasketUpdate);
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (this.props.basketstore.getBasketSelection().length == this.props.basketstore.getBasket().length) {
	        nextState.checkbox = 'checkmark box';
	      } else {
	        nextState.checkbox = 'square outline';
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.basketItems.length > 0) {
	        $('.basketItem .image', this.refs.cards.getDOMNode()).dimmer({
	          on: 'hover',
	          opacity: 0.2
	        });
	        $('.ui.button', this.refs.buttons.getDOMNode()).popup({ delay: { show: 1000, hide: 0 } });
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.basketstore.removeBasketUpdateListener(this._onBasketUpdate);
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var self = this;
	      return _react2['default'].createElement(
	        'div',
	        { style: this.basketContainerStyle },
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui buttons', ref: 'buttons' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui button',
	              onClick: this.reloadBasket.bind(this),
	              'data-content': this.props.userstore.getText('updateBasket') },
	            _react2['default'].createElement('i', { className: 'refresh icon' })
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui button',
	              onClick: this.toggleSelectionAll.bind(this),
	              'data-content': this.props.userstore.getText('selectUnselectAll') },
	            _react2['default'].createElement('i', { className: this.state.checkbox + ' icon' })
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui disabled button' },
	            this.getBasketStateText()
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { ref: 'cards', style: this.cardRowStyle, onWheel: this.scrollHorizontal.bind(this) },
	          this.state.basketItems.map(function (item, idx) {
	            return _react2['default'].createElement(_BasketItem2['default'], { content: item, key: 'EXPLORE-BASKET-ITEM-' + item.id,
	              userstore: self.props.userstore,
	              basketstore: self.props.basketstore });
	          })
	        )
	      );
	    }
	  }]);

	  return Basket;
	})(_react2['default'].Component);

	exports['default'] = Basket;

	//<div
	//  className={'ui button ' + this.state.previousPageActive}
	//  onClick={this.setOffset.bind(this, this.state.offset-this.state.displaySize)}>
	//  <i className='angle left icon' />
	//</div>
	//<div
	//className={'ui button' + this.state.nextPageActive}
	//onClick={this.setOffset.bind(this, this.state.offset+this.state.displaySize)}>
	//<i className='angle right icon' />
	//  </div>

	//
	//[
	//  {
	//    "id":"398A219F9AFE4E07BE658D263A56A7D3",
	//    "domaine":"botanique",
	//    "image":
	//      [{
	//        "id":"1FC409720DD744E3A7BC1A1281D7FF42",
	//        "url":"http://sonneratphoto.mnhn.fr/2012/11/05/4/P06844472.jpg",
	//        "thumburl":"http://imager.mnhn.fr/imager2/v25/2012/11/05/4/P06844472.jpg",
	//        "copyright":{}
	//      }],
	//    "scientificname":"Ficus fistulosa",
	//    "catalognumber":"P06844472",
	//    "recordedby":null,
	//    "fieldnumber":null
	//  },
	//  {
	//    "id":"BC535B7B6A4541D296F133C2F4746DD1",
	//    "domaine":"botanique",
	//    "image":
	//      [{
	//        "id":"67B5B26D2AA34E12A507642C0C90A67C",
	//        "url":"http://sonneratphoto.mnhn.fr/2012/11/12/6/P06879228.jpg",
	//        "thumburl":"http://imager.mnhn.fr/imager2/v25/2012/11/12/6/P06879228.jpg",
	//        "copyright":{}
	//      },
	//        {
	//          "id":"A919BC56738048D7A1E1407AA551A1F1",
	//          "url":"http://dsiphoto.mnhn.fr/sonnera2/LAPI/leafS/S20130627/P06879228.jpg",
	//          "thumburl":"http://imager.mnhn.fr/imager/v25/sonnera2/LAPI/leafS/S20130627/P06879228.jpg",
	//          "copyright":
	//          {
	//            "creator":"Paris, Museum National d'Histoire Naturelle, VDa"
	//          }
	//        }],
	//    "scientificname":"Ficus nervosa",
	//    "catalognumber":"P06879228",
	//    "recordedby":"Poilane, E.",
	//    "fieldnumber":"7905"},
	//  {
	//    "id":"529C978C5DEF428D867DC10512751CE7",
	//    "domaine":"botanique",
	//    "image":
	//      [{
	//        "id":"884D1A5A3FE048FD93B0AB4C3B0B211A",
	//        "url":"http://sonneratphoto.mnhn.fr/2012/11/09/11/P06875744.jpg",
	//        "thumburl":"http://imager.mnhn.fr/imager2/v25/2012/11/09/11/P06875744.jpg",
	//        "copyright":{}},
	//        {
	//          "id":"58BC916895FB4167914A30074E214412",
	//          "url":"http://dsiphoto.mnhn.fr/sonnera2/LAPI/leafS/S20130627/P06875744.jpg",
	//          "thumburl":"http://imager.mnhn.fr/imager/v25/sonnera2/LAPI/leafS/S20130627/P06875744.jpg",
	//          "copyright":
	//          {
	//            "creator":"Paris, Museum National d'Histoire Naturelle, VDa"
	//          }
	//        },
	//        {
	//          "id":"2F6E1DE763B64057ABD297179A8B6414",
	//          "url":"http://dsiphoto.mnhn.fr/sonnera2/LAPI/scanR/R20130424/P06875744.jpg",
	//          "thumburl":"http://imager.mnhn.fr/imager/v25/sonnera2/LAPI/scanR/R20130424/P06875744.jpg",
	//          "copyright":
	//          {
	//            "creator":"Paris, Muséum National d'Histoire Naturelle, EL"
	//          }
	//        }],
	//    "scientificname":"Ficus nervosa",
	//    "catalognumber":"P06875744",
	//    "recordedby":"Poilane, E.",
	//    "fieldnumber":"7849"}
	//]
	module.exports = exports['default'];

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Item (image) in the ReColNat basket.
	 *
	 * Created by dmitri on 19/01/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _actionsBasketActions = __webpack_require__(425);

	var _actionsBasketActions2 = _interopRequireDefault(_actionsBasketActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _imagesImageNotFoundPng = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../../images/image-not-found.png\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesImageNotFoundPng2 = _interopRequireDefault(_imagesImageNotFoundPng);

	var BasketItem = (function (_React$Component) {
	  _inherits(BasketItem, _React$Component);

	  function BasketItem(props) {
	    _classCallCheck(this, BasketItem);

	    _get(Object.getPrototypeOf(BasketItem.prototype), 'constructor', this).call(this, props);

	    this.cardStyle = {
	      position: 'relative',
	      height: '150px',
	      width: '100px',
	      margin: '10px'
	    };

	    this.floatDownLeftStyle = {
	      position: 'absolute',
	      left: 0,
	      bottom: 0
	    };

	    this.floatDownMiddleStyle = {
	      position: 'absolute',
	      left: '35px',
	      bottom: 0
	    };

	    this.floatDownRightStyle = {
	      position: 'absolute',
	      left: '67px',
	      bottom: 0
	    };

	    this.imageStyle = {
	      height: '150px',
	      width: '100px'
	    };

	    this.checkboxStyle = {
	      position: 'absolute',
	      top: '5px',
	      left: '5px'
	    };

	    this.labelStyle = {
	      paddingLeft: '20px'
	    };

	    this.state = {
	      isSelected: props.basketstore.isInBasketSelection(props.content.id),
	      modalSrc: null,
	      thumbnail: null
	    };
	  }

	  //<div className='ui blue compact icon circular button' style={this.floatDownMiddleStyle} onClick={this.viewFullSizeModal.bind(this)}>
	  //  <i className='eye icon' />
	  //</div>

	  _createClass(BasketItem, [{
	    key: 'viewFullSizeModal',
	    value: function viewFullSizeModal() {}
	  }, {
	    key: 'imageLoaded',
	    value: function imageLoaded(image) {
	      this.setState({ thumbnail: image.src });
	    }
	  }, {
	    key: 'changeSelected',
	    value: function changeSelected() {
	      _actionsBasketActions2['default'].changeBasketSelectionState(this.props.content.id, !this.state.isSelected);
	    }
	  }, {
	    key: 'removeSelfFromBasket',
	    value: function removeSelfFromBasket() {
	      _actionsBasketActions2['default'].removeItemFromBasket(this.props.content.id);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var src = BasketItem.itemSourceImage(this.props.content);
	      _actionsViewActions2['default'].loadImage(src, this.imageLoaded.bind(this));
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      nextState.isSelected = nextProps.basketstore.isInBasketSelection(nextProps.content.id);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {}
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { className: 'basketItem', key: 'BASKET-THUMB-' + this.props.content.id, style: this.cardStyle },
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui small modal', ref: 'loadingModal' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'header' },
	            this.props.content.scientificname
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'content' },
	            _react2['default'].createElement(
	              'div',
	              { className: 'description' },
	              _react2['default'].createElement(
	                'div',
	                { className: 'ui segment' },
	                _react2['default'].createElement(
	                  'div',
	                  { className: 'ui active inverted dimmer' },
	                  _react2['default'].createElement(
	                    'div',
	                    { className: 'ui text loader' },
	                    this.props.userstore.getText('loading')
	                  )
	                )
	              )
	            )
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'ui modal', ref: 'imageModal' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'header' },
	            this.props.content.scientificname
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'content' },
	            _react2['default'].createElement(
	              'div',
	              { className: 'description' },
	              _react2['default'].createElement('img', { className: 'ui image', ref: 'image', src: null, alt: this.props.userstore.getText('imageUnavailable') })
	            )
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'dimmable image' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui inverted dimmer' },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui content' },
	              _react2['default'].createElement(
	                'div',
	                { className: 'ui top attached blue label', style: this.labelStyle },
	                _react2['default'].createElement('input', { className: 'ui checkbox', style: this.checkboxStyle, type: 'checkbox', checked: this.state.isSelected, onChange: this.changeSelected.bind(this) }),
	                this.props.content.scientificname
	              ),
	              _react2['default'].createElement(
	                'div',
	                { className: 'ui red compact icon circular button',
	                  style: this.floatDownRightStyle,
	                  onClick: this.removeSelfFromBasket.bind(this) },
	                _react2['default'].createElement('i', { className: 'trash icon' })
	              )
	            )
	          ),
	          _react2['default'].createElement('input', { className: 'ui checkbox', style: this.checkboxStyle, type: 'checkbox', checked: this.state.isSelected, onChange: this.changeSelected.bind(this) }),
	          _react2['default'].createElement('img', { src: this.state.thumbnail, style: this.imageStyle })
	        )
	      );
	    }
	  }], [{
	    key: 'itemSourceImage',
	    value: function itemSourceImage(item) {
	      if (item.image && item.image.length > 0) {
	        if (item.image[0].thumburl) {
	          return item.image[0].thumburl;
	        } else {
	          return item.image[0].url;
	        }
	      } else {
	        return _imagesImageNotFoundPng2['default'];
	      }
	    }
	  }]);

	  return BasketItem;
	})(_react2['default'].Component);

	exports['default'] = BasketItem;
	module.exports = exports['default'];

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by dmitri on 22/06/16.
	 *
	 * Constants for Explore basket actions.
	 */
	'use strict';

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsBasketConstants = __webpack_require__(426);

	var _constantsBasketConstants2 = _interopRequireDefault(_constantsBasketConstants);

	exports['default'] = {
	  reloadBasket: function reloadBasket() {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsBasketConstants2['default'].ActionTypes.RELOAD_BASKET
	    });
	  },

	  changeBasketSelectionState: function changeBasketSelectionState(id, state) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsBasketConstants2['default'].ActionTypes.BASKET_CHANGE_SELECTION,
	      id: id,
	      selected: state
	    });
	  },

	  setBasket: function setBasket(basket) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsBasketConstants2['default'].ActionTypes.SET_BASKET,
	      basket: basket
	    });
	  },

	  removeItemFromBasket: function removeItemFromBasket(id) {
	    _dispatcherAppDispatcher2['default'].dispatch({
	      actionType: _constantsBasketConstants2['default'].ActionTypes.BASKET_REMOVE_ITEM,
	      item: id
	    });
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 426 */
/***/ function(module, exports) {

	/**
	 * Constants for the ReColNat basket.
	 *
	 * Created by dmitri on 22/06/16.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  ActionTypes: {
	    RELOAD_BASKET: 'RELOAD_BASKET',
	    BASKET_CHANGE_SELECTION: 'MANAGER_BASKET_CHANGE_SELECTION',
	    SET_BASKET: 'MANAGER_SET_BASKET',
	    BASKET_REMOVE_ITEM: 'MANAGER_BASKET_REMOVE_ITEM'
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 427 */,
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by dmitri on 24/11/16.
	 */
	'use strict';

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _actionsBasketActions = __webpack_require__(425);

	var _actionsBasketActions2 = _interopRequireDefault(_actionsBasketActions);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _actionsInspectorActions = __webpack_require__(251);

	var _actionsInspectorActions2 = _interopRequireDefault(_actionsInspectorActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _ServiceMethods = __webpack_require__(237);

	var _ServiceMethods2 = _interopRequireDefault(_ServiceMethods);

	var SetCreator = (function () {
	  /**
	   *
	   * @param setProps {name, parent, setId}, if setId is null then a new set will be created using name and parent
	   * @param images an array of {source, ...} where source can be 'recolnat' or 'web'; if 'recolnat' then the other properties must be name, recolnatSpecimenUuid, images, if 'web' then must be name, url
	   * @param placeInView boolean
	   */

	  function SetCreator(setProps, images, placeInView, keepInBasket, benchstore, viewstore, userstore) {
	    _classCallCheck(this, SetCreator);

	    console.log(JSON.stringify(setProps));
	    console.log(JSON.stringify(images));
	    console.log(JSON.stringify(placeInView));
	    console.log(JSON.stringify(keepInBasket));

	    this.newSetName = setProps.name;
	    this.newSetParent = setProps.parent;
	    this.setToImportIntoId = setProps.setId;

	    this.dataToImport = images;
	    this.importedEntities = [];

	    this.placeInView = placeInView;
	    this.keepInBasket = keepInBasket;

	    this.imageImportSuccess = 0;
	    this.imageImportError = 0;

	    this.imagesToPlace = 0;
	    this.imagePlaceSuccess = 0;
	    this.imagePlaceError = 0;

	    this.benchstore = benchstore;
	    this.viewstore = viewstore;
	    this.userstore = userstore;
	  }

	  _createClass(SetCreator, [{
	    key: 'createSet',
	    value: function createSet() {
	      window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, this.userstore.getText('creatingSet') + " " + this.newSetName), 10);
	      _ServiceMethods2['default'].createSet(this.newSetName, this.newSetParent, this.setCreated.bind(this));
	    }
	  }, {
	    key: 'setCreated',
	    value: function setCreated(msg) {
	      if (msg.clientProcessError) {
	        alert(this.userstore.getInterpolatedText('errorCreatingSet', [this.newSetName]));
	        window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, null), 10);
	      } else {
	        if (this.dataToImport.length > 0) {
	          window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, this.userstore.getText('createdSet')), 10);
	          window.setTimeout(_actionsManagerActions2['default'].select.bind(null, msg.data.subSet, 'Set', this.newSetName, msg.data.parentSet, msg.data.link), 10);
	          window.setTimeout(_actionsManagerActions2['default'].selectEntityInSetById.bind(null, msg.data.parentSet, msg.data.subSet), 10);
	          window.setTimeout(_actionsInspectorActions2['default'].setInspectorData.bind(null, [msg.data.subSet]), 10);

	          this.setToImportIntoId = msg.data.subSet;
	          this.runImport();
	        } else {
	          window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, null), 10);
	        }
	      }
	    }
	  }, {
	    key: 'imageImported',
	    value: function imageImported(msg) {
	      if (msg.clientProcessError) {
	        this.imageImportError++;
	        alert(this.userstore.getInterpolatedText('failedToImportImage', [JSON.stringify(msg)]));
	      } else {
	        this.imageImportSuccess++;
	        this.importedEntities.push(msg.data.image);
	        if (!this.keepInBasket && msg.request.recolnatSpecimenUuid) {
	          window.setTimeout(_actionsBasketActions2['default'].removeItemFromBasket.bind(null, msg.request.recolnatSpecimenUuid), 10);
	        }
	      }

	      if (this.imageImportSuccess + this.imageImportError < this.dataToImport.length) {
	        window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, this.userstore.getInterpolatedText("importingImages", [this.imageImportSuccess, this.dataToImport.length, this.imageImportError])), 10);
	      } else {
	        if (this.placeInView) {
	          this.runPlace();
	        } else {
	          window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, null), 10);
	        }
	      }
	    }
	  }, {
	    key: 'imagePlaced',
	    value: function imagePlaced(msg) {
	      if (msg.clientProcessError) {
	        this.imagePlaceError++;
	        alert(this.userstore.getInterpolatedText('failedToPlaceImage', [JSON.stringify(msg)]));
	      } else {
	        this.imagePlaceSuccess++;
	      }
	      if (this.imagePlaceSuccess + this.imagePlaceError < this.imagesToPlace) {
	        window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, this.userstore.getInterpolatedText('placingImages', [this.imagePlaceSuccess, this.imagesToPlace, this.imagePlaceError])), 10);
	      } else {
	        window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, null), 10);
	      }
	    }
	  }, {
	    key: 'runPlace',
	    value: function runPlace() {
	      window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, this.userstore.getText('placing')), 10);
	      var viewId = this.benchstore.getActiveViewId();
	      var view = this.viewstore.getView();
	      if (!viewId || !view) {
	        console.error('Placing images with no view or no viewId provided');
	        return;
	      }

	      var x = (-view.left + view.width / 2) / view.scale;
	      var y = (-view.top + view.height / 2) / view.scale;

	      for (var i = 0; i < this.importedEntities.length; ++i) {
	        var entity = this.importedEntities[i];
	        if (entity.recolnatUuid) {
	          this.imagesToPlace += entity.images.length;
	          for (var k = 0; k < entity.images.length; ++k) {
	            var image = entity.images[k];
	            _ServiceMethods2['default'].place(viewId, image.uid, x, y, this.imagePlaced.bind(this));
	            x = x + image.width + 100;
	          }
	        } else {
	          console.log(JSON.stringify(entity));
	          this.imagesToPlace++;
	          _ServiceMethods2['default'].place(viewId, entity.uid, x, y, this.imagePlaced.bind(this));
	          x = x + entity.width + 100;
	        }
	      }
	    }
	  }, {
	    key: 'runImport',
	    value: function runImport() {
	      window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, this.userstore.getInterpolatedText('importingImages', ['', '', ''])), 10);
	      for (var i = 0; i < this.dataToImport.length; ++i) {
	        var data = this.dataToImport[i];
	        switch (data.source) {
	          case 'recolnat':
	            _ServiceMethods2['default'].importRecolnatSpecimen(this.setToImportIntoId, data.name, data.recolnatSpecimenUuid, data.images, this.imageImported.bind(this));
	            break;
	          case 'web':
	            _ServiceMethods2['default'].importExternalImage(this.setToImportIntoId, data.url, data.name, this.imageImported.bind(this));
	            break;
	          default:
	            console.error('Unknown source ' + data.source);
	            window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, null), 10);
	            return;
	        }
	      }
	    }
	  }, {
	    key: 'run',
	    value: function run() {
	      window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, this.userstore.getInterpolatedText('importingImages', ['', '', '']), 10));
	      if (this.newSetName) {
	        // Create new set
	        this.createSet();
	      } else if (this.setToImportIntoId) {
	        // Start import directly
	        this.runImport();
	      } else {
	        console.error('No parent set provided');
	        window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, null), 10);
	      }
	    }
	  }]);

	  return SetCreator;
	})();

	exports['default'] = SetCreator;
	module.exports = exports['default'];

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Organises the items in the selected set by grouping them into subsets using the name of each item as sorting criteria.
	 *
	 * Data object passed to ModalStore must contain :
	 *  - id: String UID of the Set to be sorted
	 *
	 * Created by dmitri on 25/11/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _Object$keys = __webpack_require__(285)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _AbstractModal2 = __webpack_require__(376);

	var _AbstractModal3 = _interopRequireDefault(_AbstractModal2);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _actionsModalActions = __webpack_require__(265);

	var _actionsModalActions2 = _interopRequireDefault(_actionsModalActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _utilsSetCreator = __webpack_require__(428);

	var _utilsSetCreator2 = _interopRequireDefault(_utilsSetCreator);

	var OrganiseSet = (function (_AbstractModal) {
	  _inherits(OrganiseSet, _AbstractModal);

	  function OrganiseSet(props) {
	    _classCallCheck(this, OrganiseSet);

	    _get(Object.getPrototypeOf(OrganiseSet.prototype), 'constructor', this).call(this, props);

	    this.buttonSubTextStyle = {
	      fontSize: '10px'
	    };

	    this.actionBarStyle = {
	      display: 'flex',
	      justifyContent: 'flex-end',
	      marginTop: '10px'
	    };

	    this.processingStatusStyle = {
	      display: 'none',
	      height: '200px',
	      overflow: 'auto'
	    };

	    this.optionsStyle = {
	      display: ''
	    };

	    this.state.setDisplayName = null;
	    this.state.setId = null;
	    this.state.setData = null;
	    this.state.newSets = {};
	    this.state.entities = {};
	    // 0 = not calculated, 1 = sets calculated, ready to run, 2 = running
	    this.state.phase = 0;
	    this.state.done = 0;
	    this.state.log = [];

	    this.modalName = _constantsModalConstants2['default'].Modals.organiseSet;
	  }

	  _createClass(OrganiseSet, [{
	    key: 'clearState',
	    value: function clearState(state) {
	      delete state.newSets;
	      delete state.entities;
	      state.setDisplayName = null;
	      state.setId = null;
	      state.setData = null;
	      state.newSets = {};
	      state.entities = {};
	      state.phase = 0;
	      state.done = 0;
	      state.log = [];
	    }
	  }, {
	    key: 'checkKey',
	    value: function checkKey(event) {
	      switch (event.keyCode) {
	        case 13:
	          this.create();
	          break;
	        case 27:
	          this.cancel();
	          break;
	      }
	    }
	  }, {
	    key: 'removeAllListeners',
	    value: function removeAllListeners() {
	      if (this.state.setId) {
	        this.props.metastore.removeMetadataUpdateListener(this.state.setId, this.storeSetData.bind(this));
	      }
	      var keys = _Object$keys(this.state.entities);
	      for (var i = 0; i < keys.length; ++i) {
	        var id = keys[i];
	        this.props.metastore.removeMetadataUpdateListener(id, this.receiveItem.bind(this, id));
	      }
	    }
	  }, {
	    key: 'storeSetData',
	    value: function storeSetData() {
	      if (this.state.phase === 2) {
	        return;
	      }
	      var setData = this.props.metastore.getMetadataAbout(this.state.setId);
	      if (setData) {
	        this.setState({ setData: setData, setDisplayName: setData.name });
	      }
	    }
	  }, {
	    key: 'receiveItem',
	    value: function receiveItem(id) {
	      if (this.state.phase === 2) {
	        return;
	      }
	      if (!this.state.entities[id]) {
	        console.warn('Entity no longer stored here ' + id);
	        return;
	      }
	      var meta = this.props.metastore.getMetadataAbout(id);
	      meta.link = this.state.entities[id].link;

	      var entities = JSON.parse(JSON.stringify(this.state.entities));
	      entities[id] = meta;
	      this.setState({ entities: entities });
	    }
	  }, {
	    key: 'calculateOutput',
	    value: function calculateOutput() {
	      if (!this.state.setData) {
	        alert(this.props.userstore.getText('dataUnavailableRetry'));
	        return;
	      }

	      var entities = [];
	      for (var i = 0; i < this.state.setData.items.length; ++i) {
	        entities.push(JSON.parse(JSON.stringify(this.state.entities[this.state.setData.items[i].uid])));
	      }

	      var futureSets = _.groupBy(entities, function (item) {
	        return item.name;
	      });
	      this.setState({ newSets: futureSets, phase: 1 });
	    }
	  }, {
	    key: 'run',
	    value: function run() {
	      // Unsubscribe all listeners
	      this.removeAllListeners();
	      var newSetNames = _Object$keys(this.state.newSets);
	      for (var i = 0; i < newSetNames.length; ++i) {
	        _utilsServiceMethods2['default'].createSet(newSetNames[i], this.state.setId, this.setCreated.bind(this, newSetNames[i]));
	      }
	      this.setState({ phase: 2 });
	    }
	  }, {
	    key: 'setCreated',
	    value: function setCreated(setName, msg) {
	      var log = JSON.parse(JSON.stringify(this.state.log));
	      var sets = JSON.parse(JSON.stringify(this.state.newSets));
	      if (msg.clientProcessError) {
	        log.push(this.props.userstore.getInterpolatedText('errorCreatingSet', [setName]));
	        delete sets[setName];
	      } else {
	        log.push(this.props.userstore.getInterpolatedText('emptySetCreated', [setName]));
	        // sets[setName].uid = msg.data.subSet;
	        sets[setName] = {
	          uid: msg.data.subSet,
	          items: sets[setName]
	        };
	      }
	      this.setState({ log: log, newSets: sets });
	    }
	  }, {
	    key: 'moveItems',
	    value: function moveItems(set) {
	      if (!set.uid) {
	        return;
	      }

	      for (var i = 0; i < set.items.length; ++i) {
	        var item = set.items[i];
	        _utilsServiceMethods2['default'].cutPaste(item.link, set.uid, this.itemMoved.bind(this, item.name, item.uid));
	      }
	    }
	  }, {
	    key: 'itemMoved',
	    value: function itemMoved(name, id, msg) {
	      var log = JSON.parse(JSON.stringify(this.state.log));
	      if (msg.clientProcessError) {
	        log.push(this.props.userstore.getInterpolatedText('errorCopyingEntity', [name, id]));
	      } else {
	        log.push(this.props.userstore.getInterpolatedText('entityCopiedToNewSet', [name, id]));
	      }
	      this.setState({ done: this.state.done + 1, log: log });
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      _get(Object.getPrototypeOf(OrganiseSet.prototype), 'componentDidMount', this).call(this);
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (!this.state.active && nextState.active) {
	        nextState.setId = this.props.modalstore.getTargetData().id;
	        if (!nextState.setId) {
	          console.error('No set id provided');
	          window.setTimeout(_actionsModalActions2['default'].showModal.bind(null, null), 10);
	        } else {
	          nextState.setData = this.props.metastore.getMetadataAbout(nextState.setId);
	          for (var i = 0; i < nextState.setData.items.length; ++i) {
	            var id = nextState.setData.items[i].uid;
	            nextState.entities[id] = this.props.metastore.getMetadataAbout(id);
	            nextState.entities[id].link = nextState.setData.items[i].link;
	          }
	          nextState.setDisplayName = nextState.setData.name;
	        }
	      }

	      if (nextState.active) {
	        if (nextState.phase === 2 && _.isUndefined(_.find(nextState.newSets, function (s) {
	          return s.uid === undefined;
	        })) && !nextState.waiting) {
	          _.each(nextState.newSets, this.moveItems, this);
	          nextState.waiting = true;
	        }
	      }

	      this.processingStatusStyle.display = nextState.phase === 2 ? '' : 'none';
	      this.actionBarStyle.display = nextState.phase === 2 ? 'none' : '';
	      this.optionsStyle.display = nextState.phase === 2 ? 'none' : '';
	      _get(Object.getPrototypeOf(OrganiseSet.prototype), 'componentWillUpdate', this).call(this, nextProps, nextState);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      if (this.state.setData) {
	        if (this.state.done === this.state.setData.items.length) {
	          window.setTimeout(_actionsModalActions2['default'].showModal.bind(null, null), 10);
	        }
	      }

	      if (!this.state.active && prevState.active) {
	        this.removeAllListeners();
	      }
	      _get(Object.getPrototypeOf(OrganiseSet.prototype), 'componentDidUpdate', this).call(this, prevProps, prevState);
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      _get(Object.getPrototypeOf(OrganiseSet.prototype), 'componentWillUnmount', this).call(this);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var self = this;
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui modal', ref: 'modal' },
	        _react2['default'].createElement('i', { className: 'close icon' }),
	        _react2['default'].createElement(
	          'div',
	          { className: 'header' },
	          this.props.userstore.getText('organiseSet')
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'content', onKeyUp: this.checkKey.bind(this) },
	          _react2['default'].createElement(
	            'div',
	            { className: 'description', style: this.optionsStyle },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui text' },
	              this.props.userstore.getInterpolatedText('organiseSetHelp0', [this.state.setDisplayName])
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui text' },
	              this.props.userstore.getText('organiseSetHelp1'),
	              ' ',
	              this.props.userstore.getText('name')
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui text' },
	              _react2['default'].createElement(
	                'div',
	                { className: 'ui orange message' },
	                this.props.userstore.getText('organiseSetHelp3')
	              ),
	              this.props.userstore.getInterpolatedText('organiseSetHelp2', [_Object$keys(this.state.newSets).length, this.state.setDisplayName]),
	              _Object$keys(this.state.newSets).map(function (newSetName, index) {
	                var setData = self.state.newSets[newSetName];
	                return _react2['default'].createElement(
	                  'div',
	                  { key: index },
	                  self.props.userstore.getInterpolatedText('organiseSetHelp4', [newSetName, setData.length])
	                );
	              })
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'description', style: this.processingStatusStyle },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui text' },
	              this.props.userstore.getText('organiseSetHelp5'),
	              ' ',
	              this.props.userstore.getText('name')
	            ),
	            this.state.log.map(function (line, index) {
	              return _react2['default'].createElement(
	                'div',
	                { className: 'ui text', key: index },
	                line
	              );
	            })
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'actions', style: this.actionBarStyle },
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui black deny button', onClick: this.cancel.bind(this) },
	              this.props.userstore.getText('cancel')
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui button' + (this.state.phase < 2 ? '' : ' disabled'),
	                onClick: this.calculateOutput.bind(this) },
	              this.props.userstore.getText('precalculate')
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: "ui positive right labeled icon button" + (this.state.phase === 1 ? '' : ' disabled'),
	                onClick: this.run.bind(this) },
	              _react2['default'].createElement(
	                'div',
	                { className: 'ui text' },
	                this.props.userstore.getText('apply')
	              ),
	              _react2['default'].createElement('i', { className: 'checkmark icon' })
	            )
	          )
	        )
	      );
	    }
	  }]);

	  return OrganiseSet;
	})(_AbstractModal3['default']);

	exports['default'] = OrganiseSet;
	module.exports = exports['default'];

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Lists image exports available for download to the user and enables the user to add the current selected set to exports.
	 *
	 * This modal does not require data to be passed to it through ModalStore.
	 *
	 * Created by dmitri on 02/12/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _AbstractModal2 = __webpack_require__(376);

	var _AbstractModal3 = _interopRequireDefault(_AbstractModal2);

	var _utilsServiceMethods = __webpack_require__(237);

	var _utilsServiceMethods2 = _interopRequireDefault(_utilsServiceMethods);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var DownloadSetImages = (function (_AbstractModal) {
	  _inherits(DownloadSetImages, _AbstractModal);

	  function DownloadSetImages(props) {
	    _classCallCheck(this, DownloadSetImages);

	    _get(Object.getPrototypeOf(DownloadSetImages.prototype), 'constructor', this).call(this, props);

	    this.modalName = _constantsModalConstants2['default'].Modals.downloadSet;

	    this.downloadsStyle = {
	      display: 'none'
	    };

	    this.scrollerStyle = {
	      height: '130px',
	      overflow: 'auto'
	    };

	    this.launchButtonStyle = {
	      display: 'none'
	    };

	    this.nothingToDownloadStyle = {
	      display: ''
	    };

	    this.clearState(this.state);
	  }

	  _createClass(DownloadSetImages, [{
	    key: 'clearState',
	    value: function clearState(state) {
	      state.setId = null;
	      state.setData = null;
	      state.downloadableFiles = [];
	    }
	  }, {
	    key: 'checkKey',
	    value: function checkKey(event) {
	      switch (event.keyCode) {
	        case 13:
	          this.run();
	          break;
	        case 27:
	          this.cancel();
	          break;
	      }
	    }
	  }, {
	    key: 'userDownloadsReceived',
	    value: function userDownloadsReceived(msg) {
	      if (msg.clientProcessError) {
	        alert(this.props.userstore.getText('errorGettingDownloadList'));
	        return;
	      }
	      var files = [];
	      console.log(JSON.stringify(msg.data));
	      for (var i = 0; i < msg.data.files.length; ++i) {
	        files.push({
	          fileName: msg.data.files[i],
	          url: _confApplicationConfiguration2['default'].services.downloadsBaseURL + msg.data.files[i]
	        });
	      }

	      this.setState({ downloadableFiles: files });
	    }
	  }, {
	    key: 'run',
	    value: function run() {
	      _utilsServiceMethods2['default'].prepareSetDownload(this.state.setId);
	      this.cancel();
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      _get(Object.getPrototypeOf(DownloadSetImages.prototype), 'componentWillUpdate', this).call(this, nextProps, nextState);
	      if (!this.state.active && nextState.active) {
	        nextState.setId = nextProps.benchstore.getActiveSetId();
	        // Get set data
	        nextState.setData = nextProps.metastore.getMetadataAbout(nextState.setId);
	        nextProps.metastore.listUserDownloads(this.userDownloadsReceived.bind(this));
	      }

	      if (nextProps.benchstore.getActiveSetId()) {
	        this.downloadsStyle.display = '';
	        this.launchButtonStyle.display = '';
	        this.nothingToDownloadStyle.display = 'none';
	      } else {
	        this.downloadsStyle.display = 'none';
	        this.launchButtonStyle.display = 'none';
	        this.nothingToDownloadStyle.display = '';
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      //console.log('rendering confirm delete');
	      return _react2['default'].createElement(
	        'div',
	        { className: 'ui small modal', ref: 'modal' },
	        _react2['default'].createElement('i', { className: 'close icon' }),
	        _react2['default'].createElement(
	          'div',
	          { className: 'header' },
	          this.props.userstore.getText('downloadSetImages')
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'content', onKeyUp: this.checkKey.bind(this) },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui message' },
	            _react2['default'].createElement(
	              'p',
	              null,
	              this.props.userstore.getText('downloadSetImagesHelp0')
	            ),
	            _react2['default'].createElement(
	              'div',
	              { className: 'ui divided list', style: this.scrollerStyle },
	              this.state.downloadableFiles.map(function (file, index) {
	                return _react2['default'].createElement(
	                  'div',
	                  { className: 'item',
	                    key: index },
	                  _react2['default'].createElement(
	                    'a',
	                    { href: _confApplicationConfiguration2['default'].actions.downloads.exports + '?file=' + file.fileName,
	                      download: true },
	                    file.fileName
	                  )
	                );
	              })
	            )
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'content', onKeyUp: this.checkKey.bind(this) },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui info message', style: this.nothingToDownloadStyle },
	            _react2['default'].createElement(
	              'p',
	              null,
	              this.props.userstore.getText('downloadSetImagesHelp1')
	            )
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui positive message', style: this.downloadsStyle },
	            _react2['default'].createElement(
	              'p',
	              null,
	              this.props.userstore.getInterpolatedText('downloadSetImagesHelp2', [this.state.setData ? this.state.setData.items.length : '*', this.state.setData ? this.state.setData.name : this.state.setId])
	            )
	          )
	        ),
	        _react2['default'].createElement(
	          'div',
	          { className: 'actions' },
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui black deny button', onClick: this.cancel.bind(this) },
	            this.props.userstore.getText('cancel')
	          ),
	          _react2['default'].createElement(
	            'div',
	            { className: 'ui positive right labeled icon button',
	              style: this.launchButtonStyle,
	              onClick: this.run.bind(this) },
	            this.props.userstore.getText('confirm'),
	            _react2['default'].createElement('i', { className: 'unlink icon' })
	          )
	        )
	      );
	    }
	  }]);

	  return DownloadSetImages;
	})(_AbstractModal3['default']);

	exports['default'] = DownloadSetImages;
	module.exports = exports['default'];

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Store for minimap data.
	 *
	 * Created by hector on 04/08/15.
	 */
	"use strict";

	var _get = __webpack_require__(3)["default"];

	var _inherits = __webpack_require__(19)["default"];

	var _createClass = __webpack_require__(28)["default"];

	var _classCallCheck = __webpack_require__(31)["default"];

	var _interopRequireDefault = __webpack_require__(1)["default"];

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _events = __webpack_require__(306);

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsMinimapConstants = __webpack_require__(195);

	var _constantsMinimapConstants2 = _interopRequireDefault(_constantsMinimapConstants);

	var _eventsMinimapEvents = __webpack_require__(432);

	var _eventsMinimapEvents2 = _interopRequireDefault(_eventsMinimapEvents);

	var MinimapStore = (function (_EventEmitter) {
	  _inherits(MinimapStore, _EventEmitter);

	  function MinimapStore() {
	    var _this = this;

	    _classCallCheck(this, MinimapStore);

	    _get(Object.getPrototypeOf(MinimapStore.prototype), "constructor", this).call(this);

	    this.image = {};
	    this.image.url = null;
	    this.image.height = null;
	    this.image.width = null;
	    this.image.xZero = 0;
	    this.image.yZero = 0;

	    _dispatcherAppDispatcher2["default"].register(function (action) {
	      switch (action.actionType) {
	        case _constantsMinimapConstants2["default"].ActionTypes.INIT_MINIMAP:
	          _this.initializeMinimap(action.url, action.imgWidth, action.imgHeight, action.xZero, action.yZero);
	          _this.emit(_eventsMinimapEvents2["default"].INIT_MINIMAP);
	          break;
	        case _constantsMinimapConstants2["default"].ActionTypes.UNSET_MINIMAP:
	          _this.initializeMinimap(null, null, null, 0, 0);
	          _this.emit(_eventsMinimapEvents2["default"].INIT_MINIMAP);
	          break;
	        default:
	          break;
	      }
	    });
	  }

	  _createClass(MinimapStore, [{
	    key: "initializeMinimap",
	    value: function initializeMinimap(url, imageWidth, imageHeight, xZero, yZero) {
	      this.image.url = url;
	      this.image.height = imageHeight;
	      this.image.width = imageWidth;
	      this.image.xZero = xZero;
	      this.image.yZero = yZero;
	    }
	  }, {
	    key: "getImage",
	    value: function getImage() {
	      return this.image;
	    }
	  }, {
	    key: "addInitListener",
	    value: function addInitListener(callback) {
	      this.on(_eventsMinimapEvents2["default"].INIT_MINIMAP, callback);
	    }
	  }, {
	    key: "removeInitListener",
	    value: function removeInitListener(callback) {
	      this.removeListener(_eventsMinimapEvents2["default"].INIT_MINIMAP, callback);
	    }
	  }]);

	  return MinimapStore;
	})(_events.EventEmitter);

	exports["default"] = MinimapStore;
	module.exports = exports["default"];

/***/ },
/* 432 */
/***/ function(module, exports) {

	/**
	 * Events for minimap
	 *
	 * Created by dmitri on 05/10/15.
	 */
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  INIT_MINIMAP: "initMinimap",
	  UNSET_MINIMAP: "unsetMinimap"
	};
	module.exports = exports["default"];

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Store for view data : viewport, object size, loader text, filters.
	 *
	 * Created by dmitri on 05/10/15.
	 */
	"use strict";

	var _get = __webpack_require__(3)["default"];

	var _inherits = __webpack_require__(19)["default"];

	var _createClass = __webpack_require__(28)["default"];

	var _classCallCheck = __webpack_require__(31)["default"];

	var _Number$isFinite = __webpack_require__(303)["default"];

	var _interopRequireDefault = __webpack_require__(1)["default"];

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _events = __webpack_require__(306);

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsViewConstants = __webpack_require__(197);

	var _constantsViewConstants2 = _interopRequireDefault(_constantsViewConstants);

	var _eventsViewEvents = __webpack_require__(434);

	var _eventsViewEvents2 = _interopRequireDefault(_eventsViewEvents);

	var ViewStore = (function (_EventEmitter) {
	  _inherits(ViewStore, _EventEmitter);

	  function ViewStore() {
	    var _this = this;

	    _classCallCheck(this, ViewStore);

	    _get(Object.getPrototypeOf(ViewStore.prototype), "constructor", this).call(this);

	    this.viewport = {};
	    this.viewport.height = null;
	    this.viewport.width = null;
	    this.viewport.top = 0;
	    this.viewport.left = 0;
	    this.viewport.scale = 0.01;
	    this.viewport.animate = false;
	    this.viewport.topFromWindow = null;
	    this.viewport.leftFromWindow = null;

	    this.properties = {};
	    this.properties.sizeOfTextAndObjects = 1.0;

	    this.loader = {};
	    this.loader.text = null;

	    // Maps uid of an entity to an array of display colors (in #XXXXXX notation)
	    this.colors = {};

	    this.displayedTypes = {
	      borders: true,
	      regions: false,
	      points: false,
	      trails: false,
	      angles: false
	    };

	    _dispatcherAppDispatcher2["default"].register(function (action) {
	      switch (action.actionType) {
	        case _constantsViewConstants2["default"].ActionTypes.Local.UPDATE_VIEWPORT:
	          _this.setViewportData(action.x, action.y, action.width, action.height, action.scale, action.animate);
	          _this.emit(_eventsViewEvents2["default"].UPDATE_VIEWPORT);
	          break;
	        case _constantsViewConstants2["default"].ActionTypes.Local.UPDATE_VIEWPORT_LOCATION:
	          _this.setViewportLocationInWindow(action.top, action.left);
	          _this.emit(_eventsViewEvents2["default"].UPDATE_VIEWPORT);
	          break;
	        case _constantsViewConstants2["default"].ActionTypes.Local.VIEW_FIT_ALL:
	          _this.emit(_eventsViewEvents2["default"].FIT_SET_IN_VIEW);
	          break;
	        case _constantsViewConstants2["default"].ActionTypes.Local.UPDATE_VIEW_PROPERTIES:
	          _this.setViewProperties(action.properties);
	          _this.emit(_eventsViewEvents2["default"].UPDATE_VIEW_PROPERTIES);
	          break;
	        case _constantsViewConstants2["default"].ActionTypes.Local.UPDATE_VIEW_FILTERS:
	          _this.setDisplayFilters(action.filters);
	          _this.emit(_eventsViewEvents2["default"].UPDATE_VIEW_FILTERS);
	          break;
	        case _constantsViewConstants2["default"].ActionTypes.Local.LOADER_CHANGE_STATE:
	          _this.setLoaderText(action.text);
	          _this.emit(_eventsViewEvents2["default"].UPDATE_LOADER);
	          break;
	        case _constantsViewConstants2["default"].ActionTypes.Local.UPDATE_VIEW_COLORS:
	          _this.setColor(action.id, action.color, action.add);
	          _this.emit(_eventsViewEvents2["default"].UPDATE_VIEW_FILTERS);
	          break;
	        default:
	          break;
	      }
	    });
	  }

	  _createClass(ViewStore, [{
	    key: "getDisplayedTypes",
	    value: function getDisplayedTypes() {
	      return this.displayedTypes;
	    }
	  }, {
	    key: "setLoaderText",
	    value: function setLoaderText(text) {
	      if (!text) {
	        this.loader.text = null;
	      } else if (text.length == 0) {
	        this.loader.text = null;
	      } else {
	        this.loader.text = text;
	      }
	    }
	  }, {
	    key: "setDisplayFilters",
	    value: function setDisplayFilters(filters) {
	      if (filters.all) {
	        this.displayedTypes = {
	          borders: true,
	          regions: true,
	          points: true,
	          trails: true,
	          angles: true
	        };
	        return;
	      }
	      this.displayedTypes.borders = filters.borders !== undefined ? filters.borders : this.displayedTypes.borders;
	      this.displayedTypes.regions = filters.regions !== undefined ? filters.regions : this.displayedTypes.regions;
	      this.displayedTypes.points = filters.points !== undefined ? filters.points : this.displayedTypes.points;
	      this.displayedTypes.trails = filters.trails !== undefined ? filters.trails : this.displayedTypes.trails;
	      this.displayedTypes.angles = filters.angles !== undefined ? filters.angles : this.displayedTypes.angles;
	    }
	  }, {
	    key: "getLoader",
	    value: function getLoader() {
	      return this.loader;
	    }
	  }, {
	    key: "setViewportData",
	    value: function setViewportData(x, y, width, height, scale, animate) {
	      if (x && _Number$isFinite(x)) {
	        this.viewport.left = x;
	      }
	      if (y && _Number$isFinite(y)) {
	        this.viewport.top = y;
	      }
	      if (width && _Number$isFinite(width)) {
	        this.viewport.width = width;
	      }
	      if (height && _Number$isFinite(height)) {
	        this.viewport.height = height;
	      }
	      if (scale && _Number$isFinite(scale)) {
	        this.viewport.scale = scale;
	      }
	      this.viewport.animate = animate;
	    }
	  }, {
	    key: "setViewportLocationInWindow",
	    value: function setViewportLocationInWindow(top, left) {
	      if (top) {
	        this.viewport.topFromWindow = top;
	      }
	      if (left) {
	        this.viewport.leftFromWindow = left;
	      }
	    }
	  }, {
	    key: "setViewProperties",
	    value: function setViewProperties(props) {
	      if (props.sizeOfTextAndObjects) {
	        this.properties.sizeOfTextAndObjects = props.sizeOfTextAndObjects;
	      }
	    }
	  }, {
	    key: "setColor",
	    value: function setColor(id, color, add) {
	      if (add) {
	        if (!this.colors[id]) {
	          this.colors[id] = [];
	        }
	        if (_.indexOf(this.colors[id], color) < 0) {
	          this.colors[id].unshift(color);
	        }
	      } else {
	        this.colors[id] = _.without(this.colors[id], color);
	        if (this.colors[id].length === 0) {
	          delete this.colors[id];
	        }
	      }
	    }
	  }, {
	    key: "getColors",
	    value: function getColors() {
	      return JSON.parse(JSON.stringify(this.colors));
	    }

	    /**
	     * Returns the latest color associated to the given entity id
	     * @param entityId
	     */
	  }, {
	    key: "getColor",
	    value: function getColor(entityId) {
	      if (!this.colors[entityId]) {
	        return null;
	      }
	      return JSON.parse(JSON.stringify(this.colors[entityId][0]));
	    }
	  }, {
	    key: "getViewProperties",
	    value: function getViewProperties() {
	      return this.properties;
	    }
	  }, {
	    key: "getView",
	    value: function getView() {
	      return this.viewport;
	    }
	  }, {
	    key: "addViewportListener",
	    value: function addViewportListener(callback) {
	      this.on(_eventsViewEvents2["default"].UPDATE_VIEWPORT, callback);
	    }
	  }, {
	    key: "removeViewportListener",
	    value: function removeViewportListener(callback) {
	      this.removeListener(_eventsViewEvents2["default"].UPDATE_VIEWPORT, callback);
	    }
	  }, {
	    key: "addFitViewListener",
	    value: function addFitViewListener(callback) {
	      this.on(_eventsViewEvents2["default"].FIT_SET_IN_VIEW, callback);
	    }
	  }, {
	    key: "removeFitViewListener",
	    value: function removeFitViewListener(callback) {
	      this.removeListener(_eventsViewEvents2["default"].FIT_SET_IN_VIEW, callback);
	    }
	  }, {
	    key: "addViewPropertiesUpdateListener",
	    value: function addViewPropertiesUpdateListener(callback) {
	      this.on(_eventsViewEvents2["default"].UPDATE_VIEW_PROPERTIES, callback);
	    }
	  }, {
	    key: "removeViewPropertiesUpdateListener",
	    value: function removeViewPropertiesUpdateListener(callback) {
	      this.removeListener(_eventsViewEvents2["default"].UPDATE_VIEW_PROPERTIES, callback);
	    }
	  }, {
	    key: "addFilterUpdateListener",
	    value: function addFilterUpdateListener(callback) {
	      this.on(_eventsViewEvents2["default"].UPDATE_VIEW_FILTERS, callback);
	    }
	  }, {
	    key: "removeFilterUpdateListener",
	    value: function removeFilterUpdateListener(callback) {
	      this.removeListener(_eventsViewEvents2["default"].UPDATE_VIEW_FILTERS, callback);
	    }
	  }, {
	    key: "addLoaderListener",
	    value: function addLoaderListener(callback) {
	      this.on(_eventsViewEvents2["default"].UPDATE_LOADER, callback);
	    }
	  }, {
	    key: "removeLoaderListener",
	    value: function removeLoaderListener(callback) {
	      this.removeListener(_eventsViewEvents2["default"].UPDATE_LOADER, callback);
	    }
	  }]);

	  return ViewStore;
	})(_events.EventEmitter);

	exports["default"] = ViewStore;
	module.exports = exports["default"];

/***/ },
/* 434 */
/***/ function(module, exports) {

	/**
	 * Events affecting or generated by view and user-interaction
	 *
	 * Created by dmitri on 05/10/15.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  ACTIVE_SET_CHANGE: 'VIEW_activeSetChange',
	  ACTIVE_VIEW_CHANGE: 'VIEW_activeViewChange',
	  UPDATE_VIEWPORT: "VIEW_updateViewport",
	  UPDATE_VIEW_PROPERTIES: 'VIEW_updateViewProperties',
	  UPDATE_VIEW_FILTERS: 'VIEW_updateViewFilters',
	  FIT_SET_IN_VIEW: "VIEW_fitSetInView",
	  UPDATE_LOADER: 'VIEW_updateLoader',
	  SELECTION_CHANGE: 'VIEW_selectionChange',
	  INSPECTOR_CONTENT_CHANGE: 'VIEW_inspectorContentChange',
	  ANNOTATION_LIST_CONTENT_CHANGE: 'VIEW_annotationListContentChange',
	  LAB_BENCH_LOAD_PROGRESS: 'VIEW_labBenchLoadProgressChange'
	};
	module.exports = exports['default'];

/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Store for tool data and interaction
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _events = __webpack_require__(306);

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsToolConstants = __webpack_require__(250);

	var _constantsToolConstants2 = _interopRequireDefault(_constantsToolConstants);

	var _constantsViewConstants = __webpack_require__(197);

	var _constantsViewConstants2 = _interopRequireDefault(_constantsViewConstants);

	var _eventsToolEvents = __webpack_require__(436);

	var _eventsToolEvents2 = _interopRequireDefault(_eventsToolEvents);

	var _eventsViewEvents = __webpack_require__(434);

	var _eventsViewEvents2 = _interopRequireDefault(_eventsViewEvents);

	var ToolStore = (function (_EventEmitter) {
	  _inherits(ToolStore, _EventEmitter);

	  function ToolStore() {
	    var _this = this;

	    _classCallCheck(this, ToolStore);

	    _get(Object.getPrototypeOf(ToolStore.prototype), 'constructor', this).call(this);

	    this.tools = {};
	    this.activeTool = null;
	    this.activeToolPopup = null;
	    this.tooltipContent = null;
	    /**
	     * Selected image UID
	     * @type {string}
	     */
	    this.imageId = null;
	    this.toolData = null;

	    _dispatcherAppDispatcher2['default'].register(function (action) {
	      switch (action.actionType) {
	        case _constantsToolConstants2['default'].ActionTypes.TOOL_SET_ACTIVE_TOOL:
	          _this.setActiveTool(action.tool);
	          _this.emit(_eventsToolEvents2['default'].CHANGE_TOOL_EVENT);
	          break;
	        case _constantsToolConstants2['default'].ActionTypes.TOOL_CLEAR:
	          _this.finishActiveTool();
	          _this.setActiveTool('null');
	          _this.emit(_eventsToolEvents2['default'].CHANGE_TOOL_EVENT);
	          break;
	        case _constantsToolConstants2['default'].ActionTypes.TOOL_REGISTER:
	          //console.log("Tool registered with ToolStore: " + action.name);
	          _this.register(action.name, action.onClickCallback, action.component);
	          break;
	        case _constantsToolConstants2['default'].ActionTypes.TOOL_RUN:
	          _this.runTool(action.x, action.y, action.misc);
	          break;
	        case _constantsViewConstants2['default'].ActionTypes.Local.VIEW_SET_SELECTION:
	          if (_this.imageId != action.selection.id) {
	            _this.resetActiveTool();
	            _this.imageId = action.selection.id;
	            _this.emit(_eventsViewEvents2['default'].SELECTION_CHANGE);
	          }
	          //console.log('post sel=' + this.imageId);
	          break;
	        case _constantsToolConstants2['default'].ActionTypes.TOOL_SAVE:
	          _this.saveToolData();
	          break;
	        case _constantsToolConstants2['default'].ActionTypes.TOOL_RESET:
	          _this.resetActiveTool();
	          break;
	        case _constantsToolConstants2['default'].ActionTypes.TOOL_POPUP:
	          _this.setActiveToolPopup(action.popup);
	          _this.emit(_eventsToolEvents2['default'].CHANGE_ACTIVE_TOOL_POPUP_EVENT);
	          break;
	        case _constantsToolConstants2['default'].ActionTypes.TOOL_UPDATE_DATA_DISPLAY:
	          _this.tooltipContent = action.content;
	          _this.emit(_eventsToolEvents2['default'].TOOLTIP_CONTENT_UPDATE);
	          break;
	        case _constantsToolConstants2['default'].ActionTypes.TOOL_UPDATE_DATA:
	          _this.toolData = action.data ? JSON.parse(JSON.stringify(action.data)) : null;
	          _this.emit(_eventsToolEvents2['default'].TOOL_DATA_CHANGED);
	          break;
	      }
	    });

	    this.register("null", function () {}, null);
	  }

	  _createClass(ToolStore, [{
	    key: 'getToolData',
	    value: function getToolData() {
	      return JSON.parse(JSON.stringify(this.toolData));
	    }
	  }, {
	    key: 'getTooltipContent',
	    value: function getTooltipContent() {
	      return this.tooltipContent;
	    }
	  }, {
	    key: 'getSelectedImageId',
	    value: function getSelectedImageId() {
	      return this.imageId;
	    }
	  }, {
	    key: 'resetActiveTool',
	    value: function resetActiveTool() {
	      if (this.activeTool) {
	        if (this.activeTool.component) {
	          this.activeTool.component.reset();
	        }
	      }
	    }
	  }, {
	    key: 'finishActiveTool',
	    value: function finishActiveTool() {
	      if (this.activeTool) {
	        if (this.activeTool.component) {
	          this.activeTool.component.finish();
	        }
	      }
	    }
	  }, {
	    key: 'beginActiveTool',
	    value: function beginActiveTool() {
	      if (this.activeTool) {
	        if (this.activeTool.component) {
	          this.activeTool.component.begin();
	        }
	      }
	    }
	  }, {
	    key: 'setActiveTool',
	    value: function setActiveTool(name) {
	      // Reset previous active tool
	      this.finishActiveTool();
	      // Set new active tool
	      this.activeTool = this.tools[name];
	      // Reset state of the new tool, to initialize it
	      this.beginActiveTool();
	    }
	  }, {
	    key: 'getOnClickAction',
	    value: function getOnClickAction() {
	      if (this.activeTool) {
	        if (this.activeTool.component) {
	          return this.activeTool.onClickAction;
	        }
	      }
	    }
	  }, {
	    key: 'getActiveTool',
	    value: function getActiveTool() {
	      return this.activeTool.component;
	    }
	  }, {
	    key: 'getToolName',
	    value: function getToolName() {
	      if (this.activeTool) {
	        return this.activeTool.name;
	      } else return null;
	    }
	  }, {
	    key: 'setActiveToolPopup',
	    value: function setActiveToolPopup(popup) {
	      this.activeToolPopup = popup;
	    }
	  }, {
	    key: 'getActiveToolPopup',
	    value: function getActiveToolPopup() {
	      return this.activeToolPopup;
	    }
	  }, {
	    key: 'runTool',
	    value: function runTool(x, y, misc) {
	      if (this.activeTool) {
	        if (this.activeTool.component) {
	          this.activeTool.component.click.call(this.activeTool.component, this.activeTool.component, x, y, misc);
	        }
	      }
	    }
	  }, {
	    key: 'canSave',
	    value: function canSave() {
	      if (this.activeTool.component) {
	        return this.activeTool.component.canSave();
	      }
	      return false;
	    }
	  }, {
	    key: 'saveToolData',
	    value: function saveToolData() {
	      if (this.activeTool) {
	        if (this.activeTool.component.canSave()) {
	          this.activeTool.component.save();
	        }
	      }
	    }
	  }, {
	    key: 'register',
	    value: function register(name, onClickAction, component) {
	      this.tools[name] = {
	        name: name,
	        onClickAction: onClickAction,
	        component: component
	      };
	    }
	  }, {
	    key: 'addToolChangeListener',
	    value: function addToolChangeListener(callback) {
	      this.on(_eventsToolEvents2['default'].CHANGE_TOOL_EVENT, callback);
	    }
	  }, {
	    key: 'removeToolChangeListener',
	    value: function removeToolChangeListener(callback) {
	      this.removeListener(_eventsToolEvents2['default'].CHANGE_TOOL_EVENT, callback);
	    }
	  }, {
	    key: 'addActiveToolPopupChangeListener',
	    value: function addActiveToolPopupChangeListener(callback) {
	      this.on(_eventsToolEvents2['default'].CHANGE_ACTIVE_TOOL_POPUP_EVENT, callback);
	    }
	  }, {
	    key: 'removeActiveToolPopupChangeListener',
	    value: function removeActiveToolPopupChangeListener(callback) {
	      this.removeListener(_eventsToolEvents2['default'].CHANGE_ACTIVE_TOOL_POPUP_EVENT, callback);
	    }
	  }, {
	    key: 'addSelectionChangeListener',
	    value: function addSelectionChangeListener(callback) {
	      this.on(_eventsViewEvents2['default'].SELECTION_CHANGE, callback);
	      if (this.imageId) {
	        window.setTimeout(function () {
	          callback();
	        }, 10);
	      }
	    }
	  }, {
	    key: 'removeSelectionChangeListener',
	    value: function removeSelectionChangeListener(callback) {
	      this.removeListener(_eventsViewEvents2['default'].SELECTION_CHANGE, callback);
	    }
	  }, {
	    key: 'addTooltipChangeListener',
	    value: function addTooltipChangeListener(callback) {
	      this.on(_eventsToolEvents2['default'].TOOLTIP_CONTENT_UPDATE, callback);
	    }
	  }, {
	    key: 'removeTooltipChangeListener',
	    value: function removeTooltipChangeListener(callback) {
	      this.removeListener(_eventsToolEvents2['default'].TOOLTIP_CONTENT_UPDATE, callback);
	    }
	  }, {
	    key: 'addToolDataChangeListener',
	    value: function addToolDataChangeListener(callback) {
	      this.on(_eventsToolEvents2['default'].TOOL_DATA_CHANGED, callback);
	    }
	  }, {
	    key: 'removeToolDataChangeListener',
	    value: function removeToolDataChangeListener(callback) {
	      this.removeListener(_eventsToolEvents2['default'].TOOL_DATA_CHANGED, callback);
	    }
	  }]);

	  return ToolStore;
	})(_events.EventEmitter);

	exports['default'] = ToolStore;
	module.exports = exports['default'];

/***/ },
/* 436 */
/***/ function(module, exports) {

	/**
	 * Events for tools
	 *
	 * Created by dmitri on 08/10/15.
	 */
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  CHANGE_TOOL_EVENT: "TOOL_changeTool",
	  CHANGE_ACTIVE_TOOL_POPUP_EVENT: "TOOL_changeActiveToolPopup",
	  TOOL_DATA_CHANGED: "TOOL_toolDataChanged",
	  TOOLTIP_CONTENT_UPDATE: 'TOOL_tooltipContentUpdate'
	};
	module.exports = exports["default"];

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Store for user data (such as login status and language data)
	 *
	 * Created by dmitri on 24/11/15.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _events = __webpack_require__(306);

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _eventsUserEvents = __webpack_require__(438);

	var _eventsUserEvents2 = _interopRequireDefault(_eventsUserEvents);

	var _actionsSocketActions = __webpack_require__(240);

	var _actionsSocketActions2 = _interopRequireDefault(_actionsSocketActions);

	var _constantsUserConstants = __webpack_require__(372);

	var _constantsUserConstants2 = _interopRequireDefault(_constantsUserConstants);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var UserStore = (function (_EventEmitter) {
	  _inherits(UserStore, _EventEmitter);

	  function UserStore() {
	    var _this = this;

	    _classCallCheck(this, UserStore);

	    _get(Object.getPrototypeOf(UserStore.prototype), 'constructor', this).call(this);

	    this.setMaxListeners(1000);

	    this.userAuthorized = false;
	    this.userRplusId = null;
	    this.userLogin = null;
	    this.userData = null;

	    /**
	     * Loads languages specified in ApplicationConfiguration
	     * @type {{}}
	     */
	    this.languageMaps = {};
	    for (var i = 0; i < _confApplicationConfiguration2['default'].app.languages.length; ++i) {
	      this.languageMaps[_confApplicationConfiguration2['default'].app.languages[i].code] = __webpack_require__(439)("./" + _confApplicationConfiguration2['default'].app.languages[i].code + '.js');
	    }

	    this.langMap = null;
	    this.language = localStorage.getItem('lang');
	    if (!this.language) {
	      localStorage.setItem("lang", "en");
	      this.language = 'en';
	    }
	    this.setLanguage(this.language);

	    _dispatcherAppDispatcher2['default'].register(function (action) {
	      switch (action.actionType) {
	        case _constantsUserConstants2['default'].ActionTypes.USER_SET_LANGUAGE:
	          _this.setLanguage(action.code);
	          _this.emit(_eventsUserEvents2['default'].PREFS_CHANGE_LANGUAGE);
	          break;
	      }
	    });

	    // Perform initial check
	    window.setTimeout(_actionsSocketActions2['default'].registerListener.bind(null, 'user', this.userConnected.bind(this)), 10);
	  }

	  /**
	   * Callback when user connection status changes.
	   * @param user Object (optional) must contain an uid and name for the user. If not provided or null, user is disconnected from Colaboratory.
	   */

	  _createClass(UserStore, [{
	    key: 'userConnected',
	    value: function userConnected(user) {
	      if (user) {
	        this.userRplusId = user.uid;
	        this.userLogin = user.name;
	        this.userAuthorized = true;
	        this.userData = user;
	        this.emit(_eventsUserEvents2['default'].USER_LOG_IN);
	      } else {
	        this.userAuthorized = false;
	        this.userRplusId = null;
	        this.userLogin = null;
	        this.userData = null;
	        this.emit(_eventsUserEvents2['default'].USER_LOG_OUT);
	      }
	    }

	    /**
	     * If the language does not exist, defaults to English
	     * @param language
	     */
	  }, {
	    key: 'setLanguage',
	    value: function setLanguage(language) {
	      if (this.languageMaps[language]) {
	        this.language = language;
	        this.langMap = this.languageMaps[language];
	        localStorage.setItem('lang', language);
	      } else {
	        console.warn('No language ' + language);
	        this.setLanguage('en');
	      }
	    }
	  }, {
	    key: 'getLanguage',
	    value: function getLanguage() {
	      return this.language;
	    }

	    /**
	     * Returns the localized text corresponding to given text id. See localization files for valids ids. If id is not valid, returns '#'.
	     * @param key
	     * @returns {*}
	     */
	  }, {
	    key: 'getText',
	    value: function getText(key) {
	      if (this.langMap[key]) {
	        return this.langMap[key];
	      } else {
	        console.error('No corresponding string for key ' + key + ' in ' + this.language);
	      }
	      if (this.languageMaps.en[key]) {
	        return this.languageMaps.en[key];
	      } else {
	        console.error('No corresponding string for key in English i18n: ' + key);
	        return '#';
	      }
	    }

	    /**
	     * Returns the localized text corresponding to given text id interpolated with values provided in the text array. If id is not valid, retruns '#'
	     * @param key
	     * @param text Array list of strings to interpolate in order into text.
	     * @returns {*}
	     */
	  }, {
	    key: 'getInterpolatedText',
	    value: function getInterpolatedText(key, text) {
	      var string = this.langMap.interpolated[key];
	      if (!string) {
	        console.error('No corresponding interpolated string for key ' + key + ' in ' + this.language);
	        string = this.languageMaps.en.interpolated[key];
	        if (!string) {
	          console.error('No corresponding interpolated string for key in English i18n: ' + key);
	          return '#';
	        }
	      }

	      for (var i = text.length - 1; i > -1; --i) {
	        string = string.replace('%' + i, text[i]);
	      }

	      return string;
	    }

	    /**
	     * Returns localized ontology (DarwinCore) text corresponding to the given id.
	     * @param key
	     * @returns {*}
	     */
	  }, {
	    key: 'getOntologyField',
	    value: function getOntologyField(key) {
	      if (this.langMap.darwinCore[key]) {
	        return this.langMap.darwinCore[key];
	      }
	      console.error('No corresponding string for key in localized DarwinCore i18n: ' + key);
	      if (this.languageMaps.en.darwinCore[key]) {
	        return this.languageMaps.en.darwinCore[key];
	      }
	      console.error('No corresponding string for key in English DarwinCore i18n: ' + key);
	      return '#';
	    }
	  }, {
	    key: 'getUser',
	    value: function getUser() {
	      return { rPlusId: this.userRplusId, login: this.userLogin };
	    }
	  }, {
	    key: 'getUserData',
	    value: function getUserData() {
	      return this.userData;
	    }
	  }, {
	    key: 'isUserAuthorized',
	    value: function isUserAuthorized() {
	      return this.userAuthorized;
	    }
	  }, {
	    key: 'addLanguageChangeListener',
	    value: function addLanguageChangeListener(callback) {
	      this.on(_eventsUserEvents2['default'].PREFS_CHANGE_LANGUAGE, callback);
	    }
	  }, {
	    key: 'removeLanguageChangeListener',
	    value: function removeLanguageChangeListener(callback) {
	      this.removeListener(_eventsUserEvents2['default'].PREFS_CHANGE_LANGUAGE, callback);
	    }
	  }, {
	    key: 'addUserLogInListener',
	    value: function addUserLogInListener(callback) {
	      this.on(_eventsUserEvents2['default'].USER_LOG_IN, callback);
	    }
	  }, {
	    key: 'removeUserLogInListener',
	    value: function removeUserLogInListener(callback) {
	      this.removeListener(_eventsUserEvents2['default'].USER_LOG_IN, callback);
	    }
	  }, {
	    key: 'addUserLogOutListener',
	    value: function addUserLogOutListener(callback) {
	      this.on(_eventsUserEvents2['default'].USER_LOG_OUT, callback);
	    }
	  }, {
	    key: 'removeUserLogOutListener',
	    value: function removeUserLogOutListener(callback) {
	      this.removeListener(_eventsUserEvents2['default'].USER_LOG_OUT, callback);
	    }
	  }]);

	  return UserStore;
	})(_events.EventEmitter);

	exports['default'] = UserStore;
	module.exports = exports['default'];

/***/ },
/* 438 */
/***/ function(module, exports) {

	/**
	 * Events for user and user profile actions
	 *
	 * Created by dmitri on 24/11/15.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  USER_LOG_IN: 'userLogIn',
	  USER_LOG_OUT: 'userLogOut',
	  PREFS_CHANGE_LANGUAGE: 'userPreferencesChangeLanguage'
	};
	module.exports = exports['default'];

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./en.js": 440,
		"./fr.js": 441
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 439;


/***/ },
/* 440 */
/***/ function(module, exports) {

	/**
	 * English interface internationalisation file.
	 *
	 * Created by dmitri on 07/12/16.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  exports: 'Exports',
	  languages: 'Languages',
	  operationNotAvailableInVersion: "This feature is not available in the current version",
	  remove: 'Delete',
	  tools: 'Outils',
	  recolnatData: 'ReColNat Data',
	  namelessEntity: "Nameless entity",
	  namelessPoI: "Nameless point of interest",
	  namelessToI: "Nameless trail of interest",
	  namelessRoI: "Nameless region of interest",
	  namelessAoI: "Nameless angle",
	  namelessImage: "Nameless image",
	  basketEmpty: 'Your basket is empty. You can fill it at explore.recolnat.org.',
	  countImagesInBasket: "Images in Explore basket :",
	  updateBasket: 'Refresh basket',
	  basketUnavailable: "Basket unavailable. Please refresh basket later.",
	  selectUnselectAll: "Select/unselect all",
	  loading: "Loading...",
	  imageUnavailable: 'Image unavailable',
	  mySets: 'My sets',
	  moveDeniedByServer: "Move has been denied by server",
	  managerHelp0: "Click on 'My Sets' to view your sets. An example set named 'Set Exemple' has been provided for you to discover the Collaboratory and its uses.",
	  managerHelp1: "Click on a set name to display its subsets and items",
	  managerHelp2: "Double-click on a set to load it in your lab bench",
	  managerHelp3: "Right-click on a set to open the context menu",
	  managerHelp4: "If the selected set has any images, these will be listed in the right pane.",
	  creationDate: "Creation date",
	  dataUnavailableDueToNetworkError: 'Data currently unavailable due to network error',
	  insitutionCodeUnavailable: 'Institution code unavailable',
	  catalogNumberUnavailable: 'Catalog number unavailable',
	  dataUnavailable: 'Data unavailable',
	  noDeterminationAccepted: "The data provider has not indicated which of the determinations is the accepted one. The one displayed here is the last provided.",
	  harvest: 'Harvest',
	  harvester: 'Harvester',
	  harvestLocation: 'Harvest location',
	  catalogNumber: 'Catalog n°',
	  specimenExplorePage: "Specimen's Explore page",
	  lastModified: "Last modified",
	  day: 'Day',
	  month: 'Month',
	  year: 'Year',
	  decade: 'Décade',
	  longitude: 'Longitude',
	  countryCode: "Country code",
	  municipality: "Municipality",
	  country: "Country",
	  county: "County",
	  continent: "Continent",
	  location: "Location",
	  locality: "Locality",
	  save: 'Save',
	  properties: 'Properties',
	  minimap: 'Minimap',
	  setManager: 'Sets',
	  observation: 'Observation',
	  organisation: "Organisation",
	  tabular: "Tabular",
	  unavailableInCurrentVersion: "(Unavailable in current version)",
	  actions: "Actions",
	  newSet: "New set",
	  fromBasketSubtitle: "from your Explore basket",
	  open: 'Open',
	  selectedSet: "selected set in lab bench",
	  organise: "Cluster",
	  selectedSetContent: "selected set content",
	  selectAnImage: 'Select an image',
	  noActiveImage: "No image selected",
	  groupsAndImages: "Groups & Images",
	  stateOrProvince: "State/Province",
	  textIsMandatory: "Text is mandatory",
	  operationFailedNetwork: "Operation failed due to network issue. Please try again later.",
	  newAnnotation: "New annotation",
	  newAnnotationText: "Annotation text",
	  cancel: 'Cancel',
	  addAnnotation: "Add annotation",
	  addAnAnnotation: 'Add an annotation',
	  addATag: 'Add a tag',
	  errorNotCsv: "Problem while reading file. Chosen file is likely to not be a valid CSV.",
	  startingImport: "Starting import...",
	  nothingToImport: "No images to import",
	  importImages: "Import images",
	  specimen: "Specimen",
	  addToSet: 'Add to set',
	  addImages: 'Add images',
	  fromBasket: "from Recolnat basket below",
	  fromCsv: "from a CSV or Excel CSV file",
	  fromNowhere: "from nowhere (only create an empty set)",
	  intoSet: "into the current set",
	  intoNewSubSet: "into a new sub-set of ",
	  newSubSetName: "Input new subset name",
	  createEmptySet: "Create empty set",
	  andKeepInBasket: 'and keep selection in basket',
	  andRemoveFromBasket: 'and remove selection from basket',
	  importExternalImages: "Import images from the Web",
	  importExternalHelp0: "The Collaboratory accepts images from any Web source. Warning: images must have public online access (http ou https link).",
	  importExternalHelp1: "In order to import Web images, you must first create a CSV file using Excel or LibreOffice. A sample file provided below show the expected format.",
	  download: "Download",
	  validCsvExample: "a valid CSV file example",
	  frenchFormatCsv: "French CSV format using ; as separator",
	  englishFormatCsv: "English CSV format using , as separator",
	  otherFormatCsv: "Other format with custom separator: ",
	  separator: "Separator",
	  next: "Next",
	  imagesFound: 'images found',
	  reload: 'Reload',
	  launchImport: "Run import",
	  deleteFromSet: "Remove from set",
	  deleteHelp0: "The selected entity will be removed from its displayed parent. It will still be accessible from its other parents.",
	  confirm: "Confirmer",
	  errorGettingDownloadList: "Unable to retrieve list of previous exports",
	  downloadSetImages: "Export images from set",
	  downloadSetImagesHelp0: "The following exports are available for download :",
	  downloadSetImagesHelp1: "In order to export images from a set, reopen this window after selecting a set in the Set Manager, or loading a set in your lab bench.",
	  dropdownSelectRequired: "You must select an option from the dropdown list",
	  contactForm: "Contact us",
	  selectInDropdown: "You want to... (pick from list)",
	  reportBug: "Report a bug",
	  suggestEnhancement: "Suggest a new feature",
	  provideFeedback: "Provide feedback",
	  other: "Other",
	  feedbackFormHelp0: "I wish to receive a response to my feedback. The response will be sent to the e-mail adress you provided when creating your account.",
	  send: "Send",
	  loginRequired: "Login required",
	  loginHelp: "You must log in with your ReColNat account in order to be able to access the Collaboratory",
	  login: "Sign in",
	  createAccount: "Create account",
	  dataUnavailableRetry: "Set data not yet available. Please try again later.",
	  organiseSet: "Cluster set",
	  name: "Name",
	  organiseSetHelp1: "Clustering criterion : ",
	  organiseSetHelp3: "Warning, this operation may take an unacceptably long time to finish (a few minutes on a small set) and must not be interrupted. Please leave it running during the night for big sets.",
	  organiseSetHelp5: "Processing started. This window will close automatically when the operation is finished.",
	  precalculate: "Precalculate results",
	  apply: "Apply actions",
	  noActiveSet: "No active set",
	  placing: "Placing images...",
	  auto: "Auto",
	  manual: "Manual",
	  placeInLine: 'Place all undisplayed images in a line. The first image will be placed in the upper left corner of your current viewport.',
	  placeInColumn: 'Place all undisplayed images in a column. The first image will be placed in the upper left corner of your current viewport.',
	  placeInMatrix: 'Place all undisplayed images in a 5-column matrix. The first image will be placed in the upper left corner of your current viewport.',
	  dragDropImage: "Drag image and drop it in your workbench.",
	  collaboratory: "Collaboratory",
	  version: "Version",
	  downloads: "Downloads",
	  unavailable: 'Unavailable',
	  nameUnavailable: "Missing name",
	  noSheetSelected: "No sheet selected",
	  cannotRetrieveRecolnatData: 'Cannot retrieve associated data from ReColNat central database',
	  noInformationAboutSelection: "No information available about current selection",
	  determination: "Determination",
	  syncWithServer: 'Synchronizing data...',
	  exifData: 'Digitization data',
	  lineMeasureTooltip: "Click on an image to begin a new measure",
	  lineMeasureTooltip1: "Click on the same image to end the current measure",
	  lineMeasureTooltip2: "You are not allowed to begin a measure on one image and end it on another. PLease finish the current measure on the same image.",
	  lineMeasureTooltip3: 'Please input a name for this measure',
	  newLineMeasure: "Measure length on an image.",
	  newRegionOfInterestTooltip: "Click on an image to place the first vertex of the new region of interest.",
	  newRegionOfInterestTooltip1: "Unable to create a new edge here. Please click on a vertex at the beginning or end of the region of interest.",
	  newRegionOfInterestTooltip2: "A region of interest must have at least 3 vertices.",
	  newRegionOfInterestTooltip3: "Cannot create edge here. If you wish to close the region, right-click anywhere on the image.",
	  newRegionOfInterestTooltip4: "Drag a vertex to move it. Double-click on a line to split it in half, creating a new vertex. Type a name and click on Save to save the region.",
	  newRegionOfInterestTooltip5: "Click on the same image to add vertices to the region. Right-click or press ENTER to close the region.",
	  createNewRoI: 'Mark a region of interest',
	  newPointOfInterestTooltip: "Click on the image to mark a point of interest.",
	  newPointOfInterestTooltip1: "Mark a point of interest.",
	  newPathTooltip: "Click on an image to place the first vertex of the new trail of interest.",
	  annotationTooltip: "Click on any entity on the image (or the image itself) to add annotations to the selected entity.",
	  exportFragmentsTooltip: "Click on a region of interest to add it to the fragment export.",
	  moveObjectTooltip: 'Drag an image to move it on the labbench.',
	  moveViewTooltip: '',
	  selectObjectTooltip: 'Click on an image to select it.',
	  createNewAngle: "Measure an angle",
	  newAngleTooltip: "Click on an image to place the apex of the new angle",
	  angleNotFinished: "The angle is not finished",
	  nameMandatory: "Name is mandatory",
	  newAngleTooltip2: "Click on the same image to place the first leg of the angle.",
	  newAngleTooltip3: "Click on the same image to place the second leg of the angle.",
	  newAngleTooltip4: "Drag any vertex of the angle to move it. Enter a name and click on Save to finish and save the current angle.",
	  angle: "Angle",
	  newPathCannotStart: "Cannot start a new trail edge here. If you wish to end the trail, right-click any where on the image. If you wish to close the trail, click on the first vertex of the trail.",
	  newPathVertexError: "The trail cannot go through the selected location.",
	  createPathTooltip0: "Drag a vertex to move it. Double-click on an edge to split it in half.",
	  createPathTooltip1: "Click on the same image to add a new vertex to the current trail after the previous one. Right-click or press ENTER to finish adding new vertices to the trail. Click on the first vertex of the trail to close it.",
	  createNewPath: "Mark a trail of interest",
	  vertexOutsideImageError: "The vertex may not be outside the image.",
	  polygonUnfinished: "Unable to save at the moment. The trace is not finished. Right-click anywhere on the image and enter a name in order to be able to save.",
	  type: 'Type',
	  value: 'Value',
	  unit: 'Unit',
	  sheet: 'Sheet',
	  area: 'Area',
	  perimeter: 'Perimeter',
	  length: 'Length',
	  set: 'Set',
	  vertex: 'Vertex',
	  trail: 'Trail',
	  region: "Region",
	  image: 'Image',
	  imageName: "Image name",
	  displayedSpecimenName: "Specimen name",
	  coordinatesWithOrigin: "Coordonnées in image from the bottom-left corner",
	  measures: "Measures",
	  tags: "Tags",
	  imageSheet: "Image/Sheet",
	  copyToClipboard: "Copy to clipboard",
	  exportAsCsv: "Export as CSV",
	  displayOptions: "Display options",
	  noDataForSelection: "No data to display for current selection",
	  tagsAndMeasures: "Tags and Measures",
	  sortBy: 'Sort by',
	  recolnatSystem: "ReColNat System",
	  noStandardAvailable: 'No measure standard available for conversion.',
	  zoomOnEntity: "Center labbench on element",
	  imagePreviewer: "Image previewer",
	  preview: "Preview",
	  labBench: "Labbench",
	  showAllImages: "Zoom on lab bench",
	  everything: "All",
	  showWholeImage: "Zoom on active image.",
	  show1to1: "Zoom to 1:1 scale",
	  newAngle: "New angle of interest",
	  newTrail: "New trail of interest",
	  newVertex: "New point of interest",
	  newRegion: "New region of interest",
	  newMeasure: "Ruler",
	  measureStandard: "Measure standard",
	  nothing: "Nothing",
	  creatingSet: "Creating set",
	  createdSet: "Set created",
	  noSetLoaded: "No set loaded",
	  lengthInMm: "Length (mm)",
	  autoTagTooltip: "These tags will be added to all new entities upon save",
	  newStandardTooltip1: "Click on an image to create the beginning of the standard.",
	  newStandardTooltip2: "Click on the same image to create the end of the standard.",
	  newStandardTooltip3: "Provide a name and length (in mm) for this standard in the fields below. You may change the standard definition by dragging the ends of the line. Click Save to save the new measure standard.",
	  newStandardFailed: "Failed to save measure standard.",
	  newStandardError1: "Could not create path.",
	  newStandardError2: "Path was created but could not be defined as standard.",
	  newMeasureStandard: "Define new measure standard for an image.",
	  completeFormFieldsAbove: "Please fill all fields above.",
	  manualInput: "Manual input",
	  dictionary: "Dictionary",
	  titleAndNumber: "Custom text + auto-incremented number.",
	  backToMeasure: "Return to measure",
	  currentMeasure: "Current measure",
	  newMeasuresUnsaved: "New measures (not saved yet)",
	  unsavedChangesWillBeLost: "Unsaved changes will be lost if you continue. Continue ?",
	  notRecolnat: 'Not ReColNat',
	  interpolated: {
	    addNSheetsToSet: "Add the %0 sheets selected in basket to set %1",
	    fileHasBeenProcessed: "File %0 has been processed",
	    lineInvalid: "Line %0 not valid",
	    downloadSetImagesHelp2: "%0 images in set %1 will be compressed and made available for download. You will receive the download link by e-mail using the information provided in your profile. The link will also be displayed in the list above (close and open this window to refresh display). All exports will be deleted once per week (usually on Saturday).",
	    errorCreatingSet: "Failed to create set %0",
	    emptySetCreated: "Set %0 created.",
	    entityCopiedToNewSet: "Entity %0 (id %1) moved to its new set.",
	    errorCopyingEntity: "Entity %0 (id %1) could not be moved to its new set.",
	    organiseSetHelp0: "Automatically cluster the conents of set %0",
	    organiseSetHelp2: "Clustering predicted results : %0 sub-sets will be created in set %1",
	    organiseSetHelp4: "%0 will contain %1 entities.",
	    loadingImages: "Loading %0 images",
	    setHasUnplacedImages: "%0 images from this set are not displayed in the current view. Click here if you wish to place them.",
	    countImages: "%0 images",
	    stageX: "Stage %0/%1",
	    invalidCoordinates: "Invalid coordinates : x=%0 y=%1",
	    failedToImportImage: "An image failed to import: %0",
	    failedToPlaceImage: "Failed to place image %0",
	    importingImages: 'Importing images... %0/%1 (%2 errors)',
	    placingImages: 'Placing images... %0/%1 (%2 errors)',
	    measureIsStandard: "This measure has been defined as a standard for its image with values : %0",
	    length: "Length = %0"
	  },
	  darwinCore: {
	    identifiedBy: 'Identified by',
	    identificationQualifier: "Identification qualifier",
	    typeStatus: "Type status",
	    identificationVerificationStatus: "Identification Verification Status",
	    dateIdentified: "Date identified",
	    identificationRemarks: "Identification remarks",

	    taxonomicStatus: "Taxonomic status",
	    taxonOrder: "Taxon Order",
	    acceptedNameUsage: "Accepted name usage",
	    taxonPhylum: "Taxon phylum",
	    namePublishedInYear: "Name published in year",
	    kingdom: "Kingdom",
	    namePublishedIn: "Name published in",
	    taxonRank: "Taxon rank",
	    specificEpithet: "Specific epithet",
	    taxonRemarks: "Taxon remarks",
	    scientificName: "Scientific name",
	    'class': "Class",
	    genus: "Genus",
	    subGenus: "Sub-genus",
	    family: "Family",
	    parentNameUsage: "Parent name usage",
	    vernacularName: "Vernacular name",
	    originalNameUsage: "Original name usage",
	    nomenclaturalCode: "Nomenclatural code",
	    higherClassification: "Higher classification",
	    nomenclaturalStatus: "Nomenclatural status",
	    nameAccordingTo: "Name according to",
	    scientificNameAuthorship: "Scientific name authorship",
	    infraspecificEpithet: "Infraspecific epithet",

	    verbatimEventDate: "Verbatim event date",
	    fieldNotes: "Field notes",
	    eventDate: "Event date",
	    eventRemarks: "Event remarks",
	    fieldNumber: "Field number",
	    habitat: "Habitat",
	    recordedBy: "Recorded by",
	    verbatimLocality: "Verbatim locality",
	    minDepthInM: "Min depth (m)",
	    geodeticDatum: "Geodetic datum",
	    locationRemarks: "Location remarks",
	    locationId: "Location ID",
	    georeferenceSources: "Georeference sources",
	    verbatimElevation: "Verbatim elevation",
	    maxElevationInM: "Max elevation (m)",
	    averageAltitudeRounded: "Average altitude rounded",
	    maxDepthInM: "Max depth (m)",
	    minElevationInM: "Min elevation (m)",

	    basisOfRecord: "Basis of record",
	    lifeStage: "Life stage",
	    sex: "Sex",
	    associatedTaxa: "Associated taxa",
	    occurrenceRemarks: "Occurrence remarks",
	    institutionCode: "Institution code",
	    ownerInstitutionCode: "Owner institution code",
	    collectionCode: "Collection code",
	    recordNumber: "Record n°",
	    bibliographicCitation: "Bibliographic citation",
	    associatedReferences: "Associated references",
	    rightsHolder: "Rights holder",
	    rights: "Rights",
	    accessRights: "Access rights",
	    associatedMedia: "Associated media",
	    disposition: "Disposition"

	  }
	};
	module.exports = exports['default'];

/***/ },
/* 441 */
/***/ function(module, exports) {

	/**
	 * French interface internationalisation file.
	 *
	 * Created by dmitri on 07/12/16.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  exports: 'Exports',
	  operationNotAvailableInVersion: "Cette fonctionnalité n'est pas disponible dans la version actuelle",
	  languages: 'Langues',
	  remove: 'Supprimer',
	  tools: 'Outils',
	  recolnatData: 'Données ReColNat',
	  namelessEntity: "Entité sans nom",
	  namelessPoI: "Point sans nom",
	  namelessToI: "Chemin sans nom",
	  namelessRoI: "Zone sans nom",
	  namelessAoI: "Angle sans nom",
	  namelessImage: "Image sans nom",
	  basketEmpty: 'Votre panier Recherche est vide. Allez sur explore.recolnat.org pour le remplir.',
	  countImagesInBasket: "Images dans le panier Recherche :",
	  updateBasket: 'Mettre à jour le panier',
	  basketUnavailable: "Panier indisponible. Veuillez réessayer plus tard",
	  selectUnselectAll: "Tout cocher/décocher",
	  loading: "Chargement...",
	  imageUnavailable: 'Image indisponible',
	  mySets: 'Mes sets',
	  moveDeniedByServer: "Le déplacement a été refusé par le serveur",
	  managerHelp0: "Cliquez sur 'Mes sets' pour voir le premier niveau de sets et notament le 'Set Exemple'. Ce dernier vous permet de découvrir le Collaboratoire et ses fonctions.",
	  managerHelp1: "Cliquez sur un set pour charger son contenu",
	  managerHelp2: "Double-cliquez sur un set  pour le charger dans la paillasse.",
	  managerHelp3: "Le clic droit sur un set  permet d'afficher son menu contextuel.",
	  managerHelp4: "Si le set choisi  contient des images, elles seront listées à droite.",
	  creationDate: "Date de création",
	  dataUnavailableDueToNetworkError: 'Erreur réseau: donnée indisponible pour le moment',
	  insitutionCodeUnavailable: 'Code institution indisponible',
	  catalogNumberUnavailable: 'N° catalogue indisponible',
	  dataUnavailable: 'Donnée indisponible',
	  noDeterminationAccepted: "Le fournisseur de données n'a marqué aucune détermination comme acceptée. La détermination affichée est la dernière trouvée par le système.",
	  harvest: 'Récolte',
	  harvester: 'Récolteur',
	  harvestLocation: 'Lieu de récolte',
	  catalogNumber: 'N° inventaire',
	  specimenExplorePage: 'Page Explore du spécimen',
	  lastModified: "Dernière modification",
	  day: 'Jour',
	  month: 'Mois',
	  year: 'Année',
	  decade: 'Décennie',
	  longitude: 'Longitude',
	  countryCode: "Code pays",
	  municipality: "Municipalité",
	  country: "Pays",
	  county: "Département",
	  continent: "Continent",
	  location: "Localisation",
	  locality: "Localité",
	  save: 'Enregistrer',
	  properties: 'Propriétés',
	  minimap: 'Minivue',
	  setManager: 'Sets',
	  observation: 'Observation',
	  organisation: "Agencement",
	  tabular: "Tabulaire",
	  unavailableInCurrentVersion: "(Indisponible dans la version actuelle)",
	  actions: "Actions",
	  newSet: "Nouveau set",
	  fromBasketSubtitle: "à partir de votre panier Explore",
	  open: 'Ouvrir',
	  selectedSet: "set sélectionné sur paillasse",
	  organise: "Réorganiser",
	  selectedSetContent: "le contenu du set sélectionné",
	  selectAnImage: 'Choisissez une image',
	  noActiveImage: "Pas d'image active",
	  groupsAndImages: "Groupes & Images",
	  stateOrProvince: "Etat/Province",
	  textIsMandatory: "Le texte est obligatoire",
	  operationFailedNetwork: "L'opération a échoué suite à un problème réseau. Veuillez réessayer plus tard",
	  newAnnotation: "Nouvelle annotation",
	  newAnnotationText: "Texte de l'annotation",
	  cancel: 'Annuler',
	  addAnnotation: "Ajouter l'annotation",
	  addAnAnnotation: 'Ajouter une annotation',
	  addATag: 'Ajouter un tag',
	  errorNotCsv: "Un problème est survenu pendant la lecture du fichier. Le fichier choisi n'est pas au format CSV.",
	  startingImport: "Lancement de l'import...",
	  nothingToImport: "Aucune image à importer",
	  importImages: "Importer des images",
	  specimen: "Spécimen",
	  addToSet: 'Ajouter au set',
	  addImages: 'Ajouter les images',
	  fromBasket: "depuis le panier Recolnat (ci-dessous)",
	  fromCsv: "depuis un fichier CSV ou Excel CSV",
	  fromNowhere: "Ne pas ajouter d'images (créer seulement un set vide)",
	  intoSet: "dans le set",
	  intoNewSubSet: "dans un nouveau sous-set de",
	  newSubSetName: "Nom du nouveau sous-set",
	  createEmptySet: "Créer set vide",
	  andKeepInBasket: 'et conserver dans le panier',
	  andRemoveFromBasket: 'et supprimer du panier',
	  importExternalImages: "Import d'images extérieures à Recolnat",
	  importExternalHelp0: "Vous pouvez importer dans le collaboratoire des images extérieures à la base d'images Recolnat (panier). Attention, ces images doivent obligatoirement être accessibles en ligne (lien http ou https).",
	  importExternalHelp1: "Pour ce faire vous devez d'abord créer avec Excel ou LibreOffice un fichier contenant la liste de ces images, l'exporter au format CSV puis choisir ce fichier ci-dessous.",
	  download: "Télécharger",
	  validCsvExample: "un exemple de CSV valide",
	  frenchFormatCsv: "Format CSV français avec séparateur ; ",
	  englishFormatCsv: "Format CSV anglo-saxon avec séparateur , ",
	  otherFormatCsv: "Autre format dont je donne le séparateur ci-contre",
	  separator: "Séparateur",
	  next: "Suivant",
	  imagesFound: 'images trouvées',
	  reload: 'Recharger',
	  launchImport: "Lancer l'import",
	  deleteFromSet: "Retirer du set",
	  deleteHelp0: "L'entité sélectionnée sera retirée de son set parent. Elle restera accessible depuis tout autre parent.",
	  confirm: "Confirmer",
	  errorGettingDownloadList: "Impossible de récupérer la liste des exports",
	  downloadSetImages: "Exporter les images du set",
	  downloadSetImagesHelp0: "Les exports suivants issus de vos demandes précédentes sont disponibles pour téléchargement :",
	  downloadSetImagesHelp1: "Si vous souhaitez créer un export, veuillez ouvrir cette fenêtre après avoir sélectionné un set dans le gestionnaire de sets ou avoir chargé un set dans la paillasse.",
	  dropdownSelectRequired: "Vous devez choisir une option dans la liste déroulante",
	  contactForm: "Formulaire de contact",
	  selectInDropdown: "Vous voulez... (sélectionnez dans la liste)",
	  reportBug: "Signaler un bug",
	  suggestEnhancement: "Proposer une amélioration",
	  provideFeedback: "Nous parler de votre expérience",
	  other: "Autre",
	  feedbackFormHelp0: "Je souhaite être tenu au courant des réponses à ma requête. Les réponses vous seront communiquées via l'adresse e-mail renseignée à la création de votre compte ReColNat",
	  send: "Envoyer",
	  loginRequired: "Connexion nécessaire",
	  loginHelp: "Vous devez être connecté avec votre compte ReColNat afin de pouvoir accéder au Collaboratoire",
	  login: "Me Connecter",
	  createAccount: "Créer compte",
	  dataUnavailableRetry: "Les données du set ne sont pas encore disponibles. Veuillez réessayer ultérieurement",
	  organiseSet: "Organiser le set",
	  name: "Nom",
	  organiseSetHelp1: "Critère de regroupement : ",
	  organiseSetHelp3: "Attention, cette opération prend plusieurs minutes sur un petit set (10 entités) et ne doit pas être interrompue. Prévoyez la nuit sur de gros sets.",
	  organiseSetHelp5: "Traitement en cours. La fenêtre se fermera automatiquement dès que le traitement sera terminé.",
	  precalculate: "Calculer le résultat",
	  apply: "Appliquer les actions",
	  noActiveSet: "Aucun set actif",
	  placing: "Placement en cours",
	  auto: "Auto",
	  manual: "Manuel",
	  placeInLine: 'Placer toutes les images non-affichées en ligne. Le placement commence dans le coin supérieur gauche de la vue actuelle.',
	  placeInColumn: 'Placer toutes les images non-affichées en colonne. Le placement commence dans le coin supérieur gauche de la vue actuelle.',
	  placeInMatrix: 'Placer toutes les images non-affichées en tableau de 5 colonnes. Le placement commence dans le coin supérieur gauche de la vue actuelle.',
	  dragDropImage: "Faites glisser l'image vers le bureau pour la placer",
	  collaboratory: "Le Collaboratoire",
	  version: "Version",
	  downloads: "Téléchargements",
	  unavailable: 'Indisponible',
	  nameUnavailable: "Nom manquant",
	  noSheetSelected: "Pas de planche sélectionnée",
	  cannotRetrieveRecolnatData: 'Impossible de récupérer les données associées dans ReColNat',
	  noInformationAboutSelection: "Pas d'informations disponibles sur la sélection",
	  determination: "Détermination",
	  syncWithServer: 'Synchronisation des données...',
	  exifData: 'Données de numérisation',
	  autoTagTooltip: "Ces tags seront ajoutés à toutes les nouvelles entités au moment de la sauvegarde",
	  lineMeasureTooltip: "Cliquez sur l'image pour commencer une nouvelle mesure",
	  lineMeasureTooltip1: "Cliquez sur l'image pour terminer la mesure",
	  lineMeasureTooltip2: "Vous ne pouvez pas changer d'image pendant qu'une autre mesure est en cours. Terminez la mesure sur la même image ou cliquez sur le bouton droit de la souris pour annuler la mesure en cours.",
	  lineMeasureTooltip3: 'Veuillez indiquer un nom pour cette mesure',
	  newLineMeasure: "Mesurer une longueur sur l'image sélectionnée",
	  newRegionOfInterestTooltip: "Cliquez sur l'image pour placer le premier point du polygone.",

	  newRegionOfInterestTooltip1: "Impossible de commencer une ligne ici. Veuillez cliquer sur un point au début ou à la fin de la zone.",
	  newRegionOfInterestTooltip2: "Il faut au moins 2 côtés pour fermer un polygone.",
	  newRegionOfInterestTooltip3: "Impossible de créer la ligne ici. Si vous souhaitez fermer le polygone, cliquez sur le bouton droit de la souris.",
	  newRegionOfInterestTooltip4: "Tirez un point pour le déplacer. Double-cliquez sur une ligne pour créer un nouveau point en son milieu. Entrez un nom puis cliquez sur Enregistrer pour enregistrer le tracé.",
	  newRegionOfInterestTooltip5: "Cliquez sur la même image pour ajouter des points supplémentaires au polygone. Cliquez sur le bouton droit de la souris ou appuyez sur ENTREE pour fermer le polygone.",
	  createNewRoI: 'Créer un polygone',
	  newPointOfInterestTooltip: "Cliquez sur l'image pour créer un point.",
	  newPointOfInterestTooltip1: "Marquer un point remarquable de l'image sélectionnée",
	  newPathTooltip: "Cliquez sur l'image pour placer le premier point du tracé.",
	  annotationTooltip: "Cliquez sur un élément de l'image pour y ajouter des annotations.",
	  exportFragmentsTooltip: "Cliquez sur une zone pour l'ajouter à l'export.",
	  moveObjectTooltip: 'Faites glisser une image pour la déplacer.',
	  moveViewTooltip: '',
	  selectObjectTooltip: 'Cliquez sur une image pour la sélectionner',
	  createNewAngle: "Mesurer un angle",
	  newAngleTooltip: "Cliquez sur une image pour placer le sommet de l'angle à mesurer.",
	  angleNotFinished: "Le tracé de l'angle n'est pas terminé",
	  nameMandatory: "Le nom est obligatoire",
	  newAngleTooltip2: "Cliquez sur la même image pour figer la première droite de l'angle.",
	  newAngleTooltip3: "Cliquez sur la même image pour figer la deuxième droite de l'angle.",
	  newAngleTooltip4: "Tirez n'importe quel point de l'angle pour changer sa définition. Cliquez sur Enregistrer pour terminer l'angle et le sauvegarder.",
	  angle: "Angle",
	  newPathCannotStart: "Impossible de commencer une ligne ici. Veuillez cliquer sur un point au début ou à la fin du chemin existant.",
	  newPathVertexError: "Impossible de faire passer le chemin par ce point.",
	  createPathTooltip0: "Tirez un point pour le déplacer. Double-cliquez sur une ligne pour la scinder en deux.",
	  createPathTooltip1: "Cliquez sur l'image active pour créer un nouveau point et le relier au point précédent. Clic droit ou ENTREE pour terminer l'ajout de points ou cliquez sur le premier point pour fermer le tracé",
	  createNewPath: "Créer un nouveau chemin",
	  vertexOutsideImageError: "Le point doit se situer à l'intérieur de l'image active",
	  polygonUnfinished: "Sauvegarde impossible: le polygone n'est pas terminé.",
	  type: 'Type',
	  value: 'Valeur',
	  unit: 'Unité',
	  sheet: 'Planche',
	  area: 'Aire',
	  perimeter: 'Périmètre',
	  length: 'Longueur',
	  set: 'Set',
	  vertex: 'Point',
	  trail: 'Chemin',
	  region: "Zone",
	  image: 'Image',
	  imageName: "Nom de l'image",
	  displayedSpecimenName: "Nom affiché du spécimen",
	  coordinatesWithOrigin: "Coordonnées dans l'image, origine en bas à gauche",
	  measures: "Mesures",
	  tags: "Tags",
	  imageSheet: "Image/Planche",
	  copyToClipboard: "Copier vers le presse-papiers",
	  exportAsCsv: "Exporter au format CSV",
	  displayOptions: "Options d'affichage",
	  noDataForSelection: "Aucune donnée à afficher pour la sélection courante",
	  tagsAndMeasures: "Tags et Mesures",
	  sortBy: 'Trier par',
	  recolnatSystem: "Système ReColNat",
	  noStandardAvailable: 'Aucun étalon disponible pour la conversion',
	  zoomOnEntity: "Centrer la paillasse sur l'élement",
	  imagePreviewer: "Pré-visionneuse d'images",
	  preview: "Aperçu",
	  labBench: "Paillasse",
	  showAllImages: "Afficher toutes les images",
	  everything: "Tout",
	  showWholeImage: "Afficher l'image active en entier",
	  show1to1: "Voir l'image à l'échelle 1:1",
	  newAngle: "Nouvel angle",
	  newTrail: "Nouveau chemin",
	  newVertex: "Nouveau point",
	  newRegion: "Nouvelle zone",
	  newMeasure: "Règle",
	  measureStandard: "Étalon",
	  nothing: "Aucun",
	  creatingSet: "Création du set",
	  createdSet: "Set crée",
	  noSetLoaded: "Pas de set chargé",
	  lengthInMm: "Longueur en mm",
	  newStandardTooltip1: "Cliquez sur une image pour définir le premier point de la ligne qui servira d'étalon",
	  newStandardTooltip2: "Cliquez sur la même image pour terminer la ligne",
	  newStandardTooltip3: "Donnez un nom à l'étalon et indiquez sa longueur en mm dans les champs ci-dessous. Vous pouvez modifier la définition de la ligne en tirant les points aux extrémités. Cliquez sur Enregistrer pour terminer.",
	  newStandardFailed: "La définition de l'étalon a échoué.",
	  newStandardError1: "Le chemin n'a pas pu être crée",
	  newStandardError2: "Le chemin a été crée mais n'a pas pu être défini comme étalon",
	  newMeasureStandard: "Étalonner une image",
	  completeFormFieldsAbove: "Veuillez compléter les champs ci-dessus",
	  manualInput: "Saisie manuelle",
	  dictionary: "Dictionnaire",
	  titleAndNumber: "Titre personnalisé + n° de séquence",
	  backToMeasure: "Retour à la mesure",
	  currentMeasure: "Mesure courante",
	  newMeasuresUnsaved: "Nouvelles mesures (pas encore enregistrées)",
	  unsavedChangesWillBeLost: "Les changements non sauvegardés seront perdus. Voulez-vous continuer ?",
	  notRecolnat: 'Hors ReColNat',
	  interpolated: {
	    addNSheetsToSet: "Ajouter les %0 planches sélectionnées dans le panier au set %1",
	    fileHasBeenProcessed: "Le fichier %0 a été traité",
	    lineInvalid: "Ligne %0 invalide",
	    downloadSetImagesHelp2: "Les %0 images du set %1 seront compressées et mises à votre disposition pour téléchargement. Vous recevrez le lien de téléchargement à l'adresse e-mail associée à votre compte ReColNat. Le lien sera aussi affiché dans la liste ci-dessus. Tous les fichiers sont supprimés une fois par semaine (généralement le samedi).",
	    errorCreatingSet: "Echec de la création du set %0",
	    emptySetCreated: "Set %0 crée. Copie des entités.",
	    entityCopiedToNewSet: "Entité %0 (%1) copiée vers son nouveau set.",
	    errorCopyingEntity: "Entité %0 (%1) n'a pas pu être ajoutée à son nouveau set",
	    organiseSetHelp0: "Regrouper automatiquement le contenu du set %0",
	    organiseSetHelp2: "Résultat du regroupement : %0 sets seront crées dans %1",
	    organiseSetHelp4: "%0 contiendra %1 entités.",
	    loadingImages: "Chargement %0 images",
	    setHasUnplacedImages: "Il y a  %0 images dans ce set qui ne sont pas placées dans la vue actuelle. Cliquez ici si vous souhaitez les placer.",
	    countImages: "%0 images",
	    stageX: "Etape %0/%1",
	    invalidCoordinates: "Les coordonnées ne sont pas valides : x=%0 y=%1",
	    failedToImportImage: "L'import d'une image a échoué %0",
	    failedToPlaceImage: "Le placement d'une image a échoué %0",
	    importingImages: 'Import des images... %0/%1 (%2 erreurs)',
	    placingImages: 'Placement des images... %0/%1 (%2 erreurs)',
	    measureIsStandard: "La mesure actuelle a été définie comme étalon pour son image avec les valeurs : %0",
	    length: "Longueur = %0"
	  },
	  darwinCore: {
	    identifiedBy: 'Identifié par',
	    identificationQualifier: "Identification qualifier",
	    typeStatus: "Type status",
	    identificationVerificationStatus: "Vérification de l'identification",
	    dateIdentified: "Date d'identification",
	    identificationRemarks: "Remarques d'identification",

	    taxonomicStatus: "Etat de la taxonomie",
	    taxonOrder: "Ordre",
	    acceptedNameUsage: "Nom d'usage accepté",
	    taxonPhylum: "Phylum",
	    namePublishedInYear: "Année de publication du nom",
	    kingdom: "Règne",
	    namePublishedIn: "Nom publié dans",
	    taxonRank: "Niveau du taxon",
	    specificEpithet: "Epithète spécifique",
	    taxonRemarks: "Remarques sur le taxon",
	    scientificName: "Nom scientifique",
	    'class': "Classe",
	    genus: "Genre",
	    subGenus: "Sous-genre",
	    family: "Famille",
	    parentNameUsage: "Nom d'usage du parent",
	    vernacularName: "Nom vernaculaire",
	    originalNameUsage: "Nom d'usage originel",
	    nomenclaturalCode: "Code de la nomenclature",
	    higherClassification: "Classification supérieure",
	    nomenclaturalStatus: "Etat de la nomenclature",
	    nameAccordingTo: "Sensu",
	    scientificNameAuthorship: "Créateur du nom scientifique",
	    infraspecificEpithet: "Épithète infraspécifique",

	    verbatimEventDate: "Date originale de l'événement",
	    fieldNotes: "Notes de terrain",
	    eventDate: "Date de l'événement",
	    eventRemarks: "Remarques sur l'événement",
	    fieldNumber: "Numéro de terrain",
	    habitat: "Habitat",
	    recordedBy: "Enregistré par",
	    verbatimLocality: "Localité originale",
	    minDepthInM: "Profondeur minimale (m)",
	    geodeticDatum: "Système géodésique",
	    locationRemarks: "Remarques sur le lieu",
	    locationId: "ID du lieu",
	    georeferenceSources: "Références de géolocalisation",
	    verbatimElevation: "Altitude originale",
	    maxElevationInM: "Altitude maximale (m)",
	    averageAltitudeRounded: "Altitude moyenne",
	    maxDepthInM: "Profondeur maximale (m)",
	    minElevationInM: "Altitude minimale (m)",

	    basisOfRecord: "Base de registre",
	    lifeStage: "Stade de développement",
	    sex: "Sexe",
	    associatedTaxa: "Taxons associés",
	    occurrenceRemarks: "Remarques sur l'occurrence",
	    institutionCode: "Code de l'institution",
	    ownerInstitutionCode: "Code de l'institution propriétaire",
	    collectionCode: "Code de la collection",
	    recordNumber: "N° d'enregistrement",
	    bibliographicCitation: "Référence bibliographique",
	    associatedReferences: "Références associées",
	    rightsHolder: "Détenteur des droits",
	    rights: "Droits",
	    accessRights: "Droits d'accès",
	    associatedMedia: "Médias associés",
	    disposition: "Disposition"

	  }
	};
	module.exports = exports['default'];

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Store for the context menu. Can also be used for any component which requires knowledge of content at a click location.
	 *
	 * Created by dmitri on 04/01/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _events = __webpack_require__(306);

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsMenuConstants = __webpack_require__(297);

	var _constantsMenuConstants2 = _interopRequireDefault(_constantsMenuConstants);

	var _eventsMenuEvents = __webpack_require__(443);

	var _eventsMenuEvents2 = _interopRequireDefault(_eventsMenuEvents);

	var MenuStore = (function (_EventEmitter) {
	  _inherits(MenuStore, _EventEmitter);

	  function MenuStore() {
	    var _this = this;

	    _classCallCheck(this, MenuStore);

	    _get(Object.getPrototypeOf(MenuStore.prototype), 'constructor', this).call(this);

	    /**
	     * Array of Objects corresponding to the list of items at click location.
	     * Each Object must have at least the following fields : {parent, link, data: {uid}}
	     *  * @field parent String UID of the parent element (if applicable)
	     *  * @field link String UID of the link to parent element (if applicable)
	     *  * @field uid String UID of the element
	     * @type {Array}
	     */
	    this.itemsAtCursorRightClick = [];
	    this.click = {};
	    this.click.x = null;
	    this.click.y = null;

	    // Register a reaction to an action.
	    _dispatcherAppDispatcher2['default'].register(function (action) {
	      switch (action.actionType) {
	        case _constantsMenuConstants2['default'].ActionTypes.EDITOR_CONTEXT_MENU:
	          _this.itemsAtCursorRightClick = action.items;
	          _this.click.x = action.x;
	          _this.click.y = action.y;
	          _this.emit(_eventsMenuEvents2['default'].DISPLAY_CONTEXT_MENU);
	          break;
	        default:
	          break;
	      }
	    });
	  }

	  _createClass(MenuStore, [{
	    key: 'getElements',
	    value: function getElements() {
	      return this.itemsAtCursorRightClick;
	    }
	  }, {
	    key: 'getClickLocation',
	    value: function getClickLocation() {
	      return this.click;
	    }
	  }, {
	    key: 'addContextMenuListener',
	    value: function addContextMenuListener(callback) {
	      this.on(_eventsMenuEvents2['default'].DISPLAY_CONTEXT_MENU, callback);
	    }
	  }, {
	    key: 'removeContextMenuListener',
	    value: function removeContextMenuListener(callback) {
	      this.removeListener(_eventsMenuEvents2['default'].DISPLAY_CONTEXT_MENU, callback);
	    }
	  }]);

	  return MenuStore;
	})(_events.EventEmitter);

	exports['default'] = MenuStore;
	module.exports = exports['default'];

/***/ },
/* 443 */
/***/ function(module, exports) {

	/**
	 * Events for context menu
	 *
	 * Created by dmitri on 04/01/16.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  DISPLAY_CONTEXT_MENU: 'MENU_contextMenu'
	};
	module.exports = exports['default'];

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Store for the data displayed in the SetManager
	 *
	 * Created by dmitri on 15/01/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _events = __webpack_require__(306);

	var _nodeUuid = __webpack_require__(201);

	var _nodeUuid2 = _interopRequireDefault(_nodeUuid);

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsManagerConstants = __webpack_require__(246);

	var _constantsManagerConstants2 = _interopRequireDefault(_constantsManagerConstants);

	var _eventsManagerEvents = __webpack_require__(445);

	var _eventsManagerEvents2 = _interopRequireDefault(_eventsManagerEvents);

	var _actionsSocketActions = __webpack_require__(240);

	var _actionsSocketActions2 = _interopRequireDefault(_actionsSocketActions);

	var ManagerStore = (function (_EventEmitter) {
	  _inherits(ManagerStore, _EventEmitter);

	  function ManagerStore() {
	    var _this = this;

	    _classCallCheck(this, ManagerStore);

	    _get(Object.getPrototypeOf(ManagerStore.prototype), 'constructor', this).call(this);

	    this.setMaxListeners(500);

	    /**
	     * Global selected node (set or item).
	     * @field id String UID of the node (set, specimen or image UID)
	     * @field name String plain text name of the selection
	     * @field type String type of the entity in database
	     * @field parent String UID of the parent set
	     * @field linkToParent String UID of the link (edge) between this node and its parent. This is important as the same entity may appear multiple times within a Set, however each time the link UID is different.
	     * @type {{id: null, name: null, type: null, parent: null, linkToParent: null}}
	     */
	    this.selectedNode = {
	      id: null,
	      name: null,
	      type: null,
	      parent: null,
	      linkToParent: null
	    };

	    /**
	     * List of sets to be displayed in the manager (and their content). Each entry in this array is one column in the manager.
	     *
	     * May be injected with a selectedId property when something inside a displayed set is or war selected (not to be confused with global selection : this.selectedNode).
	     * @type {Array}
	     */
	    this.displayedSets = [];

	    this.userCoreSet = {};
	    this.listenersById = {};
	    this.setIdToPosition = {};

	    _dispatcherAppDispatcher2['default'].register(function (action) {
	      switch (action.actionType) {
	        case _constantsManagerConstants2['default'].ActionTypes.SET_SELECTED_NODE:
	          //console.log(JSON.stringify(action));
	          if (action.id) {
	            _this.selectedNode = {
	              id: action.id,
	              name: action.name,
	              type: action.type,
	              parent: action.parent,
	              linkToParent: action.linkToParent
	            };
	            if (action.type == 'Set') {
	              var parentIndex = _this.indexOfDisplayedSet(action.parent);
	              _this.requestGraphAround(action.id, action.type, parentIndex + 1, true);
	            }
	          } else {
	            _this.selectedNode = {
	              id: null,
	              name: null,
	              type: null,
	              parent: null,
	              linkToParent: null
	            };
	          }

	          _this.emit(_eventsManagerEvents2['default'].SET_SELECTED_NODE);
	          break;
	        case _constantsManagerConstants2['default'].ActionTypes.SET_ACTIVE_ENTITY_IN_SET:
	          var setIdx = null;
	          var itemId = null;
	          if (action.parentSetId) {
	            // Find indices
	            _this.displayedSets.forEach(function (s, idx) {
	              if (s) {
	                if (s.uid == action.parentSetId) {
	                  setIdx = idx;
	                }
	              }
	            });
	            itemId = action.entityId;
	          } else if (action.setIndex != undefined) {
	            setIdx = action.setIndex;
	            if (setIdx == -1) {
	              itemId = _this.studyContainer.studies[action.entityIndex].core.uid;
	            } else {
	              itemId = _this.displayedSets[setIdx].subsets[action.entityIndex].uid;
	            }
	          } else {
	            console.error('Unprocessable action content ' + JSON.stringify(action));
	            break;
	          }
	          //console.log('setting selection in set ' + setIdx + ' to ' + itemId);
	          _this.setSelected(setIdx, itemId);
	          _this.emit(_eventsManagerEvents2['default'].SET_SELECTED_NODE);
	          break;
	        default:
	          break;
	      }
	    });

	    //console.log('register listener user');
	    window.setTimeout(_actionsSocketActions2['default'].registerListener.bind(null, 'user', this.setCoreSet.bind(this)), 10);
	    this.listenersById['user'] = this.setCoreSet.bind(this);
	  }

	  _createClass(ManagerStore, [{
	    key: 'setCoreSet',
	    value: function setCoreSet(user) {
	      if (user) {
	        this.requestGraphAround(user.coreSet, 'Set', 0, true);
	      }
	    }
	  }, {
	    key: 'getCoreSet',
	    value: function getCoreSet() {
	      return JSON.parse(JSON.stringify(this.userCoreSet));
	    }

	    /**
	     * Returns the index of the first displayed set corresponding to the provided id.
	     * @param id
	     * @returns {number}
	     */
	  }, {
	    key: 'indexOfDisplayedSet',
	    value: function indexOfDisplayedSet(id) {
	      for (var i = 0; i < this.displayedSets.length; ++i) {
	        if (this.displayedSets[i].uid == id) {
	          return i;
	        }
	      }
	      return -1;
	    }
	  }, {
	    key: 'getSets',
	    value: function getSets() {
	      return JSON.parse(JSON.stringify(this.displayedSets));
	    }

	    /**
	     * Sets the selected item in a specific set (not the global selection).
	     * @param setIdx
	     * @param itemId
	     */
	  }, {
	    key: 'setSelected',
	    value: function setSelected(setIdx, itemId) {
	      if (setIdx == -1) {
	        this.studyContainer.selectedId = itemId;
	      } else {
	        this.displayedSets[setIdx].selectedId = itemId;
	      }
	    }
	  }, {
	    key: 'getActiveId',
	    value: function getActiveId(index) {
	      return this.displayedSets[index].selectedId;
	    }
	  }, {
	    key: 'getSelected',
	    value: function getSelected() {
	      return JSON.parse(JSON.stringify(this.selectedNode));
	    }

	    /**
	     * Receives data about a Set and stores it, keeping the old local selection if any. Adds a hash to the Set in order to be able to find out easily when a set changes without parsing all of its data.
	     * @param data
	     */
	  }, {
	    key: 'receiveSetData',
	    value: function receiveSetData(data) {
	      var setIndex = this.setIdToPosition[data.uid];
	      if (setIndex === undefined || setIndex === null) {
	        // This set is no longer displayed, we should think about unsubscribing as well
	        console.warn('Set is not in display ' + data.uid);
	        return;
	      }
	      var newData = JSON.parse(JSON.stringify(data));
	      newData.hash = _nodeUuid2['default'].v4();

	      var oldData = this.displayedSets[setIndex];
	      if (oldData.uid === data.uid) {
	        newData.selectedId = oldData.selectedId;
	      }
	      this.displayedSets[setIndex] = newData;
	      this.emit(_eventsManagerEvents2['default'].UPDATE_MANAGER_DISPLAY);
	    }

	    /**
	     * Retrieve a Set from the server and store it at the given index, clearing all following indexes if necessary.
	     * @param id String UID of the Set to request
	     * @param type String type corresponding to the UID, if not 'Set' this function does nothing
	     * @param setIdx Integer (optional) index at which to store the set. If no index is provided, it will be pushed to the end.
	     * @param splice Boolean (optional) if true will remove all sets after the provided index. False by default.
	     */
	  }, {
	    key: 'requestGraphAround',
	    value: function requestGraphAround(id, type, setIdx) {
	      var splice = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

	      //console.log('requestGraphAround(' + id + ',' + type + ',' + setIdx + ',' + splice +')');
	      if (type !== 'Set') {
	        console.log('Type is not Set');
	        return;
	      }
	      if (setIdx == null) {
	        setIdx = this.displayedSets.length;
	      } else {
	        if (this.setIdToPosition[id] === setIdx) {
	          console.log('Set already in right position and being listened to');
	          return;
	        }
	      }

	      if (splice) {
	        var removed = this.displayedSets.splice(setIdx);
	        for (var i = 0; i < removed.length; ++i) {
	          this.setIdToPosition[removed[i].uid] = null;
	          window.setTimeout(_actionsSocketActions2['default'].removeListener.bind(null, removed[i].uid, this.listenersById[removed[i].uid]), 10);
	          delete this.listenersById[removed[i].uid];
	        }
	      }

	      this.setIdToPosition[id] = setIdx;

	      this.displayedSets[setIdx] = {
	        uid: id,
	        loading: true
	      };
	      this.emit(_eventsManagerEvents2['default'].UPDATE_MANAGER_DISPLAY);

	      if (!this.listenersById[id]) {
	        this.listenersById[id] = this.receiveSetData.bind(this);
	        //console.log('register listener' + id);
	        window.setTimeout(_actionsSocketActions2['default'].registerListener.bind(null, id, this.receiveSetData.bind(this)), 10);
	      }
	    }
	  }, {
	    key: 'addSelectionChangeListener',
	    value: function addSelectionChangeListener(callback) {
	      this.on(_eventsManagerEvents2['default'].SET_SELECTED_NODE, callback);
	    }
	  }, {
	    key: 'removeSelectionChangeListener',
	    value: function removeSelectionChangeListener(callback) {
	      this.removeListener(_eventsManagerEvents2['default'].SET_SELECTED_NODE, callback);
	    }
	  }, {
	    key: 'addManagerUpdateListener',
	    value: function addManagerUpdateListener(callback) {
	      this.on(_eventsManagerEvents2['default'].UPDATE_MANAGER_DISPLAY, callback);
	    }
	  }, {
	    key: 'removeManagerUpdateListener',
	    value: function removeManagerUpdateListener(callback) {
	      this.removeListener(_eventsManagerEvents2['default'].UPDATE_MANAGER_DISPLAY, callback);
	    }
	  }]);

	  return ManagerStore;
	})(_events.EventEmitter);

	exports['default'] = ManagerStore;
	module.exports = exports['default'];

/***/ },
/* 445 */
/***/ function(module, exports) {

	/**
	 * Events for the SetManager
	 *
	 * Created by dmitri on 15/01/16.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  SET_SELECTED_NODE: 'manager_setSelectedNode',
	  UPDATE_MANAGER_DISPLAY: 'manager_updateManagerDisplay'
	};
	module.exports = exports['default'];

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Store for images. When a component asks for an image to be loaded in the background this is the store handling the action and storing the image. Loaded images are stored internally for later calls.
	 *
	 * Created by dmitri on 29/02/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _Object$keys = __webpack_require__(285)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _events = __webpack_require__(306);

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsViewConstants = __webpack_require__(197);

	var _constantsViewConstants2 = _interopRequireDefault(_constantsViewConstants);

	var _imagesImageNotFoundPng = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../images/image-not-found.png\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));

	var _imagesImageNotFoundPng2 = _interopRequireDefault(_imagesImageNotFoundPng);

	var ImageStore = (function (_EventEmitter) {
	  _inherits(ImageStore, _EventEmitter);

	  function ImageStore() {
	    var _this = this;

	    _classCallCheck(this, ImageStore);

	    _get(Object.getPrototypeOf(ImageStore.prototype), 'constructor', this).call(this);
	    this.imageLoadedEvent = 'IMAGE_imageLoaded';

	    this.imagesLoading = {};
	    this.imagesLoaded = {};

	    _dispatcherAppDispatcher2['default'].register(function (action) {
	      switch (action.actionType) {
	        case _constantsViewConstants2['default'].ActionTypes.Local.SCHEDULE_IMAGE_LOAD:
	          _this.loadImage(action.source, action.callback);
	          _this.emit(_this.imageLoadedEvent);
	          break;
	        default:
	          break;
	      }
	    });
	  }

	  /**
	   * Begin loading an image. Checks if the image is already stored.
	   * @param source String url of the image
	   * @param callback Function callback for when the image finishes loading with success (or when the placeholder is loaded if the image is not available)
	   */

	  _createClass(ImageStore, [{
	    key: 'loadImage',
	    value: function loadImage(source, callback) {
	      if (this.imagesLoaded[source]) {
	        // Image is already loaded in store, call callback immediately (with timeout)
	        window.setTimeout((function (callback, image) {
	          callback(image);
	        })(callback, this.imagesLoaded[source].image), 10);
	      } else if (this.imagesLoading[source]) {
	        // Image is already loading, add callback to queue
	        this.imagesLoading[source].callbacks.push(callback);
	      } else {
	        // New image source, begin loading
	        this.imagesLoading[source] = {
	          source: source,
	          callbacks: [callback],
	          image: new Image()
	        };

	        this.imagesLoading[source].image.onload = this.imageLoaded.bind(this, source);

	        this.imagesLoading[source].image.onerror = function () {
	          console.error('Could not load image ' + this.src);
	          this.src = _imagesImageNotFoundPng2['default'];
	        };

	        this.imagesLoading[source].image.src = source;
	      }
	    }

	    /**
	     * Called when an image is done loading. Checks the state of the image and calls all registered callbacks for this image.
	     * @param source String url of the image which finished loading
	     */
	  }, {
	    key: 'imageLoaded',
	    value: function imageLoaded(source) {
	      this.imagesLoaded[source] = {
	        image: this.imagesLoading[source].image,
	        source: source
	      };

	      for (var i = 0; i < this.imagesLoading[source].callbacks.length; ++i) {
	        var callback = this.imagesLoading[source].callbacks[i];
	        window.setTimeout((function (callback, image) {
	          callback(image);
	        })(callback, this.imagesLoaded[source].image), 10);
	      }

	      delete this.imagesLoading[source];

	      this.emit(this.imageLoadedEvent);
	    }

	    /**
	     * Returns the number of images currently loading or waiting to be loaded.
	     * @returns {Number}
	     */
	  }, {
	    key: 'countLoadingImages',
	    value: function countLoadingImages() {
	      return _Object$keys(this.imagesLoading).length;
	    }
	  }, {
	    key: 'addLoadingStateChangeListener',
	    value: function addLoadingStateChangeListener(callback) {
	      this.on(this.imageLoadedEvent, callback);
	    }
	  }, {
	    key: 'removeLoadingStateChangeListener',
	    value: function removeLoadingStateChangeListener(callback) {
	      this.removeListener(this.imageLoadedEvent, callback);
	    }
	  }]);

	  return ImageStore;
	})(_events.EventEmitter);

	exports['default'] = ImageStore;
	module.exports = exports['default'];

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Stores metadata (both from the Colaboratory database and from external sources such as the central Recolnat database) for all entities.
	 *
	 * Created by dmitri on 05/04/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _events = __webpack_require__(306);

	var _superagent = __webpack_require__(229);

	var _superagent2 = _interopRequireDefault(_superagent);

	var _eventsMetadataEvents = __webpack_require__(448);

	var _eventsMetadataEvents2 = _interopRequireDefault(_eventsMetadataEvents);

	var _actionsSocketActions = __webpack_require__(240);

	var _actionsSocketActions2 = _interopRequireDefault(_actionsSocketActions);

	var MetadataStore = (function (_EventEmitter) {
	  _inherits(MetadataStore, _EventEmitter);

	  function MetadataStore(socket) {
	    _classCallCheck(this, MetadataStore);

	    _get(Object.getPrototypeOf(MetadataStore.prototype), 'constructor', this).call(this, socket);
	    this.socket = socket;
	    /**
	     * Metadata by id.
	     *
	     * @type {{}}
	     */
	    this.metadata = {};

	    /**
	     * Metadata ids for entities which are waiting for a server answer
	     * @type {{}}
	     */
	    this.metadataIds = {};

	    /**
	     * External metadata for entities which have an OriginalSource
	     * @type {{}}
	     */
	    this.externalMetadata = {};
	    this.setMaxListeners(1000);
	  }

	  /**
	   * Get metadata about a given id. If no metadata is available in this store, check the websocket connector. Otherwise returns null.
	   * @param id
	   * @returns {null}
	   */

	  _createClass(MetadataStore, [{
	    key: 'getMetadataAbout',
	    value: function getMetadataAbout(id) {
	      if (this.metadata[id]) {
	        return JSON.parse(JSON.stringify(this.metadata[id]));
	      }
	      if (this.socket.get(id)) {
	        // No need to clone it, socket already returns a clone
	        return this.socket.get(id);
	      }
	      return null;
	    }

	    /**
	     * Get external metadata about the entity with the given id. For this method to return anything, this id must correspond to an entity which is linked with an OriginalSource.
	     * @param id
	     * @returns {null}
	     */
	  }, {
	    key: 'getExternalMetadata',
	    value: function getExternalMetadata(id) {
	      if (this.externalMetadata[id]) {
	        return JSON.parse(JSON.stringify(this.externalMetadata[id]));
	      }
	      return null;
	    }

	    /**
	     * Retrieves a list of annotations corresponding to this entity and returns it through the provided callback. This is run once and no data is kept in the store.
	     * @param id
	     * @param callback
	     */
	  }, {
	    key: 'getAnnotationsOfEntity',
	    value: function getAnnotationsOfEntity(id, callback) {
	      window.setTimeout(_actionsSocketActions2['default'].request.bind(null, {
	        actionDetail: 'get-annotations-of-entity',
	        entity: id
	      }, callback), 10);
	    }

	    /**
	     * Retrieves a list of downloads (exports) available for the user and returns it through the provided callback.
	     * @param callback
	     */
	  }, {
	    key: 'listUserDownloads',
	    value: function listUserDownloads(callback) {
	      window.setTimeout(_actionsSocketActions2['default'].request.bind(null, {
	        actionDetail: 'list-user-downloads'
	      }, callback), 10);
	    }

	    /**
	     * Stores the received metadata. If previously stored metadata is deleted on server, it is kept locally
	     * @param metadata
	     */
	  }, {
	    key: 'metadataUpdated',
	    value: function metadataUpdated(metadata) {
	      if (metadata.forbidden || metadata.deleted) {
	        // Do not delete, let components update first
	        this.metadata[metadata.uid].deleted = true;
	      } else {
	        this.metadata[metadata.uid] = JSON.parse(JSON.stringify(metadata));
	      }
	      this.emitUpdateEvent(metadata.uid);
	    }
	  }, {
	    key: 'emitUpdateEvent',
	    value: function emitUpdateEvent(id) {
	      // console.log('meta updated emit '+ id);
	      this.emit(_eventsMetadataEvents2['default'].METADATA_UPDATE + '_' + id, id);
	      this.emit(_eventsMetadataEvents2['default'].METADATA_UPDATE, id);
	    }
	  }, {
	    key: 'emitExternalMetadataUpdateEvent',
	    value: function emitExternalMetadataUpdateEvent(id) {
	      // console.log('meta updated emit '+ id);
	      this.emit(_eventsMetadataEvents2['default'].EXTERNAL_METADATA_UPDATE + '_' + id, id);
	      this.emit(_eventsMetadataEvents2['default'].EXTERNAL_METADATA_UPDATE, id);
	    }
	  }, {
	    key: 'getOriginalSource',
	    value: function getOriginalSource(id) {
	      var meta = this.metadata[id];
	      if (!meta) {
	        // Get metadata and restart this operation
	        this.addMetadataUpdateListener(id, this.getOriginalSource.bind(this, id));
	        return;
	      }
	      if (meta.type === 'Specimen') {
	        if (meta.originalSource) {
	          this.addMetadataUpdateListener(meta.originalSource, this.originalSourceObtained.bind(this, meta.originalSource, id));
	        }
	      }
	    }
	  }, {
	    key: 'originalSourceObtained',
	    value: function originalSourceObtained(originalSourceId, specimenId) {
	      var _this = this;

	      console.log('originalSourceObtained');
	      console.log('originalSourceId ' + originalSourceId);
	      console.log('originalSourceObtained ' + specimenId);
	      var meta = this.metadata[originalSourceId];
	      if (!meta) {
	        return;
	      }
	      console.log(JSON.stringify(meta));
	      var id = meta.idInOriginSource;
	      var type = meta.typeInOriginSource;
	      var source = meta.origin;
	      switch (source.toLowerCase()) {
	        case 'recolnat':
	          console.log('recolnat ext');
	          switch (type.toLowerCase()) {
	            case 'specimen':
	              console.log('recolnat specimen ext, calling API');
	              _superagent2['default'].get('https://api.recolnat.org/erecolnat/v1/specimens/' + id).end(function (err, res) {
	                if (err) {
	                  console.error('Could not retrieve resource data from recolnat about ' + id);
	                } else {
	                  console.log('recolnat API received response');
	                  var specimen = JSON.parse(res.text);
	                  _this.externalMetadata[specimenId] = specimen;
	                  _this.emitExternalMetadataUpdateEvent(specimenId);
	                }
	              });
	              break;
	            default:
	              console.error('No handler for ReColNat object type ' + type);
	              break;
	          }
	          break;
	        default:
	          console.error('Unknown data source ' + source);
	          break;
	      }
	    }
	  }, {
	    key: 'addExternalMetadataUpdateListener',
	    value: function addExternalMetadataUpdateListener(id, callback) {
	      if (id) {
	        this.on(_eventsMetadataEvents2['default'].EXTERNAL_METADATA_UPDATE + '_' + id, callback);
	        if (this.externalMetadata[id]) {
	          if (this.externalMetadata[id] !== 'loading') {
	            window.setTimeout(function () {
	              callback(id);
	            }, 10);
	          }
	        } else {
	          this.externalMetadata[id] = 'loading';
	          window.setTimeout(this.getOriginalSource.bind(this, id), 10);
	        }
	      }
	    }
	  }, {
	    key: 'removeExternalMetadataUpdateListener',
	    value: function removeExternalMetadataUpdateListener(id, callback) {
	      if (id) {
	        this.removeListener(_eventsMetadataEvents2['default'].EXTERNAL_METADATA_UPDATE + '_' + id, callback);
	      } else {
	        this.removeListener(_eventsMetadataEvents2['default'].EXTERNAL_METADATA_UPDATE, callback);
	      }
	    }
	  }, {
	    key: 'addMetadataUpdateListener',
	    value: function addMetadataUpdateListener(id, callback) {
	      if (id) {
	        this.on(_eventsMetadataEvents2['default'].METADATA_UPDATE + '_' + id, callback);
	        if (!this.metadataIds[id]) {
	          this.metadataIds[id] = id;
	          window.setTimeout(_actionsSocketActions2['default'].registerListener.bind(null, id, this.metadataUpdated.bind(this)), 10);
	        } else {
	          // Metadata was already available, just callback
	          window.setTimeout(function () {
	            callback(id);
	          }, 10);
	        }
	      } else {
	        this.on(_eventsMetadataEvents2['default'].METADATA_UPDATE, callback);
	      }
	    }
	  }, {
	    key: 'removeMetadataUpdateListener',
	    value: function removeMetadataUpdateListener(id, callback) {
	      if (id) {
	        this.removeListener(_eventsMetadataEvents2['default'].METADATA_UPDATE + '_' + id, callback);
	      } else {
	        this.removeListener(_eventsMetadataEvents2['default'].METADATA_UPDATE, callback);
	      }
	    }
	  }]);

	  return MetadataStore;
	})(_events.EventEmitter);

	exports['default'] = MetadataStore;
	module.exports = exports['default'];

/***/ },
/* 448 */
/***/ function(module, exports) {

	/**
	 * Events for metadata and lab bench
	 *
	 * Created by dmitri on 05/04/16.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  METADATA_UPDATE: 'metadata_updateMetadata',
	  LAB_BENCH_READY: 'metadata_labBenchReady',
	  EXTERNAL_METADATA_UPDATE: 'metadata_externalMetadataUpdate'
	};
	module.exports = exports['default'];

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Store for modal data
	 *
	 * Created by dmitri on 07/04/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _events = __webpack_require__(306);

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsModalConstants = __webpack_require__(266);

	var _constantsModalConstants2 = _interopRequireDefault(_constantsModalConstants);

	var _eventsModalEvents = __webpack_require__(450);

	var _eventsModalEvents2 = _interopRequireDefault(_eventsModalEvents);

	var ModalStore = (function (_EventEmitter) {
	  _inherits(ModalStore, _EventEmitter);

	  function ModalStore() {
	    var _this = this;

	    _classCallCheck(this, ModalStore);

	    _get(Object.getPrototypeOf(ModalStore.prototype), 'constructor', this).call(this);

	    this.displayedModalId = null;
	    this.targetData = null;
	    this.onSuccess = function () {};
	    this.onError = function () {};
	    this.setMaxListeners(50);

	    _dispatcherAppDispatcher2['default'].register(function (action) {
	      switch (action.actionType) {
	        case _constantsModalConstants2['default'].ActionTypes.SHOW_MODAL:
	          _this.displayedModalId = action.id;
	          if (action.target) {
	            _this.targetData = JSON.parse(JSON.stringify(action.target));
	          } else {
	            _this.targetData = action.target;
	          }
	          if (action.id) {
	            if (action.onSuccess) {
	              _this.onSuccess = action.onSuccess;
	            } else {
	              _this.onSuccess = function () {};
	            }
	            if (action.onError) {
	              _this.onError = action.onError;
	            } else {
	              _this.onError = function () {};
	            }
	          }
	          _this.emit(_eventsModalEvents2['default'].SHOW_MODAL);
	          break;
	        case _constantsModalConstants2['default'].ActionTypes.SUCCESS:
	          _this.runSuccessCallback();
	          break;
	        case _constantsModalConstants2['default'].ActionTypes.ERROR:
	          _this.runErrorCallback();
	          break;
	        default:
	          break;
	      }
	    });
	  }

	  _createClass(ModalStore, [{
	    key: 'getTargetData',
	    value: function getTargetData() {
	      return this.targetData;
	    }
	  }, {
	    key: 'getModalId',
	    value: function getModalId() {
	      return this.displayedModalId;
	    }
	  }, {
	    key: 'runSuccessCallback',
	    value: function runSuccessCallback(data) {
	      this.onSuccess(data);
	    }
	  }, {
	    key: 'runErrorCallback',
	    value: function runErrorCallback(data) {
	      this.onError(data);
	    }
	  }, {
	    key: 'addModalChangeListener',
	    value: function addModalChangeListener(callback) {
	      this.on(_eventsModalEvents2['default'].SHOW_MODAL, callback);
	    }
	  }, {
	    key: 'removeModalChangeListener',
	    value: function removeModalChangeListener(callback) {
	      this.removeListener(_eventsModalEvents2['default'].SHOW_MODAL, callback);
	    }
	  }]);

	  return ModalStore;
	})(_events.EventEmitter);

	exports['default'] = ModalStore;
	module.exports = exports['default'];

/***/ },
/* 450 */
/***/ function(module, exports) {

	/**
	 * Events for modals
	 *
	 * Created by dmitri on 07/04/16.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  SHOW_MODAL: 'modal_showModal'
	};
	module.exports = exports['default'];

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Loads and stores the lab bench.
	 *
	 * Loading of a bench is progressive and deep, taking into account all visible elements :
	 * - Set
	 * - Views
	 * - Specimens
	 * - Images
	 * - Anchors (PoI, RoI, AoI, ToI)
	 * - Measure Standards
	 * - Measurements
	 *
	 * Created by dmitri on 08/04/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _events = __webpack_require__(306);

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsMetadataConstants = __webpack_require__(248);

	var _constantsMetadataConstants2 = _interopRequireDefault(_constantsMetadataConstants);

	var _constantsViewConstants = __webpack_require__(197);

	var _constantsViewConstants2 = _interopRequireDefault(_constantsViewConstants);

	var _constantsServerConstants = __webpack_require__(239);

	var _constantsServerConstants2 = _interopRequireDefault(_constantsServerConstants);

	var _eventsMetadataEvents = __webpack_require__(448);

	var _eventsMetadataEvents2 = _interopRequireDefault(_eventsMetadataEvents);

	var _eventsViewEvents = __webpack_require__(434);

	var _eventsViewEvents2 = _interopRequireDefault(_eventsViewEvents);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var LabBenchStore = (function (_EventEmitter) {
	  _inherits(LabBenchStore, _EventEmitter);

	  function LabBenchStore(socket) {
	    var _this = this;

	    _classCallCheck(this, LabBenchStore);

	    _get(Object.getPrototypeOf(LabBenchStore.prototype), 'constructor', this).call(this);
	    this.activeView = null;
	    this.firstLoad = true;
	    this.labBench = {};
	    this.ids = {};
	    this.socket = socket;

	    // Register a reaction to an action.
	    _dispatcherAppDispatcher2['default'].register(function (action) {
	      switch (action.actionType) {
	        case _constantsMetadataConstants2['default'].ActionTypes.SET_LAB_BENCH:
	          //console.log('setting bench ' + action.id);
	          _this.removeListeners();
	          delete _this.labBench;
	          delete _this.ids;

	          _this.labBench = {};
	          _this.labBench.id = action.id;
	          _this.labBench.subSets = {};
	          // this one is only to avoid the cost of merging .images and .specimens for certain operations
	          _this.labBench.items = {};
	          _this.labBench.images = {};
	          _this.labBench.specimens = {};
	          _this.labBench.views = {};
	          _this.labBench.aois = {};
	          _this.labBench.rois = {};
	          _this.labBench.pois = {};
	          _this.labBench.tois = {};
	          _this.labBench.measureStandards = {};
	          _this.labBench.measurements = {};

	          _this.ids = {};
	          _this.ids.subSets = [];
	          _this.ids.items = [];
	          _this.ids.views = [];
	          _this.ids.aois = [];
	          _this.ids.rois = [];
	          _this.ids.pois = [];
	          _this.ids.tois = [];
	          _this.ids.measureStandards = [];
	          _this.ids.measurements = [];

	          _this.firstLoad = true;

	          _this.activeView = null;
	          _this.emit(_eventsMetadataEvents2['default'].LAB_BENCH_READY);
	          break;
	        case _constantsMetadataConstants2['default'].ActionTypes.LOAD_LAB_BENCH:
	          _this.loadNewBench(_this.labBench.id);
	          break;
	        case _constantsViewConstants2['default'].ActionTypes.Local.SET_ACTIVE_VIEW:
	          if (_this.activeView != action.id) {
	            _this.activeView = action.id;
	            _this.emit(_eventsViewEvents2['default'].ACTIVE_VIEW_CHANGE);
	          }
	          break;
	        default:
	          break;
	      }
	    });
	  }

	  /**
	   * Returns data about any visible entity with the provided id.
	   * @param id
	   * @returns {null}
	   */

	  _createClass(LabBenchStore, [{
	    key: 'getData',
	    value: function getData(id) {
	      if (this.labBench.id == id) {
	        return JSON.parse(JSON.stringify(this.labBench.metadata));
	      }
	      if (this.labBench.subSets[id]) {
	        return JSON.parse(JSON.stringify(this.labBench.subSets[id]));
	      }
	      if (this.labBench.images[id]) {
	        return JSON.parse(JSON.stringify(this.labBench.images[id]));
	      }
	      if (this.labBench.specimens[id]) {
	        return JSON.parse(JSON.stringify(this.labBench.specimens[id]));
	      }
	      if (this.labBench.views[id]) {
	        return JSON.parse(JSON.stringify(this.labBench.views[id]));
	      }
	      if (this.labBench.rois[id]) {
	        return JSON.parse(JSON.stringify(this.labBench.rois[id]));
	      }
	      if (this.labBench.aois[id]) {
	        return JSON.parse(JSON.stringify(this.labBench.aois[id]));
	      }
	      if (this.labBench.pois[id]) {
	        return JSON.parse(JSON.stringify(this.labBench.pois[id]));
	      }
	      if (this.labBench.tois[id]) {
	        return JSON.parse(JSON.stringify(this.labBench.tois[id]));
	      }
	      if (this.labBench.measureStandards[id]) {
	        return JSON.parse(JSON.stringify(this.labBench.measureStandards[id]));
	      }
	      if (this.labBench.measurements[id]) {
	        return JSON.parse(JSON.stringify(this.labBench.measurements[id]));
	      }
	      return null;
	    }

	    /**
	     * Returns an array containing the displayed specimens and images in a view (list of {link,id} elements. Each element represents a View -display-> Item relationship.
	     * @param id
	     * @returns {null}
	     */
	  }, {
	    key: 'getDisplayData',
	    value: function getDisplayData(id) {
	      if (this.labBench) {
	        if (this.labBench.views && this.activeView) {
	          var displayedStuff = this.labBench.views[this.activeView].displays;
	          for (var i = 0; i < displayedStuff.length; ++i) {
	            if (displayedStuff[i].link == id || displayedStuff[i].entity == id) {
	              return JSON.parse(JSON.stringify(displayedStuff[i]));
	            }
	          }
	        }
	      }

	      return null;
	    }
	  }, {
	    key: 'getLabBench',
	    value: function getLabBench() {
	      return JSON.parse(JSON.stringify(this.labBench));
	    }
	  }, {
	    key: 'getViews',
	    value: function getViews() {
	      return JSON.parse(JSON.stringify(this.labBench.views));
	    }
	  }, {
	    key: 'getActiveViewId',
	    value: function getActiveViewId() {
	      return this.activeView;
	    }
	  }, {
	    key: 'getActiveViewData',
	    value: function getActiveViewData() {
	      if (this.activeView) {
	        return JSON.parse(JSON.stringify(this.labBench.views[this.activeView]));
	      }
	      return null;
	    }
	  }, {
	    key: 'getActiveSetId',
	    value: function getActiveSetId() {
	      return this.labBench.id;
	    }
	  }, {
	    key: 'loadNewBench',
	    value: function loadNewBench(setId) {
	      //this.allElementIds.push(setId);

	      this.loading = true;

	      this.socket.addResourceListener(setId, this.receiveBench.bind(this), 10);
	    }
	  }, {
	    key: 'receiveBench',
	    value: function receiveBench(resource) {
	      if (resource) {
	        this.labBench.metadata = resource;

	        this.loadSubSets(resource.subsets);
	        this.loadItems(resource.items.map(function (item) {
	          return item.uid;
	        }));
	        this.loadView(resource.view);
	      } else {
	        console.error('Could not load set ' + this.labBench.id + ': ' + JSON.stringify(resource));
	        alert('Unable to load lab bench. Please try again later.');

	        this.socket.removeResourceListener(this.labBench.id, this.receiveBench.bind(this), 10);
	        this.labBench = {};
	      }

	      this.emit(_eventsViewEvents2['default'].LAB_BENCH_LOAD_PROGRESS);
	      this.onLoadingDone();
	    }
	  }, {
	    key: 'loadSubSets',
	    value: function loadSubSets(linksAndIds) {
	      for (var i = 0; i < linksAndIds.length; ++i) {
	        if (!_.contains(this.ids.subSets, linksAndIds[i].uid)) {
	          this.socket.addResourceListener(linksAndIds[i].uid, this.subSetLoaded.bind(this), 10);
	          this.ids.subSets.push(linksAndIds[i].uid);
	        }
	      }
	    }
	  }, {
	    key: 'subSetLoaded',
	    value: function subSetLoaded(resource) {
	      if (resource) {
	        if (resource.forbidden || resource.deleted) {
	          delete this.labBench.subSets[resource.uid];
	          this.ids.subSets.splice(this.ids.subSets.indexOf(resource.uid), 1);
	        } else {
	          this.labBench.subSets[resource.uid] = resource;
	        }
	      } else {
	        console.error('Could not load sub-set ' + JSON.stringify(resource));
	      }
	      this.emit(_eventsViewEvents2['default'].LAB_BENCH_LOAD_PROGRESS);
	      this.onLoadingDone();
	    }
	  }, {
	    key: 'loadView',
	    value: function loadView(id) {
	      if (!_.contains(this.ids.views, id)) {
	        this.socket.addResourceListener(id, this.viewLoaded.bind(this), 10);
	        this.ids.views.push(id);
	      }
	    }
	  }, {
	    key: 'viewLoaded',
	    value: function viewLoaded(view) {
	      if (view) {
	        if (view.forbidden || view.deleted) {
	          delete this.labBench.views[view.uid];
	          this.ids.views.splice(this.ids.views.indexOf(view.uid), 1);
	        } else {
	          this.labBench.views[view.uid] = view;
	          this.activeView = view.uid;
	          this.emit(_eventsViewEvents2['default'].ACTIVE_VIEW_CHANGE);
	        }
	      } else {
	        console.error('Could not load view ' + JSON.stringify(view));
	      }
	      this.emit(_eventsViewEvents2['default'].LAB_BENCH_LOAD_PROGRESS);
	      this.onLoadingDone();
	    }
	  }, {
	    key: 'loadItems',
	    value: function loadItems(ids) {
	      for (var i = 0; i < ids.length; ++i) {
	        if (!_.contains(this.ids.items, ids[i])) {
	          this.socket.addResourceListener(ids[i], this.itemLoaded.bind(this), 10);
	          this.ids.items.push(ids[i]);
	        }
	      }
	    }
	  }, {
	    key: 'itemLoaded',
	    value: function itemLoaded(item) {
	      this.labBench.items[item.uid] = item;
	      if (item) {
	        if (item.forbidden || item.deleted) {
	          if (this.labBench.images[item.uid]) {
	            delete this.labBench.images[item.uid];
	            delete this.labBench.items[item.uid];
	            this.ids.items.splice(this.ids.items.indexOf(item.uid), 1);
	          }
	          if (this.labBench.specimens[item.uid]) {
	            delete this.labBench.specimens[item.uid];
	            delete this.labBench.items[item.uid];
	            this.ids.items.splice(this.ids.items.indexOf(item.uid), 1);
	          }
	        } else {
	          switch (item.type) {
	            case 'Image':
	              this.labBench.images[item.uid] = item;
	              if (item.aois.length > 0) {
	                this.loadAoIs(item.aois);
	              }
	              if (item.rois.length > 0) {
	                this.loadRoIs(item.rois);
	              }
	              if (item.pois.length > 0) {
	                this.loadPoIs(item.pois);
	              }
	              if (item.tois.length > 0) {
	                this.loadToIs(item.tois);
	              }
	              if (item.scales.length > 0) {
	                this.loadMeasureStandards(item.scales);
	              }
	              window.setTimeout(_actionsViewActions2['default'].loadImage.bind(null, item.thumbnail), 10);
	              break;
	            case 'Specimen':
	              this.labBench.specimens[item.uid] = item;
	              if (item.images.length > 0) {
	                this.loadItems(item.images);
	              }
	              break;
	            default:
	              break;
	          }
	        }
	      } else {
	        console.error('Could not load item ' + JSON.stringify(item));
	      }
	      this.emit(_eventsViewEvents2['default'].LAB_BENCH_LOAD_PROGRESS);
	      this.onLoadingDone();
	    }
	  }, {
	    key: 'loadAoIs',
	    value: function loadAoIs(ids) {
	      for (var i = 0; i < ids.length; ++i) {
	        if (!_.contains(this.ids.aois, ids[i])) {
	          this.socket.addResourceListener(ids[i], this.aoiLoaded.bind(this), 10);
	          this.ids.aois.push(ids[i]);
	        }
	      }
	    }
	  }, {
	    key: 'aoiLoaded',
	    value: function aoiLoaded(aoi) {
	      if (aoi) {
	        if (aoi.forbidden || aoi.deleted) {
	          delete this.labBench.aois[aoi.uid];
	          this.ids.aois.splice(this.ids.aois.indexOf(aoi.uid), 1);
	        } else {
	          this.labBench.aois[aoi.uid] = aoi;
	          if (aoi.measurements.length > 0) {
	            this.loadMeasurements(aoi.measurements);
	          }
	        }
	      } else {
	        console.error('Could not load AoI ' + JSON.stringify(aoi));
	      }
	      this.emit(_eventsViewEvents2['default'].LAB_BENCH_LOAD_PROGRESS);
	      this.onLoadingDone();
	    }
	  }, {
	    key: 'loadRoIs',
	    value: function loadRoIs(ids) {
	      for (var i = 0; i < ids.length; ++i) {
	        if (!_.contains(this.ids.rois, ids[i])) {
	          this.socket.addResourceListener(ids[i], this.roiLoaded.bind(this), 10);
	          this.ids.rois.push(ids[i]);
	        }
	      }
	    }
	  }, {
	    key: 'roiLoaded',
	    value: function roiLoaded(roi) {
	      if (roi) {
	        if (roi.forbidden || roi.deleted) {
	          delete this.labBench.rois[roi.uid];
	          this.ids.rois.splice(this.ids.rois.indexOf(roi.uid), 1);
	        } else {
	          this.labBench.rois[roi.uid] = roi;
	          if (roi.measurements.length > 0) {
	            this.loadMeasurements(roi.measurements);
	          }
	        }
	      } else {
	        console.error('Could not load RoI ' + JSON.stringify(roi));
	      }
	      this.emit(_eventsViewEvents2['default'].LAB_BENCH_LOAD_PROGRESS);
	      this.onLoadingDone();
	    }
	  }, {
	    key: 'loadPoIs',
	    value: function loadPoIs(ids) {
	      for (var i = 0; i < ids.length; ++i) {
	        if (!_.contains(this.ids.pois, ids[i])) {
	          this.socket.addResourceListener(ids[i], this.poiLoaded.bind(this), 10);
	          this.ids.pois.push(ids[i]);
	        }
	      }
	    }
	  }, {
	    key: 'poiLoaded',
	    value: function poiLoaded(poi) {
	      if (poi) {
	        if (poi.forbidden || poi.deleted) {
	          delete this.labBench.pois[poi.uid];
	          this.ids.pois.splice(this.ids.pois.indexOf(poi.uid), 1);
	        } else {
	          this.labBench.pois[poi.uid] = poi;
	        }
	      } else {
	        console.error('Could not load PoI ' + JSON.stringify(poi));
	      }
	      this.emit(_eventsViewEvents2['default'].LAB_BENCH_LOAD_PROGRESS);
	      this.onLoadingDone();
	    }
	  }, {
	    key: 'loadToIs',
	    value: function loadToIs(ids) {
	      for (var i = 0; i < ids.length; ++i) {
	        if (!_.contains(this.ids.tois, ids[i])) {
	          this.socket.addResourceListener(ids[i], this.toiLoaded.bind(this), 10);
	          this.ids.tois.push(ids[i]);
	        }
	      }
	    }
	  }, {
	    key: 'toiLoaded',
	    value: function toiLoaded(toi) {
	      if (toi) {
	        if (toi.forbidden || toi.deleted) {
	          delete this.labBench.tois[toi.uid];
	          this.ids.tois.splice(this.ids.tois.indexOf(toi.uid), 1);
	        } else {
	          this.labBench.tois[toi.uid] = toi;
	          if (toi.measurements.length > 0) {
	            this.loadMeasurements(toi.measurements);
	          }
	        }
	      } else {
	        console.error('Could not load ToI ' + JSON.stringify(toi));
	      }
	      this.emit(_eventsViewEvents2['default'].LAB_BENCH_LOAD_PROGRESS);
	      this.onLoadingDone();
	    }
	  }, {
	    key: 'loadMeasureStandards',
	    value: function loadMeasureStandards(ids) {
	      for (var i = 0; i < ids.length; ++i) {
	        if (!_.contains(this.ids.measureStandards, ids[i])) {
	          this.socket.addResourceListener(ids[i], this.standardLoaded.bind(this), 10);
	          this.ids.measureStandards.push(ids[i]);
	        }
	      }
	    }
	  }, {
	    key: 'standardLoaded',
	    value: function standardLoaded(standard) {
	      if (standard) {
	        if (standard.forbidden || standard.deleted) {
	          delete this.labBench.measureStandards[standard.uid];
	          this.ids.measureStandards.splice(this.ids.measureStandards.indexOf(standard.uid), 1);
	        } else {
	          this.labBench.measureStandards[standard.uid] = standard;
	        }
	      } else {
	        console.error('Could not load measure standard ' + JSON.stringify(standard));
	      }
	      this.emit(_eventsViewEvents2['default'].LAB_BENCH_LOAD_PROGRESS);
	      this.onLoadingDone();
	    }
	  }, {
	    key: 'loadMeasurements',
	    value: function loadMeasurements(ids) {
	      for (var i = 0; i < ids.length; ++i) {
	        if (!_.contains(this.ids.measurements, ids[i])) {
	          this.socket.addResourceListener(ids[i], this.measurementLoaded.bind(this), 10);
	          this.ids.measurements.push(ids[i]);
	        }
	      }
	    }
	  }, {
	    key: 'measurementLoaded',
	    value: function measurementLoaded(measurement) {
	      if (measurement) {
	        if (measurement.forbidden || measurement.deleted) {
	          delete this.labBench.measurements[measurement.uid];
	          this.ids.measurements.splice(this.ids.measurements.indexOf(measurement.uid), 1);
	        } else {
	          this.labBench.measurements[measurement.uid] = measurement;
	        }
	      } else {
	        console.error('Could not load measurement ' + JSON.stringify(item));
	      }
	      this.emit(_eventsViewEvents2['default'].LAB_BENCH_LOAD_PROGRESS);
	      this.onLoadingDone();
	    }
	  }, {
	    key: 'getProgress',
	    value: function getProgress(entity) {
	      switch (entity) {
	        case 'item':
	          return {
	            max: this.ids.items.length,
	            current: _.size(this.labBench.items)
	          };
	          break;
	        case 'view':
	          return {
	            max: this.ids.views.length,
	            current: _.size(this.labBench.views)
	          };
	          break;
	        case 'roi':
	          return {
	            max: this.ids.rois.length,
	            current: _.size(this.labBench.rois)
	          };
	          break;
	        case 'poi':
	          return {
	            max: this.ids.pois.length,
	            current: _.size(this.labBench.pois)
	          };
	          break;
	        case 'aoi':
	          return {
	            max: this.ids.aois.length,
	            current: _.size(this.labBench.aois)
	          };
	          break;
	        case 'toi':
	          return {
	            max: this.ids.tois.length,
	            current: _.size(this.labBench.tois)
	          };
	          break;
	        case 'measurement':
	          return {
	            max: this.ids.measurements.length,
	            current: _.size(this.labBench.measurements)
	          };
	          break;
	        case 'standard':
	          return {
	            max: this.ids.measureStandards.length,
	            current: _.size(this.labBench.measureStandards)
	          };
	          break;
	        default:
	          console.warn('No progress handler for ' + entity);
	      }
	    }
	  }, {
	    key: 'removeListeners',
	    value: function removeListeners() {
	      if (this.labBench.id) {
	        this.socket.removeResourceListener(this.labBench.id, this.receiveBench.bind(this), 10);
	      }
	      if (this.ids) {
	        if (this.ids.subSets) {
	          for (var i = 0; i < this.ids.subSets.length; ++i) {
	            this.socket.removeResourceListener(this.ids.subSets[i], this.subSetLoaded.bind(this), 10);
	          }
	        }
	        if (this.ids.items) {
	          for (i = 0; i < this.ids.items.length; ++i) {
	            this.socket.removeResourceListener(this.ids.items[i], this.itemLoaded.bind(this), 10);
	          }
	        }
	        if (this.ids.views) {
	          for (i = 0; i < this.ids.views.length; ++i) {
	            this.socket.removeResourceListener(this.ids.views[i], this.viewLoaded.bind(this), 10);
	          }
	        }
	        if (this.ids.aois) {
	          for (i = 0; i < this.ids.aois.length; ++i) {
	            this.socket.removeResourceListener(this.ids.aois[i], this.aoiLoaded.bind(this), 10);
	          }
	        }
	        if (this.ids.rois) {
	          for (i = 0; i < this.ids.rois.length; ++i) {
	            this.socket.removeResourceListener(this.ids.rois[i], this.roiLoaded.bind(this), 10);
	          }
	        }
	        if (this.ids.pois) {
	          for (i = 0; i < this.ids.pois.length; ++i) {
	            this.socket.removeResourceListener(this.ids.pois[i], this.poiLoaded.bind(this), 10);
	          }
	        }
	        if (this.ids.tois) {
	          for (i = 0; i < this.ids.tois.length; ++i) {
	            this.socket.removeResourceListener(this.ids.tois[i], this.toiLoaded.bind(this), 10);
	          }
	        }
	        if (this.ids.measureStandards) {
	          for (i = 0; i < this.ids.measureStandards.length; ++i) {
	            this.socket.removeResourceListener(this.ids.measureStandards[i], this.standardLoaded.bind(this), 10);
	          }
	        }
	        if (this.ids.measurements) {
	          for (i = 0; i < this.ids.measurements.length; ++i) {
	            this.socket.removeResourceListener(this.ids.measurements[i], this.measurementLoaded.bind(this), 10);
	          }
	        }
	      }
	    }
	  }, {
	    key: 'onLoadingDone',
	    value: function onLoadingDone() {
	      if (this.firstLoad) {
	        var totalLoaded = 1 + _.size(this.labBench.subSets) + _.size(this.labBench.items) + _.size(this.labBench.views) + _.size(this.labBench.rois) + _.size(this.labBench.aois) + _.size(this.labBench.pois) + _.size(this.labBench.tois) + _.size(this.labBench.measureStandards) + _.size(this.labBench.measurements);

	        var totalToLoad = 1 + this.ids.subSets.length + this.ids.items.length + this.ids.views.length + this.ids.rois.length + this.ids.aois.length + this.ids.pois.length + this.ids.tois.length + this.ids.measureStandards.length + this.ids.measurements.length;

	        //var loadingText = <div><p>Chargement en cours...</p> +
	        //  'Sous-sets ' + _.size(this.labBench.subSets) + '/' + this.ids.subSets.length + '\n' +
	        //  'Spécimens&Images ' + _.size(this.labBench.items) + '/' + this.ids.items.length + '\n' +
	        //  'Vues ' + _.size(this.labBench.views) + '/' + this.ids.views.length + '\n' +
	        //  'Zones ' + _.size(this.labBench.rois) + '/' + this.ids.rois.length + '\n' +
	        //  'Angles ' + _.size(this.labBench.aois) + '/' + this.ids.aois.length + '\n' +
	        //  'Points ' + _.size(this.labBench.pois) + '/' + this.ids.pois.length + '\n' +
	        //  'Chemins ' + _.size(this.labBench.tois) + '/' + this.ids.tois.length + '\n' +
	        //  'Mesures ' + _.size(this.labBench.measurements) + '/' + this.ids.measurements.length + '\n' +
	        //  'Étalons ' + _.size(this.labBench.measureStandards) + '/' + this.ids.measureStandards.length</div>

	        var loadingText = _react2['default'].createElement(
	          'div',
	          null,
	          'Loading...',
	          _react2['default'].createElement('br', null),
	          _react2['default'].createElement(
	            'p',
	            null,
	            'Sub-Sets ',
	            _.size(this.labBench.subSets),
	            '/',
	            this.ids.subSets.length,
	            _react2['default'].createElement('br', null),
	            'Specimens & Images ',
	            _.size(this.labBench.items),
	            '/',
	            this.ids.items.length,
	            _react2['default'].createElement('br', null),
	            'Views ',
	            _.size(this.labBench.views),
	            '/',
	            this.ids.views.length,
	            _react2['default'].createElement('br', null),
	            'Regions ',
	            _.size(this.labBench.rois),
	            '/',
	            this.ids.rois.length,
	            _react2['default'].createElement('br', null),
	            'Angles ',
	            _.size(this.labBench.aois),
	            '/',
	            this.ids.aois.length,
	            _react2['default'].createElement('br', null),
	            'Vertices ',
	            _.size(this.labBench.pois),
	            '/',
	            this.ids.pois.length,
	            _react2['default'].createElement('br', null),
	            'Trails ',
	            _.size(this.labBench.tois),
	            '/',
	            this.ids.tois.length,
	            _react2['default'].createElement('br', null),
	            'Measures ',
	            _.size(this.labBench.measurements),
	            '/',
	            this.ids.measurements.length,
	            _react2['default'].createElement('br', null),
	            'Standards ',
	            _.size(this.labBench.measureStandards),
	            '/',
	            this.ids.measureStandards.length
	          )
	        );

	        window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, loadingText), 10);
	        //window.setTimeout(ViewActions.changeLoaderState.bind(null, 'Chargement en cours... ' + totalLoaded + ' / ' + totalToLoad), 10);
	      }

	      if (this.isLoaded()) {
	        if (this.firstLoad) {
	          this.firstLoad = false;
	          window.setTimeout(_actionsViewActions2['default'].changeLoaderState.bind(null, null), 50);
	        }
	        this.emit(_eventsMetadataEvents2['default'].LAB_BENCH_READY);
	      }
	    }

	    /**
	     * A lab bench is considered loaded when it, its view and images & specimens are fully loaded. Other entities keep loading in the background.
	     * @returns {boolean}
	     */
	  }, {
	    key: 'isLoaded',
	    value: function isLoaded() {
	      if (this.labBench) {
	        if (this.labBench.metadata) {
	          // Lab bench is loaded, check its parts
	          if (!this.isDataComplete(this.ids.subSets, this.labBench.subSets)) {
	            return false;
	          }

	          if (!this.isDataComplete(this.ids.items, this.labBench.items)) {
	            return false;
	          }

	          if (!this.isDataComplete([this.labBench.metadata.view], this.labBench.views)) {
	            return false;
	          }

	          // if(!this.isDataComplete(this.ids.aois, this.labBench.aois)) {
	          //   return false;
	          // }
	          //
	          // if(!this.isDataComplete(this.ids.rois, this.labBench.rois)) {
	          //   return false;
	          // }
	          //
	          // if(!this.isDataComplete(this.ids.pois, this.labBench.pois)) {
	          //   return false;
	          // }
	          //
	          // if(!this.isDataComplete(this.ids.tois, this.labBench.tois)) {
	          //   return false;
	          // }

	          // if(!this.isDataComplete(this.ids.measureStandards, this.labBench.measureStandards)) {
	          //   return false;
	          // }

	          // if(!this.isDataComplete(this.ids.measurements, this.labBench.measurements)) {
	          //   return false;
	          // }

	          return true;
	        }
	        if (!this.labBench.id) {
	          // Bench is empty
	          return true;
	        }
	      }
	      return false;
	    }

	    /**
	     * Checks if 'data' keys contains all of the 'ids'
	     * @param ids Array of String ids
	     * @param data Object where keys should correspond to ids (actual data is unimportant as long as it is not null, undefined or 0
	     * @returns {boolean} true if all of the ids have corresponding keys and non-null data in 'data'
	     */
	  }, {
	    key: 'isDataComplete',
	    value: function isDataComplete(ids, data) {
	      for (var i = 0; i < ids.length; ++i) {
	        if (!data[ids[i]]) {
	          return false;
	        }
	      }
	      return true;
	    }
	  }, {
	    key: 'addLabBenchLoadListener',
	    value: function addLabBenchLoadListener(callback) {
	      this.on(_eventsMetadataEvents2['default'].LAB_BENCH_READY, callback);
	      if (this.isLoaded()) {
	        window.setTimeout(function () {
	          callback();
	        }, 10);
	      }
	    }
	  }, {
	    key: 'removeLabBenchLoadListener',
	    value: function removeLabBenchLoadListener(callback) {
	      this.removeListener(_eventsMetadataEvents2['default'].LAB_BENCH_READY, callback);
	    }

	    /**
	     * Not used
	     * @param callback
	     */
	  }, {
	    key: 'addActiveViewChangeListener',
	    value: function addActiveViewChangeListener(callback) {
	      this.on(_eventsViewEvents2['default'].ACTIVE_VIEW_CHANGE, callback);
	    }

	    /**
	     * Not used
	     * @param callback
	     */
	  }, {
	    key: 'removeActiveViewChangeListener',
	    value: function removeActiveViewChangeListener(callback) {
	      this.removeListener(_eventsViewEvents2['default'].ACTIVE_VIEW_CHANGE, callback);
	    }
	  }, {
	    key: 'addActiveSetChangeListener',
	    value: function addActiveSetChangeListener(callback) {
	      this.on(_eventsViewEvents2['default'].ACTIVE_SET_CHANGE, callback);
	    }
	  }, {
	    key: 'removeActiveSetChangeListener',
	    value: function removeActiveSetChangeListener(callback) {
	      this.removeListener(_eventsViewEvents2['default'].ACTIVE_SET_CHANGE, callback);
	    }
	  }, {
	    key: 'addLoadProgressListener',
	    value: function addLoadProgressListener(callback) {
	      this.on(_eventsViewEvents2['default'].LAB_BENCH_LOAD_PROGRESS, callback);
	    }
	  }, {
	    key: 'removeLoadProgressListener',
	    value: function removeLoadProgressListener(callback) {
	      this.removeListener(_eventsViewEvents2['default'].LAB_BENCH_LOAD_PROGRESS, callback);
	    }
	  }]);

	  return LabBenchStore;
	})(_events.EventEmitter);

	exports['default'] = LabBenchStore;
	module.exports = exports['default'];

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Store for setting application mode.
	 *
	 * Created by dmitri on 20/04/16.
	 */
	"use strict";

	var _get = __webpack_require__(3)["default"];

	var _inherits = __webpack_require__(19)["default"];

	var _createClass = __webpack_require__(28)["default"];

	var _classCallCheck = __webpack_require__(31)["default"];

	var _interopRequireDefault = __webpack_require__(1)["default"];

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _events = __webpack_require__(306);

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _actionsToolActions = __webpack_require__(249);

	var _actionsToolActions2 = _interopRequireDefault(_actionsToolActions);

	var _actionsMetadataActions = __webpack_require__(247);

	var _actionsMetadataActions2 = _interopRequireDefault(_actionsMetadataActions);

	var _actionsManagerActions = __webpack_require__(245);

	var _actionsManagerActions2 = _interopRequireDefault(_actionsManagerActions);

	var _actionsViewActions = __webpack_require__(196);

	var _actionsViewActions2 = _interopRequireDefault(_actionsViewActions);

	var _constantsModeConstants = __webpack_require__(243);

	var _constantsModeConstants2 = _interopRequireDefault(_constantsModeConstants);

	var _eventsModeEvents = __webpack_require__(453);

	var _eventsModeEvents2 = _interopRequireDefault(_eventsModeEvents);

	var ModeStore = (function (_EventEmitter) {
	  _inherits(ModeStore, _EventEmitter);

	  function ModeStore() {
	    var _this = this;

	    _classCallCheck(this, ModeStore);

	    _get(Object.getPrototypeOf(ModeStore.prototype), "constructor", this).call(this);

	    this.mode = _constantsModeConstants2["default"].Modes.SET;
	    this.setMaxListeners(100);

	    _dispatcherAppDispatcher2["default"].register(function (action) {
	      switch (action.actionType) {
	        case _constantsModeConstants2["default"].ActionTypes.CHANGE_MODE:
	          _this.setMode(action.mode);
	          _this.mode = action.mode;
	          _this.emit(_eventsModeEvents2["default"].MODE_CHANGED_EVENT);
	          break;
	        default:
	          break;
	      }
	    });
	  }

	  _createClass(ModeStore, [{
	    key: "setMode",
	    value: function setMode(mode) {
	      if (mode === this.mode) return;
	      window.setTimeout(_actionsToolActions2["default"].setTool.bind(null, null), 10);
	      switch (mode) {
	        case _constantsModeConstants2["default"].Modes.OBSERVATION:
	          window.setTimeout(_actionsMetadataActions2["default"].loadLabBench, 10);
	          break;
	        case _constantsModeConstants2["default"].Modes.ORGANISATION:
	          window.setTimeout(_actionsMetadataActions2["default"].loadLabBench, 10);
	          window.setTimeout(_actionsViewActions2["default"].updateDisplayFilters.bind(null, { borders: true, regions: false, points: false, trails: false, angles: false }), 10);
	          break;
	        case _constantsModeConstants2["default"].Modes.SET:
	          break;
	        case _constantsModeConstants2["default"].Modes.TABULAR:
	          break;
	        default:
	          break;
	      }
	    }
	  }, {
	    key: "getMode",
	    value: function getMode() {
	      return this.mode;
	    }
	  }, {
	    key: "isInSetMode",
	    value: function isInSetMode() {
	      return this.mode == _constantsModeConstants2["default"].Modes.SET;
	    }
	  }, {
	    key: "isInOrganisationMode",
	    value: function isInOrganisationMode() {
	      return this.mode == _constantsModeConstants2["default"].Modes.ORGANISATION;
	    }
	  }, {
	    key: "isInObservationMode",
	    value: function isInObservationMode() {
	      return this.mode == _constantsModeConstants2["default"].Modes.OBSERVATION;
	    }
	  }, {
	    key: "isInTabularMode",
	    value: function isInTabularMode() {
	      return this.mode == _constantsModeConstants2["default"].Modes.TABULAR;
	    }
	  }, {
	    key: "addModeChangeListener",
	    value: function addModeChangeListener(callback) {
	      this.on(_eventsModeEvents2["default"].MODE_CHANGED_EVENT, callback);
	    }
	  }, {
	    key: "removeModeChangeListener",
	    value: function removeModeChangeListener(callback) {
	      this.removeListener(_eventsModeEvents2["default"].MODE_CHANGED_EVENT, callback);
	    }
	  }]);

	  return ModeStore;
	})(_events.EventEmitter);

	exports["default"] = ModeStore;
	module.exports = exports["default"];

/***/ },
/* 453 */
/***/ function(module, exports) {

	/**
	 * Events for switching modes
	 *
	 * Created by dmitri on 20/04/16.
	 */
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  MODE_CHANGED_EVENT: "mode_modeChanged"
	};
	module.exports = exports["default"];

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Stores data for the Inspector / Properties panel and the List of Annotations / Tags
	 *
	 * Created by dmitri on 03/05/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _events = __webpack_require__(306);

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsInspectorConstants = __webpack_require__(252);

	var _constantsInspectorConstants2 = _interopRequireDefault(_constantsInspectorConstants);

	var _eventsViewEvents = __webpack_require__(434);

	var _eventsViewEvents2 = _interopRequireDefault(_eventsViewEvents);

	var InspectorStore = (function (_EventEmitter) {
	  _inherits(InspectorStore, _EventEmitter);

	  function InspectorStore() {
	    var _this = this;

	    _classCallCheck(this, InspectorStore);

	    _get(Object.getPrototypeOf(InspectorStore.prototype), 'constructor', this).call(this);

	    this.elementsToInspect = [];
	    this.annotationListSelection = {
	      imageId: null,
	      setId: null
	    };

	    _dispatcherAppDispatcher2['default'].register(function (action) {
	      switch (action.actionType) {
	        case _constantsInspectorConstants2['default'].ActionTypes.SET_DATA:
	          _this.setInspectorContent(action.data);
	          _this.emit(_eventsViewEvents2['default'].INSPECTOR_CONTENT_CHANGE);
	          break;
	        case _constantsInspectorConstants2['default'].ActionTypes.SET_IMAGE:
	          if (_this.annotationListSelection.imageId != action.id) {
	            _this.annotationListSelection.imageId = action.id;
	            _this.emit(_eventsViewEvents2['default'].ANNOTATION_LIST_CONTENT_CHANGE);
	          }
	          break;
	        case _constantsInspectorConstants2['default'].ActionTypes.SET_SET:
	          if (_this.annotationListSelection.setId != action.id) {
	            _this.annotationListSelection.setId = action.id;
	            _this.emit(_eventsViewEvents2['default'].ANNOTATION_LIST_CONTENT_CHANGE);
	          }
	          break;
	        default:
	          break;
	      }
	    });
	  }

	  _createClass(InspectorStore, [{
	    key: 'setInspectorContent',
	    value: function setInspectorContent(content) {
	      this.elementsToInspect = content;
	    }
	  }, {
	    key: 'getInspectorContent',
	    value: function getInspectorContent() {
	      return JSON.parse(JSON.stringify(this.elementsToInspect));
	    }
	  }, {
	    key: 'getAnnotationListSelection',
	    value: function getAnnotationListSelection() {
	      return JSON.parse(JSON.stringify(this.annotationListSelection));
	    }
	  }, {
	    key: 'addAnnotationSelectionListener',
	    value: function addAnnotationSelectionListener(callback) {
	      this.on(_eventsViewEvents2['default'].ANNOTATION_LIST_CONTENT_CHANGE, callback);
	    }
	  }, {
	    key: 'removeAnnotationSelectionListener',
	    value: function removeAnnotationSelectionListener(callback) {
	      this.removeListener(_eventsViewEvents2['default'].ANNOTATION_LIST_CONTENT_CHANGE, callback);
	    }
	  }, {
	    key: 'addContentChangeListener',
	    value: function addContentChangeListener(callback) {
	      this.on(_eventsViewEvents2['default'].INSPECTOR_CONTENT_CHANGE, callback);
	    }
	  }, {
	    key: 'removeContentChangeListener',
	    value: function removeContentChangeListener(callback) {
	      this.removeListener(_eventsViewEvents2['default'].INSPECTOR_CONTENT_CHANGE, callback);
	    }
	  }]);

	  return InspectorStore;
	})(_events.EventEmitter);

	exports['default'] = InspectorStore;
	module.exports = exports['default'];

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Stores the state of the ReColNat basket and selected items.
	 *
	 * Created by dmitri on 22/06/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _Object$keys = __webpack_require__(285)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _events = __webpack_require__(306);

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _constantsBasketConstants = __webpack_require__(426);

	var _constantsBasketConstants2 = _interopRequireDefault(_constantsBasketConstants);

	var _eventsBasketEvents = __webpack_require__(456);

	var _eventsBasketEvents2 = _interopRequireDefault(_eventsBasketEvents);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var BasketStore = (function (_EventEmitter) {
	  _inherits(BasketStore, _EventEmitter);

	  function BasketStore() {
	    var _this = this;

	    _classCallCheck(this, BasketStore);

	    _get(Object.getPrototypeOf(BasketStore.prototype), 'constructor', this).call(this);

	    this.setMaxListeners(500);

	    this.basket = [];
	    this.basketSelection = {};
	    this.basketReady = false;

	    _dispatcherAppDispatcher2['default'].register(function (action) {
	      switch (action.actionType) {
	        case _constantsBasketConstants2['default'].ActionTypes.RELOAD_BASKET:
	          _this.reloadBasket();
	          break;
	        case _constantsBasketConstants2['default'].ActionTypes.BASKET_CHANGE_SELECTION:
	          if (action.id) {
	            _this.updateBasketSelection(action.id, action.selected);
	          } else {
	            for (var i = 0; i < _this.basket.length; ++i) {
	              _this.updateBasketSelection(_this.basket[i].id, action.selected);
	            }
	          }
	          _this.emit(_eventsBasketEvents2['default'].BASKET_UPDATE);
	          break;
	        case _constantsBasketConstants2['default'].ActionTypes.SET_BASKET:
	          _this.basket = action.basket;
	          for (var i = 0; i < _this.basket.length; ++i) {
	            _this.updateBasketSelection(_this.basket[i].id, true);
	          }
	          _this.emit(_eventsBasketEvents2['default'].BASKET_UPDATE);
	          break;
	        case _constantsBasketConstants2['default'].ActionTypes.BASKET_REMOVE_ITEM:
	          _this.updateBasketSelection(action.item, false);
	          _this.removeItemFromBasket(action.item);
	          _this.emit(_eventsBasketEvents2['default'].BASKET_UPDATE);
	          break;
	        default:
	          break;
	      }
	    });

	    var self = this;
	    xdLocalStorage.init({
	      iframeUrl: _confApplicationConfiguration2['default'].integration.recolnatBasketIframeUrl,
	      initCallback: function initCallback() {
	        self.basketReady = true;
	      }
	    });
	  }

	  /**
	   * Reads basket content and stores it in the store. If the basket is not available, sleeps for 500ms and tries again.
	   */

	  _createClass(BasketStore, [{
	    key: 'reloadBasket',
	    value: function reloadBasket() {
	      if (!this.basketReady) {
	        window.setTimeout(this.reloadBasket.bind(this), 500);
	        // alert('Le panier est indisponible, réessayez dans quelques secondes');
	        return;
	      }

	      var self = this;

	      xdLocalStorage.getItem('panier_erecolnat', function (data) {
	        var basket = undefined;
	        if (data.value == null) {
	          basket = [];
	        } else {
	          basket = JSON.parse(data.value);
	        }
	        self.basket = basket;
	        for (var i = 0; i < self.basket.length; ++i) {
	          self.updateBasketSelection(self.basket[i].id, true);
	        }
	        self.emit(_eventsBasketEvents2['default'].BASKET_UPDATE);
	      });
	    }

	    /**
	     * Sets the selection state of the given basket item. Selection is internal to the application and not stored in the shared basket.
	     * @param id String id of the item
	     * @param selected Boolean true=selected, false=not selected
	     */
	  }, {
	    key: 'updateBasketSelection',
	    value: function updateBasketSelection(id, selected) {
	      if (selected) {
	        this.basketSelection[id] = {};
	      } else {
	        delete this.basketSelection[id];
	      }
	    }

	    /**
	     * Removes the item with the given id from the shared basket.
	     * @param id String id of the item to remove
	     */
	  }, {
	    key: 'removeItemFromBasket',
	    value: function removeItemFromBasket(id) {
	      var index = null;
	      this.basket.forEach(function (item, idx) {
	        if (item.uid == id) {
	          index = idx;
	        }
	      });
	      this.basket.splice(index, 1);
	      xdLocalStorage.setItem('panier_erecolnat', JSON.stringify(this.basket));
	    }

	    /**
	     * Checks whether the given item is selected
	     * @param id String id of the item to check
	     * @returns {boolean} true=selected, false=not selected
	     */
	  }, {
	    key: 'isInBasketSelection',
	    value: function isInBasketSelection(id) {
	      return !(this.basketSelection[id] == undefined);
	    }

	    /**
	     * Returns a deep copy of the basket.
	     */
	  }, {
	    key: 'getBasket',
	    value: function getBasket() {
	      return JSON.parse(JSON.stringify(this.basket));
	    }

	    /**
	     * Returns the list of items selected in the basket
	     * @returns {Array} List of strings : ids of selected basket items
	     */
	  }, {
	    key: 'getBasketSelection',
	    value: function getBasketSelection() {
	      return _Object$keys(this.basketSelection);
	    }

	    /**
	     * Returns the data in the basket about the provided id
	     * @param id String id of the basket item
	     */
	  }, {
	    key: 'getBasketItem',
	    value: function getBasketItem(id) {
	      for (var i = 0; i < this.basket.length; ++i) {
	        if (this.basket[i].id == id) {
	          return JSON.parse(JSON.stringify(this.basket[i]));
	        }
	      }
	    }
	  }, {
	    key: 'addBasketUpdateListener',
	    value: function addBasketUpdateListener(callback) {
	      this.on(_eventsBasketEvents2['default'].BASKET_UPDATE, callback);
	    }
	  }, {
	    key: 'removeBasketUpdateListener',
	    value: function removeBasketUpdateListener(callback) {
	      this.removeListener(_eventsBasketEvents2['default'].BASKET_UPDATE, callback);
	    }
	  }]);

	  return BasketStore;
	})(_events.EventEmitter);

	exports['default'] = BasketStore;
	module.exports = exports['default'];

/***/ },
/* 456 */
/***/ function(module, exports) {

	/**
	 * Events for the ReColNat Basket
	 *
	 * Created by dmitri on 22/06/16.
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});
	exports['default'] = {
	  BASKET_UPDATE: 'manager_basketUpdate'
	};
	module.exports = exports['default'];

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _Object$keys = __webpack_require__(285)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _events = __webpack_require__(306);

	var _nodeUuid = __webpack_require__(201);

	var _nodeUuid2 = _interopRequireDefault(_nodeUuid);

	var _lodash = __webpack_require__(290);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _storesEventsSocketEvents = __webpack_require__(458);

	var _storesEventsSocketEvents2 = _interopRequireDefault(_storesEventsSocketEvents);

	var _constantsSocketConstantsJs = __webpack_require__(241);

	var _constantsSocketConstantsJs2 = _interopRequireDefault(_constantsSocketConstantsJs);

	var _constantsServerConstantsJs = __webpack_require__(239);

	var _constantsServerConstantsJs2 = _interopRequireDefault(_constantsServerConstantsJs);

	var _dispatcherAppDispatcher = __webpack_require__(191);

	var _dispatcherAppDispatcher2 = _interopRequireDefault(_dispatcherAppDispatcher);

	var _confApplicationConfiguration = __webpack_require__(238);

	var _confApplicationConfiguration2 = _interopRequireDefault(_confApplicationConfiguration);

	var W3CWebSocket = __webpack_require__(459).w3cwebsocket;

	// Simulation de la communication avec le serveur & de l'état de sa BDD

	var Connector = (function (_EventEmitter) {
	  _inherits(Connector, _EventEmitter);

	  function Connector() {
	    var _this = this;

	    _classCallCheck(this, Connector);

	    _get(Object.getPrototypeOf(Connector.prototype), 'constructor', this).call(this);
	    this.setMaxListeners(1000);
	    // Maps each resource id to corresponding stored data
	    this.idToData = {};
	    // Counts number of messages and serves as message id for this session. Only message which have a custom answer (i.e. UPDATE) need to be id'd.
	    this.messageCounter = 0;
	    // Contains message ids (from messageCounter) for messages which have not been answered yet.
	    this.pendingMessages = {};

	    this.websocketServerMethod = "";
	    this.websocket = null;
	    this.ping = null;
	    this.user = null;

	    _dispatcherAppDispatcher2['default'].register(function (action) {
	      // Receive needs from other client-side components and dispatch messages to WebSocket
	      switch (action.actionType) {
	        case _constantsSocketConstantsJs2['default'].ActionTypes.OPEN:
	          _this.openWebsocket();
	          break;
	        case _constantsSocketConstantsJs2['default'].ActionTypes.CLOSE:
	          _this.closeWebsocket();
	          break;
	        case _constantsSocketConstantsJs2['default'].ActionTypes.REGISTER_CALLBACK:
	          _this.addResourceListener(action.id, action.callback);
	          break;
	        case _constantsSocketConstantsJs2['default'].ActionTypes.REMOVE_CALLBACK:
	          _this.removeResourceListener(action.id, action.callback);
	          break;
	        case _constantsSocketConstantsJs2['default'].ActionTypes.SEND:
	          _this.messageCounter++;
	          action.message.messageId = _this.messageCounter;
	          _this.pendingMessages[_this.messageCounter] = 'loading';
	          if (action.callback) {
	            _this.once(_this.messageCounter, action.callback);
	          }
	          window.setTimeout(_this.sendPayloadWhenReady.bind(_this, action.message), 10);
	          _this.emit(_storesEventsSocketEvents2['default'].STATUS_CHANGE);
	          break;
	        case _constantsSocketConstantsJs2['default'].ActionTypes.GET:
	          _this.messageCounter++;
	          _this.pendingMessages[_this.messageCounter] = 'loading';
	          action.message.messageId = _this.messageCounter;
	          action.message.action = _constantsServerConstantsJs2['default'].ActionTypes.Send.GET;
	          _this.once(_this.messageCounter, action.callback);
	          window.setTimeout(_this.sendPayloadWhenReady.bind(_this, action.message), 10);
	          _this.emit(_storesEventsSocketEvents2['default'].STATUS_CHANGE);
	          break;
	        default:
	          break;
	      }
	    });

	    this.openWebsocket();
	    this.openInterval = null;
	  }

	  _createClass(Connector, [{
	    key: 'openWebsocket',
	    value: function openWebsocket() {
	      var _this2 = this;

	      if (this.websocket == null) {
	        (function () {
	          window.clearInterval(_this2.openInterval);
	          var self = _this2;
	          var websocket = new W3CWebSocket(_confApplicationConfiguration2['default'].wss, _this2.websocketServerMethod, _confApplicationConfiguration2['default'].wss);

	          websocket.onerror = function (message) {
	            console.error('Connection failed with error: ' + JSON.stringify(message));
	          };

	          websocket.onopen = function (message) {
	            //console.log('Client connected ' + JSON.stringify(message));
	            self.messageCounter = 0;
	            self.pendingMessages = {};

	            self.ping = window.setInterval(self.sendPing.bind(self), 60000);
	            // If ids are present, re-subscribe to them as it means the socket was closed prematurely
	            var ids = _Object$keys(self.idToData);
	            for (var i = 0; i < ids.length; ++i) {
	              self.subscribe(ids[i]);
	            }
	            self.emit(_storesEventsSocketEvents2['default'].STATUS_CHANGE);
	          };

	          websocket.onclose = function (message) {
	            //console.log('Connection closed ' + JSON.stringify(message));
	            window.clearInterval(self.ping);
	            self.user = null;
	            self.idToData['user'] = null;
	            self.pendingMessages = {};
	            self.websocket = null;

	            self.emitResourceUpdate('user');
	            self.emit(_storesEventsSocketEvents2['default'].STATUS_CHANGE);
	            self.openInterval = window.setInterval(self.openWebsocket.bind(self), 1000);
	          };

	          websocket.onmessage = _this2.receiveServerMessage.bind(_this2);

	          _this2.websocket = websocket;
	        })();
	      }
	    }
	  }, {
	    key: 'get',
	    value: function get(id) {
	      if (this.idToData[id]) {
	        return JSON.parse(JSON.stringify(this.idToData[id]));
	      }
	      return null;
	    }
	  }, {
	    key: 'receiveServerMessage',
	    value: function receiveServerMessage(message) {
	      if (message.data === "PONG") {
	        //console.log('PING/PONG success');
	        return;
	      }
	      if (message.data === 500) {
	        console.error("Internal server error");
	        return;
	      }
	      console.log('got message ' + message.data);
	      var jsonMessage = JSON.parse(message.data);
	      if (jsonMessage.id) {
	        delete this.pendingMessages[jsonMessage.id];
	        this.emit(_storesEventsSocketEvents2['default'].STATUS_CHANGE);
	      }
	      if (jsonMessage.error) {
	        switch (jsonMessage.error) {
	          case 500:
	            console.error("Internal server error");
	            break;
	          default:
	            console.error("No error handler for code " + jsonMessage.error);
	        }
	        return;
	      }
	      if (jsonMessage.forbidden) {
	        this.idToData[jsonMessage.forbidden] = {
	          uid: jsonMessage.forbidden,
	          forbidden: true
	        };
	        this.emitResourceUpdate(jsonMessage.forbidden);
	        this.unsubscribe(jsonMessage.forbidden);
	        return;
	      }
	      switch (jsonMessage.action) {
	        case _constantsServerConstantsJs2['default'].ActionTypes.Receive.RESOURCE:
	          var resource = jsonMessage.resource;
	          if (resource.type === "User" && this.user === null) {
	            console.log('User data received');
	            this.idToData['user'] = resource;
	            this.user = resource;
	            this.emitResourceUpdate('user');
	          }
	          this.idToData[resource.uid] = resource;
	          this.emitResourceUpdate(resource.uid);
	          break;
	        case _constantsServerConstantsJs2['default'].ActionTypes.Receive.DONE:
	          console.log("Got OK from server");
	          this.emit(jsonMessage.id, jsonMessage);
	          break;
	        case _constantsServerConstantsJs2['default'].ActionTypes.Receive.DENIED:
	          //console.log("Got DENIED from server " + message.data);
	          jsonMessage.clientProcessError = true;
	          this.emit(jsonMessage.id, jsonMessage);
	          break;
	        default:
	          console.error("No switch implemented for action " + jsonMessage.action);
	          break;
	      }
	    }
	  }, {
	    key: 'closeWebsocket',
	    value: function closeWebsocket() {
	      if (this.websocket) {
	        this.websocket.close(1000, "User logged out");
	        this.websocket = null;
	      }
	    }
	  }, {
	    key: 'subscribe',
	    value: function subscribe(id) {
	      //console.log('subscribing ' + id);
	      this.messageCounter++;
	      this.pendingMessages[this.messageCounter] = 'loading';
	      this.emit(_storesEventsSocketEvents2['default'].STATUS_CHANGE);
	      var message = {
	        action: _constantsServerConstantsJs2['default'].ActionTypes.Send.SUBSCRIBE,
	        messageId: this.messageCounter,
	        id: id
	      };

	      window.setTimeout(this.sendPayloadWhenReady.bind(this, message), 10);
	    }
	  }, {
	    key: 'unsubscribe',
	    value: function unsubscribe(id) {
	      var message = {
	        action: _constantsServerConstantsJs2['default'].ActionTypes.Send.UNSUBSCRIBE,
	        id: id
	      };

	      window.setTimeout(this.sendPayloadWhenReady.bind(this, message), 10);
	    }
	  }, {
	    key: 'sendPayloadWhenReady',
	    value: function sendPayloadWhenReady(json) {
	      if (this.websocket) {
	        if (this.websocket.readyState === this.websocket.CONNECTING) {
	          //console.log("waiting for connection");
	          window.setTimeout(this.sendPayloadWhenReady.bind(this, json), 1000, this, json);
	        } else {
	          this.websocket.send(JSON.stringify(json));
	        }
	      } else {
	        console.warn("Websocket not connected");
	      }
	    }
	  }, {
	    key: 'sendPing',
	    value: function sendPing() {
	      this.websocket.send('PING');
	    }
	  }, {
	    key: 'countPendingMessages',
	    value: function countPendingMessages() {
	      var ids = _Object$keys(this.pendingMessages);
	      return ids.length;
	    }
	  }, {
	    key: 'emitResourceUpdate',
	    value: function emitResourceUpdate(id) {
	      this.emit(_storesEventsSocketEvents2['default'].RESOURCE_UPDATED + '_' + id, this.idToData[id]);
	    }
	  }, {
	    key: 'addResourceListener',
	    value: function addResourceListener(id, callback) {
	      this.on(_storesEventsSocketEvents2['default'].RESOURCE_UPDATED + '_' + id, callback);
	      if (this.listenerCount(_storesEventsSocketEvents2['default'].RESOURCE_UPDATED + '_' + id) === 1) {
	        window.setTimeout(this.subscribe.bind(this, id), 10);
	      }

	      if (this.idToData[id]) {
	        window.setTimeout(this.emitResourceUpdate.bind(this, id), 10);
	      }
	    }
	  }, {
	    key: 'removeResourceListener',
	    value: function removeResourceListener(id, callback) {
	      this.removeListener(_storesEventsSocketEvents2['default'].RESOURCE_UPDATED + '_' + id, callback);
	      if (this.listenerCount(_storesEventsSocketEvents2['default'].RESOURCE_UPDATED + '_' + id) === 0) {
	        this.unsubscribe(id);
	      }
	    }
	  }, {
	    key: 'addStateChangeListener',
	    value: function addStateChangeListener(callback) {
	      this.on(_storesEventsSocketEvents2['default'].STATUS_CHANGE, callback);
	    }
	  }, {
	    key: 'removeStateChangeListener',
	    value: function removeStateChangeListener(callback) {
	      this.remove(_storesEventsSocketEvents2['default'].STATUS_CHANGE, callback);
	    }
	  }]);

	  return Connector;
	})(_events.EventEmitter);

	exports['default'] = Connector;
	module.exports = exports['default'];

/***/ },
/* 458 */
/***/ function(module, exports) {

	/**
	 * Events for the socket connector
	 *
	 * Created by dmitri on 20/04/16.
	 */
	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports["default"] = {
	  RESOURCE_UPDATED: "server_resourceUpdated",
	  STATUS_CHANGE: "server_statusChange"
	};
	module.exports = exports["default"];

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	var _global = (function() { return this; })();
	var NativeWebSocket = _global.WebSocket || _global.MozWebSocket;
	var websocket_version = __webpack_require__(460);


	/**
	 * Expose a W3C WebSocket class with just one or two arguments.
	 */
	function W3CWebSocket(uri, protocols) {
		var native_instance;

		if (protocols) {
			native_instance = new NativeWebSocket(uri, protocols);
		}
		else {
			native_instance = new NativeWebSocket(uri);
		}

		/**
		 * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket
		 * class). Since it is an Object it will be returned as it is when creating an
		 * instance of W3CWebSocket via 'new W3CWebSocket()'.
		 *
		 * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2
		 */
		return native_instance;
	}


	/**
	 * Module exports.
	 */
	module.exports = {
	    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,
	    'version'      : websocket_version
	};


/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../package.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).version;


/***/ },
/* 461 */,
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Indicates how many messages are expecting an answer from the WebSocket. Not displayed if no messages in queue.
	 *
	 * Created by dmitri on 28/10/16.
	 */
	'use strict';

	var _get = __webpack_require__(3)['default'];

	var _inherits = __webpack_require__(19)['default'];

	var _createClass = __webpack_require__(28)['default'];

	var _classCallCheck = __webpack_require__(31)['default'];

	var _interopRequireDefault = __webpack_require__(1)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var _react = __webpack_require__(32);

	var _react2 = _interopRequireDefault(_react);

	var WebSocketStatus = (function (_React$Component) {
	  _inherits(WebSocketStatus, _React$Component);

	  function WebSocketStatus(props) {
	    var _this = this;

	    _classCallCheck(this, WebSocketStatus);

	    _get(Object.getPrototypeOf(WebSocketStatus.prototype), 'constructor', this).call(this, props);

	    this.componentStyle = {
	      display: 'none',
	      position: 'fixed',
	      right: '400px',
	      top: '55px',
	      maxHeight: '60px',
	      maxWidth: '250px',
	      margin: 0,
	      padding: '5px 5px 5px 5px',
	      backgroundColor: 'rgba(255,255,255,0.4)',
	      zIndex: 5000
	    };

	    this._onWebSocketStatusChange = function () {
	      var updateStatusDisplay = function updateStatusDisplay() {
	        return _this.setComponentVisibility();
	      };
	      return updateStatusDisplay.apply(_this);
	    };

	    this.state = {
	      countPendingMessages: 0
	    };
	  }

	  _createClass(WebSocketStatus, [{
	    key: 'setComponentVisibility',
	    value: function setComponentVisibility() {
	      this.setState({ countPendingMessages: this.props.socket.countPendingMessages() });
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.props.socket.addStateChangeListener(this._onWebSocketStatusChange);
	      this.props.userstore.addLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: 'componentWillUpdate',
	    value: function componentWillUpdate(nextProps, nextState) {
	      if (nextState.countPendingMessages > 0) {
	        this.componentStyle.display = null;
	      } else {
	        this.componentStyle.display = 'none';
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.props.socket.removeStateChangeListener(this._onWebSocketStatusChange);
	      this.props.userstore.removeLanguageChangeListener(this.setState.bind(this, {}));
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2['default'].createElement(
	        'div',
	        { style: this.componentStyle, className: 'ui text segment' },
	        _react2['default'].createElement('div', { className: 'ui active small inline loader' }),
	        this.props.userstore.getText('syncWithServer'),
	        ' ',
	        this.state.countPendingMessages
	      );
	    }
	  }]);

	  return WebSocketStatus;
	})(_react2['default'].Component);

	exports['default'] = WebSocketStatus;
	module.exports = exports['default'];

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Created by dmitri on 25/04/16.
	 */
	'use strict';

	var _classCallCheck = __webpack_require__(31)['default'];

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	var InterStoreCommunicationsController = function InterStoreCommunicationsController(stores) {
	  _classCallCheck(this, InterStoreCommunicationsController);

	  this.stores = stores;
	};

	exports['default'] = InterStoreCommunicationsController;
	module.exports = exports['default'];

/***/ }
/******/ ]);